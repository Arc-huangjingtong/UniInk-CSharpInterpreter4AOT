<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ProjectModel</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = ProjectModelThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(ProjectModelThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies">
             <summary>
            	<para>
            		<para>Assemblies Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                               ,Lrrrrrrrrrrrr
                            `"?*_``````````TT
               77777777777777\_````````````77
               ss--------------------------ss
               ll''''''''''''''''''''''''''ll
               }}''((((((((((((((((((((((''}}
               YY__iiiiiiiiiiiiiiiiiiiiii__YY
               22__tttttttttttttttttttttt__22
              =k4GGGGGGGGGG4hP25555555555::EE
             |pr'          .+pAkGbbA4PEEE""aa
             RR``::::::::::``RR9;:_!aRwaa~~PP
             ##..''''''''''..''''jP'_##VV^^99
             00__          __00P~''^e0a====GG
             PMF~,,,,,,,,,,"TMB8MMMM0mppppppp
             `skM$$$$$$$$$$Wb}.              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assemblies}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assemblies))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Assemblies.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assemblies&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies.Load_Color">
            <summary>Loads the image for Themed Icon Assemblies theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies.Load_Gray">
            <summary>Loads the image for Themed Icon Assemblies theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies.Load_GrayDark">
            <summary>Loads the image for Themed Icon Assemblies theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assemblies.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Assemblies.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly">
             <summary>
            	<para>
            		<para>Assembly Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                         -\T{5555555555{T+_  
                       `J5;.`          `.~j}.
              `=cssL!. (E, ._,,,,,,,,,,_' -E{
             "uJ!^"=Juu66``______________``66
             l5"_'.______..................bb
             ;Vi=:_~zVVGG--``````````````--GG
              _?oEEuT_ nR=_.            `_^RZ
                       -wOc~,,,,,,,,,,,,"rHq_
                        `;5G888888888888OV\` 
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Assembly.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Id">
             <summary>
            	<para>
            		<para>Assembly Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                         -\T{5555555555{T+_  
                       `J5;.`          `.~j}.
              `=cssL!. (E, ._,,,,,,,,,,_' -E{
             "uJ!^"=Juu66``______________``66
             l5"_'.______..................bb
             ;Vi=:_~zVVGG--``````````````--GG
              _?oEEuT_ nR=_.            `_^RZ
                       -wOc~,,,,,,,,,,,,"rHq_
                        `;5G888888888888OV\` 
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Assembly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Assembly))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Assembly.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Assembly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Load_Color">
            <summary>Loads the image for Themed Icon Assembly theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Load_Gray">
            <summary>Loads the image for Themed Icon Assembly theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.Load_GrayDark">
            <summary>Loads the image for Themed Icon Assembly theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Assembly.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Assembly.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference">
             <summary>
            	<para>
            		<para>AssemblyReference Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                         -*T{5555555555{7+_  
                       `la;'`          `.=2{.
              `=ciic!. |P,`._""""""""""_-`-P{
             "ul!^";loo66``______________``66
             ta^_-'______..''''''''''''''..bb
             ;VJ=,:~iVVAA--``````````````--AA
             111111111111111111         `_^RZ
             oo              oo"""""""""^?HH_
             aa  'rIIIIIIII  aa888888888OV\` 
             kk``````!yyyyy``kk              
             XX````_7XX11XX``XX              
             ww``_tHH5~``HH``ww              
             AA..DDK=....K=..AA              
             RR''''''''''''''RR              
             DDDDDDDDDDDDDDDDDD              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+AssemblyReference}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.AssemblyReference))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.AssemblyReference.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.AssemblyReference&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Id">
             <summary>
            	<para>
            		<para>AssemblyReference Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                         -*T{5555555555{7+_  
                       `la;'`          `.=2{.
              `=ciic!. |P,`._""""""""""_-`-P{
             "ul!^";loo66``______________``66
             ta^_-'______..''''''''''''''..bb
             ;VJ=,:~iVVAA--``````````````--AA
             111111111111111111         `_^RZ
             oo              oo"""""""""^?HH_
             aa  'rIIIIIIII  aa888888888OV\` 
             kk``````!yyyyy``kk              
             XX````_7XX11XX``XX              
             ww``_tHH5~``HH``ww              
             AA..DDK=....K=..AA              
             RR''''''''''''''RR              
             DDDDDDDDDDDDDDDDDD              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+AssemblyReference}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.AssemblyReference))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.AssemblyReference.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.AssemblyReference&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Load_Color">
            <summary>Loads the image for Themed Icon AssemblyReference theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Load_Gray">
            <summary>Loads the image for Themed Icon AssemblyReference theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.Load_GrayDark">
            <summary>Loads the image for Themed Icon AssemblyReference theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.AssemblyReference.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AssemblyReference.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject">
             <summary>
            	<para>
            		<para>CppProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}{CxI3uo25SS
                 kkrr?Lc)|TT7zJlt}{CxI3uo25kk
                 ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 44444444````````````````"^bb
                 bb____bb''''44444444''''"^GG
             HHHHHH____HHHH--bb____bb----"^RR
             mm::::::::::HHHHHH____HHHHHH"^DD
             RR,,,,,,,,,,mm::::::::::::mm"^DD
             DDDDDD""""DDRR,,,,,,,,,,,,RR"^88
                 88^^^^88DDDDDD""""DDDDDD%%%%
                 %%%%%%%%    88^^^^88        
                             %%%%%%%%        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CppProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CppProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.CppProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CppProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.Id">
             <summary>
            	<para>
            		<para>CppProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}{CxI3uo25SS
                 kkrr?Lc)|TT7zJlt}{CxI3uo25kk
                 ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 44444444````````````````"^bb
                 bb____bb''''44444444''''"^GG
             HHHHHH____HHHH--bb____bb----"^RR
             mm::::::::::HHHHHH____HHHHHH"^DD
             RR,,,,,,,,,,mm::::::::::::mm"^DD
             DDDDDD""""DDRR,,,,,,,,,,,,RR"^88
                 88^^^^88DDDDDD""""DDDDDD%%%%
                 %%%%%%%%    88^^^^88        
                             %%%%%%%%        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CppProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CppProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.CppProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CppProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.Load_Color">
            <summary>Loads the image for Themed Icon CppProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.Load_Gray">
            <summary>Loads the image for Themed Icon CppProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon CppProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CppProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CppProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj">
             <summary>
            	<para>
            		<para>CsharpProj Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
              `!1R###############--------"^RR
             _Ek!_```dddd``dd``dddd______"^DD
             t6,`^e6666``````````66"""""""^DD
             KK..1KKKKKKK..KK..KKKK___:,""^88
             lS,';5SSSS''''''''''SS%%%%%%%%%%
             _It=_---oooo--oo--oooo          
              `;7xIIIIIIIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProj))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.CsharpProj.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Id">
             <summary>
            	<para>
            		<para>CsharpProj Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
              `!1R###############--------"^RR
             _Ek!_```dddd``dd``dddd______"^DD
             t6,`^e6666``````````66"""""""^DD
             KK..1KKKKKKK..KK..KKKK___:,""^88
             lS,';5SSSS''''''''''SS%%%%%%%%%%
             _It=_---oooo--oo--oooo          
              `;7xIIIIIIIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProj))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.CsharpProj.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Load_Color">
            <summary>Loads the image for Themed Icon CsharpProj theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Load_Gray">
            <summary>Loads the image for Themed Icon CsharpProj theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.Load_GrayDark">
            <summary>Loads the image for Themed Icon CsharpProj theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProj.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CsharpProj.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject">
             <summary>
            	<para>
            		<para>CsharpProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
              `!1R###############--------"^RR
             _Ek!_```dddd``dd``dddd______"^DD
             }4,`^54444``````````44"""""""^DD
             KK..1KKKKKKK..KK..KKKK___:,""^88
             lS,';5SSSS''''''''''SS%%%%%%%%%%
             _It=_---oooo--oo--oooo          
              `!71IIIIIIIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.CsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Id">
             <summary>
            	<para>
            		<para>CsharpProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
              `!1R###############--------"^RR
             _Ek!_```dddd``dd``dddd______"^DD
             }4,`^54444``````````44"""""""^DD
             KK..1KKKKKKK..KK..KKKK___:,""^88
             lS,';5SSSS''''''''''SS%%%%%%%%%%
             _It=_---oooo--oo--oooo          
              `!71IIIIIIIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+CsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.CsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.CsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.CsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Load_Color">
            <summary>Loads the image for Themed Icon CsharpProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Load_Gray">
            <summary>Loads the image for Themed Icon CsharpProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon CsharpProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CsharpProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject">
             <summary>
            	<para>
            		<para>DependentProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                           aaaaaaaaaaaaaaaaaa
                           VVr?c)T7iltF13oeVV
             DDDDDDDDDD    EEr?c)T7iltF13oeEE
             88......88DDDDXXr?c)T7iltF13oeXX
             NN______NN----ww            "^ww
             $$~~~~~~$$""""HH  ``````````"^HH
             QQ!!!!!!QQgggg##  ----------"^##
             gggggggggg    DD  ,,,,,,,,,,"^DD
                           88   ```.--__,"^88
                           %%%%%%%%%%%%%%%%%%
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DependentProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DependentProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.DependentProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DependentProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject.Id">
             <summary>
            	<para>
            		<para>DependentProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                           aaaaaaaaaaaaaaaaaa
                           VVr?c)T7iltF13oeVV
             DDDDDDDDDD    EEr?c)T7iltF13oeEE
             88......88DDDDXXr?c)T7iltF13oeXX
             NN______NN----ww            "^ww
             $$~~~~~~$$""""HH  ``````````"^HH
             QQ!!!!!!QQgggg##  ----------"^##
             gggggggggg    DD  ,,,,,,,,,,"^DD
                           88   ```.--__,"^88
                           %%%%%%%%%%%%%%%%%%
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DependentProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DependentProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.DependentProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DependentProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject.Load_Color">
            <summary>Loads the image for Themed Icon DependentProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject.Load_Gray">
            <summary>Loads the image for Themed Icon DependentProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon DependentProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DependentProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive">
             <summary>
            	<para>
            		<para>DependentProjectInactive Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
            
            
                             ##  ##  ##  ##
                               88  88  88  88
             8888888888      00  00  00  00
             00``````00888888``            MM
             MM''''''MM------WW            ``
             $$,,,,,,$$::::::``            $$
             QQ======QQggggggNN            --
             gggggggggg      ..            gg
                             gg''gg''gg''gg''
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:JynofesThemedIconsThemedIcons+DependentProjectInactive}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(JynofesThemedIconsThemedIcons.DependentProjectInactive))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = JynofesThemedIconsThemedIcons.DependentProjectInactive.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;JynofesThemedIconsThemedIcons.DependentProjectInactive&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive.Load_Color">
            <summary>Loads the image for Themed Icon DependentProjectInactive theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive.Load_DarkGray">
            <summary>Loads the image for Themed Icon DependentProjectInactive theme aspect DarkGray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive.Load_Gray">
            <summary>Loads the image for Themed Icon DependentProjectInactive theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DependentProjectInactive.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DependentProjectInactive.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory">
             <summary>
            	<para>
            		<para>Directory Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                               :+************
                             ,\;.          LL
               rrrrrrrrrrrrrr!'            rr
               TT``````````````````````````TT
               zz``````````````````````````zz
               ii--??????????????????????--ii
               11..7777777777777777777777..11
               II''iiiiiiiiiiiiiiiiiiiiii''II
               55''}}}}}}}}}}}}}}}}}}}}}}''55
               jj__5555555555555555555555__jj
               yy::EEEEEEEEEEEEEEEEEEEEEE::yy
               PP,,PPPPPPPPPPPPPPPPPPPPPP,,PP
               99~~~~~~~~~~~~~~~~~~~~~~~~~~99
               GGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Directory}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Directory))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Directory.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Directory&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Load_Color">
            <summary>Loads the image for Themed Icon Directory theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Load_Gray">
            <summary>Loads the image for Themed Icon Directory theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.Load_GrayDark">
            <summary>Loads the image for Themed Icon Directory theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Directory.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Directory.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore">
             <summary>
            	<para>
            		<para>DotNetCore Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIII1/`           
                 uu''''''''''''^73/`         
                 oo''''''''''''''~iu*`       
                 22''''        ''''~lo*`     
                 aS*7[aUUolc=` ------~l5+    
                =R8o;"-``-"=1Do;   ----yy    
              `o8r`          `!DV` ----VV    
             .G4{CCir|kHHE|-   -bD-----kk    
             S6u/^"!F6D$$$$$?```,$k----EE    
             #O"----_Om$$$$$W````$$----hh    
             G8a!:_=I8NQQQQQC```,Qb----XX    
             _QN8$$8X6%gg0V!```-Gg/----44    
              -DQ?-..........'/$%=-----ww    
                iggV+=:''_~/5Qg0Hbbbbbbbb    
                  _tb8Qggg8H]"               
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCore))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.DotNetCore.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.Id">
             <summary>
            	<para>
            		<para>DotNetCore Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIII1/`           
                 uu''''''''''''^73/`         
                 oo''''''''''''''~iu*`       
                 22''''        ''''~lo*`     
                 aS*7[aUUolc=` ------~l5+    
                =R8o;"-``-"=1Do;   ----yy    
              `o8r`          `!DV` ----VV    
             .G4{CCir|kHHE|-   -bD-----kk    
             S6u/^"!F6D$$$$$?```,$k----EE    
             #O"----_Om$$$$$W````$$----hh    
             G8a!:_=I8NQQQQQC```,Qb----XX    
             _QN8$$8X6%gg0V!```-Gg/----44    
              -DQ?-..........'/$%=-----ww    
                iggV+=:''_~/5Qg0Hbbbbbbbb    
                  _tb8Qggg8H]"               
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCore))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.DotNetCore.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.Load_Color">
            <summary>Loads the image for Themed Icon DotNetCore theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.Load_Gray">
            <summary>Loads the image for Themed Icon DotNetCore theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotNetCore theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCore.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotNetCore.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject">
             <summary>
            	<para>
            		<para>DotNetCoreProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 5555555555555555555555555555
                 yy+rr?Lc)|TT7iJlt}{C1I3uo2yy
                 VV+rr?Lc)|TT7iJlt}{C1I3uo2VV
                 EE+rr?Lc)|TT7iJlt}{C1I3uo2EE
                 X6~?JuXXolc=`           ""XX
                =D8o!"-``-";ID2!`        ""44
              `o8r`          `!DE-```````""bb
             .G4F[[JrTkHHP|_   -bD"......""GG
             S6u/^"!C6D$$$$$L```"$4------""##
             RO^----_O#$$$$$M````$$______""RR
             G8y!,_=I8NQQQQQ]```,QD,,,,,,""DD
             _QN8$$864Wgg0V!..._Gg!-___:,""88
              -DQL-..........'/$g0%%%%%%%%%%%
                iNgV+=,--:~\5Q$F`            
                  _tb8Qggg8Hx"               
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCoreProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCoreProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.DotNetCoreProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCoreProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.Id">
             <summary>
            	<para>
            		<para>DotNetCoreProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 5555555555555555555555555555
                 yy+rr?Lc)|TT7iJlt}{C1I3uo2yy
                 VV+rr?Lc)|TT7iJlt}{C1I3uo2VV
                 EE+rr?Lc)|TT7iJlt}{C1I3uo2EE
                 X6~?JuXXolc=`           ""XX
                =D8o!"-``-";ID2!`        ""44
              `o8r`          `!DE-```````""bb
             .G4F[[JrTkHHP|_   -bD"......""GG
             S6u/^"!C6D$$$$$L```"$4------""##
             RO^----_O#$$$$$M````$$______""RR
             G8y!,_=I8NQQQQQ]```,QD,,,,,,""DD
             _QN8$$864Wgg0V!..._Gg!-___:,""88
              -DQL-..........'/$g0%%%%%%%%%%%
                iNgV+=,--:~\5Q$F`            
                  _tb8Qggg8Hx"               
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+DotNetCoreProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.DotNetCoreProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.DotNetCoreProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.DotNetCoreProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.Load_Color">
            <summary>Loads the image for Themed Icon DotNetCoreProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.Load_Gray">
            <summary>Loads the image for Themed Icon DotNetCoreProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotNetCoreProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DotNetCoreProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotNetCoreProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject">
             <summary>
            	<para>
            		<para>CsharpCoreProject Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
             aaaaaaaaaaaaaaaaa[_`"lPqqVI^``
             PPr??TTJz|sFl1tfr`'V#L___'*#G_`
             66r??TTJz|sFl1tf_`Y#,,****^'#P``
             44r??TTJz|sFl1tf_`2q'=rrrr+`qV``
             GG               `_PP^':,'"aV"`
             HH  ``````````````-'=lEhhyt!'-
             qq  `````_+|ukkka{?+*mmmmmmmmmZ
             DD  ''',jRS!,'''_"!RRRT`;RT`;RT
             ##  __"9k~``-;TJ*~'ppp;`?p;`?ppp
             88  ::1G=``_VGGGGGGG+````````-G4
             BB  ""ah_--Lhhhhhhhhhh'-Ph'-PhhY
             MMMMMMAP=..,PPPPPPPP:........^P?
                   'e5,''_\|v?+^aa|'^a|'^aaa=
                    '1E7=,'''_"=EEL'+EL'+E!
                      _=rlnnn5lT3nnnnnnnnn"
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:NekaqavThemedIconsThemedIcons+CsharpCoreProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(NekaqavThemedIconsThemedIcons.CsharpCoreProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = NekaqavThemedIconsThemedIcons.CsharpCoreProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;NekaqavThemedIconsThemedIcons.CsharpCoreProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject.Load_Color">
            <summary>Loads the image for Themed Icon CsharpCoreProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject.Load_Gray">
            <summary>Loads the image for Themed Icon CsharpCoreProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon CsharpCoreProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.CsharpCoreProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CsharpCoreProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject">
             <summary>
            	<para>
            		<para>FsharpCoreProject Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
             aaaaaaaaaaaaaaaaa[_`"lPqqVI^``
             PPr??TTJz|sFl1tfr`'V#L___'*#G_`
             66r??TTJz|sFl1tf_`Y#,,****^'#P``
             44r??TTJz|sFl1tf_`2q'=rrrr+`qV``
             GG               `_PP^':,'"aV"`
             HH  ``````````````-'=lEhhyt!'-
             qq  ````RRRRRRRRRRRRRRRRRRRRRR5
             DD  ''''qq`````````qqqT`;qT`;q?
             ##  ____bb```+)))))bbb;`?b;`?bbb
             88  ::::GG```{GGGGGG+````````-G4
             BB  """"99--------9999'-a9'-a99I
             MMMMMMMMPP...1PPPPPP_........^P?
                     aa'''Fa'  aaas'^as'^aaa=
                     SS'''iS'   ^SL'+SL'+S!
                     uuuuuuu'   +uuuuuuuuu"
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:NekaqavThemedIconsThemedIcons+FsharpCoreProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(NekaqavThemedIconsThemedIcons.FsharpCoreProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = NekaqavThemedIconsThemedIcons.FsharpCoreProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;NekaqavThemedIconsThemedIcons.FsharpCoreProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject.Load_Color">
            <summary>Loads the image for Themed Icon FsharpCoreProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject.Load_Gray">
            <summary>Loads the image for Themed Icon FsharpCoreProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon FsharpCoreProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpCoreProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FsharpCoreProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject">
             <summary>
            	<para>
            		<para>VbasicCoreProject Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
             aaaaaaaaaaaaaaaaa[_`"lPqqVI^``
             PPr??TTJz|sFl1tfr`'V#L___'*#G_`
             66r??TTJz|sFl1tf_`Y#,,****^'#P``
             44r??TTJz|sFl1tf_`2q'=rrrr+`qV``
             GG               `_PP^':,'"aV"`
             HH  ``````````````-'=lEhhyt!'-
             qq  ``QQQQQQQ;.#QQQQQQQQN8Rqi:
             DD  ''4$;--+$Vr$P-~$----.__;Z%V`
             ##  __=Wq'''mW#W='KW'''Rq7_''YW*
             88  :::jBT''TBBP'*BB'''qB8?'=8B:
             BB  """=#m_'_80=_d00''''''_*jmR'
             MMMMMMMMB8{__oh_s888___b#wy^_^8G
                      kD^_;!~RH##___G#Rh;_^#V
                      ~RS___5R+RR_______^?wK_
                       5XXXXXa XXXXXXXXGPs^`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:NekaqavThemedIconsThemedIcons+VbasicCoreProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(NekaqavThemedIconsThemedIcons.VbasicCoreProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = NekaqavThemedIconsThemedIcons.VbasicCoreProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;NekaqavThemedIconsThemedIcons.VbasicCoreProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject.Load_Color">
            <summary>Loads the image for Themed Icon VbasicCoreProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject.Load_Gray">
            <summary>Loads the image for Themed Icon VbasicCoreProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon VbasicCoreProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicCoreProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon VbasicCoreProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder">
             <summary>
            	<para>
            		<para>Folder Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                               :+************
                             ,\;.          LL
               rrrrrrrrrrrrrr!'            rr
               TT``````````````````````````TT
               zz``````````````````````````zz
               ii--??????????????????????--ii
               11..7777777777777777777777..11
               II''iiiiiiiiiiiiiiiiiiiiii''II
               55''}}}}}}}}}}}}}}}}}}}}}}''55
               jj__5555555555555555555555__jj
               yy::EEEEEEEEEEEEEEEEEEEEEE::yy
               PP,,PPPPPPPPPPPPPPPPPPPPPP,,PP
               99~~~~~~~~~~~~~~~~~~~~~~~~~~99
               GGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Folder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Folder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Folder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Folder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.Load_Color">
            <summary>Loads the image for Themed Icon Folder theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.Load_Gray">
            <summary>Loads the image for Themed Icon Folder theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.Load_GrayDark">
            <summary>Loads the image for Themed Icon Folder theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Folder.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Folder.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp">
             <summary>
            	<para>
            		<para>Fsharp Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 33333333333333I/`           
                 uu------------~iu/`         
                 oo--------------~Jo*`       
                 55----        ----~l2+`     
                 aa----        ------~ta+    
                 SS----            ----SS    
                 kk----            ----kk    
                 kk----            ----kk    
             GGGGGGGGGGGGGGGGGGGG  ----PP    
             bb       bbb  bb  bbbb----UU    
             XX``XXXXXX``````````XX----66    
             kk`````;kkkk``kk``kkkk----99    
             yy..yyyyyy..........yy----ww    
             oo--oobboooo--oo--oooobbbbbb    
             IIIIII    IIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Fsharp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Fsharp))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Fsharp.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Fsharp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.Id">
             <summary>
            	<para>
            		<para>Fsharp Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 33333333333333I/`           
                 uu------------~iu/`         
                 oo--------------~Jo*`       
                 55----        ----~l2+`     
                 aa----        ------~ta+    
                 SS----            ----SS    
                 kk----            ----kk    
                 kk----            ----kk    
             GGGGGGGGGGGGGGGGGGGG  ----PP    
             bb       bbb  bb  bbbb----UU    
             XX``XXXXXX``````````XX----66    
             kk`````;kkkk``kk``kkkk----99    
             yy..yyyyyy..........yy----ww    
             oo--oobboooo--oo--oooobbbbbb    
             IIIIII    IIIIIIIIII            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Fsharp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Fsharp))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Fsharp.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Fsharp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.Load_Color">
            <summary>Loads the image for Themed Icon Fsharp theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.Load_Gray">
            <summary>Loads the image for Themed Icon Fsharp theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.Load_GrayDark">
            <summary>Loads the image for Themed Icon Fsharp theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Fsharp.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Fsharp.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject">
             <summary>
            	<para>
            		<para>FsharpProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}{CxI3uo25SS
                 kkrr?Lc)|TT7zJlt}{CxI3uo25kk
                 ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
             AAAAAAAAAAAAAAAAAAAA--------"^RR
             bb```````bbb``bb``bbbb______"^DD
             66``666666``````````66"""""""^DD
             EE.....!EEEE..EE..EEEE___:,""^88
             SS..SSSSSS..........SS%%%%%%%%%%
             jj--jj  jjjj--jj--jjjj          
             333333    3333333333            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+FsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.FsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.FsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.FsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.Id">
             <summary>
            	<para>
            		<para>FsharpProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}{CxI3uo25SS
                 kkrr?Lc)|TT7zJlt}{CxI3uo25kk
                 ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
             AAAAAAAAAAAAAAAAAAAA--------"^RR
             bb```````bbb``bb``bbbb______"^DD
             66``666666``````````66"""""""^DD
             EE.....!EEEE..EE..EEEE___:,""^88
             SS..SSSSSS..........SS%%%%%%%%%%
             jj--jj  jjjj--jj--jjjj          
             333333    3333333333            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+FsharpProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.FsharpProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.FsharpProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.FsharpProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.Load_Color">
            <summary>Loads the image for Themed Icon FsharpProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.Load_Gray">
            <summary>Loads the image for Themed Icon FsharpProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon FsharpProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FsharpProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FsharpProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal">
             <summary>
            	<para>
            		<para>LayerSolutionPersonal Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                        ./i1VV1i*-           
                      .19{=,--,=l95-         
                     _6k,........_ab"        
                     tb=..........,bj        
                     1b~----------:bV        
                     "bo,--------_1b=        
                      _kUz="__,=TZX"         
                   _rtoX9bbdbbdbbw6o}c,      
                 `I4J*!==_      -==!/76o.    
                 JG(!!!!!!~`   ^!!!!!!rGo    
                 RR++++++++\-./++++++++RR    
                 DDLLLLLLLLLLLLLLLLLLLLDD    
                 88TTTTTTTTTTTTTTTTTTTT88    
                 MMllllllllllllllllllllMM    
                 $$11111111111111111111$$    
                 QQQQQQQQQQQQQQQQQQQQQQQQ    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionPersonal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionPersonal))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.LayerSolutionPersonal.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionPersonal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Id">
             <summary>
            	<para>
            		<para>LayerSolutionPersonal Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal"></see> identifier class.</para>
            		<para>
            			<code>
                        ./i1VV1i*-           
                      .19{=,--,=l95-         
                     _6k,........_ab"        
                     tb=..........,bj        
                     1b~----------:bV        
                     "bo,--------_1b=        
                      _kUz="__,=TZX"         
                   _rtoX9bbdbbdbbw6o}c,      
                 `I4J*!==_      -==!/76o.    
                 JG(!!!!!!~`   ^!!!!!!rGo    
                 RR++++++++\-./++++++++RR    
                 DDLLLLLLLLLLLLLLLLLLLLDD    
                 88TTTTTTTTTTTTTTTTTTTT88    
                 MMllllllllllllllllllllMM    
                 $$11111111111111111111$$    
                 QQQQQQQQQQQQQQQQQQQQQQQQ    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionPersonal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionPersonal))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.LayerSolutionPersonal.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionPersonal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Load_Color">
            <summary>Loads the image for Themed Icon LayerSolutionPersonal theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Load_Gray">
            <summary>Loads the image for Themed Icon LayerSolutionPersonal theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.Load_GrayDark">
            <summary>Loads the image for Themed Icon LayerSolutionPersonal theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionPersonal.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon LayerSolutionPersonal.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared">
             <summary>
            	<para>
            		<para>LayerSolutionShared Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                .*1VV3r-          .*1VV3r-   
               =bo;__=]b/        =bo;__=]b/  
               5b,''''-b6_cxVV1|"ab,''''-b6  
               /b]=__~Jdh9r:--_*6Xb]=__~Jbc  
              ;[kbdbbbbwb~......,bbbdbbbbEI/ 
             JdF*_    _kb~------:bX_    _\Jdo
             RR+++!.`!+)6U+,--_/E9T+!.`!+++RR
             88TTTTTTTt2PbbbbbdbbK5FTTTTTTT88
             00CCCCCCSb3r"`     "+CbkCCCCCC00
             QQQQQQQQR#+//!-  -!///##QQQQQQQQ
                     DDLLLLL!;LLLLLDD        
                     %%777777777777%%        
                     $$]]]]]]]]]]]]$$        
                     QQQQQQQQQQQQQQQQ        
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionShared}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionShared))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.LayerSolutionShared.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionShared&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Id">
             <summary>
            	<para>
            		<para>LayerSolutionShared Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                .*1VV3r-          .*1VV3r-   
               =bo;__=]b/        =bo;__=]b/  
               5b,''''-b6_cxVV1|"ab,''''-b6  
               /b]=__~Jdh9r:--_*6Xb]=__~Jbc  
              ;[kbdbbbbwb~......,bbbdbbbbEI/ 
             JdF*_    _kb~------:bX_    _\Jdo
             RR+++!.`!+)6U+,--_/E9T+!.`!+++RR
             88TTTTTTTt2PbbbbbdbbK5FTTTTTTT88
             00CCCCCCSb3r"`     "+CbkCCCCCC00
             QQQQQQQQR#+//!-  -!///##QQQQQQQQ
                     DDLLLLL!;LLLLLDD        
                     %%777777777777%%        
                     $$]]]]]]]]]]]]$$        
                     QQQQQQQQQQQQQQQQ        
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+LayerSolutionShared}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.LayerSolutionShared))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.LayerSolutionShared.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.LayerSolutionShared&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Load_Color">
            <summary>Loads the image for Themed Icon LayerSolutionShared theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Load_Gray">
            <summary>Loads the image for Themed Icon LayerSolutionShared theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.Load_GrayDark">
            <summary>Loads the image for Themed Icon LayerSolutionShared theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.LayerSolutionShared.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon LayerSolutionShared.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile">
             <summary>
            	<para>
            		<para>MissingFile Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                         .?llllT'            
                        ^1c`  `*1=           
                      `?C^      ,1(-         
                     'iF'        .zC_        
                    _I|-   B@@g   `TY~       
                   ~5T-````8@@g`````L5;      
                  _nT``````P@@#``````Ln^     
                 _ul-``````v@@a```````)e~    
                -jY'```````_;;_```````-lE_   
                1S:--------\22\--------_j5`  
               LP!---------A@@A---------^P)  
               TP!........._,,_.........!Pv  
                TVL;;~~"__''''''__"~~;;LVl   
                 =!*rrFFYjS9999aj5FF?r*!;    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFile))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.MissingFile.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Load_Color">
            <summary>Loads the image for Themed Icon MissingFile theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Load_Gray">
            <summary>Loads the image for Themed Icon MissingFile theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.Load_GrayDark">
            <summary>Loads the image for Themed Icon MissingFile theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFile.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MissingFile.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder">
             <summary>
            	<para>
            		<para>MissingFolder Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                         .?llllT'            
                        ^1c`  `*1=           
                      `?C^      ,1(-         
                     'iF'        .zC_        
                    _I|-   B@@g   `TY~       
                   ~5T-````8@@g`````L5;      
                  _nT``````P@@#``````Ln^     
                 _ul-``````v@@a```````)e~    
                -jY'```````_;;_```````-lE_   
                1S:--------\22\--------_j5`  
               LP!---------A@@A---------^P)  
               TP!........._,,_.........!Pv  
                TVL;;~~"__''''''__"~~;;LVl   
                 =!*rrFFYjS9999aj5FF?r*!;    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+MissingFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.MissingFolder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.MissingFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.MissingFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.Load_Color">
            <summary>Loads the image for Themed Icon MissingFolder theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.Load_Gray">
            <summary>Loads the image for Themed Icon MissingFolder theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.Load_GrayDark">
            <summary>Loads the image for Themed Icon MissingFolder theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.MissingFolder.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MissingFolder.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet">
             <summary>
            	<para>
            		<para>NuGet Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
              .+oZZeL-                       
             =#Z)/!cVR+                      
             ED/~~~~=D#                      
             +DV?!;roD2;t26RDDDDDDR62t+.     
              :JbDDXXDDZl?\!======;\?7EDa-   
                   'dGc~-``'^;;;;;;;;;;rHR"  
                   o87!`     !!!!!!!!!!!c8k  
                   D8//~.  `"////////////88  
                   88*********;_````_=***88  
                   %%++++++++"        _++%%  
                   WWrrrrrrrr`         rrWW  
                   5M}???????,        _?7Mb  
                   "%D7ccccccc!-`   -=cTOM;  
                    -bM6Ii))))))))))ixX8R"   
                      :s6R$$$$$$$$$$Dw}"     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+NuGet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.NuGet))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.NuGet.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.NuGet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.Id">
             <summary>
            	<para>
            		<para>NuGet Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet"></see> identifier class.</para>
            		<para>
            			<code>
              .+oZZeL-                       
             =#Z)/!cVR+                      
             ED/~~~~=D#                      
             +DV?!;roD2;t26RDDDDDDR62t+.     
              :JbDDXXDDZl?\!======;\?7EDa-   
                   'dGc~-``'^;;;;;;;;;;rHR"  
                   o87!`     !!!!!!!!!!!c8k  
                   D8//~.  `"////////////88  
                   88*********;_````_=***88  
                   %%++++++++"        _++%%  
                   WWrrrrrrrr`         rrWW  
                   5M}???????,        _?7Mb  
                   "%D7ccccccc!-`   -=cTOM;  
                    -bM6Ii))))))))))ixX8R"   
                      :s6R$$$$$$$$$$Dw}"     
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+NuGet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.NuGet))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.NuGet.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.NuGet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.Load_Color">
            <summary>Loads the image for Themed Icon NuGet theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.Load_Gray">
            <summary>Loads the image for Themed Icon NuGet theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.Load_GrayDark">
            <summary>Loads the image for Themed Icon NuGet theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.NuGet.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NuGet.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project">
             <summary>
            	<para>
            		<para>Project Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
               aaaaaaaaaaaaaaaaaaaaaaaaaaaa  
               SSrr?Lc)|TT7zJlt}{CxI3uo25SS  
               kkrr?Lc)|TT7zJlt}{CxI3uo25kk  
               ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ  
               66                      "^66  
               ww  ````````````````````"^ww  
               bb  ````````````````````"^bb  
               GG  ''''''''''''''''''''"^GG  
               RR  --------------------"^RR  
               DD  ____________________"^DD  
               DD  """""""""""""""""""""^DD  
               88    ``````..----___:,""^88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Project}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Project))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Project.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Project&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.Id">
             <summary>
            	<para>
            		<para>Project Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project"></see> identifier class.</para>
            		<para>
            			<code>
                                             
               aaaaaaaaaaaaaaaaaaaaaaaaaaaa  
               SSrr?Lc)|TT7zJlt}{CxI3uo25SS  
               kkrr?Lc)|TT7zJlt}{CxI3uo25kk  
               ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ  
               66                      "^66  
               ww  ````````````````````"^ww  
               bb  ````````````````````"^bb  
               GG  ''''''''''''''''''''"^GG  
               RR  --------------------"^RR  
               DD  ____________________"^DD  
               DD  """""""""""""""""""""^DD  
               88    ``````..----___:,""^88  
               %%%%%%%%%%%%%%%%%%%%%%%%%%%%  
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Project}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Project))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Project.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Project&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.Load_Color">
            <summary>Loads the image for Themed Icon Project theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.Load_Gray">
            <summary>Loads the image for Themed Icon Project theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.Load_GrayDark">
            <summary>Loads the image for Themed Icon Project theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Project.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Project.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress">
             <summary>
            	<para>
            		<para>ProjectInProgress Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
            
                 U6``hk--k4--44..GG.'wA''bp
                 ``6h--kk--44-.GG..ww''bb''
                 U6``hk--k4--44..GG.'wA''bp
                 ``                      --
                 kkL7tjj{zL,             kk
               `?kPFr\++\ria4T'          --
              ~4hr!!!  !!!!!LPw=         qq
             ^DUL****  ******\aD+        --
             V#Crrrrr  rrrrrrr|#q        BB
             G8{JJJJJ        JF8#        --
             \MXlFFFFFFFFFFFFFGMiQQ``QQ``QQ
              ?W#Z[[[[[[[[[[YR%i
               "XN8GPS22SP48NX=
                 'TkRMggMDkT'
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:LimebypThemedIconsThemedIcons+ProjectInProgress}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(LimebypThemedIconsThemedIcons.ProjectInProgress))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = LimebypThemedIconsThemedIcons.ProjectInProgress.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;LimebypThemedIconsThemedIcons.ProjectInProgress&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.Load_Color">
            <summary>Loads the image for Themed Icon ProjectInProgress theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.Load_Gray">
            <summary>Loads the image for Themed Icon ProjectInProgress theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProjectInProgress theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectInProgress.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProjectInProgress.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties">
             <summary>
            	<para>
            		<para>ProjectProperties Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 5555555555555555555555555555
                 yy+rr?Lc)|TT7iJlt}{C1I3uo2yy
                 VV+rr?Lc)|TT7iJlt}{C1I3uo2VV
               `=hUUUUUZ51TTT7iJlt}{C1I3uo2EE
              ~Sj;-ZZZZ-=jk=             ""XX
             ^KJ```KKKK```cK!            ""44
             [E_```EEEE```.Ey````````````""bb
             Tk,``````````-kI............""GG
             '5u_````````_FS~------------""##
              `cy7!....;TSl~_____________""RR
                `yy....yy~,,,,,,,,,,,,,,,""DD
                 aa''''aa`````..'---___:,""88
                 ee----ee%%%%%%%%%%%%%%%%%%%%
                 |2/__=2t                    
                 `!Foo1+`                    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectProperties}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectProperties))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectProperties.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectProperties&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.Id">
             <summary>
            	<para>
            		<para>ProjectProperties Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 5555555555555555555555555555
                 yy+rr?Lc)|TT7iJlt}{C1I3uo2yy
                 VV+rr?Lc)|TT7iJlt}{C1I3uo2VV
               `=hUUUUUZ51TTT7iJlt}{C1I3uo2EE
              ~Sj;-ZZZZ-=jk=             ""XX
             ^KJ```KKKK```cK!            ""44
             [E_```EEEE```.Ey````````````""bb
             Tk,``````````-kI............""GG
             '5u_````````_FS~------------""##
              `cy7!....;TSl~_____________""RR
                `yy....yy~,,,,,,,,,,,,,,,""DD
                 aa''''aa`````..'---___:,""88
                 ee----ee%%%%%%%%%%%%%%%%%%%%
                 |2/__=2t                    
                 `!Foo1+`                    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectProperties}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectProperties))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectProperties.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectProperties&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.Load_Color">
            <summary>Loads the image for Themed Icon ProjectProperties theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.Load_Gray">
            <summary>Loads the image for Themed Icon ProjectProperties theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProjectProperties theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectProperties.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProjectProperties.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile">
             <summary>
            	<para>
            		<para>ProjectPropertiesFile Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 uuuuuuuuuuuuuu3/`           
                 oo------------~Ju\`         
                 22--------------~lo+`       
               `=PUXXXXEJ!.````----~t5+`     
              ~V5!_UUUU-;5k!   ------=}a+    
             ^hl```hhhh```|h!      ----VV    
             1P_```PPPP```.PS      ----kk    
             7E"``````````_E1      ----EE    
             'ao:........_xV_      ----hh    
              `)V7/....!7V|'       ----XX    
                `SS''''SS`         ____66    
                 aa----aa______________ww    
                 aa----aa______________bb    
                 k5*__!5Sdddddddddddddddd    
                 `/]ooI+`                    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectPropertiesFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectPropertiesFile))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectPropertiesFile.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectPropertiesFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.Id">
             <summary>
            	<para>
            		<para>ProjectPropertiesFile Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 uuuuuuuuuuuuuu3/`           
                 oo------------~Ju\`         
                 22--------------~lo+`       
               `=PUXXXXEJ!.````----~t5+`     
              ~V5!_UUUU-;5k!   ------=}a+    
             ^hl```hhhh```|h!      ----VV    
             1P_```PPPP```.PS      ----kk    
             7E"``````````_E1      ----EE    
             'ao:........_xV_      ----hh    
              `)V7/....!7V|'       ----XX    
                `SS''''SS`         ____66    
                 aa----aa______________ww    
                 aa----aa______________bb    
                 k5*__!5Sdddddddddddddddd    
                 `/]ooI+`                    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectPropertiesFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectPropertiesFile))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectPropertiesFile.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectPropertiesFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.Load_Color">
            <summary>Loads the image for Themed Icon ProjectPropertiesFile theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.Load_Gray">
            <summary>Loads the image for Themed Icon ProjectPropertiesFile theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProjectPropertiesFile theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectPropertiesFile.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProjectPropertiesFile.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects">
             <summary>
            	<para>
            		<para>Projects Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                              `"r????????????
                            `~T/_``````````TT
               zzzzzzzzzzzzzzL:------------zz
               vv''''''''''''''''''''''''''vv
               CC''''''''''''''''''''''''''CC
               [[__||||||||||||||||||||||__[[
             aaaaaaaaaaaaaaaaaaaallllllll__55
             PP                PP[[[[[[[[::uu
             kk                kkZZZZZZZZ,,SS
             ww                wwSSSSSSSS~~aa
             XX  888888888888  XXPPPPPPPP^^VV
             RR``XXXXXXXXXXXX``RR99999999==kk
             ##``PPPPPPPPPPPP``##;;;;;;;;;;GG
             00````````````````00HHHHHHHHHHHH
             MMMMMMMMMMMMMMMMMMMM            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Projects}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Projects))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Projects.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Projects&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects.Load_Color">
            <summary>Loads the image for Themed Icon Projects theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects.Load_Gray">
            <summary>Loads the image for Themed Icon Projects theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects.Load_GrayDark">
            <summary>Loads the image for Themed Icon Projects theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Projects.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Projects.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget">
             <summary>
            	<para>
            		<para>ProjectTarget Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}{CxI3uo25SS
                 kkrr?Lc)|TT7zJlt}{CxI3uo25kk
                 ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ
                 66  VVVVVV              "^66
                 ww`;KK''KK/-````````````"^ww
                 b6ZJ!k--U!TEo/.`````````"^bb
                }wz_"rK--6L^_Lw2_''''''''"^GG
             HHHHE+L9HHHHHHb)+aHHHH------"^RR
             ##::::::##::##::::::##______"^DD
             DDDD4iFRDDDDDDDI7ZDDDD"""""""^DD
               `XDs^*IR^^Do+^cDH"--___:,""^88
                `%8bxrR~~8r{48%%%%%%%%%%%%%%%
                   ~CNN==NN3=`               
                     $$$$$$                  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTarget}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTarget))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectTarget.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTarget&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.Id">
             <summary>
            	<para>
            		<para>ProjectTarget Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}{CxI3uo25SS
                 kkrr?Lc)|TT7zJlt}{CxI3uo25kk
                 ZZrr?Lc)|TT7zJlt}{CxI3uo25ZZ
                 66  VVVVVV              "^66
                 ww`;KK''KK/-````````````"^ww
                 b6ZJ!k--U!TEo/.`````````"^bb
                }wz_"rK--6L^_Lw2_''''''''"^GG
             HHHHE+L9HHHHHHb)+aHHHH------"^RR
             ##::::::##::##::::::##______"^DD
             DDDD4iFRDDDDDDDI7ZDDDD"""""""^DD
               `XDs^*IR^^Do+^cDH"--___:,""^88
                `%8bxrR~~8r{48%%%%%%%%%%%%%%%
                   ~CNN==NN3=`               
                     $$$$$$                  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTarget}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTarget))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectTarget.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTarget&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.Load_Color">
            <summary>Loads the image for Themed Icon ProjectTarget theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.Load_Gray">
            <summary>Loads the image for Themed Icon ProjectTarget theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProjectTarget theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTarget.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProjectTarget.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile">
             <summary>
            	<para>
            		<para>ProjectTargetFile Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^su/`         
                 oo''''''''''''''~iu*`       
                 22----        ----~lj*`     
                 aa--SSSSSS    ------~t5+    
                 yy,+EE..EE!'      ----yy    
                 hXE7!V--Z!Tkn=    ----VV    
                }w7_,rE--6?"-?w3`  ----kk    
             ddddk*r4ddddddwc\5dddd----KK    
             OO______OO__OO______OO----hh    
             RRRR67{RRRRRRRR1TKRRRR----XX    
               `XD7"/1R""Du+"LDG^------44    
                `D8bC+R~~Dr}6DI:-------ww    
                 bbR8NN~~NN8Rdbbbbbbbbbbb    
                     $$$$$$                  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTargetFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTargetFile))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectTargetFile.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTargetFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.Id">
             <summary>
            	<para>
            		<para>ProjectTargetFile Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 IIIIIIIIIIIIIII/`           
                 uu''''''''''''^su/`         
                 oo''''''''''''''~iu*`       
                 22----        ----~lj*`     
                 aa--SSSSSS    ------~t5+    
                 yy,+EE..EE!'      ----yy    
                 hXE7!V--Z!Tkn=    ----VV    
                }w7_,rE--6?"-?w3`  ----kk    
             ddddk*r4ddddddwc\5dddd----KK    
             OO______OO__OO______OO----hh    
             RRRR67{RRRRRRRR1TKRRRR----XX    
               `XD7"/1R""Du+"LDG^------44    
                `D8bC+R~~Dr}6DI:-------ww    
                 bbR8NN~~NN8Rdbbbbbbbbbbb    
                     $$$$$$                  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ProjectTargetFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ProjectTargetFile))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ProjectTargetFile.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ProjectTargetFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.Load_Color">
            <summary>Loads the image for Themed Icon ProjectTargetFile theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.Load_Gray">
            <summary>Loads the image for Themed Icon ProjectTargetFile theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProjectTargetFile theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ProjectTargetFile.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProjectTargetFile.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule">
             <summary>
            	<para>
            		<para>SdkModule Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                       55555555555555        
                       aa          aa        
                       kk..kkkkkk..kk        
               444444444444444444444444444444
               AA``````````````````````````AA
               XX==========================XX
               RR;;;;;TII(;;;;;;;;TII(;;;;;RR
               ########``##########``########
               88*****####********####*****88
               88cccccYuu5ccccccccYuu5ccccc88
               BB??????????????????????????BB
               WW77777777777777777777777777WW
               $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SdkModule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SdkModule))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.SdkModule.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SdkModule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Load_Color">
            <summary>Loads the image for Themed Icon SdkModule theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Load_Gray">
            <summary>Loads the image for Themed Icon SdkModule theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.Load_GrayDark">
            <summary>Loads the image for Themed Icon SdkModule theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SdkModule.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SdkModule.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs">
             <summary>
            	<para>
            		<para>SDKs Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                               :+************
                             ,\;.          LL
               rrrrrrrrrrrrrr!'            rr
               TT``````````````````````````TT
               zz``````````````````````````zz
               ii--2222222222????????????--ii
               11..hh``````hh777777777777..11
             GGGGGGGGGGGGGGGGGGGGGGiiiiii''II
             pp``````````````````pp}}}}}}''55
             qq===?{{7====?{{7===qq555555__jj
             mmmmm#``#mmmm#``#mmmmmEEEEEE::yy
             88***####****####***88PPPPPP,,PP
             00rrr5jj5rrrr5jj5rrr00~~~~~~~~99
             MMTTTTTTTTTTTTTTTTTTMMGGGGGGGGGG
             %%%%%%%%%%%%%%%%%%%%%%          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SDKs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SDKs))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.SDKs.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SDKs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs.Load_Color">
            <summary>Loads the image for Themed Icon SDKs theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs.Load_Gray">
            <summary>Loads the image for Themed Icon SDKs theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs.Load_GrayDark">
            <summary>Loads the image for Themed Icon SDKs theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SDKs.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SDKs.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject">
             <summary>
            	<para>
            		<para>SharedProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                      `LGR7.  `LGR7.         
                    `LG67iwDtTG67iwDJ.       
                  `LGX|!!/*5RX|!!/*t98t.     
                `LGUL==;!TVUL==;!/--"rbM{'   
              `LGKr^~~=|yKr^~~=!. ``._"?GBx' 
             LGE*,"""LaE*,"""=` ```.--_,"L#$3
             }Du~_:~`lDu~_:~` ```.--_:,,_!UQ6
              -CDo^  `:1Do^  ``.--_:,_-~EQ6" 
                -I8{' `-=a8{' `-_:,-."VQ6"   
                  -o0x- `'_y0x- `'`_5Q6"     
                    -2$I--oQHX$I--oQ6"       
                      _yQQ6"  _yQQ6"         
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SharedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SharedProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.SharedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SharedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.Id">
             <summary>
            	<para>
            		<para>SharedProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                      `LGR7.  `LGR7.         
                    `LG67iwDtTG67iwDJ.       
                  `LGX|!!/*5RX|!!/*t98t.     
                `LGUL==;!TVUL==;!/--"rbM{'   
              `LGKr^~~=|yKr^~~=!. ``._"?GBx' 
             LGE*,"""LaE*,"""=` ```.--_,"L#$3
             }Du~_:~`lDu~_:~` ```.--_:,,_!UQ6
              -CDo^  `:1Do^  ``.--_:,_-~EQ6" 
                -I8{' `-=a8{' `-_:,-."VQ6"   
                  -o0x- `'_y0x- `'`_5Q6"     
                    -2$I--oQHX$I--oQ6"       
                      _yQQ6"  _yQQ6"         
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+SharedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.SharedProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.SharedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.SharedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.Load_Color">
            <summary>Loads the image for Themed Icon SharedProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.Load_Gray">
            <summary>Loads the image for Themed Icon SharedProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon SharedProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SharedProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SharedProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay">
             <summary>
            	<para>
            		<para>ShortcutOverlay Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                                             
                                             
             xxxxxxxxxxxxxxxxxx              
             uu              uu              
             aa  'r11111111  aa              
             kk``````!aaaaa``kk              
             XX````_7XX11XX``XX              
             ww``_tHH5~``HH``ww              
             GG..DDE=....E=..GG              
             RR''''''''''''''RR              
             DDDDDDDDDDDDDDDDDD              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ShortcutOverlay}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ShortcutOverlay))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ShortcutOverlay.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ShortcutOverlay&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.Id">
             <summary>
            	<para>
            		<para>ShortcutOverlay Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                                             
                                             
                                             
                                             
             xxxxxxxxxxxxxxxxxx              
             uu              uu              
             aa  'r11111111  aa              
             kk``````!aaaaa``kk              
             XX````_7XX11XX``XX              
             ww``_tHH5~``HH``ww              
             GG..DDE=....E=..GG              
             RR''''''''''''''RR              
             DDDDDDDDDDDDDDDDDD              
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+ShortcutOverlay}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.ShortcutOverlay))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.ShortcutOverlay.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.ShortcutOverlay&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.Load_Color">
            <summary>Loads the image for Themed Icon ShortcutOverlay theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.Load_Gray">
            <summary>Loads the image for Themed Icon ShortcutOverlay theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.Load_GrayDark">
            <summary>Loads the image for Themed Icon ShortcutOverlay theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.ShortcutOverlay.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ShortcutOverlay.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder">
             <summary>
            	<para>
            		<para>SolutionFolder Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
                               :+************
                             ,\;.          LL
               rrrrrrrrrrrrrr!'            rr
               TT``````````````````````````TT
               zz``````````````````````````zz
               ii--?????????labbaC???????--ii
               [aT~777777laHA|,,TVqVY7777..11
             =o#PYXD4E[aX#5;'.....,##iiii''II
             00,'''=zk0Vc_''''=''''00}}}}''55
             MM__{7"______"ra#8____MM5555__jj
             $$__6E!_____:+Y#gg____$$EEEE::yy
             QQ~"""=|kMVr"""";l""""QQPPPP,,PP
             s8gwS#gD5Ta$$a\~~~~~~=gg~~~~~~99
               qM$8bGGGGG#$gME++5mgQ0GGGGGGGG
                           `LRggmT.
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:TanenoqThemedIconsThemedIcons+SolutionFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(TanenoqThemedIconsThemedIcons.SolutionFolder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = TanenoqThemedIconsThemedIcons.SolutionFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;TanenoqThemedIconsThemedIcons.SolutionFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Load_Color">
            <summary>Loads the image for Themed Icon SolutionFolder theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Load_Gray">
            <summary>Loads the image for Themed Icon SolutionFolder theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.Load_GrayDark">
            <summary>Loads the image for Themed Icon SolutionFolder theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.SolutionFolder.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SolutionFolder.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework">
             <summary>
            	<para>
            		<para>TargetFramework Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
               [[[[[[[[[[[[[[[[[[[[[[[[[[[[
               CCQQQQQQ*;_`  )6+-.;6F  `:CC
               uu$$$$$$~:-   |e~` _eF   .uu
               22$$$$$$$$$k  `;cl{c!`  [$22
               jj$$$$$$$$A_            :Xjj
               SSBBBBBBBB2-:7b2"  :ndJ:-nSS
               kk%%%%%%%%%%%%%%1  )%%%%%%kk
               PPWWWWWW2..JWWWWWWWWWWWWWWPP
               XXK"~38w;  _X82;"K88888888XX
               99e-            .t8888888899
               bbDE   ;c1I(;`  CDDDDDDDDDbb
               dd:`  ce=..;eJ  `:~;DDDDDDdd
               GG.`  rx^` :xT   .::DDDDDDGG
               ############################
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ZumihupThemedIconsThemedIcons+TargetFramework}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ZumihupThemedIconsThemedIcons.TargetFramework))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ZumihupThemedIconsThemedIcons.TargetFramework.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ZumihupThemedIconsThemedIcons.TargetFramework&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework.Load_Color">
            <summary>Loads the image for Themed Icon TargetFramework theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework.Load_Gray">
            <summary>Loads the image for Themed Icon TargetFramework theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework.Load_GrayDark">
            <summary>Loads the image for Themed Icon TargetFramework theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.TargetFramework.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TargetFramework.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown">
             <summary>
            	<para>
            		<para>Unknown Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
               PPPPPPPPPPPPPPPPPPPPPPPPPPPP  
               XX                        XX  
               66       -+tooooC+_       66  
               ww      r666at{k666+      ww  
               bb``````ww6=````wwwU``````bb  
               HH`````````````~dddr``````HH  
               AA```````````.TAAH*```````AA  
               RR.........._ERRS,........RR  
               RR''''''''''IDDL-'''''''''RR  
               DD------------------------DD  
               DD----------8888----------DD  
               88----------MMMM----------88  
               88________________________88  
               MMMMMMMMMMMMMMMMMMMMMMMMMMMM  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Unknown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Unknown))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Unknown.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Unknown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Id">
             <summary>
            	<para>
            		<para>Unknown Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown"></see> identifier class.</para>
            		<para>
            			<code>
                                             
               PPPPPPPPPPPPPPPPPPPPPPPPPPPP  
               XX                        XX  
               66       -+tooooC+_       66  
               ww      r666at{k666+      ww  
               bb``````ww6=````wwwU``````bb  
               HH`````````````~dddr``````HH  
               AA```````````.TAAH*```````AA  
               RR.........._ERRS,........RR  
               RR''''''''''IDDL-'''''''''RR  
               DD------------------------DD  
               DD----------8888----------DD  
               88----------MMMM----------88  
               88________________________88  
               MMMMMMMMMMMMMMMMMMMMMMMMMMMM  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+Unknown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.Unknown))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.Unknown.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.Unknown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Load_Color">
            <summary>Loads the image for Themed Icon Unknown theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Load_Gray">
            <summary>Loads the image for Themed Icon Unknown theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.Load_GrayDark">
            <summary>Loads the image for Themed Icon Unknown theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Unknown.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Unknown.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject">
             <summary>
            	<para>
            		<para>UnloadedProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                 EE``PP`.hU..XX..66..99''ww  
                 ``EP``Zh..XX..XX..44..ww''  
                 EE``PP`.hU..XX..66..99''ww  
                 ``                      ``  
                 hh                      hh  
                 ``                      ``  
                 GG                      GG  
                 ``                      ``  
                 88                      88  
                 ``                      ``  
                 QQ``QQ``QQ``QQ``QQ``QQ``QQ  
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+UnloadedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.UnloadedProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.UnloadedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.UnloadedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.Id">
             <summary>
            	<para>
            		<para>UnloadedProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                 EE``PP`.hU..XX..66..99''ww  
                 ``EP``Zh..XX..XX..44..ww''  
                 EE``PP`.hU..XX..66..99''ww  
                 ``                      ``  
                 hh                      hh  
                 ``                      ``  
                 GG                      GG  
                 ``                      ``  
                 88                      88  
                 ``                      ``  
                 QQ``QQ``QQ``QQ``QQ``QQ``QQ  
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+UnloadedProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.UnloadedProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.UnloadedProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.UnloadedProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.Load_Color">
            <summary>Loads the image for Themed Icon UnloadedProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.Load_Gray">
            <summary>Loads the image for Themed Icon UnloadedProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon UnloadedProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.UnloadedProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UnloadedProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj">
             <summary>
            	<para>
            		<para>VbasicProj Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
             $$$$$$$$$$$$$$$$8GE|"-------"^RR
             PB..BBBB..BB...._,rDD=______"^DD
             :%!'u%%k'~%%''%%%k'{%T"""""""^DD
              5O__OR,_b88------:98)___:,""^88
              _RI-/r-lRRR--RRRA),RD%%%%%%%%%%
               uO;__^OOOO______~tO7          
               ^dddddddddddddddE7~           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProj))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.VbasicProj.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Id">
             <summary>
            	<para>
            		<para>VbasicProj Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
             $$$$$$$$$$$$$$$$8GE|"-------"^RR
             PB..BBBB..BB...._,rDD=______"^DD
             :%!'u%%k'~%%''%%%k'{%T"""""""^DD
              5O__OR,_b88------:98)___:,""^88
              _RI-/r-lRRR--RRRA),RD%%%%%%%%%%
               uO;__^OOOO______~tO7          
               ^dddddddddddddddE7~           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProj}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProj))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.VbasicProj.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProj&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Load_Color">
            <summary>Loads the image for Themed Icon VbasicProj theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Load_Gray">
            <summary>Loads the image for Themed Icon VbasicProj theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.Load_GrayDark">
            <summary>Loads the image for Themed Icon VbasicProj theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProj.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon VbasicProj.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject">
             <summary>
            	<para>
            		<para>VbasicProject Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
             $$$$$$$$$$$$$$$$8GE|"-------"^RR
             PB..BBBB..BB...._,rDD=______"^DD
             :%!'u%%k'~%%''%%%k'{%T"""""""^DD
              5O__OR,_b88------:98)___:,""^88
              _RI-/r-lRRR--RRRA),RD%%%%%%%%%%
               uO;__^OOOO______~tO7          
               ^dddddddddddddddE7~           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.VbasicProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Id">
             <summary>
            	<para>
            		<para>VbasicProject Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 aaaaaaaaaaaaaaaaaaaaaaaaaaaa
                 SSrr?Lc)|TT7zJlt}fCxInuo2aSS
                 kkrr?Lc)|TT7zJlt}fCxInuo2akk
                 ZZrr?Lc)|TT7zJlt}fCxInuo2aZZ
                 66                      "^66
                 ww  ````````````````````"^ww
                 bb  ````````````````````"^bb
                 GG  ''''''''''''''''''''"^GG
             $$$$$$$$$$$$$$$$8GE|"-------"^RR
             PB..BBBB..BB...._,rDD=______"^DD
             :%!'u%%k'~%%''%%%k'{%T"""""""^DD
              5O__OR,_b88------:98)___:,""^88
              _RI-/r-lRRR--RRRA),RD%%%%%%%%%%
               uO;__^OOOO______~tO7          
               ^dddddddddddddddE7~           
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:ProjectModelThemedIcons+VbasicProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(ProjectModelThemedIcons.VbasicProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = ProjectModelThemedIcons.VbasicProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;ProjectModelThemedIcons.VbasicProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Load_Color">
            <summary>Loads the image for Themed Icon VbasicProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Load_Gray">
            <summary>Loads the image for Themed Icon VbasicProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon VbasicProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.VbasicProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon VbasicProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate">
             <summary>
            	<para>
            		<para>Certificate Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          `LjjT.
                    -TSSl*aP'-aV*FSS|'
                    Tw=`~Tu'  -u|^-"w1
                  _=Ipi            Lpu=:
                -4kzL/~````'__'````,/LzPA'
                .G4+.----'"~~~~"'----.+4p_
                 -hDk_...''''''''...'9Dh-
                `kRz_''''.``````-''''_?XG'
                '8bzrL=___'-```'___^LLzh8_
                 `;TU8P____________Y8wT+.
                    tB7"*3P;,,^PY\~cBa
                    a0MMRa0#!;qMaqMMB4`
                   lR|::::+O%%R\::::cRu
                  z#{""""""Y##a""""""|#Y
                 _SR8Ay1?;!8qV8L;?FSG#DP"
                    `:+vP#BB*~BB89l*"`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HobisykThemedIconsThemedIcons+Certificate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HobisykThemedIconsThemedIcons.Certificate))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HobisykThemedIconsThemedIcons.Certificate.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HobisykThemedIconsThemedIcons.Certificate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate.Load_Color">
            <summary>Loads the image for Themed Icon Certificate theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate.Load_Gray">
            <summary>Loads the image for Themed Icon Certificate theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate.Load_GrayDark">
            <summary>Loads the image for Themed Icon Certificate theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Certificate.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Certificate.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest">
             <summary>
            	<para>
            		<para>Manifest Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
              'ThD$$NNNQQ
             ;MA?=____:QQ
             mM"_`____:QQgggggggggggggggggggg
             MM__`____:QQ:,,,""""~~~^^^^^^=gg
             MM__`____:QQ                ^=gg
             MM__`____:QQ                ^=gg
             MM__`____:QQ  4Aqm8BWNgg    ^=gg
             MM__`____:QQ                ^=gg
             MM__`____:QQ  4Aqm8BWNgg    ^=gg
             MM__`____:QQ                ^=gg
             MM__`____:QQ  4Aqm8B        ^=gg
             MM_______:QQ                ^=gg
             #M:_P$$NNNQQ                ^=gg
             +MP+,____::::,,,""""~~~^^^^^^=gg
              _5R%$$NNNQQgggggggggggggggggggg
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HobisykThemedIconsThemedIcons+Manifest}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HobisykThemedIconsThemedIcons.Manifest))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HobisykThemedIconsThemedIcons.Manifest.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HobisykThemedIconsThemedIcons.Manifest&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest.Load_Color">
            <summary>Loads the image for Themed Icon Manifest theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest.Load_Gray">
            <summary>Loads the image for Themed Icon Manifest theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest.Load_GrayDark">
            <summary>Loads the image for Themed Icon Manifest theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Manifest.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Manifest.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef">
             <summary>
            	<para>
            		<para>FrameworkRef Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                       -\|}oooooooooooo}T*:  
                     `vj!,.            .,!2F.
                     Tk_ .:"""""""""""":- -k[
              `;*?7c"EZ``::::::::::CCCC::``ZZ
             ,3z!"";T33``--CCCCCC--CCCC--``66
             so~:--::::..--CCCCCC--------..ww
             ;S};::^(SS--``CCCCCC``CCCC``--pp
              :L}IV3\pR::``````````CCCC``::RR
                     o#!,.              `,~#6
                     :b#T=^""""""""""""^=TdO"
                      `;oq88888888888888Aa/` 
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SikoboxThemedIconsThemedIcons+FrameworkRef}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SikoboxThemedIconsThemedIcons.FrameworkRef))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SikoboxThemedIconsThemedIcons.FrameworkRef.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SikoboxThemedIconsThemedIcons.FrameworkRef&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef.Load_Color">
            <summary>Loads the image for Themed Icon FrameworkRef theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef.Load_Gray">
            <summary>Loads the image for Themed Icon FrameworkRef theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef.Load_GrayDark">
            <summary>Loads the image for Themed Icon FrameworkRef theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRef.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FrameworkRef.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue">
             <summary>
            	<para>
            		<para>FrameworkRefIssue Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                       -\|}oooooooooooo}T*:  
                     `vj!,.            .,!2F.
                     Tk_ .:"""""""""""":- -k[
              `;*?7c"EZ``::::::::::CCCC::``ZZ
             ,3z!"";T33``--CCCCCC--CCCC--``66
             so~:--::::..--CCCCCC;xxxx;--..ww
             ;S};::^(SS--``CCCCC2I(-'rI;`--pp
              :L}IV3\pR::``````~27----c2~::RR
                     o#!,.    ~5v:-@@--)5*~#6
                     :b#T=^""rys:::@@:::Ty9O"
                      `;oq88Ok}::::::::::7k; 
                           ;Z[_::::@@::::,JZ;
                           *Xl____________lX*
                            *44444444444444* 
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SikoboxThemedIconsThemedIcons+FrameworkRefIssue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SikoboxThemedIconsThemedIcons.FrameworkRefIssue))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SikoboxThemedIconsThemedIcons.FrameworkRefIssue.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SikoboxThemedIconsThemedIcons.FrameworkRefIssue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue.Load_Color">
            <summary>Loads the image for Themed Icon FrameworkRefIssue theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue.Load_Gray">
            <summary>Loads the image for Themed Icon FrameworkRefIssue theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue.Load_GrayDark">
            <summary>Loads the image for Themed Icon FrameworkRefIssue theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefIssue.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FrameworkRefIssue.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock">
             <summary>
            	<para>
            		<para>FrameworkRefLock Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                       -+T}555555555555}7*:  
                     `Je=,.            .,!2F.
                     Tk"`':"""""""""""",-`-k1
              `;*L7c^Ph``,,,,,,,,,,IIII,,``hh
             _3}!^^;722..::IIIIII:;3jE6e}*-66
             ij;:--::::----IIIIII*[|:  :2DPbb
             ;VF;::~TVV--..IIIIIIs[  E6  DWqq
              :c}3V3\qR::````````s[  E6  DWRR
                     5#!,.     kkkkkkkkkkkkkk
                     :b#7\~""""XX":--:";=r|XX
                      `;5d88888ww":--@@;=r|ww
                               AA":--@@;=r|AA
                               DD":--:";=r|DD
                               88888888888888
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SikoboxThemedIconsThemedIcons+FrameworkRefLock}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SikoboxThemedIconsThemedIcons.FrameworkRefLock))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SikoboxThemedIconsThemedIcons.FrameworkRefLock.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SikoboxThemedIconsThemedIcons.FrameworkRefLock&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock.Load_Color">
            <summary>Loads the image for Themed Icon FrameworkRefLock theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock.Load_Gray">
            <summary>Loads the image for Themed Icon FrameworkRefLock theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock.Load_GrayDark">
            <summary>Loads the image for Themed Icon FrameworkRefLock theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkRefLock.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FrameworkRefLock.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder">
             <summary>
            	<para>
            		<para>FrameworkFolder Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                               :=////////////
                            `,*;'          **
               rrrrrrrrrrrrrr!-            rr
               cc``````````````````````````cc
               ||``````````````````````````||
               77..??????????????????????..77
               JJ..))))))))))))))))))))))..JJ
               }}--7}[CIIIIIIIIC[}7777777--}}
               tt::32!.        `~23llllll--tt
              "{s7JVV        }}  VVxxxxxx::33
             rC=-.-;*``}}}}``````hh333333::22
             T3;'`.^r``}}}}``````44eeeeee__SS
             `LeF7lqq........}}..qq^^^^^^^^EE
               XXXXdm=---------:=mOXXXXXXXXXX
                   `r9DDDDDDDDD#e)`          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:VijagoxThemedIconsThemedIcons+FrameworkFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(VijagoxThemedIconsThemedIcons.FrameworkFolder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = VijagoxThemedIconsThemedIcons.FrameworkFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;VijagoxThemedIconsThemedIcons.FrameworkFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder.Load_Color">
            <summary>Loads the image for Themed Icon FrameworkFolder theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder.Load_Gray">
            <summary>Loads the image for Themed Icon FrameworkFolder theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder.Load_GrayDark">
            <summary>Loads the image for Themed Icon FrameworkFolder theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.FrameworkFolder.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FrameworkFolder.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution">
             <summary>
            	<para>
            		<para>Solution Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
             2jeyaVkEPhX66wwbbpdAAmR#DDDD888W
             2jrrr?Lcc)|TT77JJsil{F[CI3u22o8W
             2jrrr?Lcc)|TT77JJsil{F[CI3u22o8W
             2jrrr?Lcc)|TT77JJsil{F[CI3u22o8W
             2j                          "^8W
             2j  ````````````````````````"^8W
             2j  ````````````````````````"^8W
             2j  ........................"^8W
             2j  -------~vwwFr~----------"^8W
             yX7wA[=:^T4m3*;)Cwme::::::::"^8W
             88J+rIOD8ZT;=l~~~~88::::::::"^8W
             WW!{a|=|+*FwWW!!!!WW"""""""""^8W
             $$+5dCr)rTk8$$++++$$:::::,_""^8W
             QQC)TeDQ$b{LFwLLLLQQAmR#DDDD888W
             "TAggp?'^5Q$9}7u68g8            
                       `=pggDu!'             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DotTraceCoreThemedIcons+Solution}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DotTraceCoreThemedIcons.Solution))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DotTraceCoreThemedIcons.Solution.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DotTraceCoreThemedIcons.Solution&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution.Load_Color">
            <summary>Loads the image for Themed Icon Solution theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution.Load_Gray">
            <summary>Loads the image for Themed Icon Solution theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution.Load_GrayDark">
            <summary>Loads the image for Themed Icon Solution theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.Solution.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Solution.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject">
             <summary>
            	<para>
            		<para>DatabaseProject Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 5555555555555555555555555555
                 yyrrrLcc)|TT7JJsz{F[1fuu25yy
                 kkrrrLcc)|TT7JJsz{F[1fuu25kk
                 EErrrLcc)|TT7JJsz{F[1fuu25EE
                 XX                      "^XX
                .ka+cs[CCuIsT+~:`````````"^44
              ^TFr;":--::::";r}wZ?-``````"^bb
             ={;``````...----:::cRV------"^dd
             z{^``````...----:::*R#------"^OO
             z{zJ!":.`...--:^!TEpR#::::::"^##
             z{^-^+v}CSkkPSj5sr~+R#"""""""^DD
             z{zJ!":.`...--:^!TEpR#::::,_"^88
             r{^-^+v}CSkkPSj5sr~+RD8888888888
             `;lJ!":.`...--:^!TEpJ.          
                :~=Tl2SkkPE2fT="             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:JaxekizThemedIconsThemedIcons+DatabaseProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(JaxekizThemedIconsThemedIcons.DatabaseProject))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = JaxekizThemedIconsThemedIcons.DatabaseProject.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;JaxekizThemedIconsThemedIcons.DatabaseProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.Id">
            <inheritdoc cref="T:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.Load_Color">
            <summary>Loads the image for Themed Icon DatabaseProject theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.Load_Gray">
            <summary>Loads the image for Themed Icon DatabaseProject theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.Load_GrayDark">
            <summary>Loads the image for Themed Icon DatabaseProject theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.Load_RiderDark">
            <summary>Loads the image for Themed Icon DatabaseProject theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.Load_RiderLight">
            <summary>Loads the image for Themed Icon DatabaseProject theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Resources.ProjectModelThemedIcons.DatabaseProject.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DatabaseProject.</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.BuildAction">
            <summary>
            Describes what happens with a project file during build
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildAction.ORIGINAL_XAML_RESOURCE">
            <summary>
            Xaml build action in `livexaml` framework
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildAction.SCRIPT">
            <summary>
            Build action for all content items in standalone ts/js `esproj` projects 
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildAction.RAZOR_COMPONENT">
            <summary>
            Build action for razor components in MAUI
            TODO: move it out after refactoring MsBuildProjectStructureFileOperationsForItems.ourPriorityBuildActions
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildAction.MAUI_XAML">
            <summary>
            Xaml build action in MAUI framework
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`1">
            <summary>
            Data providers to build data   by project files (*.csproj etc)
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataCache">
            <summary>
            Cache of date build for project files (*.cspro etc)
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProvider">
            <summary>
            Marker interface for IProjectFileDataProvider
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Caches.IProjectFileDataProvider.Version">
            <summary>
            Provider version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider.CanHandle(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Check if cache is applicable to certain file
            </summary>
            <param name="projectFileLocation">File location to check</param>
            <returns>Whether cache data should be built</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2">
            <summary>
            Per-file cached data provider. Used with <see cref="T:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1"/>
            </summary>
            <typeparam name="TRaw">Type of raw data loaded from file to build TData</typeparam>
            <typeparam name="TData">Cached data type</typeparam>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.Read(JetBrains.Util.VirtualFileSystemPath,System.IO.BinaryReader)">
            <summary>
            Read data from cache. 
            </summary>
            <param name="projectFileLocation">Path to source file</param>
            <param name="reader">BinaryReader</param>
            <returns>Data read from cahce</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.Write(JetBrains.Util.VirtualFileSystemPath,System.IO.BinaryWriter,`1)">
            <summary>
            Write data to cache
            </summary>
            <param name="projectFileLocation">Path to source file</param>
            <param name="writer">BinaryWriter</param>
            <param name="data">Data to store</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.BuildData(JetBrains.Util.VirtualFileSystemPath,`0)">
            <summary>
            Build data from loaded document
            </summary>
            <param name="projectFileLocation">Project file location for which data is being built</param>
            <param name="document">Loaded document</param>
            <returns>Built data</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProvider`2.OnDataChanged(JetBrains.Util.VirtualFileSystemPath,`1,`1)">
            <summary>
            Callback when data is changed
            </summary>
            <param name="projectFileLocation">Project file location which data is changed</param>
            <param name="oldData">Old data, may be null</param>
            <param name="newData">New data, null if file removed</param>
            <returns>Action to ExecuteAfterChange</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1">
            <summary>
            Cache of data built on certain files in project.
            </summary>
            <typeparam name="TRaw">Raw data type loaded from file</typeparam>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1.RegisterCache``1(JetBrains.Lifetimes.Lifetime,JetBrains.ProjectModel.Caches.IProjectFileDataProvider{`0,``0})">
            <summary>
            Provider registration. 
            </summary>
            <typeparam name="TData">Type of data returned by the provider</typeparam>
            <param name="cachelifetime">Provider lifetime</param>
            <param name="cache">Provider to register</param>
            <returns>Data loaded</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Caches.IProjectFileDataProviderCache`1.GetData``1(JetBrains.ProjectModel.Caches.IProjectFileDataProvider{`0,``0},JetBrains.Util.VirtualFileSystemPath,``0)">
            <summary>
            Get or create cached data
            </summary>
            <typeparam name="TData">Type of data returned</typeparam>
            <param name="cache">Data provider</param>
            <param name="projectFileLocation">Path to the file date should be obtained from</param>
            <param name="defaultValue">Default value returned if no file</param>
            <returns>Cached provider data</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectJsonDataProvider`1">
            <summary>
            Data provider to project.json file
            </summary>
            <typeparam name="TData">Data type</typeparam>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.IProjectJsonDataCache">
            <summary>
            Cache of date build for project.json
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.ILaunchSettingsJsonDataCache">
            <summary>
            Cache of data built for launchSettings.json
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Caches.ISolutionCaches">
            <summary>
            Determined location of R# cache directory
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Caches.SolutionCaches.SolutionCachesVersion">
            <summary>
            If you changed something in caches schema you MUST change this number.
            Increase this number to force rebuild all caches.
            How to change version:
            Increment number in prefix and write your branch version.
            E.g.
            27:192-winnie.solbuilderprototype
            28:192-branchfornavigation
            29:net193-threading
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Impl.ExternalChangeProcessor.myStatusBarIndicatorShouldBeVisible">
            <summary>
            Gets or sets whether the indicator should be visible. Shows or hides the indicator with a delay, to avoid flickering.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Impl.ExternalChangeProcessor.HasDeltasQueued">
            <summary>Shows if change processor has any data to process in delta queue.</summary>
            <remarks>Used for diagnostics, to wait for queue flush in tests.</remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ProjectFileModificationCookie">
            <summary>
            A modification cookie for a set of documents that are project-file-based.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Impl.ProjectFileModificationCookie.ProjectFiles">
            <summary>
            Gets the set of project files involved in this modification.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ProjectReferenceExtension.GetReferencedName(JetBrains.ProjectModel.IProjectToProjectReference)">
            <summary>
            Returns name of the name of a referenced project if is able to fetch. Null otherwise
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Impl.SolutionElement.MarshallerType">
            <summary>
            Solution element does not need to be persisted (TODO: persist top-level projects via marshaller?)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionSettingsStoragePath(JetBrains.Lifetimes.Lifetime,JetBrains.ProjectModel.SolutionFileLocationLive,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Gets the full path for the solution settings storage file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionOrProjectLegacySettingsFileSuffix(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Suffix for the solution settings file (the trailing extensions), scope-dependent, leading dot included.
            Usually, <c>".resharper.user"</c> and <c>".resharper"</c>
            </summary>
            <remarks>This is the legacy (pre-settings-storage) file.</remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionElement.GetSolutionOrProjectSettingsStorageFileSuffix(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Suffix for the solution/project settings storage file (the trailing extensions), scope-dependent, leading dot included.
            Usually, <c>".DotSettings.user"</c> and <c>".DotSettings"</c>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionExtentions.IsVirtualSolution(JetBrains.ProjectModel.ISolution)">
            <summary>
            Solution is virtual if SolutionFilePath is a directory
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.CreateSolution(JetBrains.ProjectModel.impl.SolutionLocation)">
            <summary>
            Creates new empty instance of solution.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.OpenExistingSolution(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Create instance of solution using specified solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.ImportProjectsFromExistingSolution(JetBrains.ProjectModel.Impl.SolutionElement,JetBrains.Util.VirtualFileSystemPath,System.Boolean)">
            <summary>
            Imports projects from <see cref="!:solutionFilePath"/> into existing solution and removes old projects if requested by <see cref="!:doRemoveOldProjects"/>
            </summary>
            <param name="solution">Open solution</param>
            <param name="solutionFilePath">Path to solution file to import from</param>
            <param name="doRemoveOldProjects">Whether to remove project that existed before</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.CreateSolutionWithCustomProcess(JetBrains.ProjectModel.impl.SolutionLocation,System.Action{JetBrains.ProjectModel.Impl.SolutionElement})">
            <summary>
            Create instance of solution using specified solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.SolutionManagerImpl.OpenExistingProject(JetBrains.ProjectModel.Impl.SolutionElement,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Create and new project from project file and add it to a solution.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Impl.SolutionStructure.AffectedSharedProjectItemPaths">
            <summary>
            All paths that correspond to added or removed shared items during transaction
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Impl.SolutionStructure.AllAffectedProjectItemPaths">
            <summary>
            All paths that correspond to added or removed items during transaction
            </summary>    
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ProjectToAssemblyReference.CreateFromLocation(JetBrains.ProjectModel.IProject,JetBrains.Util.VirtualFileSystemPath,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Creates project to assembly reference in specified <see cref="!:targetFramework"/>. If no TargetFrameworkId is passed the only TargetFrameworkId existing in project will be used. 
            Will fail if null is passed and there're multiple TargetFrameworkIds in the project.
            </summary>
            <param name="project">Project to add reference to</param>
            <param name="location">Referenced assemply location</param>
            <param name="targetFramework">TargetFrameworkId to create reference in or null to use single TargetFrameworkId from the <see cref="!:project"/></param>
            <returns>Created reference</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Impl.ProjectToAssemblyReference.CreateFromName(JetBrains.ProjectModel.IProject,JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Creates project to assembly reference in specified <see cref="!:targetFramework"/>. If no TargetFrameworkId is passed the only TargetFrameworkId existing in project will be used. 
            Will fail if null is passed and there're multiple TargetFrameworkIds in the project.
            </summary>
            <param name="project">Project to add reference to</param>
            <param name="assemblyName">Referenced assembly name</param>
            <param name="targetFramework">TargetFrameworkId to create reference in or null to use single TargetFrameworkId from the <see cref="!:project"/></param>
            <returns>Created reference</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.ProjectFileSynchronizer">
            <summary>
            Propagates changes made to the project tree into the project file
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Transaction.IProjectModelBatchChange">
            <summary>
            Represents atomic operation on project model
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectOutputChange">
            <summary>
            Represents a relation between project and its output assembly (if exists)
            thrown by PM entities, this change is needed for PSI components to create/remove necessary/unnecessary psi modules
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitorEx.VisitDeltasRecursively(JetBrains.ProjectModel.ProjectModelChange,System.Action{JetBrains.ProjectModel.ProjectModelChange})">
            <summary>
            Runs the change thru <see cref="T:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor"/>, and for each of its <see cref="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor.VisitDelta(JetBrains.ProjectModel.ProjectModelChange)"/>, calls the given functor.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitorEx.VisitItemDeltasRecursively(JetBrains.ProjectModel.ProjectModelChange,System.Action{JetBrains.ProjectModel.ProjectItemChange})">
            <summary>
            Runs the change thru <see cref="T:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor"/>, and for each of its <see cref="M:JetBrains.ProjectModel.RecursiveProjectModelChangeDeltaVisitor.VisitItemDelta(JetBrains.ProjectModel.ProjectItemChange)"/>, calls the given functor.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISolutionComponentContainerExtender">
            <summary>
            Extension interface to provide extra items into solution component container
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISolutionInstanceComponentContainerExtender">
            <summary>
            Extension interface to provide extra items into solution instance component container
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.SolutionInstanceComponentAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.ProjectModel.SolutionInstanceComponentAttribute.#ctor(JetBrains.Application.Parts.Lifecycle,JetBrains.Application.Parts.Creation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.ProjectModel.Configuration.SolutionSettingsComponent.GetSettingsDocument(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Looks for either the current or legacy solution settings.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Configuration.SolutionSettingsComponent.GetSettingsDocument_LegacyVersion(JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Looks for the solution settings from the previous version of R#.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.DataContext.ProjectModelDataConstantsExtensions.ToProjectModelElementsDataConstant(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Returns the project model element as the project model elements data constant: a list of one non-Null item, or Null.
            Prevents getting collections with null elements inside.
            In other words, makes it valid for the data rule.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.DataContext.ProjectModelDataConstantsExtensions.ToProjectModelElementsDataConstant(JetBrains.ProjectModel.IProjectModelElement[])">
            <summary>
            Makes sure the project model elements collection does not contain Null items and is non-empty.
            Filters out Nulls, returns Null instead of empty collections.
            In other words, makes it valid for the data rule.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.DotNetCore.DotNetCorePlatformInfo">
            <summary>
            Stores information about .NET Core framework references in the project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.DotNetCore.DotNetCorePlatformsUtil.CompareReleaseLabels(NuGet.Versioning.NuGetVersion,NuGet.Versioning.NuGetVersion)">
            <summary>
            Compares first two labels in versions like 5.0.0-preview.6.20312.15
            [preview] and [6]
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson">
            <summary>
            ASP.NET LaunchSettings.json file Schema.
            <a href="https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/launchsettings.json">
            Schema location</a>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.IisSettingsDescriptor.WindowsAuthentication">
            <summary>
            Set to true to enable windows authentication for your site in IIS and IIS Express.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.IisSettingsDescriptor.AnonymousAuthentication">
            <summary>
            Set to true to enable anonymous authentication for your site in IIS and IIS Express.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.IisSettingsDescriptor.IisExpress">
            <summary>
            Site settings to use with IISExpress profiles."
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.IisSettingsDescriptor.Iis">
            <summary>
            Site settings to use with IIS profiles.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.IisBindingContent">
            <summary>
            Site settings to use with IISExpress profiles."
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.IisBindingContent.ApplicationUrl">
            <summary>
            The URL of the web site.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.IisBindingContent.SslPort">
            <summary>
            The SSL Port to use for the web site.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.Name">
            <summary>
            Profile name
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.CommandName">
            <summary>
            Identifies the debug target to run.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.CommandLineArgs">
            <summary>
            The arguments to pass to the target being run.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.ExecutablePath">
            <summary>
            An absolute or relative path to the to the executable.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.WorkingDirectory">
            <summary>
            Sets the working directory of the command.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.LaunchBrowser">
            <summary>
            Set to true if the browser should be launched.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.LaunchUrl">
            <summary>
            The relative URL to launch in the browser.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.EnvironmentVariables">
            <summary>
            Set the environment variables as key/value pairs.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.ApplicationUrl">
            <summary>
            A semi-colon delimited list of URL(s) to configure for the web server.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.NativeDebugging">
            <summary>
            Set to true to enable native code debugging.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.SqlDebugging">
            <summary>
            Set to true to enable sql code debugging.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.ExternalUrlConfiguration">
            <summary>
            Set to true to disable configuration of the site when running the Asp.Net Core Project profile.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.Use64Bit">
            <summary>
            Set to true to run the 64 bit version of IIS Express, false to run the x86 version.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.HttpPort">
            <summary>
            The HTTP port to use for the web site.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.SslPort">
            <summary>
            The SSL port to use for the web site.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.UseSsl">
            <summary>
            Set to true to bind the SSL port.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.DotNetCore.LaunchSettingsJson.ProfileContent.PublishAllPorts">
            <summary>
            Publish all exposed ports to random ports in Docker (-P).
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.FeaturesStatistics.FeatureUsageDataEx.AddSolution(JetBrains.UsageStatistics.FUS.EventLog.FeatureUsageData,JetBrains.ProjectModel.ISolution)">
             <summary>
            Solution data is added automatically for project state collectors and project-wide counter events.
            @see com.intellij.internal.statistic.service.fus.collectors.ProjectUsagesCollector
            @see com.intellij.internal.statistic.eventLog.events.EventId.log(Project)
             </summary>
             <param name="fud"></param>
             <param name="solution"></param>
             <returns></returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.Diagnostics.IHiddenDiagnostic">
            <summary>
            Marker interface to specify a diagnostic does not have presentation in diagnostic UI
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.Diagnostics.IUnrealBlueprintDiagnostic">
            <summary>
            Diagnostic that should be shown in "Blueprints" tab
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession">
            <summary>
            The data object for the Solution Builder build session.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.IsSilent">
            <summary>
            Then session is silent, we don't show ui - progress in task, dashboard and build results.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.BuildEventsNonProject">
            <summary>
            Build events for the session (errors, warnings, console output, and status messages from the engine) that do not fall into any of the projects.
            The success/failure state of the whole build session is derived from presense of any errors messages in these events and the events of all the projects.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.Target">
            <summary>
            How severe should the rebuild be.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.Projects">
            <summary>
            The list of projects known to this session, in various build states. Initially empty, filled with project when the build gets <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionState.Running"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.State">
            <summary>
            Build session state.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.#ctor(JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget,JetBrains.Util.FileSystemPath[],System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="solutionfile">URI of the solution file to be built.</param>
            <param name="severity">How severe should the build be.</param>
            <param name="pathProjectsMustBeBuilt">The projects that must be built (when we build up to them, we might stop). Empty to build the full set of projects.</param>
            <param name="sConfigurationName">Name of the solution configuration. Project configurations are taken from the configuration manager that maps solution-wide configs to per-project configs.</param>
            <param name="sPlatformName">Name of the solution platform. Project platforms are taken from the configuration manager that maps solution-wide platforms to per-project platforms.</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.CreateBuildEventsAddRemove(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession,JetBrains.Lifetimes.Lifetime)">
            <summary>
            A composite signal that fires whenever a build event is added to session events or to any of the projects in the session.
            A new instance is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.CreateProjectErrorStatus(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject,JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates a property that accumulates the project error status from the project's build events.
            A new property and new event watcher is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.CreateProjectFullPathCache(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession)">
            <summary>
            Creates a cache for getting the build setting project by its full path (cache throws if the element is missing).
            Note: every time you call this method, a NEW cache is created, whose lifetime is as long as <paramref name="session"/>'s.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.CreateProjectFullPathCache2(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession,JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates a cache for getting the build setting project by its full path.
            The cache is live, ie when new projects are added to the session, they also get into the cache.
            Note: every time you call this method, a NEW cache is created, whose lifetime is as long as <paramref name="session"/>'s. Dispose of the cache to break the connection.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.CreateSessionErrorStatus(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession,JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates a property that accumulates the project error status from the project's build events.
            A new property and new event watcher is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.GetAllBuildEvents(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession)">
            <summary>
            Gets all of the build events for the current build session, which includes the project-related events for all of the projects and non-project build events.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.IsSuccessful(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject)">
            <summary>
            Tells if the project had no compilation errors.
            Looks up its <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.BuildEvents"/> for those of the <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind.Error"/> kind.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionEx.IsSuccessful(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession)">
            <summary>
            Tells if the session had no compilation errors.
            Looks up its <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession.BuildEventsNonProject"/> and <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.BuildEvents"/> of all of the projects for those of the <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind.Error"/> kind.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject">
            <summary>
            Represents a single project in the build process.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.BuildEvents">
            <summary>
            Build events for the current project (errors, warnings, console output, and status messages from the engine).
            The success/failure state of the project is derived from presense of any errors messages in the events.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.BuildState">
            <summary>
            State of the project within the current build process.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.FullPath">
            <summary>
            <para>The identity of the project, usually, a path to the project file.</para>
            <para>You MUST NOT assume that this is the project file, or if it is a file at all.</para>
            <para>To transition between the <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.FullPath"/> and the corresponding <see cref="T:JetBrains.ProjectModel.IProject"/>, if any, use the <see cref="M:JetBrains.ProjectModel.ProjectUtil.GetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.VirtualFileSystemPath)"/> function.</para>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.Name">
            <summary>
            Gets the short name of the project.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectBuildState">
            <summary>
            Build state for a project in the build session.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectBuildState.Excluded">
            <summary>
            Will not be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectBuildState.Pending">
            <summary>
            Will be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectBuildState.Running">
            <summary>
            Is currently being built.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectBuildState.Completed">
            <summary>
            Has been built (or skipped due to being up-to-date, see error status).
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectErrorStatus">
            <summary>
            Whether the project has errors, warnings, etc, or not.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectErrorStatus.Clean">
            <summary>
            No errors, no warnings.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectErrorStatus.Warnings">
            <summary>
            The project has some warnings (but no errors).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionProjectErrorStatus.Errors">
            <summary>
            The project has some errors (maybe also warnings).
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionState">
            <summary>
            Possible build session states.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionState.Waiting">
            <summary>
            The session has just been created and is waiting for someone to run its build (which is not guaranteed to happen).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionState.Running">
            <summary>
            The build is currently running.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSessionState.Completed">
            <summary>
            The build has completed, either successfully or with errors.
            <see cref="T:JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession"/> is <c>1</c>.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete.GetProjectFullPath(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets the SolBuilder-suitable full path identity of the project.
            Preferably, the project file; otherwise, the project folder.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete.InitImplementations(JetBrains.Lifetimes.Lifetime)">
            <summary>
            List of impls => active.
            Active impls coming and going.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete.BeginRun(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete.CreateSession(JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.EmptySolutionBuilder">
            <summary>
            A stub so that the <see cref="F:JetBrains.ProjectModel.Features.SolutionBuilders.CurrentSolutionBuilderObsolete.Implementations"/> always had at least one item to have its <code>CurrentSolutionBuilderObsolete.ActiveImplementation</code> non-<c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.EmptySolutionBuilder.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.EmptySolutionBuilder.BeginRun(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.EmptySolutionBuilder.CreateSession(JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.EmptySolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilder.IsIncremental">
            <summary>
            Has heuristics and tracks for project changes.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilder.IsDefault">
            <summary>
            Delegates to VS solution builder.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete">
            <summary>
            The base interface for manipulating a solution builder.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.BeginRun(JetBrains.ProjectModel.Features.SolutionBuilders.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.ProjectModel.Features.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderRequest.Skipped">
            <summary>
            build wasn't started.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.ISolutionBuilderRequest.Progress">
            <summary>
            Between 0 and 1.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.IIncrementalRunnerProjectChecker.CanBuild(JetBrains.ProjectModel.IProject)">
            <summary>
            When returns false it means that whole solution should be built using 
            </summary>
            <param name="project"></param>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.Services.Execution.SolutionBuilderStartAnalyzeChecker">
            <summary>
            We start to analyze if we can get config from VS
            if incremental runner enabled in settings -> when solution load is Done
            if incremental runner disabled in settings (we need it for feature suggester) -> as late as possible
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.SolBuilderDuoSettings.UseMsbuildSolutionBuilder">
            <summary>
            Whether this implementation should be promoted into the solution builder service. NULL means asking user for consent.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.SolBuilderDuoSettings.UseApiSurfaceHeuristics">
            <summary>
            Whether to use the <code>SolBuilderDuoHeuristics.ByApiSurface</code> mode instead of <code>SolBuilderDuoHeuristics.ByDate</code>.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.UseMsbuildSolutionBuilderFlag.No">
            <summary>
            Use Visual Studio build
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.Prototype.UseMsbuildSolutionBuilderFlag.NewVersion">
            <summary>
            Use Solution Builder
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEvent">
            <summary>
            A build event that occurred while building of the project.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventImportance">
            <summary>
            The importance of a build event. Originates from the MSBuild importance enum.
            Linear order: the lower the value, the more important is the event.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind">
            <summary>
            Kinds of events logged when building projects or the session itself.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind.Output">
            <summary>
            Messages logged with MSBuild logger. These do not include console output (eg from external tools). Could be of various importance.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind.Service">
            <summary>
            Service messages from the engine: projects, targets, tasks. Usually have low importance.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind.Console">
            <summary>
            Raw console output (StdOut stream) of the MSBuild process. Any fatal failures with running the MSBuild process would also go here.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind.Warning">
            <summary>
            A warning logged with MSBuild logger. MSBuild tasks also would usually capture cmdline tool console output that qualifies against the warning pattern and report to the logger.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Features.SolutionBuilders.SolBuildEventKind.Error">
            <summary>
            A warning logged with MSBuild logger. MSBuild tasks also would usually capture cmdline tool console output that qualifies against the warning pattern and report to the logger.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequestAdvancedSettings">
            <summary>
            Only used in incremental builder now.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.SolutionBuilderRequestAdvancedSettings.MsbuildVersion">
            <summary>
            Version of MSBuild. If null version will be calculated from Solution Builder Settings.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Features.SolutionBuilders.ViewModel.SolutionBuilderRequestViewModel.Progress">
            <summary>
            Between 0 and 1.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Features.ElementsCompilerSupport">
            <summary>
            Basic support for https://www.elementscompiler.com/elements/
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.FileSetSet.GetBasePaths">
            <summary>
            Returns the root directory of all include patterns
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFileExtensions.GetFileType(System.String)">
            <summary>
            Returns project file type associated with the extension
            </summary>
            <param name="extension">Project file extension with dot</param>
            <returns>Project file type associated with the extension</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFileExtensions.GetExtensions(JetBrains.ProjectModel.ProjectFileType)">
            <summary>
            Returns all extensions associated with project file type
            </summary>
            <param name="fileType">Project file type</param>
            <returns>All extensions associated with project file type</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFileExtensions.Changed">
            <summary>
            Fired when there's a change in extensions to project file type association
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFileExtensionsExtensions.GetFileType(JetBrains.ProjectModel.IProjectFileExtensions,JetBrains.Util.IPath)">
            <summary>
            Returns project file type associated with the extension
            </summary>
            <param name="component">Component</param>
            <param name="location">Project file location</param>
            <returns>Project file type associated with the extension</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFileExtensionsExtensions.GetDefaultBuildAction(JetBrains.ProjectModel.IProject,JetBrains.Util.IPath)">
            <summary>
            Returns default build action associated with the extension
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFileExtensionsExtensions.GetDefaultBuildAction(JetBrains.ProjectModel.IProject,JetBrains.ProjectModel.ProjectFileType,JetBrains.Util.IPath)">
            <summary>
            Returns default build action associated with the extension
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.KnownProjectFileType.Name">
            <summary>
            Specifies special ID for services, which has semantic "for any project file type"
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFileType.Extensions">
            <summary>
            Do not use directly. Use IProjectFileExtensions.GetExtensions instead.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IModule">
            <summary>
            Common interface for <see cref="T:JetBrains.ProjectModel.IProject"/> and <see cref="T:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.BuildTools.BuildToolAutoDetector">
            <summary>
            Allows to choose the best matching <see cref="T:JetBrains.ProjectModel.BuildTools.IBuildTool"/> for the solution
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.BuildTools.BuildToolContainer">
            <summary>
            The main component to find (discover) and provide build tools installed on the machine
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolContainer.Providers">
            <summary>
            Predefined BuildTool providers
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.BuildTools.BuildToolContainer.Discover(JetBrains.ProjectModel.BuildTools.BuildToolEnvironment)">
            <summary>
            Discover all build tools on the machine using default providers
            Could be executed from any thread
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.BuildTools.BuildToolContainer.Discover(System.Collections.Generic.IReadOnlyCollection{JetBrains.ProjectModel.BuildTools.IBuildToolProvider},JetBrains.ProjectModel.BuildTools.BuildToolEnvironment)">
            <summary>
            Discover all build tools on the machine using specified providers
            Could be executed from any thread
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolSettings.MsbuildVersion">
            <summary>
            Version of MSBuild to use when building.
            <c>0</c> means "as the runtime version of the application initiating the build" (in case of Visual Studio, this is the same MSBuild VS itself uses for building).
            uint.MaxValue means highest.
            uint.MaxValue - 1 set for custom toolset. sorry for that :)
            <see cref="F:System.Int32.MaxValue"/> means use the highest version available on this machine.
            Any other number: <code>Interop.WinApi.Macros.HIWORD(uint)</code> is the major version number, <code>Interop.WinApi.Macros.LOWORD(uint)</code> is the minor version number.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolSettings.CustomBuildToolPath">
            <summary>
            Null if not selected.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolSettings.MonoExePath">
            <summary>
            Null if not selected.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolSettings.DotNetCliExePath">
            <summary>
            Null if not selected.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolVersionKeys.SameAsEnvironment">
            <summary>
            MSBuild version will be inherited from parent IDE (Visual Studio in case on R#)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolVersionKeys.Custom">
            <summary>
            MSBuild full path should be used if presented
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolVersionKeys.AutoDetected">
            <summary>
            MSBuild version will be chosen automatically based on current environment and solution
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.BuildTools.BuildToolVersionKeys.LatestInstalled">
            <summary>
            Obsolete
            IDE does not use this version anymore, use AutoDetected instead
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.BuildTools.BuildToolVersionKeys.FromVersion(JetBrains.Util.Version2)">
            <summary>
            Returns version key for the [Major].[Minor] MSBuild version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.BuildTools.BuildToolVersionKeys.ToVersion(System.UInt32)">
            <summary>
            Returns version for the key if possible
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.BuildTools.IBuildTool">
            <summary>
            Represents BuildTool (MsBuild or XBuild) installed on the machine
            Use <see cref="T:JetBrains.ProjectModel.BuildTools.BuildToolContainer"/> for obtaining various build tools
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.BuildTools.IBuildTool.Version">
            <summary>
            Detected version of the BuildTool. Can be zero.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.BuildTools.IBuildTool.Directory">
            <summary>
            Directory of the BuildTool files
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.BuildTools.IBuildTool.ExePath">
            <summary>
            Main BuildTool executable (exe or dll) file
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.BuildTools.IBuildTool.EnvironmentVariables">
            <summary>
            Environment variables essential for running the BuildTool, can be edited by <see cref="T:JetBrains.ProjectModel.BuildTools.IBuildToolPatcher"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.BuildTools.IBuildTool.Priority">
            <summary>
            Priority of the BuildTool, used for choosing the best tool with the same versions
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.BuildTools.IBuildTool.UseDotNetCoreForLaunch">
            <summary>
            Should ve executed via dotnet core
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.BuildTools.BuildToolExtensions.GetPossibleFrameworkRoots(JetBrains.ProjectModel.BuildTools.IBuildTool)">
            <summary>
            Returns list of possible reference assembly roots for this build tool
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.BuildTools.IBuildToolSelector">
            <summary>
            Extension point for extending logic for selecting best build tool for current project files.
            Do not use explicitly. Use BuildToolAutoDetector.Select() or BuildToolContainer.GetAutoDetected().
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Interop.FrontendChangeHandler.HandleRenameRequest(JetBrains.ProjectModel.Interop.RenameRequest)">
            <summary>
              Handles rename request.
            </summary>
            <param name="renameRequest">Request to process</param>
            <returns>True if successful</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Interop.IBackendToVisualStudioInterop">
            <summary>
            The calls from backed to Visual Studio.
            Will be moved to a proper place when we finally implement out-of-process
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Interop.IBackendToVisualStudioInterop.AddedOrRemovedItemPaths">
            <summary>
            Fired when project items added or removed. Used to rebind open text controls 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Interop.IFrontendChangeHandler">
            <summary>
            Backend interface that processes changes from frontend. I.e. rename of files in solution explorer
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleRenameAsync(System.Collections.Generic.IList{JetBrains.ProjectModel.Interop.RenameRequest})">
            <summary>
            Handles rename from frontend.
            </summary>
            <param name="renames">List of renames</param>
            <returns>List of requests failed to be fulfilled</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleRemoveProjectAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Handles remove request from frontend
            </summary>
            <param name="projectSearchDescriptor">Descriptor of project to remove</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleRemoveAsync(System.Collections.Generic.IList{JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor})">
            <summary>
            Handles remove request from frontend
            </summary>
            <param name="removes">Descriptors of file or folder to remove</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleUpdateProjectFilePropertiesAsync(System.Collections.Generic.List{System.Tuple{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.Util.VirtualFileSystemPath,JetBrains.ProjectModel.Properties.IProjectFileProperties}})">
            <summary>
            Updates file properties
            </summary>
            <param name="fileProperties">List of file properties to update</param>
            <returns>Task to await</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Interop.IFrontendChangeHandler.HandleMoveProjectAsync(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Handles move request from frontend.
            </summary>
            <param name="projectSearchDescriptor">Search descriptor of project to move</param>
            <param name="parentSearchDescriptor">New project's parent</param>
            <returns>Task to await</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Interop.RenameRequest">
            <summary>
            Represents arguments of IVsTrackProjectDocumentsEvents2.OnAfterRenameDirectories and OnAfterRenameFiles
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Interop.RenameRequest.ProjectSearchDescriptor">
            <summary>
            Descriptor of the project in which rename takes place
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Interop.RenameRequest.OldPath">
            <summary>
            File or folder path before rename 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Interop.RenameRequest.NewPath">
            <summary>
            File or folder path after rename
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Interop.RenameRequest.IsHitemForNewFileFound">
            <summary>
            Whether Hitem for new file already exists
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Interop.RenameRequest.IsAlreadyOnDisk">
            <summary>
            Whether the change is already made to file system
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Interop.RenameRequest.AllowTargetDirectoryCreation">
            <summary>
            Whether the new parent directory creation is allowed (we have non-VS structure for cpp projects)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Build.OutputAssemblies.ProjectOutputAssembliesChanged">
            <summary>
            Fired on UI thread guarded indicating project's output or reference assembly path or mvid changed.
            Not fired when project is removed.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Build.OutputAssemblies.OnOutputFilePathChanged(JetBrains.ProjectModel.IProject,System.Boolean)">
            <summary>
            Processes potential project output change
            </summary>
            <param name="project">Project that might have changed</param>
            <param name="targetFrameworkIdsMightHaveChanged">whether target frameworks changed</param>
            <returns>True if any path changed</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Build.ProjectBuildSettingsInit">
            <summary>
            Enable build settings change events after all project is initialized.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Sharepoint.SharepointDeploymentType">
            <summary>
            Sharepoint depployment type property value
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionInstance.Lifetime">
            <summary>
            Maximum solution lifetime
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionInstance.UntilSolutionCloseLifetime">
            <summary>
            Lifetime that terminates at the beginning of <see cref="M:JetBrains.ProjectModel.SolutionInstance.CloseSolutionInstance"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.impl.SolutionLocation">
            <summary>
            Describes solution location: directory and solution file path.
            Normal case: absolute solution file path, directory points to the file's directory
            Open folder: solution file path is empty, directory is absolute
            Other: empty
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.impl.SolutionLocation.IsValid">
            <summary>
            Checks paths validity
            </summary>
            <returns>True if paths match</returns>
        </member>
        <member name="F:JetBrains.ProjectModel.impl.SolutionLocation.Empty">
            <summary>
            Empty location
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.impl.SolutionLocation.IsTemporary">
            <summary>
            Check whether location is temporary
            </summary>
            <returns>True if temporary</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.impl.SolutionLocation.CreateBySolutionFilePath(JetBrains.Util.VirtualFileSystemPath,System.String)">
            <summary>
            Creates location by solution file path
            </summary>
            <param name="solutionFileSystemPath">Solution file path</param>
            <param name="solutionFilterFileNameWithExtension">Solution filter file name if applicable</param>
            <returns>Created solution location</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.impl.SolutionLocation.CreateBySolutionDirectory(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Creates solution location by solution directory (open folder case)
            </summary>
            <param name="solutionDirectory">Solution directory</param>
            <returns>Created solution location</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.impl.SolutionLocation.CreateByExistenceOrFileExtension(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Creates by path. If files exists at specified path will created by path, if directory - by directory.
            If nothing exists will check .sln extension
            </summary>
            <param name="fileOrFolderPath">Path to solution file or folder</param>
            <returns>Created solution location</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.impl.SolutionManagerEvents">
            <summary>
            Events on solution creation/ closing and stages of its lifecycle
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.impl.SpecialFiles.SpecialFilesManager">
            <summary>
            Provides a reference-counter based mechanism for keeping non-project items
            </summary> 
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionManagerBase.SolutionInstanceContainerNonComposed">
            <summary>
            Solution instance container property. Set when it is created but not composed.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionManagerBase.SolutionInstanceContainerComposed">
            <summary>
            Solution instance container property. Set when it is created and composed.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionManagerBase.SolutionContainerNonComposed">
            <summary>
            Solution container property. Set when it is created but not composed.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionManagerBase.SolutionContainerComposed">
            <summary>
            Solution container property. Set when it is created and composed.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Tasks.ISolutionLoadTasksScheduler.SetTasksBarrier(JetBrains.ProjectModel.Tasks.SolutionLoadTaskKinds,System.String)">
            <summary>
            Forbids execution of all solution load tasks of the <see cref="!:kind"/> and higher
            </summary>
            <param name="kind">Task kind to pause execution</param>
            <param name="reason">Reason for pause</param>
            <returns>Task barrier cookie to dispose when execution can be continued</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Tasks.SolutionLoadTaskKinds">
            <summary>
            The priorities of solution load tasks.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectModelElement">
            <summary>
            Handy root interface for all object of ProjectModel
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElement.GetProperty(JetBrains.Util.Key)">
            <summary>Retrieves the value of a property given the property's name</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElement.IsValid">
            <summary>
            Returns true if the project item is a member of a valid solution hierarchy.
            An important note: the solution is considered valid even if its termination is started. Use <see cref="M:JetBrains.ProjectModel.IProjectModelElement.IsValidAndAlive"/> if you need to check that solution is not being terminated.
            </summary>
            <returns>True if the project item is a member of a valid solution hierarchy.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElement.IsValidAndAlive">
            <summary>
            Checks whether solution is valid and its termination is not started
            </summary>
            <returns>True if solution is valid and its termination is not started</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectModelElement.MarshallerType">
            <summary>
            Type of the <see cref="T:JetBrains.ProjectModel.Persistence.Marshallers.IProjectModelElementMarshaller"/> to persist the element into caches.
            Null means the element does not support persistence
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElementPresenter.GetIcon(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Gets an icon for project model element
            </summary>
            <returns>Icon or null if unhandled by this presenter</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectModelElementPresenter.GetPresentableLocation(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Gets presentable location for project model element.
            Used in Recent Files, Recent Edits, Go to File etc
            </summary>
            <returns>Presentable location for project model element or null if unhandled by this presenter</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectModelZone">
            <summary>
            Solutions/Projects support. Mostly modeled to façade the Visual Studio IVsHierarchy solution/project model, but has standalone implementations to match in standalone IDEs and cmdline tools.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectPropertiesUpdater">
            <summary>
            Exposes methods to request asynchronous updating of project properties.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IQuerySolutionCloseHandler.QuerySolutionClose(JetBrains.ProjectModel.ISolution)">
            <summary>
            Implementation returns false when solution cannot be closed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ISolutionExplorer.ShowInSolutionExplorer(JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor,System.Boolean)">
            <summary>
            Shows the Solution Explorer and sets selection to <paramref name="projectItem"/>, if defined.
            </summary>
            <param name="projectItem">A valid project item to select in Solution Explorer, or <c>Null</c> to just activate the Solution Explorer window (if <paramref name="activate"/>).</param>
            <param name="activate">Whether to activate the Solution Explorer window.</param>
            <returns>Success flag.</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolutionOwner.IsRealSolutionOwner">
            <summary>
            Hack to overcome a problem with toolwindows created for a fake solution in options
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ISolutionOwner.GetComponent``1">
            <summary>
            Get component from the owner (e.g Shell) container.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISolutionToolset">
            <summary>
            Exposes MsBuild or XBuild that was used to open solution.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ISolutionToolset.Refresh">
            <summary>
            Restarts toolset calculation, call this method when environment or toolset settings were changed 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.model2.Assemblies.Interfaces.IAssemblyFactory.AddRef(JetBrains.Metadata.Reader.API.IAssemblyLocation,System.String,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            Adds assembly to assembly collection
            </summary>
            <param name="assemblyLocation"></param>
            <param name="holderId">Caller ID</param>
            <param name="moduleReferenceResolveContext"> </param>
        </member>
        <member name="M:JetBrains.ProjectModel.model2.Interfaces.SharedProjectContext.SetProjectContext(JetBrains.ProjectModel.IProjectFile,JetBrains.ProjectModel.IProject)">
            <summary>
            Applies project context set in text control dropdown
            </summary>
            <param name="projectFile">Project file for which context is selected in dropdown</param>
            <param name="contextProject">Project context</param>
        </member>
        <member name="T:JetBrains.ProjectModel.model2.References.ReferencesFolder">
            <summary>
            Data class that represents references folder in solution explorer
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.AssemblyFactory.AddRef(JetBrains.Metadata.Reader.API.IAssemblyLocation,System.String,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            Gets or creates assembly file + adds an assembly cookie to be used by clients
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.ModuleReferenceResolveManager.UpdateReferenceAndFire(JetBrains.ProjectModel.Model2.References.IModuleToAssemblyReference,JetBrains.Metadata.Reader.API.IAssemblyLocation,JetBrains.Lifetimes.Lifetime)">
            <param name="reference">reference to be updated</param>
            <param name="resolveResult">might be non-existent file</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.ModuleReferencesResolveStore.GetAssemblyFileResolveResult(JetBrains.ProjectModel.Model2.References.IModuleToAssemblyReference)">
            <summary>
            Gets cached (and only cached!) value to track changes in assembly model
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Assemblies.Impl.ModuleReferencesResolveStore.GetReferencesToProject(JetBrains.ProjectModel.IProject)">
            <param name="target"></param>
        </member>
        <member name="T:JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackageName">
            <summary>
            NuGet FQN
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Assemblies.Interfaces.INugetReferenceSpec">
            <summary>
            NuGet reference as specified in packages.config
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Assemblies.Interfaces.INugetPackage">
            <summary>
            Wrapper for IPackage from Nuget.Core.dll
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Model2.Assemblies.Impl.Assembly">
            <summary>
            Represents loaded resolved assembly reference.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly.IsMissing">
            <summary>
            Indicates that the persistent version of the assembly is not found
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly.TargetFrameworkId">
            <summary>
            Assembly's TargetFrameworkId. Will replace PlatformId
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFileData.LastWriteTimeUtc">
            <summary>
            Time of last modification of the corresponding file on the file system.
            Note that this value is cached and is updated only when the synchronization with the file system is performed.
            That is, the value returned by this method may sometimes differ from the actual modification stamp of the physical file,
            if the file was modified since last synchronization with the file system.
            </summary>    
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferenceResolveManager.RefreshAssemblyReferences(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssembly)">
            <summary>
            Resolves assembly references for all incoming resolve contexts
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IModuleReferencesResolveStore.GetReferencesToProject(JetBrains.ProjectModel.IProject)">
            <param name="target"></param>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Assemblies.Interfaces.ModuleReferencesResolveStoreEx.IsReferences(JetBrains.ProjectModel.IProject,JetBrains.ProjectModel.IModule,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Checks if <see cref="!:project"/> references<see cref="!:module"/> in specified <see cref="!:targetFrameworkId"/> or in any context if its is null
            </summary>
            <param name="project">Project to search reference in</param>
            <param name="module">Module that might be referenced by the project</param>
            <param name="targetFrameworkId">Context in which the references should be found or null  to search everywhere</param>
            <returns></returns>
        </member>
        <member name="E:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.MakingWritable">
            <summary>
            Raised when files are needed to make writable.
            The handlers of this event must ensure that the documents are really writable.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.ISolution)">
            <summary>
            Indicates that the structure of the solution, the properties of the solution
            and the properties of the solution items can be modified
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.IProject)">
            <summary>
            Indicates whether the structure of the project or properties of its items can be modified
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.Transaction.IEnsureWritableHandler.IsWritable(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Checks if the persistent version of the file is writable
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Model2.References.AssemblyReferenceTarget.#ctor(JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Project model reference target
            </summary>
            <param name="assemblyName">Target assembly name</param>
            <param name="hintLocation">Hint location. Should be null for assembly-to-assembly reference</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.FilesByMask.IFilesByMaskProvider.GetMasks(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Gets file masks to include/ exclude files from build.
            May be called from any thread.
            </summary>
            <param name="projectFilePath">Path to project file (csproj/ xproj etc.)</param>
            <returns>File masks to include/ exclude files from buld</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.FilesByMask.IFilesByMaskProvider.MasksChanged">
            <summary>
            Fired when files masks for project file are changed. May be fired on any thread.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildData.ReferencedAssemblies">
            <summary>
            Assembly references
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildData.ReferencedProjects">
            <summary>
            Project references
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildData.Files">
            <summary>
            Included/ Excluded files
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider">
            <summary>
            This is a marking interface for entities that provide data
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage">
            <summary>
            Storage of compile items and references that may not be available via Visual Studio API
            The items are used to create additional references and PsiSourceFiles to make sure there is no red code in solution
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.TryGetData(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Get data if exists for the project file path
            </summary>
            <param name="projectFilePath">Path to the project file of the project in questiuon</param>
            <returns>Data if created</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.Changed">
            <summary>
            Fired when data corresponding to certain project file paths has changed
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.PerformBulkChange(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Temporary suppresses firing changes until all the changes are made
            </summary>
            <param name="lifetime">Suppression lifetime</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.SetData(JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider,JetBrains.Util.VirtualFileSystemPath,JetBrains.ProjectModel.ExtraData.IMsBuildData)">
            <summary>
            Sets new provider data
            </summary>
            <param name="provider">Data provider</param>
            <param name="projectFilePath">Path to the project file</param>
            <param name="data">Data itself</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.Clear(JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider)">
            <summary>
            Clears all the provider data
            </summary>
            <param name="provider">Data provider</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.Clear(JetBrains.ProjectModel.ExtraData.IMsBuildDataProvider,System.Func{JetBrains.Util.VirtualFileSystemPath,System.Boolean})">
            <summary>
            Clears provider data that matches <see cref="!:filter"/>
            </summary>
            <param name="provider">Data provider</param>
            <param name="filter">Project file path filter</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ExtraData.IMsBuildDataStorage.GetExistingFiles">
            <summary>
            Returns paths to files with currently stored data
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildFilesData.ItemsInAllTargetFrameworkIds">
            <summary>
            Items specified for all target frameworks
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildFilesData.ItemsPerTargetFrameworkId">
            <summary>
            Extra specification per target framework
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildFilesDataForTargetFrameworkId.IncludedItems">
            <summary>
            Included items with their build actions 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ExtraData.IMsBuildFilesDataForTargetFrameworkId.ExcludedItems">
            <summary>
            Excluded items. I.e. by exclude in .csproj or project.json
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProject">
            <remarks>Interface to a project</remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.IProject.TargetFrameworkIds">
            <summary>
            Ids of the target framework the project is targeting.
            Normally the list consists of just one element,
            but in case of .NET Core there may be many (at least normal framework and Core)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProject.GetModuleReferences(JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            All assembly and project references
            </summary>
            <param name="targetFrameworkId"></param>
        </member>
        <member name="P:JetBrains.ProjectModel.IProject.ProjectFile">
            <summary>
            Returns project item representing the project file.
            Can be <c>Null</c> for the misc items project.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProject.GetRefOutputFilePath(JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Path to "reference" assembly created by project output. See RSRP-473748
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetSingleTargetFrameworkId(JetBrains.ProjectModel.IProject)">
            <summary>
            Returns the only TargetFrameworkId defined in project. Fails if there are multiple
            </summary>
            <param name="project">Project to fetch TargetFrameworkId from</param>
            <returns>The only TargetFrameworkId in the project</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetAssemblyReferences(JetBrains.ProjectModel.IProject,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>All assemblies referenced in the project</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetProjectReferences(JetBrains.ProjectModel.IProject,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>All projects referenced in the project</summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.GetModuleReference(JetBrains.ProjectModel.IProject,System.String,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Retrieves module reference by the module name in specified <see cref="!:targetFrameworkId"/> if specified. 
            If null is passed all project's target frameworks are scanned and first suitable reference returned.
            </summary>
            <remarks>
            It is assumed that the name uniquely identifies the module among
            referenced modules (both projects and assemblies)
            For projects use ProjectReferenceExtension.GetReferencedName
            </remarks>
            <param name="project">Project to find reference in</param>
            <param name="moduleName">Referenced module name</param>
            <param name="targetFrameworkId">TargetFrameworkId to find reference in or null to scan all the references</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.IsSolutionFolder(JetBrains.ProjectModel.IProjectFolder)">
            <summary>
            Returns true if this is a solution folder
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.FixTargetFrameworksForBuildAction(JetBrains.ProjectModel.IProjectFile,JetBrains.ProjectModel.IProject,JetBrains.ProjectModel.IProject)">
            <summary>
            Use this method them project file was moved into other project with different target frameworks
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectExtensions.CalculateTargetFrameworksForBuildAction(JetBrains.ProjectModel.IProjectFile,JetBrains.ProjectModel.IProject,JetBrains.ProjectModel.IProject)">
            <summary>
            Use this method them project file was moved into other project with different target frameworks
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectElement">
            <summary>
            Root interface for all objects associated with a project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectElement.GetProject">
            <summary>
            Gets the project that owns this project element.
            On an <see cref="T:JetBrains.ProjectModel.IProject"/>, returns self.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectElement.GetPersistentID">
            <summary>
            Returns persistent ID of the project element. This ID remains valid between sessions,
            but does not survive after renaming or moving the element.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectFile">
            <summary>
            Represents a file in a project
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LanguageType">
            <summary>
            Language in which the file is written
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastInMemoryModificationStamp">
            <summary>
            Timestamp corresponding to the last in-memory modification
            </summary>
            <remarks>Equals to the LastExternalModificationStamp if the file has not been modified in memory</remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastExternalModificationStamp">
            <summary>
            Timestamp corresponding to the last external modification
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.LastWriteTimeUtc">
            <summary>
            Time of last modification of the corresponding file on the file system.
            Note that this value is cached and is updated only when the synchronization with the file system is performed.
            That is, the value returned by this method may sometimes differ from the actual modification stamp of the physical file,
            if the file was modified since last synchronization with the file system.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.IsMissing">
            <summary>
            Checks if the persistent version of the file does not exist
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.MarkReconciledWithInMemoryVersion">
            <summary>
            Marks the file as reconciled, i.e. its persistent and in-memory version are identical, by assigning its external version timestamp the same value as of the in-memory version
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.MarkReconciledWithExternalVersion">
            <summary>
            Marks the file as reconciled, i.e. its persistent and in-memory version are identical, by assigning its in-memory version timestamp the same value as of the external version
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.HasChangedExternallySinceLastReconciliation">
            <summary>
            Indicates that the persistent version of the file has changed externally since the last reconciliation
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.HasChangedInMemorySinceLastReconciliation">
            <summary>
            Indicates that the in-memory version of the file has changed since the last reconciliation
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.CreateReadStream(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Create new read-only stream for this file, <c>NULL</c> on failures.
            </summary>
            <param name="lifetime">Stream would be closed when the lifetime ends. Note that closing the stream manually is not enough to complete all the operations which should happen when you stop using the stream.</param>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFile.CreateWriteStream(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates new writable stream for this file, <c>NULL</c> on failures.
            </summary>
            <param name="lifetime">Stream would be closed when the lifetime ends. Note that closing the stream manually is not enough to complete all the operations which should happen when you stop using the stream.</param>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.Properties">
            <summary>
            Returns object for manipulating project file properties
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFile.Origin">
            <summary>
            Store information of what data the project file was created
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectFolder">
            <summary>
            Represents a folder in a project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.FindProjectItemByLocation(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Returns random project item inside given folder at the given location.
            Use the method if and only if you're 100% sure there's only one project item expected. 
            Use <see cref="M:JetBrains.ProjectModel.ProjectFolderEx.FindProjectItemsByLocation(JetBrains.ProjectModel.IProjectFolder,JetBrains.Util.VirtualFileSystemPath)"/> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItem(System.String)">
            <summary>
            Returns any sub item given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItems(System.String)">
            <summary>
            Returns all sub items item given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubItems">
            <summary>
            Subitems of the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectFolder.Path">
            <summary>
            Path for regular project folder or virtual project folder (which is has alias and absolute location)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectFolder.GetSubFolderByPath(JetBrains.ProjectModel.ProjectFolderPath)">
            <summary>
            Returns a sub folder given the project folder path.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetNotLinkedSubFolder(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns sub folder given the name. It could be only one without linked folders.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFolders(JetBrains.ProjectModel.IProjectFolder)">
            <summary>
            Returns all sub folders.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFolders(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns all sub folders given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFolders(JetBrains.ProjectModel.IProjectFolder,System.String,System.Predicate{JetBrains.ProjectModel.IProjectFolder})">
            <summary>
            Returns all sub folders given the name matching the predicate.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFiles(JetBrains.ProjectModel.IProjectFolder)">
            <summary>
            Returns all sub files given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFiles(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns all sub files given the name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.GetSubFiles(JetBrains.ProjectModel.IProjectFolder,System.String,System.Predicate{JetBrains.ProjectModel.IProjectFile})">
            <summary>
            Returns all sub files given the name matching the predicate.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.HasSubItems(JetBrains.ProjectModel.IProjectFolder,System.String)">
            <summary>
            Returns true if the folder has at least one sub-item with given name.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.IsSharedProjectFolder(JetBrains.ProjectModel.IProjectFolder)">
            <summary>
            Whether folder is a link to SharedProject project.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectFolderEx.IsSharedProjectFolder(JetBrains.ProjectModel.IProjectFolder,JetBrains.ProjectModel.IProject@)">
            <summary>
            Whether folder is a link to SharedProject project.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectItem">
            <remarks>
            Interface to a project item. Project item is a member of a project's hierarchy
            </remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.ParentFolder">
            <summary>
            Parent item for the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.Location">
            <summary>
            Location of the file associated with the item.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.Kind">
            <summary>
            Returns the type of the project item.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.IProjectItem.GetPresentableProjectPath">
            <summary>
            Returns project path as a string containing names of the project items from the root to the item delimited by “<c>\</c>”.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectItem.IsLinked">
            <summary>
            Returns true if the project item is linked to its parent folder. This means that the persistent version
            of the item is not located in the persistent version of the parent folder.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISdkModule">
            <summary>
            Incapsulates Sdk Module with sdk content files but not with sdk content assemblies
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISdkModule.ContentRootFolder">
            <summary>
            A path to the contents of sdk module. I.e. for windows sdk it is "...\Windows Kits\8.0\References\CommonConfiguration\Neutral"
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISdkModule.TargetPlatformData">
            <summary>
            describes the hardware platfrom current module is applicable to
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ISolution">
            <summary>
            Root project model element
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolution.SolutionFilePath">
            <summary>
            Path to the solution file. Can be empty i.e. in case of Open Folder mode.
            SolutionFile.Directory should not be used to obtain solution folder. Use <see cref="P:JetBrains.ProjectModel.ISolution.SolutionDirectory"/> instead.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolution.SolutionDirectory">
            <summary>
            Solution folder. When <see cref="P:JetBrains.ProjectModel.ISolution.SolutionFilePath"/> exists it is its directory. 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolution.SolutionFilterFileNameWithExtension">
            <summary>
            Solution filter file name if applicable.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ISolution.IsTemporary">
            <summary>Indicates if the solution has not been persisted</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ITargetFrameworkIdDetector">
            <summary>
            The component is used to detect <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> for project which may be specified in project.json or project file. Plus when detect is called either IVsHierarchy or ProjectInstance
            is at hand so evaluated properties may be queried from it. Uses <see cref="T:JetBrains.ProjectModel.ITargetFrameworkIdProvider"/> to calculate the value.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ITargetFrameworkIdDetector.TargetFrameworkIdsChanged">
            <summary>
            Signals that <see cref="P:JetBrains.ProjectModel.ITargetFrameworkIdDetector.TargetFrameworkIdsChanged"/> might have changed from the project with project file location sent as parameter
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ITargetFrameworkIdDetector.GetTargetFrameworkIds(JetBrains.Util.VirtualFileSystemPath,System.Func{System.String,System.String},System.Func{System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId}})">
            <summary>
            Fetches <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> for the project.
            </summary>
            <param name="projectFilePath">Pathto the project's project file (.csproj)</param>
            <param name="getPropertyValue"></param>
            <param name="getDefaultValue"></param>
            <returns>Read-only collection of <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> found for project</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.ITargetFrameworkIdProvider">
            <summary>
            The component that is able to fetch <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> from one source (i.e. project.json). <see cref="T:JetBrains.ProjectModel.ITargetFrameworkIdDetector"/> uses the providers
            to detect the <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> for the project.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ITargetFrameworkIdProvider.Priority">
            <summary>
            Provider's priority. The smaller - the higher
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ITargetFrameworkIdProvider.TargetFrameworkIdsChanged">
            <summary>
            Signals that <see cref="P:JetBrains.ProjectModel.ITargetFrameworkIdProvider.TargetFrameworkIdsChanged"/> might have changed from the project with project file location sent as parameter
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ITargetFrameworkIdProvider.GetTargetFrameworkIds(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Fetches <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> for the project.
            </summary>
            <param name="projectFilePath">Path to the project's project file (.csproj)</param>
            <returns>Read-only collection of <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> found for project. Empty if nothing found.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemExtensions.GetDependentFilesDepth(JetBrains.ProjectModel.IProjectFile)">
            <returns>0 if there are no nested files, otherwise count of nesting levels</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemExtensions.IsShared(JetBrains.ProjectModel.IProjectFile)">
            <summary>Checks if there are any files sharing the same location.</summary>
            <param name="projectFile">Any project file</param>
            <returns>True if there are files having the same location</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemExtensions.GetSharedProjectFiles(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Returns list of project files sharing the same location starting with the argument.
            </summary>
            <param name="projectFile">Any project file</param>
            <returns>List of project files sharing the same location starting with the argument.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemExtensions.SelectBestProjectFile(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProjectFile},System.Func{JetBrains.ProjectModel.IProjectFile,System.Int32})">
            <summary>
            Chooses best project file to open. Prefers file from non-shared project with <see cref="M:JetBrains.ProjectModel.BuildActionExtensions.IsCompile(JetBrains.ProjectModel.BuildAction)"/> 
            </summary>
            <param name="projectFiles">Somehow selected project files. I.e. <see cref="M:JetBrains.ProjectModel.ISolution.FindProjectItemsByLocation(JetBrains.Util.VirtualFileSystemPath)"/></param>
            <param name="customScore">Additional score provider</param>
            <returns>Best project file or null</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemExtensions.SelectBestProjectItem(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProjectItem})">
            <summary>
            Chooses best project item ever. Prefers file from non-shared project with <see cref="M:JetBrains.ProjectModel.BuildActionExtensions.IsCompile(JetBrains.ProjectModel.BuildAction)"/> 
            </summary>
            <param name="projectItems">Somehow selected project files or folders. I.e. <see cref="M:JetBrains.ProjectModel.ISolution.FindProjectItemsByLocation(JetBrains.Util.VirtualFileSystemPath)"/></param>
            <returns>Best project file or any project folder or null</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionLifetimes">
            <summary>
            Lifetimes associated with solution
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionLifetimes.MaximumLifetime">
            <summary>
            Maximum lifetime until solution is totally closed and its components are disposed
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionLifetimes.UntilSolutionCloseLifetime">
            <summary>
            Lifetime terminates at the beginning of solution close. When it is terminated <see cref="M:JetBrains.ProjectModel.IProjectModelElement.IsValidAndAlive"/> will return false.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdProviderByProjectJson">
            <summary>
            Crutch for RSRP-459579 when .csproj is in fact a PCL that targets platform definied in project.json file
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.ProjectConfigurations`1.GetOrCreateConfiguration(JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Returns existing configuration for specified <see cref="!:targetFrameworkId"/> or creates new one.
            Requires write lock. For reading purposes use <see cref="M:JetBrains.ProjectModel.ProjectImplementation.ProjectConfigurations`1.TryGetConfiguration(JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)"/>
            </summary>
            <param name="targetFrameworkId">Target framework in question</param>
            <returns>Corresponding configuration</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdInProjectFile.Instance">
            <summary>
            Hack for project properties factory
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdInProjectFile.GetTargetFrameworkIds(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Returns TargetFrameworkIds from project file
            </summary>
            <param name="projectFilePath">Project file location</param>
            <returns>TargetFrameorksIds mentioned in TargetFrameworkId or TargetFrameworksIds element</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkIdInProjectFile.GetTargetFrameworkIds(JetBrains.ProjectModel.IProject)">
            <summary>
            Returns TargetFrameworkIds from project file
            </summary>
            <param name="project">Valid project</param>
            <returns>TargetFrameorksIds mentioned in TargetFrameworkId or TargetFrameworksIds element</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImplementation.TargetFrameworkScope.RemoveResolve(JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Metadata.Reader.API.IAssemblyLocation,System.Boolean)">
            <returns>true if some resolve result was removed. False if we couldn't remove anything by given ANI</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderImpl.Path">
            <summary>
            This path should be null for projects and solution folders.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderImpl.AllowsNonExistence">
            <summary>
            Means that a folder can absent in file system (can be a virtual folder)
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectFolderPath">
            <summary>
            Path for regular project folder or virtual project folder (which is has alias and abolute location)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderPath.ShortName">
            <summary>
            Which is regular folder name or alias for virtual folder.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectFolderPath.ReferencedFolderPath">
            <summary>
            Absolute path to virtual folder or Empty
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImpl.MoveToNewLocation(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Move project to new location identified by project file 
            </summary>
            <param name="newprojectFileLocation">Location of a project file. Not null or empty</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImpl.MoveToNewLocation(System.String,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Move project to new location when no project file
            </summary>
            <param name="newName">New project name</param>
            <param name="newProjectLocation">New project fodler</param>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectImpl.MoveToNewLocation(System.String,JetBrains.Util.VirtualFileSystemPath,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Move to new location. Specify everything.
            </summary>
            <param name="newName">New project name</param>
            <param name="newProjectLocation">New project location</param>
            <param name="newProjectFileLocation">New project file location</param>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectItemBase">
            <summary>
            Base class for project item implementations
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectItemBase.DoRename(System.String)">
            <summary>
            Perform rename
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.CSharpProjectPropertiesFactory.CSharpVs2017ProjectSystemTypeGuid">
            Visual Studio 2017 replaces project type guids in sln files.
            It does not affect ReSharper because a proper guid is returned by Visual Studio.
            See https://github.com/dotnet/project-system/issues/1821
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.CSharpProjectPropertiesFactory.ProjectKProjectTypeGuid">
            ASP.NET vNext (it now can be console app, library or web app)
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.ImplicitUsingsKind.Disable">
            <summary>
            Implicit usings are disabled.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.ImplicitUsingsKind.Enable">
            <summary>
            Implicit usings are enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.ImplicitUsingsKind.True">
            <summary>
            Implicit usings are enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.NullableContextKind.Disable">
            <summary>
            Nullable annotation and warning contexts are disabled.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.NullableContextKind.Enable">
            <summary>
            Nullable annotation and warning contexts are enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.NullableContextKind.Warnings">
            <summary>
            Nullable annotation context is disabled and the nullable warning context is enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.CSharp.NullableContextKind.Annotations">
            <summary>
            Nullable annotation context is enabled and the nullable warning context is disabled.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.CSharp.TypeScriptProjectPropertiesRequest">
            <summary>
            This component is located here to test it in platform environment...
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.ExcludedProjects.ExcludedProjectsSettings.ProjectMasksToIgnore">
            <summary>
            Sometimes projects needs to be treated as 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IBuildSettings">
            <summary>
            Common build settings for all projects
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IBuildSettings.PlatformTarget">
            <summary>
            It equal to msbuild' property "Platform" and could be "AnyCPU", "x64" etc. 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IBuildSettings.Configuration">
            <summary>
            It equal to msbuild' property "Configuration" and could be "Debug", "Release" etc. 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IBuildSettings.IsBuildable">
            <summary>
            True if project can be built by IDE, this setting specified in the solution file
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IBuildSettings.IsDeployable">
            <summary>
            True if project can be deployed by IDE, this setting specified in the solution file
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IBuildSettings.UpdateFrom(JetBrains.ProjectModel.Properties.IBuildSettings)">
            <summary>
            Tries updating values from <seealso cref="!:settings"/> if posiible
            </summary>
            <param name="settings">Other settings</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.LanguageVersionPresentationOptions.ShowMinorVersionWhenZero">
            <summary>Show 'MajorVersion.0' instead of 'MajorVersion' when minor version is zero</summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.LanguageVersionPresentationOptions.ShowLanguageName">
            <summary>Show 'LanguageName' in front of the version</summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.LanguageVersionPresentationOptions.ShowDescription">
            <summary>Show description for special language versions, e.g. show 'latest major (default)' instead of 'default'</summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.Name">
            <summary>
            Debug, Release or some custom...
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.TargetFrameworkId">
            <summary>
            TargetFramework the configuration corresponds to
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.RelativeOutputDirectory">
            <summary>
            bin/debug or something like this...
            Make sure the value assigned represents relative path. If in doubt use <see cref="M:JetBrains.ProjectModel.Properties.ProjectConfigurationEx.SetRelativeOutputDirectory(JetBrains.ProjectModel.Properties.IProjectConfiguration,System.String,JetBrains.Util.VirtualFileSystemPath)"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.RelativeIntermediateDirectory">
            <summary>
            obj/debug or something like this...
            Make sure the value assigned represents relative path. If in doubt use <see cref="M:JetBrains.ProjectModel.Properties.ProjectConfigurationEx.SetRelativeIntermediateDirectory(JetBrains.ProjectModel.Properties.IProjectConfiguration,System.String,JetBrains.Util.VirtualFileSystemPath)"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.PropertiesCollection">
            <summary>
            Properties fetched with <see cref="T:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.CapabilitiesCollection">
            <summary>
            Properties fetched with <see cref="T:JetBrains.ProjectModel.Properties.IProjectCapabilityRequest"/>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectConfiguration.SetProject(JetBrains.ProjectModel.IProject)">
            <summary>
            This method is called after project is completely initialized. It is called with project = null before project is closed.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectConfiguration.UpdateFrom(JetBrains.ProjectModel.Properties.IProjectConfiguration)">
            <summary>
            Tries updating values from <seealso cref="!:configuration"/> if possible
            </summary>
            <param name="configuration">Other settings</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectConfigurationEx.SetRelativeOutputDirectory(JetBrains.ProjectModel.Properties.IProjectConfiguration,System.String,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Sets RelativeOutputDirectory to 
            </summary>
            <param name="configuration"></param>
            <param name="outputDirectory">OutputDirectory string that may represent either full path or relative</param>
            <param name="projectDirectory">Project location</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectConfigurationEx.SetRelativeIntermediateDirectory(JetBrains.ProjectModel.Properties.IProjectConfiguration,System.String,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Sets RelativeIntermediateDirectory to
            </summary>
            <param name="configuration"></param>
            <param name="intermediateDirectory">IntermediateDirectory string that may represent either full path or relative</param>
            <param name="projectDirectory">Project location</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectConfigurationEx.UpdatePropertyCollection(JetBrains.ProjectModel.Properties.IProjectConfiguration,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Updates <see cref="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.PropertiesCollection"/> with custom values 
            </summary>
            <param name="configuration">Project configuration to modify</param>
            <param name="updateAction">Action that updates property collection</param>
            <returns>Old properties collection</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IProjectElementOrigin">
            <summary>
            Store information of what data the element was created
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectElementOrigin.CanModify(System.String@)">
            <summary>
            Returns true if element from the origin can be modified by IDE
            </summary>
            <param name="reason">Reason why element can't be modified, otherwise null</param>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectFileProperties.OwnerFactoryGuid">
            <summary>
            <see cref="T:JetBrains.ProjectModel.Properties.IProjectFilePropertiesProvider"/> guid
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectFileProperties.IsHidden">
            <summary>
            Whether the file is hidden in the Solution Explorer 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectFileProperties.PropertiesCollection">
            <summary>
            Extra properties fetched upon <see cref="T:JetBrains.ProjectModel.Properties.IProjectFilePropertiesRequest"/>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectFileProperties.SetBuildAction(JetBrains.ProjectModel.BuildAction,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Sets build action for the file in the context of <see cref="!:targetFrameworkId"/>
            </summary>
            <param name="buildAction">Build action to set</param>
            <param name="targetFrameworkId">Target framework Id for which build action is set</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectFileProperties.GetBuildAction(JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Returns build action for the file in the context of <see cref="!:targetFrameworkId"/>
            </summary>
            <param name="targetFrameworkId">Target framework Id for which build action is cueried</param>
            <returns>Build action in the context of target framework id. <see cref="F:JetBrains.ProjectModel.BuildAction.UNDEFINED"/> is not set</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectFileProperties.GetBuildActions">
            <summary>
            All set build actions per target framework
            </summary>
            <returns>All set build actions per target framework</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectFilePropertiesEx.UpdatePropertyCollection``1(``0,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Updates <see cref="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.PropertiesCollection"/> with custom values 
            </summary>
            <param name="configuration">Project configuration to modify</param>
            <param name="updateAction">Action that updates property collection</param>
            <returns>Old properties collection</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectFilePropertiesEx.TryGetUniqueBuildAction(JetBrains.ProjectModel.Properties.IProjectFileProperties)">
            <summary>
            Returns build action if it is the same for every target framework
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectProperties.DotNetCorePlatform">
            .NET Core platform info for the project. Null for non .NET Core project.
            Contains information about framework references.
            In VS 2017 .NET Core project the property is fetched from msbuild or corresponding reference in VS
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectProperties.UpdateFrom(JetBrains.ProjectModel.Properties.IProjectProperties)">
            <summary>
            Tries updating values from <seealso cref="!:properties"/> if possible
            </summary>
            <param name="properties">Other properties</param>
            <returns>true if values updated, false otherwise</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectPropertiesEx.GetOrCreateActiveConfiguration(JetBrains.ProjectModel.Properties.IProjectProperties,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Returns existing configuration for specified <see cref="!:targetFrameworkId"/> or creates new one.
            Requires write lock. For reading purposes use <see cref="M:JetBrains.ProjectModel.Properties.ProjectPropertiesEx.TryGetConfiguration``1(JetBrains.ProjectModel.Properties.IProjectProperties,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)"/>
            </summary>
            <param name="properties">Project properties to get configuration from</param>
            <param name="targetFrameworkId">Target framework in question</param>
            <returns>Corresponding configuration</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.ProjectPropertiesEx.GetSingleTargetFrameworkId(JetBrains.ProjectModel.Properties.IProjectProperties)">
            <summary>
            Returns the only TargetFrameworkId defined in project properties. Fails if there are multiple
            </summary>
            <param name="projectProperties">Project properties to fetch TargetFrameworkId from</param>
            <returns>The only TargetFrameworkId in the project properties</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IProjectPropertiesFactory">
            <summary>
            Factory to create project properties depending on its type
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectPropertiesFactory.FactoryGuid">
            <summary>
            Unique id for the factory
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectPropertiesFactory.IsApplicable(JetBrains.ProjectModel.Properties.ProjectPropertiesFactoryParameters)">
            <summary>
            Checks if the factory is applicable to given parameters
            </summary>
            <param name="parameters">Project parameters</param>
            <returns>Trus if the factory is applicable</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectPropertiesFactory.IsKnownProjectTypeGuid(System.Guid)">
            <summary>
            Checks if given project type guid is known. 
            </summary>
            <param name="projectTypeGuid">Project type guid</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectPropertiesFactory.CreateProjectProperties(JetBrains.ProjectModel.Properties.ProjectPropertiesFactoryParameters)">
            <summary>
            Creates project properties from given parameters. <see cref="M:JetBrains.ProjectModel.Properties.IProjectPropertiesFactory.IsApplicable(JetBrains.ProjectModel.Properties.ProjectPropertiesFactoryParameters)"/> must be called before it
            </summary>
            <param name="parameters">Parameters to create properties</param>
            <returns>Project properties corresponding to given parameters</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.IProjectPropertiesFactory.Read(JetBrains.Serialization.UnsafeReader)">
            <summary>
            Reads properties from serialized stream. The properties are serialized with <code>IProjectProperties.WriteProjectProperties(System.IO.BinaryWriter)</code> 
            </summary>
            <param name="reader">Binary reader</param>
            <returns>Created and filled properties</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest">
            <summary>
            Ask project model to fetch specified project properties and store them in Project Model
            <see cref="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.PropertiesCollection"/> 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest.RequestedProperties">
            <summary>
            Collection of requested property names
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IProjectItemPropertiesRequest">
            <summary>
            Ask project model to fetch specified project items and store them in Project Model
              as string property separated by semicolon
            <see cref="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.PropertiesCollection"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectItemPropertiesRequest.RequestedItems">
            <summary>
            Collection of requested item names
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IProjectFilePropertiesRequest">
            <summary>
            Ask project model to fetch specified project properties and store them in Project Model
            <see cref="P:JetBrains.ProjectModel.Properties.IProjectFileProperties.PropertiesCollection"/> 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectFilePropertiesRequest.RequestedProperties">
            <summary>
            Collection of requested property names
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.IProjectCapabilityRequest">
            <summary>
            Ask project model to fetch specified project capabilities and store them in Project Model
            <see cref="P:JetBrains.ProjectModel.Properties.IProjectConfiguration.CapabilitiesCollection"/> 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.IProjectCapabilityRequest.RequestedCapabilities">
            <summary>
            Collection of requested capability names
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.PropertiesRequestExtensions.GetRequestedProjectProperty(JetBrains.ProjectModel.IProject,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId,System.String)">
            <summary>
            Returns all custom project property values requested by <see cref="T:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest"/>
              defined in active configurations
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.PropertiesRequestExtensions.GetRequestedProjectItems(JetBrains.ProjectModel.IProject,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId,System.String)">
            <summary>
            Returns all custom project property values requested by <see cref="T:JetBrains.ProjectModel.Properties.IProjectItemPropertiesRequest"/>
              defined in active configurations
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.PropertiesRequestExtensions.GetRequestedProjectProperties(JetBrains.ProjectModel.IProject,System.String)">
            <summary>
            Returns all custom project property values requested by <see cref="T:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest"/>
              defined in active configurations
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.PropertiesRequestExtensions.GetUniqueRequestedProjectProperty(JetBrains.ProjectModel.IProject,System.String)">
            <summary>
            Returns custom project property requested by <see cref="T:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest"/>
              only if it has THE SAME value in all active configurations
            Otherwise returns null
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.PropertiesRequestExtensions.GetUniqueRequestedProjectProperty(JetBrains.ProjectModel.IProject,System.String,System.Predicate{JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId})">
            <summary>
            Returns custom project property requested by <see cref="T:JetBrains.ProjectModel.Properties.IProjectPropertiesRequest"/>
              only if it has THE SAME value in all active configurations matching corresponding TargetFramework
            Otherwise returns null
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.JavaScriptMetroStyle.JavaScriptMetroProjectPropertiesFactory.CreateJavaScriptMetroProjectProperties(System.Collections.Generic.ICollection{System.Guid},System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId},JetBrains.Metadata.Utils.TargetPlatformData)">
            <param name="flavours"> </param>
            <param name="targetPlatformData"> </param>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.Managed.IManagedProjectConfiguration.OutputType">
            <summary>
            Specifies the file format of the output file. 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.Managed.IManagedProjectConfiguration.StartupObject">
            <summary>
            Specifies the class or module that contains the Main method or Sub Main procedure.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.Managed.IManagedProjectConfiguration.OutputAssemblyName">
            <summary>
            Output assembly short name without extension
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.Managed.IManagedProjectConfiguration.OutputAssemblyExtension">
            <summary>
             Output assembly file extension
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.Managed.IManagedProjectConfiguration.HasRunCommand">
            <summary>
             .NET CORE CLI uses property 'RunCommand' to detect ability to run project in this target framework
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.Managed.ManagedProjectEx.IsManagedProjectProperties(JetBrains.ProjectModel.Properties.IProjectProperties)">
            <summary>
            Returns true is the ProjectProperties has managed build settings and managed configurations
            </summary>
            <param name="projectProperties"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.Managed.ManagedProjectEx.GetOutputAssemblyFileName(JetBrains.ProjectModel.Properties.IProjectProperties,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId,JetBrains.ProjectModel.IProject)">
            <summary>
            Output assembly short name with extension
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.Managed.ManagedProjectEx.GetOutputAssemblyFileName(System.String,System.String,JetBrains.ProjectModel.ProjectOutputType,System.String)">
            <summary>
            Output assembly short name with extension
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.ProjectCapabilities">
            <summary>
            Known capabilities. See https://github.com/Microsoft/VSProjectSystem/blob/master/doc/overview/project_capabilities.md
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Properties.VB.VBProjectPropertiesFactory.VBVs2017ProjectSystemTypeGuid">
            Visual Studio 2017 replaces project type guids in sln files.
            It does not affect ReSharper because a proper guid is returned by Visual Studio.
            See https://github.com/dotnet/project-system/issues/1821
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.ConfigurationTypes">
            <summary>
            Corresponds to <see cref="T:JetBrains.ProjectModel.Properties.VCXProj.ConfigurationTypes"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.CppExceptionHandling">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.cppExceptionHandling</code> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.PchOption">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.pchOption</code> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.RuntimeCheckOption">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.basicRuntimeCheckOption</code> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.RuntimeLibraryOption">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.runtimeLibraryOption</code> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.TargetMachine">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.machineTypeOption</code>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.AdditionalOptions">
            <summary>
            Options added to the end of the command line immediately before the file name(s)
            </summary>    
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.ForcedIncludeFiles">
            <summary>
            This option has the same effect as specifying the file with double quotation marks in an #include directive on the first line of every source file specified on the command line, in the CL environment variable, or in a command file. If you use multiple /FI options, files are included in the order they are processed by CL.
            http://msdn.microsoft.com/en-us/library/vstudio/8c5ztk84.aspx
            </summary>    
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.FullIncludePath">
            <summary>
            List of all directories included in the build; a concatenation of directories specified with /I and the directories specified in the VC++ Directories, Projects and Solutions, Options Dialog Box dialog box. Macros present in these directories will be evaluated as well.
            </summary>    
        </member>
        <member name="P:JetBrains.ProjectModel.Properties.VCXProj.VCCompilerToolProperties.PreprocessorDefinitions">
            <summary>
            Gets or sets one or more preprocessor defines. <see cref="P:Microsoft.VisualStudio.VCProjectEngine.VCCLCompilerTool.PreprocessorDefinitions"/> exposes the functionality of the compiler's /D (Preprocessor Definitions) option, the MIDL compiler's MIDL Property Pages: General option, and the Resource Compiler's Resources Property Pages option.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsManagedOptions">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.compileAsManagedOptions</code>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.VCXCompileAsOptions">
            <summary>
            Corresponds to <code>Microsoft.VisualStudio.VCProjectEngine.CompileAsOptions</code> 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Properties.VCXProj.VcxDebuggerProperties">
            <summary>
            Helper class to fetch debugger properties from Visual Studio and transfer them to backend
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Properties.WebSite.WebSiteProjectPropertiesFactory.CreateWebSiteProjectPropertiesForTests(System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId},JetBrains.ProjectModel.Properties.ProjectLanguage,System.Collections.Generic.ICollection{System.Guid})">
            <summary>
            Used in tests only!
            </summary>
            <param name="targetFrameworkIds"></param>
            <param name="defaultLanguage">Websites's language</param>
            <param name="flavours">Project flavours</param>
            <returns>Website properties</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.References.Impl.ProjectToPackageReferenceImpl.TargetFrameworkId">
            <summary>
            Null means all target framework id
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.References.Impl.SdkReferenceImpl.#ctor(JetBrains.ProjectModel.IProject,System.Collections.Generic.ICollection{JetBrains.ProjectModel.IProjectToAssemblyReference},JetBrains.ProjectModel.Update.SdkReferences.SdkReferenceInfo,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Don't use this ctor directly. Use SdkReferenceFactory instead!
            </summary>
            <param name="project"></param>
            <param name="nestedAssemblyReferences"></param>
            <param name="sdkReferenceInfo"></param>
            <param name="targetFrameworkId"></param>
        </member>
        <member name="M:JetBrains.ProjectModel.References.SdkModuleUtil.IsMetroStyleSdk(JetBrains.ProjectModel.ISdkModule)">
            <summary>
            does not passes for all 'windows' platform sdk modules. Supposingly will return true for all markup sdks like WinJS
            </summary>
            <param name="sdkModule"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ProjectModel.IProjectReferenceWithoutResolve">
            <summary>
            Marker interface, means this references should not be resolved via ModuleReferencesResolveStore
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectToModuleReference.AutoReferenced">
            <summary>
            This property set to TRUE when the references is added implicitly by Visual Studio
            see http://youtrack.jetbrains.com/issue/RSMSFT-37 for more details
            The only aspect affected by the property is whether the reference can be removed respecting NoStdLib property
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectToModuleReference.IsOutputAssembly">
            <summary>
            This property means the assembly reference was created as an output assembly to a project when
              project reference was not resolved.
            Is not used inside Visual Studio
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectToModuleReference.ReferenceOutputAssembly">
            <summary>
            This property set to FALSE when the project reference was created with the attribute
              ReferenceOutputAssembly = false
            In that case the reference is used to enforce build order but there should not be reference between PSI Modules
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectToModuleReference.Origin">
            <summary>
            Store information of what data the reference was created
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.IProjectToPackageReference.TargetFrameworkId">
            <summary>
            Framework id for DNX projects if depenendency is framework specific. 
            Otherwise always null.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Resolver.NugetPackageResolver.OnPackageRemoved">
            <summary>
            todo: better way to cache invalidation?
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.MSBuild.BuildTools.DotNetCoreSdkEnvironmentResolver.TryGetSdksDirectory(JetBrains.ProjectModel.BuildTools.IBuildTool)">
            <summary>
            Returns possible dotnet core sdks directory for the build tool
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.MSBuild.Extensibility.IMsBuildCustomPropertiesProvider">
            <summary>
            Provides custom msbuild properties for all msbuild runs
            Implementations should be ShellComponents or SolutionInstanceComponents
            </summary>
            <remarks>
            All clients should use <see cref="T:JetBrains.ProjectModel.MSBuild.Extensibility.MsBuildCustomPropertiesProvider"/> class to obtain all custom properties
              from providers and pass them into msbuild as they want
            e.g.  ProjectModel for loading projects
                  SolutionBuilder for build/deploy projects
            </remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.MSBuild.Extensibility.MsBuildCustomPropertiesProvider">
            <summary>
            Allows to modify project properties and targets before load
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.MSBuild.IMsBuildUserProfile">
            <summary>
            Contains options for ms build solution load customization
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.MSBuild.ProjectConfigurationUtil.RemoveSpaceFromAnyCpuPlatform(System.String)">
            <summary>
            Copy from MSBuild' sources.
            This is a hacky method to remove the space in the "Any CPU" platform in project configurations.
            The problem is that this platform is stored as "AnyCPU" in project files, but the project system
            reports it as "Any CPU" to the solution configuration manager. Because of that all solution configurations
            contain the version with a space in it, and when we try and give that name to actual projects, 
            they have no clue what we're talking about. We need to remove the space in project platforms so that
            the platform name matches the one used in projects.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Network.SolutionCertificateManager.AutoReject(JetBrains.Lifetimes.Lifetime,System.Uri)">
            <summary>
            While lifetime is alive, we should automatically reject all requests to the given uri.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Common.NuGetPathHelper.GetCorrectPath(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Returns project.assets.json-friendly string representation of VirtualFileSystemPath.
            Respects long paths and symlinks.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Common.NuGetRestoreCacheFileManager">
            <summary>
            Since NuGet.Client library 5.5.0 NuGet uses new cache filename - project.nuget.cache instead of old format (project).nuget.cache
            See https://github.com/NuGet/NuGet.Client/pull/3104
            
            In some cases, for example Rider restore and old NuGet restore / publish, restore might be performed as no-op
            because of other NuGet files exists. It leads to Rider publish operation fail.
            
            So, when restoring we are detecting old cache file and deleting it in order to Publish operation perform actual restore.   
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Common.NuGetRestoreOutputPathResolver">
             <summary>
             Since MSBuild 15.7.117 and NuGet 4.7.0.5062, MSBuildProjectExtensionsPath is used as the primary location
             of project.assets.json. However, in previous versions of MSBuild and NuGet, BaseIntermediateOutputPath was
             used.
            
             See also:
             https://github.com/NuGet/Home/issues/6186
             https://github.com/NuGet/NuGet.Client/pull/2121
             https://github.com/microsoft/msbuild/issues/1603
             https://github.com/microsoft/msbuild/pull/3059
             </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Common.NuGetRestoreOutputPathResolver.GetRestoreOutputSystemPath(JetBrains.ProjectModel.IProject)">
            <summary>
            Expected location of project.assets.json (typically, it's the <code>obj</code> folder).
            May return <see cref="!:VirtualFileSystemPath.GetEmptyPathFor(InteractionContext.SolutionContext)"/> when the output path is not defined.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Configs.NuGetConfigExtensions.GetFallbackPackagePathResolver(JetBrains.ProjectModel.NuGet.Configs.INuGetConfig)">
            <summary>
            Returns NuGetFallbackPackagePathResolver for valid NuGetConfig and null for invalid NuGetConfig.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Configs.NuGetConfigPathProperty">
            <summary>
            A property defined in NuGet.Config.
            Examples: globalPackagesFolder, repositoryPath.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Configs.NuGetConfigPathProperty.Raw">
            <summary>
            Original value defined in NuGet.Config
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Configs.NuGetConfigPathProperty.Effective">
            <summary>
            Effective value calculated based on NuGet.Config
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Configs.NuGetSmartConfig.Complete">
            <summary>
            Contains all parameters present in config file
            Intended to use when we need original content of all sections in config (i.e. UI)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Configs.NuGetSmartConfig.Valid">
            <summary>
            Contains only valid parameters from config file
            Intended to use when we need only verified content of config sections (i.e. NuGet operations)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolGlobalCache.GetToolPackageDirectoryPath(System.String,System.String)">
            <summary>
            {store_directory}/{toolName}/{version}
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolGlobalCache.GetToolLockFilePath(System.String,System.String)">
            <summary>
            {ToolPackageDirectoryPath}/project.assets.json
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.DotNetTools.DotNetToolGlobalCache.GetToolFolderPath(System.String,System.String)">
            <summary>
            {ToolPackageDirectoryPath}/{toolName}/{version}
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.DotNetTools.LockFileMatcher.MatchesFile(NuGet.ProjectModel.LockFileItem,System.String)">
            <summary>
            Check if LockFileItem matches the targetRelativeFilePath.
            The path in LockFileItem is in pattern tools/TFM/RID/my/tool.dll. Tools/TFM/RID is selected by NuGet.
            And there will be only one TFM/RID combination.
            When "my/tools.dll" part matches exactly with the targetRelativeFilePath, return true.
            </summary>
            <param name="lockFileItem">LockFileItem from asset.json restored from temp project</param>
            <param name="targetRelativeFilePath">file path relative to tools/TFM/RID</param>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.DotNetTools.LockFileMatcher.MatchesDirectoryPath(NuGet.ProjectModel.LockFileItem,System.String)">
            <summary>
            Check if LockFileItem is under targetRelativePath directory.
            The path in LockFileItem is in pattern tools/TFM/RID/my/tool.dll. Tools/TFM/RID is selected by NuGet.
            And there will be only one TFM/RID combination.
            When "my/folder/of/tool/tools.dll" part under targetRelativePath "my/folder/of" or "my/folder", return true.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Folders.INuGetAdditionalFolderProvider">
            <summary>
            For SDK-style projects, we should calculate a part of the <see cref="T:JetBrains.ProjectModel.NuGet.Configs.NuGetEffectiveConfig"/> with the help of
            evaluated MSBuild properties. Unfortunately, this mechanism is not supported for now.
            This interface is a workaround for the above problem: it allows speculative getting additional fallback folders
            without explicit evaluation of all SDK-style projects. 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Folders.INuGetAdditionalFolderProvider.GetAdditionalFallbackFolders">
             <summary>
             Additional fallback folders which we usually get via MSBuild.
            
             On Windows, it typically returns `C:\Program Files\dotnet\sdk\NuGetFallbackFolder\` (when exists).
             </summary>
             <returns></returns>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Folders.NuGetFolderManager.OnContentChanges">
            <summary>
            Grouping event about any changes inside packages folders.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogContext.NuGet">
            <summary>
            1. Mapped values from <see cref="T:NuGet.ProjectManagement.MessageLevel"/> (NuGet.ProjectManagement.MessageLevel)
            2. Messages from <see cref="T:NuGet.Common.ILogger"/> (NuGet.Common.ILogger).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogContext.Ide">
            <summary>
            Our custom messages
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogContext.Build">
            <summary>
            MSBuild
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogLevel.Debug">
            <summary>
            1. Mapped value for <see cref="F:NuGet.ProjectManagement.MessageLevel.Debug"/> (NuGet.ProjectManagement.MessageLevel.Debug).
            2. Messages from <see cref="M:NuGet.Common.ILogger.LogDebug(System.String)"/> (NuGet.Common.ILogger.LogDebug).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogLevel.Verbose">
            <summary>
            1. Messages from <see cref="M:NuGet.Common.ILogger.LogVerbose(System.String)"/> (NuGet.Common.ILogger.LogDebug).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogLevel.Information">
            <summary>
            1. Mapped value for <see cref="F:NuGet.ProjectManagement.MessageLevel.Info"/> (NuGet.ProjectManagement.MessageLevel.Info).
            2. Messages from <see cref="M:NuGet.Common.ILogger.LogInformation(System.String)"/> (NuGet.Common.ILogger.LogInformation).
            3. Mapped value of <see cref="F:JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationLevel.Info"/>.
            4. Messages from <see cref="M:NuGet.Common.ILogger.LogInformationSummary(System.String)"/> (NuGet.Common.ILogger.LogInformationSummary).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogLevel.Minimal">
            <summary>
            1. Messages from <see cref="M:NuGet.Common.ILogger.LogMinimal(System.String)"/> (NuGet.Common.ILogger.LogMinimal).
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogLevel.Warning">
            <summary>
            1. Mapped value for <see cref="F:NuGet.ProjectManagement.MessageLevel.Warning"/> (NuGet.ProjectManagement.MessageLevel.Warning).
            2. Messages from <see cref="M:NuGet.Common.ILogger.LogWarning(System.String)"/> (NuGet.Common.ILogger.LogWarning).
            3. Mapped value of <see cref="F:JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationLevel.Warning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetLogLevel.Error">
            <summary>
            1. Mapped value for <see cref="F:NuGet.ProjectManagement.MessageLevel.Error"/> (NuGet.ProjectManagement.MessageLevel.Error).
            2. Messages from <see cref="M:NuGet.ProjectManagement.INuGetProjectContext.ResolveFileConflict(System.String)"/> (NuGet.ProjectManagement.INuGetProjectContext.ResolveFileConflict).
            3. Messages from <see cref="M:NuGet.ProjectManagement.INuGetProjectContext.ReportError(System.String)"/> (NuGet.ProjectManagement.INuGetProjectContext.ReportError)
            4. Messages from <see cref="M:NuGet.Common.ILogger.LogError(System.String)"/> (NuGet.Common.ILogger.LogError).
            5. Mapped value of <see cref="F:JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationLevel.Error"/>.
            6. Mapped value of <see cref="F:JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationLevel.Exception"/>.
            7. Exception which were thrown by NuGet API.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationMode.Always">
            <summary>
            Notifications will always be shown.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationMode.ErrorOnly">
            <summary>
            Only Warning, Error, and Exception notification will be shown.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Logging.NuGetNotificationMode.Silent">
            <summary>
            Notification will not be shown.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Operations.NuGetLegacyRunningState.IsNugetRunning">
            <summary>
            True when NuGet is definitely operationg (between installing/ installed and uninstalling/ uninstalled)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Operations.NuGetOperationLevel.ProjectUpdating">
            <summary>
            Install, Uninstall, Restore, GenerateBindingRedirects
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Operations.NuGetOperationLevel.ProjectItemPropertiesUpdating">
            <summary>
            Disembowel LocalPackagesFolder
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Operations.NuGetOperationLevel.NuGetModelUpdating">
            <summary>
            Disembowel misc package folders
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Operations.NuGetOperationLevel.FileSystemUpdating">
            <summary>
            DeleteStalePackages, FolderAutoClear, FolderSizeCalc
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Operations.NuGetOperationLevel.None">
            <summary>
            NuGetOperator is not active
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Operations.NuGetPatchedInstallationCompatibility">
            <summary>
            This is a patched version of the original NuGet.PackageManagement.InstallationCompatibility class
              (NuGet.PackageManagement.dll, branch: release-4.3.0-rtm)
            
            Original version contains broken checks which doesn't allow to install "Microsoft.EntityFrameworkCore.Tools.DotNet"
            All patched lines (except C#7 compatibilities issues) are marked with "PATCHED" comment.
            
            Please, don't make any changes in this class or do it very carefully.
            
            See also:
             * https://youtrack.jetbrains.com/issue/RIDER-5421
             * https://github.com/NuGet/Home/issues/4190
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Operations.NuGetPatchedInstallationCompatibility.EnsurePackageCompatibilityAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.DownloadResourceResult,System.Threading.CancellationToken)">
            <summary>
            Asynchronously validates the compatibility of a single downloaded package.
            </summary>
            <param name="nuGetProject">The NuGet project. The type of the NuGet project determines the sorts or
            validations that are done.</param>
            <param name="packageIdentity">The identity of that package contained in the download result.</param>
            <param name="resourceResult">The downloaded package.</param>
            <param name="cancellationToken">A cancellation token.</param>.
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nuGetProject" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResult" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetNativePackageManager">
            <summary>
            In Rider, it uses NuGetOperator
            In VS, it uses VS API
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetPackageDeprecationMetadataHelper.GetPackageDeprecationMetadata(NuGet.Protocol.Core.Types.IPackageSearchMetadata)">
            <summary>
            Returns PackageDeprecationMetadata for the given IPackageSearchMetadata.
            Note that IPackageSearchMetadata should be obtained via PackageMetadataResource.
            If you use PackageSearchResource, this method returns null.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType">
            <summary>
            The different types of NuGet projects.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType.Unsupported">
            <summary>
            Used if the project does not support NuGet.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType.Unknown">
            <summary>
            Used if the <see cref="T:NuGet.ProjectManagement.NuGetProject"/> is not a recognized type.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType.PackagesConfig">
            <summary>
            Corresponds to <see cref="T:NuGet.ProjectManagement.MSBuildNuGetProject"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType.UwpProjectJson">
            <summary>
            Corresponds to <see cref="T:NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType.XProjProjectJson">
            <summary>
            Corresponds to <see cref="!:ProjectKNuGetProjectBase"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType.CpsBasedPackageRefs">
            <summary>
            Corresponds to MSBuildShellOutNuGetProject.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetProjectType.LegacyProjectSystemWithPackageRefs">
            <summary>
            It will be used for legacy project system with package references.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.PackageManagement.INuGetSolutionManagerEx">
            <summary>
            Interface for NuGetSolutionManager which doesn't contain any classes/interfaces from the NuGet API
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.PackageManagement.INuGetSolutionManagerEx.Invalidated">
            <summary>
            This signal is firing when the internal logic of IsValid/Create method for one of the PS providers is changing 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.PackageManagement.INuGetSolutionManagerEx.IsReady">
            <summary>
            This property is true when all of the registered INuGetProjectSystemProvider are ready 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.PackageManagement.INuGetSolutionManagerEx.IsSolutionBeingLoadedFromCache">
            <summary>
            If solution.IsBeingLoadedFromCache, we can't call GetAllProjects()
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.PackageManagement.NuGetSolutionManager.GetNuGetProjectSafeName(NuGet.ProjectManagement.NuGetProject)">
            <summary>
            Return short name if it's non-ambiguous.
            Return CustomUniqueName for projects that have ambigous names (such as same project name under different solution folder)
            Example: return Folder1/ProjectA if there are both ProjectA under Folder1 and Folder2
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Packaging.NuGetContentFileStorage">
            <summary>
            This component contains cache with lists of content files from NuGet packages for each project.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Packaging.NuGetInstalledPackageChecker.IsBusy">
            <summary>
            When IsBusy=true, we have some pending projects in NuGetPackageReferenceTracker and we can't guarantee that
            NuGetInstalledPackageChecker may return obsolete results because we don't know the actual list of package
            references.
            When IsBusy=false, the NuGet model is ready and NuGetInstalledPackageChecker returns valid results.  
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgHelper.FilterContentFiles(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Xplat version of NuGet.PackageExtensions.GetContentFiles(this IPackage package)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgHelper.ourPpExtension">
            <summary>
            https://docs.nuget.org/create/configuration-file-and-source-code-transformations#user-content-specifying-source-code-transformations
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgHelper.ParseFrameworkNameFromFilePathXplat(System.String,System.String@)">
            <summary>
            Xplat version of FrameworkNameUtility.ParseFrameworkNameFromFilePath(path, out effectivePath)
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Packaging.NuGetNupkgStorage">
            <summary>
            This component contains a cache with metadata for loaded packages.
            Right now we keep a list of all files for each package (classic packages only).
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageDependencyGroupLight">
            <summary>
            Light version of NuGet.Packaging.PackageDependencyGroup
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageDependencyLight">
            <summary>
            Light version of NuGet.Packaging.Core.PackageDependency
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Packaging.NuGetPackageReferenceTracker">
            <summary>
            NuGetPackageReferenceTracker provides information about installed NuGet packages.
            It works with classic and SDK-style projects.
            <remarks>
              In the case of an SDK-style project, it returns only root NuGet packages
                (which are defined via PackageReference tags in csproj).
              If you need all resolved NuGet dependencies (transitive closure),
                use <see cref="T:JetBrains.ProjectModel.NuGet.Packaging.NuGetLockFileTracker"/>.
            </remarks>
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetProjectContext.myLifetimedState">
            <summary>
            There is a memory leak in the native NuGet libraries that relates to the https request handling.
            This leak capture LoggerAdapter that reference INuGetProjectContext.
            As a result, we have a zombie solution.
            It's pretty hard to fix the original leak in the NuGet libraries, so we decided to workaround it with the help
            of a lifetime that clears the state on termination.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetProjectServicesBase">
            <summary>
            Null-object with no-op implementation of project services.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.ProjectManagement.NuGetSpecValidationUtilityV3.ValidateProjectSpec(NuGet.ProjectModel.PackageSpec)">
            <summary>
            Used for spec validation in .NET Core versions 3.1 and below
            Original: https://github.com/NuGet/NuGet.Client/blob/508808ef8ed761179d4c214551e9505d005e5aac/src/NuGet.Core/NuGet.Commands/RestoreCommand/Utility/SpecValidationUtility.cs
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.INuGetProjectSystemProvider.Invalidated">
            <summary>
            This signal is firing when the internal logic of IsValid/Create method is changing
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.ProjectManagement.ProjectSystems.INuGetProjectWithFloatVersions.GetResolvedInstalledPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            This method is useful when we work with float versions.
            For example, if we have PackageReference with version "12.0.*", GetInstalledPackagesAsync will always return
            it as a VersionRange [12.0.0,12.1.0) without actual information about resolved version.
            Meanwhile, GetResolvedInstalledPackagesAsync will return the actual resolved version (e.g., "12.0.3")
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.ProjectModel.NuGetGraphNode.Id">
            <summary>
            The ID of the package
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.ProjectModel.NuGetGraphNode.Version">
            <summary>
            Parsed version of the package
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.ProjectModel.NuGetGraphNode.Package">
            <summary>
            The id and the version of the package
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.ProjectModel.NuGetGraphNode.RootPackage">
            <summary>
            null - means package Root is not applicable (packages.config)
            true - dependency explicitly specified in PackageReference
            false - dependency from lockfile
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.ProjectModel.NuGetGraphNode.SDK">
            <summary>
            Whether this package is an SDK package
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.ProjectModel.NuGetImplicitPackageIdentity.Origins">
            <summary>
            Root dependencies that define this identity
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Restoring.INugetRestoreWaiter">
            <summary>
            It's only for manual testing.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Restoring.NuGetDependencyGraphSpecRequestProviderV3">
            <summary>
            Reimplemented due to SpecValidationUtility.ValidateDependencySpec usage in original class:
            https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Commands/RestoreCommand/RequestFactory/DependencyGraphSpecRequestProvider.cs
            Our changes - we removed additional package spec validation from GetRequestsFromItems method because we call it in our code before restore run operation
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Restoring.NuGetPackageReferenceRestoreResult.AlreadyRestored">
            <summary> There are no packages that should be restored </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Restoring.NuGetPackageReferenceRestoreResult.Complete">
            <summary> Some of the project packages were restored</summary>
        </member>
        <member name="F:JetBrains.ProjectModel.NuGet.Restoring.NuGetPackageReferenceRestoreResult.Error">
            <summary> NuGet API threw an exception during restore process</summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Searching.NuGetIconLoader">
             <summary>
             This component is responsible for caching icons of NuGet packages on disk.
            
             <remarks>
             In the future, we can do the following improvements:
             * Multithreaded icon downloading
             * Better request prioritization
             * Holding different icons for different package versions
             </remarks>
             </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Searching.NuGetIconLoader.CacheIcon(JetBrains.ProjectModel.NuGet.Configs.NuGetFeed,NuGet.Protocol.Core.Types.IPackageSearchMetadata)">
            <summary>
            Enqueue async icon caching for the given pair of package metadata and feed. 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Searching.NuGetIconLoader.ClearCachingQueue">
            <summary>
            Removes all the request in the caching queue
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Searching.NuGetIconLoader.GetCachedIconFilePath(JetBrains.ProjectModel.NuGet.Configs.NuGetFeed,System.String)">
            <summary>
            Returns a local FileSystemPath with an icon for the given package in the given feed.
            If there is no exiting cached icon, returns FileSystemPath.Empty.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Searching.NuGetIconLoader.GetCachedIconFilePath(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.NuGet.Configs.NuGetFeed},System.String)">
            <summary>
            Returns a local FileSystemPath with an icon for the given package in the given feed.
            If there are several icons in different feeds, it returns the first found icon.
            If there is no exiting cached icon, returns FileSystemPath.Empty.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Searching.NuGetIconLoader.Clear">
            <summary>
            Clears local cache folder of downloaded images on disk and all the cache codes in the db.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Settings.NuGetAirborneSettings">
            <summary>
            In-memory implementation of NuGet Native Settings
            Airborne because it doesn't have underlying file 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Settings.NuGetSettingsHelpers.GetSettingsFilesFullPath(System.String)">
            <remarks>
            Order is most significant (e.g. applied last) to least significant (applied first)
            ex:
            c:\someLocation\nuget.config
            c:\nuget.config
            </remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.NuGet.Settings.NuGetSettingsHelpers.GetSettingsFileNameFromDir(System.String)">
            <summary>
            Checks for each possible casing of nuget.config in the directory. The first match is
            returned. If there are no nuget.config files null is returned.
            </summary>
            <remarks>For windows <see cref="!:OrderedSettingsFileNames"/> contains a single casing since
            the file system is case insensitive.</remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.NuGet.Unsorted.RestoreSession.Progress">
            <summary>
            Progress 0..1.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Util.NuGetPackageSearchMetadataBuilder">
            <summary>
            Helper class allowing creation/alteration of immutable package metadata objects.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.NuGet.Util.NuGetPackageSearchMetadataExtensions">
            <summary>
            Shortcut methods to create altered metadata objects with new versions.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Persistence.IntSlots">
            <summary>
            Manages free slots that are ints ∈ [1,∞) that weren't returned before by <see cref="M:JetBrains.ProjectModel.Persistence.IntSlots.NextSlot"/> and don't belong to `taken` set from <see cref="M:JetBrains.ProjectModel.Persistence.IntSlots.#ctor(System.Collections.Generic.HashSet{System.Int32})"/>.  
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Persistence.IntSlots.#ctor(System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Creates slots
            </summary>
            <param name="taken">Set of ocupied slots, that musn't be returned by <see cref="M:JetBrains.ProjectModel.Persistence.IntSlots.NextSlot"/></param>
            <exception cref="T:System.ArgumentNullException">if `taken` is null</exception>
        </member>
        <member name="M:JetBrains.ProjectModel.Persistence.IntSlots.NextSlot">
            <summary>
             Returns int ∈ [1,∞) that wasn't returned before by this method and doesn't belong to `taken` set from <see cref="M:JetBrains.ProjectModel.Persistence.IntSlots.#ctor(System.Collections.Generic.HashSet{System.Int32})"/>.  
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Persistence.Marshallers.IProjectModelElementMarshaller">
            <summary>
            Class that implements <see cref="T:JetBrains.ProjectModel.IProjectModelElement"/> persistence into the caches.
            The <see cref="T:JetBrains.ProjectModel.IProjectModelElement"/> needs to be marked <code>"ProjectModelElementMarshallerAttribute"</code>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.CompilePlatform">
            <summary>
              Common information about compile-time target framework project information
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.CompilePlatform.TargetFrameworkId">
            <summary>
              Platform's target framework identifier
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.CompilePlatform.ReferenceAssembliesFolders">
            <summary>
              Reference assemblies folders. Assemblies located here are considered framework assemblies
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.CompilePlatform.FindAssemblyByName(System.String)">
            <summary>
            Looks for assemble with specified name in reference assemblies folders
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.IFrameworkLocationHelper">
            Not a component. Use <see cref="T:JetBrains.ProjectModel.Platforms.FrameworkLocationService"/> for injection.
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IFrameworkLocationHelper.GetReferenceAssembliesNetCoreFrameworkPath(System.Version)">
            <summary>
            Reference assembly path for .net core 4.5.X (used for windows 8 and windows 8.1 apps)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Platforms.PlatformManager.myCompilePlatformFoldersPrefixes">
            <summary>
            Platforms prefixes for compile platforms, used to calculate target framework id by assembly path
            Do not use runtime platforms as prefixes, because they do not have target frameworks
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.WellKnownTargetFrameworks">
            <summary>
            This class returns TargetFrameworkId collection which are exists without platforms and should be
              provided by platform manager
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformManager.ComputeShellCompilePlatforms">
            <summary>
            Calculates compile platforms ignoring settings for opened solution or projects
            Equivalent to GetAllRuntimePlatforms executed without a solution  
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformManager.IsPlatformFolder(JetBrains.Util.VirtualFileSystemPath,System.Boolean)">
            <summary>
            Returns true if specified folder path corresponds to any known platform
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformManager.IsPlatformAssembly(JetBrains.Util.VirtualFileSystemPath,System.Boolean)">
            <summary>
            Returns true if specified assembly path corresponds to any known platform
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.IPlatformManager.Invalidated">
            <summary>
            Fires every time platforms are going to be recalculated
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformManager.Invalidate">
            <summary>
            Call this method when something is changed in <see cref="T:JetBrains.ProjectModel.Platforms.FrameworkLocationService"/> or <see cref="T:JetBrains.ProjectModel.Platforms.ILivePlatformsProvider"/>
              so platforms list need to be rebuilt during the next platforms request
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformManager.InvalidateProjectPlatforms">
            <summary>
            Call this method when projects were reloaded
              so per-project platforms list need to be rebuilt during the next platforms request
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformManager.Dump(System.IO.TextWriter,JetBrains.ProjectModel.IProject)">
            <summary>
            Dumps current platforms for specified project, does not perform reloading
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformManager.Dump(System.IO.TextWriter)">
            <summary>
            Dumps current platforms, does not perform reloading
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.IPlatformsProvider.Priority">
            <summary>
            Provider priority - hightst = first
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.IPlatformsProvider.ImmutableAssembliesInFileSystem">
            <summary>
            If true assemblies in platforms provided by this provider will not be deleted, changed, etc. in the file system.
            Usually platforms have immutable assemblies (installed frameworks usually changed only between IDE restart)
            But should be false for platforms from temporary folders, like from NuGet
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.ILivePlatformsProvider.HasChanged">
            <summary>
              Fires when something was changed in IDE settings or environment so platforms should be recalculated
              during the next calculation
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPlatformsProvider`1.GetPlatforms(JetBrains.ProjectModel.Platforms.PlatformsContext)">
            <summary>
            Returns platform collection based on specified context
            Executing on any thread under ReadLock
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.ICompilePlatformProvider.DetectTargetFrameworkIdByReferences(JetBrains.Metadata.Utils.AssemblyNameInfo,System.Collections.Generic.IReadOnlyCollection{JetBrains.Metadata.Utils.AssemblyNameInfo},System.Collections.Generic.IReadOnlyCollection{JetBrains.ProjectModel.Platforms.CompilePlatform})">
            <summary>
            Tries to find the matching CompilePlatform and returns its TargetFrameworkId for specified
            mscorlib.dll and other references
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.IPerProjectCompilePlatformProvider">
            <summary>
            Per-project platform providers returns platforms specific for a project in the solution.
            They have to be able to return platforms BEFORE project model (IProject and friends) actualy will be built so
              these providers can not operate with IProject / IProjectToAssemblyReference objects.
            So implementation of these providers has to work in the moment then projects are already loaded
              but not transfered into R# model. 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Platforms.IPerProjectCompilePlatformProvider.GetPlatforms(JetBrains.ProjectModel.ISolution)">
            <summary>
            Returns platform collection for all known projects at the moment
            Executing on any thread under ReadLock
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.Providers.DotNetCorePlatformsProvider">
            <summary>
            Provides compile platforms from installed dotnet target packs and dotnet runtimes
            For compile platforms installed via nuget packages see <see cref="T:JetBrains.ProjectModel.Platforms.Providers.NuGetPlatformProvider"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.Providers.MicroFrameworkPlatformsProvider">
            <summary>
            .NET Micro Framework Interpreter platforms
            See https://github.com/NETMF/netmf-interpreter
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.Providers.NuGetPlatformProvider">
            <summary>
            Provides platforms from NuGet packages per project
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.Providers.NuGetPlatformProvider.ImmutableAssembliesInFileSystem">
            <summary>
            Assemblies in NuGet folders can be deleted and restored again
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.Providers.UwpPlatformsProvider">
            <summary>
            do not confuse with true modern .net core. this is windows 8 runtime platform used only for windows 8 and 8.1 apps.
            TODO: runtime platfoms? from C:\Program Files\WindowsApps
            TODO: .NET Core 5.0 legacy
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.RuntimePlatform">
            <summary>
              Common information about runtime target framework project information
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.RuntimePlatform.FrameworkIdentifier">
            <summary>
              Framework of the runtime platform
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.RuntimePlatform.RuntimeVersion">
            <summary>
              Semantic version for platform that might be different from target framework when pre-release version is installed.
              Typical usage is pre-released .NET Core App
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.RuntimePlatform.Kind">
            <summary>
              Kind of this runtime platform
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.RuntimePlatform.FrameworkSpecificRootFolders">
            <summary>
              Extras for <see cref="P:JetBrains.ProjectModel.Platforms.TargetPlatformBase.RootFolder" />
              In case of .NET framework 3.0
              - `RootFolder` points to 2.0 framework folder (C:\Windows\Microsoft.NET\Framework\v2.0.50727)
              - `FrameworkSpecificRootFolder` - would be extras comparing to 2.0 (C:\Windows\Microsoft.NET\Framework\v3.0)
              In case of .NET Core
              - `RootFolder` points to primary framework folder (C:\Program Files\dotnet\shared\Microsoft.NETCore.App\3.0.0)
              - `FrameworkSpecificRootFolder` -  would be additional core frameworks (C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App\3.0.0 or C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\3.0.0)
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Platforms.RuntimePlatformKind">
            <summary>
              Kind of runtime which allows to distinguish runtimes with the same target framework
              for example Mono and .NET Framework
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Platforms.RuntimePlatformKind.Net">
            <summary>
              .NET 5+
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Platforms.RuntimePlatformKind.NetFramework">
            <summary>
              .NET Framework 1.0 - 4.X
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Platforms.RuntimePlatformKind.Mono">
            <summary>
              Mono any version
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Platforms.RuntimePlatformKind.NetCore">
            <summary>
              .NET Core 1.0 - 3.X
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Platforms.RuntimePlatformKind.Other">
            <summary>
              Any other (mostly legacy) runtime
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Platforms.TargetPlatformBase.RootFolder">
            <summary>
              Installation folder of the platform
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectModelElementEnvoy.Text">
            <summary>
            Gets presentation text for project item, as was last generated via <see cref="M:JetBrains.ProjectModel.ProjectModelElementEnvoy.Present``1(JetBrains.Application.UI.Controls.TreeView.StructuredPresenter{``0,JetBrains.Application.UI.Controls.Utils.IPresentableItem},``0,JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.Application.UI.Controls.TreeView.PresentationState)"/>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectModelElementPresenterAttribute.#ctor(System.Double)">
            <summary>
            <paramref name="priority"/> defines the order of presenters. Presenters are checked in descending order.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectModelElementPresenterAttribute.Priority">
            <summary>
            Priority defines the order of presenters. Presenters are checked in descending order.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectModelIcons">
            <summary>
            Collection of standard icons
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectOutputType">
            <summary>
            Type of the output assembly according to C# compiler options
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.IsProjectFromUserView(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets whether this <paramref name="project"/> is a project from the user's perspective, eg a project node in the Solution Explorer.
            This excludes the solution folders and fake projects introduced by R# project model to emulate the website queer things.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.IsProjectFromUserView(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Gets whether this <paramref name="projectSearchDescriptor"/> is a project from the user's perspective, eg a project node in the Solution Explorer.
            This excludes the solution folders and fake projects introduced by R# project model to emulate the website queer things.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.GetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Looks up the project by its full path, which is either the project folder path or the project file path (not available for some project kinds). Throws if missing or ambiguous.
            </summary>
            <param name="solution">Owning solution.</param>
            <param name="path">Project location or project file location.</param>
            <returns>The project.</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectUtil.TryGetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Looks up the project by its full path, which is either the project folder path or the project file path (not available for some project kinds). <c>Null</c> if missing or ambiguous.
            </summary>
            <param name="solution">Owning solution.</param>
            <param name="path">Project location or project file location.</param>
            <returns>The project, or <c>Null</c>.</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.PropertiesExtender.IPropertiesExtenderProvider">
            <summary>
            Solution-level component that provides properties customizable in Properties tool window or via <see cref="T:JetBrains.ProjectModel.PropertiesExtender.EditProjectItemPropertiesAction"/>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.PropertiesExtender.IPropertiesExtenderProvider.CanExtend(JetBrains.ProjectModel.IProjectItem,JetBrains.ProjectModel.PropertiesExtender.PropertiesLocation)">
            <summary>
            Checks is provider is applicable to the <see cref="!:projectItem"/>
            </summary>
            <param name="projectItem">Project item to check.</param>
            <param name="location"></param>
            <returns>True if applicable, false otherwise</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.PropertiesExtender.IPropertiesExtenderProvider.GetPropertyDescriptors(JetBrains.ProjectModel.IProjectItem)">
            <summary>
            Property descriptors to be shown in the Properties toolwindow
            </summary>
            <param name="projectItem">Project item for which properties are return</param>
            <returns>Properties to show or empty enumerable</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IBackendProjectModelLocator">
            <summary>
            Component to find project model element by search descriptors
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.IBackendProjectModelLocator.TryFindProjectModelElements(JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor)">
            <summary>
            Searches for project model elements matching to <see cref="!:descriptor"/>
            </summary>
            <param name="descriptor">Project model element descriptor to search for</param>
            <returns>Collection of project model elements matching the <see cref="!:descriptor"/></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.IBackendProjectModelLocator.TryFindProject(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.ProjectSearchPreferences)">
            <summary>
            Searches for project matching to <see cref="!:descriptor"/>
            </summary>
            <param name="descriptor">Project descriptor to search for</param>
            <param name="preferences">Strategy of project selection</param>
            <returns>Found project or null</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.IBackendProjectModelLocator.TryFindProjectFiles(JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor)">
            <summary>
            Searches for project files matching the <see cref="!:descriptor"/>
            </summary>
            <param name="descriptor">Project file search descriptor</param>
            <returns>Collection of files matching the <see cref="!:descriptor"/></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.IBackendProjectModelLocator.TryFindProjectItems(JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor)">
            <summary>
            Searches for project items matching the <see cref="!:descriptor"/>
            </summary>
            <param name="descriptor">Project file or folder search descriptor</param>
            <returns>Collection of files or folders matching the <see cref="!:descriptor"/></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.BackendProjectModelLocatorEx.TryFindProjectFile(JetBrains.ProjectModel.Search.IBackendProjectModelLocator,JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor)">
            <summary>
            Selects the best file matching the <see cref="!:descriptor"/> 
            </summary>
            <param name="locator">Backend project model locator</param>
            <param name="descriptor">Project file search descriptor</param>
            <returns>Best project file matching <see cref="!:descriptor"/> or null</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.BackendProjectModelLocatorEx.TryFindProjectItem(JetBrains.ProjectModel.Search.IBackendProjectModelLocator,JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor)">
            <summary>
            Selects the best project item matching the <see cref="!:descriptor"/> 
            </summary>
            <param name="locator">Backend project model locator</param>
            <param name="descriptor">Project file or folder search descriptor</param>
            <returns>Best project file matching <see cref="!:descriptor"/> or any project folder null</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor">
            <summary>
            File or Folder search descriptor
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor.Location">
            <summary>
            Expected item path
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor.Name">
            <summary>
            Expected item Name
            </summary>
            <remarks>
            File link can have custom name
            </remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectFileOrFolderSearchDescriptor.ParentFolder">
            <summary>
            Parent folder of item
            </summary>
            <remarks>
            File link can be placed into other folder
            </remarks>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IProjectFileSearchDescriptor">
            <summary>
            File search descriptor. We may add later means to disambiguate the files
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Search.ProjectFileSearchPreferences.AS_REQUESTED">
            <summary>
            Prefers file from real project to the one from Misc Files project
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Search.ProjectFileSearchPreferences.NON_SHARED">
            <summary>
            Among all the files of the same location prefers the one from non-shared project. Used to select best file to open in the editor
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Search.ProjectFileSearchPreferences.EXACT_MATCH_FOR_REMOVE">
            <summary>
            Matching search descriptor as much as possible. Normally for further remove
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IProjectFolderSearchDescriptor">
            <summary>
            Folder search descriptor. We may add later means to disambiguate the files
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IProjectModelElementSearchDescriptor">
            <summary>
            Base interface for all project model element search descriptors.
            Used to find project model entities based of simple info fetched from front-end.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IProjectElementSearchDescriptor">
            <summary>
            Base interface for all object descriptors associated with a project
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectElementSearchDescriptor.OwnerProject">
            <summary>
            Owner project search descriptor
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IProjectItemSearchDescriptor">
            <summary>
            Base interface for all project items' search descriptors (project, folder, file)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Search.ProjectSearchPreferences.STRICT">
            <summary>
            Prefers project with maximum matched fields, with reject on each non-empty field mismatch  
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Search.ProjectSearchPreferences.REFERENCE">
            <summary>
            Generally as <see cref="F:JetBrains.ProjectModel.Search.ProjectSearchPreferences.STRICT"/> with exception for non-matched name in case of matched guid or project file location
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Search.IProjectSearchDescriptor">
            <summary>
            Data to search for project. All set data should match.
            When created from <see cref="T:JetBrains.ProjectModel.Update.IProjectDescriptor"/> not all the fields should be filled.
            I.e. <see cref="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.ProjectFileLocation"/> should remain empty to find moved projects.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.ProjectKind">
            <summary>
            Project kind to search for. Not used if <see cref="F:JetBrains.ProjectModel.ProjectKind.UNSUPPORTED"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.ProjectName">
            <summary>
            Project name to search for. Not used when null or empty
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.ProjectGuid">
            <summary>
            Project Guid to search for. Not used when is <see cref="F:System.Guid.Empty"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.ProjectPropertiesOwnerFactoryGuid">
            <summary>
            Guid of project properties owner factory. Not used when is <see cref="F:System.Guid.Empty"/>
            TODO: is it really necessary?
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.ProjectFileLocation">
            <summary>
            Path to project file. Not used when is <see cref="!:VirtualFileSystemPath.GetEmptyPathFor(InteractionContext.SolutionContext)"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.ProjectLocation">
            <summary>
            Project directory. Not used when is <see cref="!:VirtualFileSystemPath.GetEmptyPathFor(InteractionContext.SolutionContext)"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Search.IProjectSearchDescriptor.OutputPaths">
            <summary>
            Project output paths map. Matched project must have all of targetFrameworkId and output path pairs.
            Use <see cref="F:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId.Default"/> to match pairs with ANY TargetFrameworkId and specified output path.
            Not used when is null.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.ProjectReferenceSearchDescriptorEx.GetModuleReferencesSoft(JetBrains.ProjectModel.IProject,JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId)">
            <summary>
            Returns <paramref name="project"/> references by <paramref name="targetFrameworkId"/>,
            but if passed wrong <paramref name="targetFrameworkId"/> value and <paramref name="project"/> has the only item in <see cref="P:JetBrains.ProjectModel.IProject.TargetFrameworkIds"/>
            when proper <see cref="T:JetBrains.Util.Dotnet.TargetFrameworkIds.TargetFrameworkId"/> will be used
            </summary>
            <param name="project"></param>
            <param name="targetFrameworkId"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.ProjectLocatorBase`1.GetProjectMatchScore(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,`0,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.ProjectSearchPreferences)">
            <summary>
            Matches project agains search decriptor and calculates its match score. Negative score means does not match.
            </summary>
            <param name="projectDescriptor">Project descriptor to match</param>
            <param name="project">Project to match</param>
            <param name="searchDescriptor">Descriptor to check against</param>
            <param name="preferences">Strategy of project selection</param>
            <returns>Match score or -1 if does not match</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.ProjectSearchDescriptorMatcher.IsLikelyMatched(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.Util.ILogger)">
            <summary>
            Determines when project likely matched to search descriptor.
            </summary>
            <param name="projectDescriptor">Project descriptor to match</param>
            <param name="searchDescriptor">Descriptor to check against</param>
            <param name="logger">Logger for logging</param>
            <returns>true if project most likely match the search descriptor</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Search.ProjectSearchDescriptorMatcher.GetProjectMatchScore(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Search.ProjectSearchPreferences,JetBrains.Util.ILogger)">
            <summary>
            Matches project against search descriptor and calculates its match score. Negative score means does not match.
            </summary>
            <param name="projectDescriptor">Project descriptor to match</param>
            <param name="searchDescriptor">Descriptor to check against</param>
            <param name="preferences">Strategy of project selection</param>
            <param name="logger">Logger for logging</param>
            <returns>Match score or -1 if does not match</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.ProjectSyncSettings">
            <summary>
            Project sync settings as specified in settings
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Settings.ProjectSyncSettings.IsBackendCapableOfSync">
            <summary>
            Whether backend is capable of performing sync. Eventually this is true if solution file path is absolute
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Settings.ProjectSyncSettings.UseVisualStudioByDefault">
            <summary>
            Whether to use Visual Studio for every project if not overridden by <see cref="P:JetBrains.ProjectModel.Settings.ProjectSyncSettings.UseVisualStudioForProjects"/>
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Settings.ProjectSyncSettings.UseVisualStudioForProjects">
            <summary>
            Custom values for projects. Paths are absolute, the paths are to project files (or directory in case of a website)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Settings.ProjectSyncSettings.UnsupportedOnBackendProjectExtensions">
            <summary>
            Extensions with dot of projects unsupported on backend. I.e. .xproj
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Schema.BuildSettings">
            <summary>
            <para>Project Model :: Build.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Schema.HierarchySettings">
            <summary>
            <para>Project Model settings root.</para>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.IProjectSettingsDisabler">
            <summary>
              Allows to disable project settings (ProjectSettingsStorageComponent) on specific solution.
              Could be useful on solutions with ~2k projects to speed up solution loading.
              If there is no component which would disable project settings - then they will be enabled.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectModelSettingsStorageMountPointPriorityClasses">
            <summary>
            Takes the standard <see cref="T:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses"/> and details them for project model specific storages.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorage">
            <summary>
            Base for two per-project storages.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageComponent.AdviseProjectSettingChange(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action{JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageComponent.SettingsPerProject},System.Action{JetBrains.Lifetimes.Lifetime,JetBrains.ProjectModel.Settings.Storages.ProjectSettingsStorageComponent.SettingsPerProject})">
            <summary>
            Advises project setting changes
            </summary>
            <param name="lifetime">Lifetime of the subscription</param>
            <param name="settingsEntry">Settings entry which changes are observed</param>
            <param name="onProjectSettingsChanged">Handler to be called when project settings created or changed</param>
            <param name="lifetimeHandler">Optional handler to be called when project settings created to hook to its lifetime</param>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SettingsStorageProviderBaseInChildContainer">
            <summary>
            If we register a component in a child container, its exposed interfaces won't be available to the shell-level container. This class helps with solving the problem for project model containers by exposing the stuff on behalf of the <see cref="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageProvidersCollection"/> shell-level component.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsReadyForSolutionInstanceComponent">
            <summary>
            If you want to use solution settings in SolutionInstanceComponent you should reference this component for ensure solution settings load.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageBase">
            <summary>
            Base for two per-solution storages.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStoragePersonal">
            <summary>
            Per-solution storage excluded from SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Storages.SolutionSettingsStorageShared">
            <summary>
            Per-solution storage to be checked in to SCC.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Settings.Store.SolutionSettings">
            <summary>
            Helpers for working with solution-specific settings layers.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.BindForWritingToSolutionPersonal">
            <summary>
              <para>Binds <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStore" /> to the solution context so that writes were SmartSaved to the Solution User layer.</para>
              <para>SmartSave behavior here means, as usual, that the change gets written to as common (wide) layer as possible (but in this case no more common than solution-personal), and all the less common (narrower) layers in the filtered set (in case of solution-personal, it's the narrowest per-solution already I think) get cleared of conflicting values which might change the reading in this context.</para>
              <para>The difference from the regular SmartSave writes is that here it never goes writing wider than solution-personal (ie to Global).</para>
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.BindForWritingToSolutionShared">
            <summary>
              <para>Binds <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStore" /> to the solution context so that writes were SmartSaved to the Solution Shared layer.</para>
              <para>SmartSave behavior here means, as usual, that the change gets written to as common (wide) layer as possible (but in this case no more common than solution-shared), and all the less common (narrower) layers in the filtered set (solution-personals and its injecteds in this case) get cleared of conflicting values which might change the reading in this context.</para>
              <para>The difference from the regular SmartSave writes is that here it never goes writing wider than solution (ie to Global).</para>
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.SolutionPersonalLayerId">
            <summary>
              <para>Identifies the Solution-Personal <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
              <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers" /> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Settings.Store.SolutionSettings.SolutionSharedLayerId">
            <summary>
              <para>Identifies the Solution-Shared <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
              <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers" /> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.SolutionEx.GetLifetime(JetBrains.ProjectModel.ISolution)">
            <summary>
            Obsolete method that returns <see cref="P:JetBrains.ProjectModel.SolutionLifetimes.MaximumLifetime"/> associated with solution.
            Use <see cref="M:JetBrains.ProjectModel.SolutionEx.GetSolutionLifetimes(JetBrains.ProjectModel.ISolution)"/> and select the lifetime you need
            </summary>
            <param name="solution">Solution in question</param>
            <returns>Maximum lifetime associated with solution</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.SolutionEx.GetSolutionLifetimes(JetBrains.ProjectModel.ISolution)">
            <summary>
            Returns lifetimes associated with solution
            </summary>
            <param name="solution">Solution in question</param>
            <returns>Lifetimes associated with solution</returns>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionFileLocationLive">
            <summary>
            Tracks location of the solution's project file.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionFileLocationLive.SolutionFileLocation">
            <summary>
            Gets the location of the project file of the owning solution (if any).
            In most cases <see cref="F:JetBrains.ProjectModel.SolutionFileLocationLive.SolutionDirectory"/> should be used as this one might be empty (i.e. in Open Folder scenario)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionFileLocationLive.SolutionDirectory">
            <summary>
            Gets the directory the owning solution (if any).
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionFileParser.ISlnFile">
            <summary>
            Parsed content of an .sln file.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject">
            <summary>
            Project as it was parsed in the solution file.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject.myProjectLocation">
            <summary>
            Project URI as described in solution file...
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject.SolutionFilePath">
            <summary>
            Path to owner solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.SolutionFileParser.SlnFileProject.GetLocation">
            <summary>
            Project home directory for Web sites. Project file location for other project types.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionStructure.EnvironmentVariablesExpander">
            <summary>
            Expand all environment variables in a requested string
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ProjectConfigurationAndPlatform">
            <summary>
            Store configuration and platform for a project
            </summary>
            <remarks>
            Configuration and Platform can be written in a different way in project files and solution files ('Any CPU' vs 'AnyCPU')
              that's why we store configuration and platform in PROJECT style and provide and API to get both styles
            </remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ProjectConfigurationAndPlatform.ConfigurationForSolution">
            <summary>
            Configuration in 'solution file' style
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionStructure.SolutionConfigurations.ProjectConfigurationAndPlatform.PlatformForSolution">
            <summary>
            Platform in 'solution file' style
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionStructure.SolutionDefinitions.RegularProjectDefinition.IsDirectoryPath">
            <summary>
            Indicates the project location points to a directory
            This is indicated by trailing separator in the PATH property
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.SolutionWatchdog.ISolutionEventsTracker.AfterCloseSolution">
            <summary>
            Fired when solution is closed
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Standalone.IProjectImporter.ImportSolution(JetBrains.ProjectModel.Impl.SolutionElement,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Imports all projects from <see cref="!:solutionFilePath"/> into <see cref="!:solution"/>
            </summary>
            <param name="solution">Existing solution element. It may be already open or just created</param>
            <param name="solutionFilePath">Path to .sln file to import projects from</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor.Guid">
            <summary>
            Guid as specified in project file (or solution file in case of a website)
            Normally, all projects in solution have different GUIDs but if .csproj file is copy-pasted with only name changed,
            VS will create hierarchy items with equal GUIDs and will create different GUIDs only later while saving the solution
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor.ProjectFilePath">
            <summary>
            Path to project file. May be empty if there's no project file (Misc files, Solution project, Solution folders, Websites)
            <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> property contains project location. Location of a project. 
            If project file exists, <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> must be a folder of <see cref="P:JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor.ProjectFilePath"/>
            </summary>IP
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor.ParentProjectPointer">
            <summary>
            Pointer to a parent project in case of a project nested to a solution folder. Maybe we get rid of the thingy in case we have an assumption, 
            that nested hierarchy element never appears prior to its parent.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor.ProjectProperties">
            <summary>
            Project properties that define project's treatment (Solution folder/ C# project/ Website etc)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor.SetParentProjectPointer(JetBrains.ProjectModel.Search.IProjectSearchDescriptor)">
            <summary>
            Allows to set parent project
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.ProjectDescriptorExtensions.GetSingleTargetFrameworkId(JetBrains.ProjectModel.Update.IProjectPropertiesDescriptor)">
            <summary>
            Returns the only TargetFrameworkId defined in project. Fails if there are multiple
            </summary>
            <param name="projectDescriptor">Project to fetch TargetFrameworkId from</param>
            <returns>The only TargetFrameworkId in the project</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Name">
            <summary>
            Name of the project file, can be filled for link with custom name. If null then Location.Name will be used.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Location">
            <summary>
            Path to the project file.
            </summary>
            <remarks>
            Project file is link if its name does not match to location's name or directory does not match to the parent folder location.
            </remarks>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Properties">
            <summary>
            File properties.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.Origin">
            <summary>
            Store information of what data the project item was created
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFileDescriptor.IsFileBeingEdited">
            <summary>
            Whether the file is open in the editor and modified. 
            Necessary to specify correct file timestamp
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Name">
            <summary>
            For regular folders Name equals to <see cref="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Location"/>.Name
            If the folder is virtual, Name may differ
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Location">
            <summary>
            Folder path.
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.Items">
            <summary>
            Folder content
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.IsHidden">
            <summary>
            There're hidden folders in VS Hierarchy. 
            i.e. C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files\kenticocms\cf18e726\9ae5a8e5\Sources_App_Code
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.IsAppDesigner">
            <summary>
            Means this folder is supposed to be an application designer folder
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectFolderDescriptor.AllowsNonExistence">
            <summary>
            Means that a folder can absent in file system (can be a virtual folder)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectModelUpdater.IsIdle">
            <summary>
            True means no tasks queued or running.
            Will be changed on UI thread
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateOrCreateProject(JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.ProjectModel.Update.UpdateFlags)">
            <summary>
            Synchronously updates existing project or creates a new one. 
            Requires UI thread, will take write lock if and only if the project needs to be updated. 
            Consider using <see cref="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateOrCreateProjectAsync(JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.ProjectModel.Update.UpdateFlags)"/> if possible. 
            </summary>
            <param name="projectDescriptor">Desired state of the project</param>
            <param name="flags">Update flags such as whether to update project structure, send ProjectModelChange etc.</param>
            <returns>Project (updated or created) that matches descriptor</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateOrCreateProjectAsync(JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.ProjectModel.Update.UpdateFlags)">
            <summary>
            Asynchronously updates existing project or creates a new one. It will run a task in background to check whether any change is to be made and if change is required it will continue on the UI thread under write lock. 
            </summary>
            <param name="projectDescriptor">Desired state of the project</param>
            <param name="flags">Update flags such as whether to update project structure, send ProjectModelChange etc.</param>
            <returns>Task with changed or created project. Will continue on random thread without any lock. Don't forget to take read lock and check the returned project for validity</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.FindProjectReference(JetBrains.ProjectModel.Search.IProjectSearchDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceDescriptor)">
            <summary>
            Searches for project reference corresponding to project search and project reference descriptor. Requires read lock. 
            </summary>
            <param name="projectSearchDescriptor">Project search descriptor</param>
            <param name="referenceDescriptor">Reference descriptor</param>
            <returns>Found reference or null</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateProjectReferences(System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}}}},System.Boolean)">
            <summary>
            Synchronously updates project references. 
            Requires UI thread, will take write lock if and only if the project needs to be updated. 
            Consider using <see cref="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateProjectReferencesAsync(System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}}}},System.Boolean)"/> if possible. 
            </summary>
            <param name="descriptors">List of project search descriptors with corresponding reference descriptor</param>
            <param name="notifyChangeManager">Whether change manager needs to be notified</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.IProjectModelUpdater.UpdateProjectReferencesAsync(System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}}}},System.Boolean)">
            <summary>
            Asynchronously updates project references for several projects.
            </summary>
            <param name="descriptors">List of project search descriptors with corresponding reference descriptor</param>
            <param name="notifyChangeManager">Whether change manager needs to be notified</param>
            <returns>Task that completes when references are updated</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.ProjectModelUpdaterEx.UpdateProjectReferences(JetBrains.ProjectModel.Update.IProjectModelUpdater,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}},System.Boolean)">
            <summary>
            Synchronously updates project references. 
            Requires UI thread, will take write lock if and only if the project needs to be updated. 
            Consider using <see cref="M:JetBrains.ProjectModel.Update.ProjectModelUpdaterEx.UpdateProjectReferencesAsync(JetBrains.ProjectModel.Update.IProjectModelUpdater,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}},System.Boolean)"/> if possible. 
            </summary>
            <param name="updater">Project model updater that will perform the operation</param> 
            <param name="projectSearchDescriptor">Project descriptor</param>
            <param name="referenceDescriptors">References descriptors</param>
            <param name="notifyChangeManager">Whether change manager needs to be notified</param>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.ProjectModelUpdaterEx.UpdateProjectReferencesAsync(JetBrains.ProjectModel.Update.IProjectModelUpdater,JetBrains.ProjectModel.Search.IProjectSearchDescriptor,System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}},System.Boolean)">
            <summary>
            Asynchronously updates project references.
            </summary>
            <param name="updater">Project model updater that will perform the operation</param>
            <param name="projectSearchDescriptor">Project descriptor</param>
            <param name="referenceDescriptors">References descriptors</param>
            <param name="notifyChangeManager">Whether change manager needs to be notified</param>
            <returns>Task that completes when references are updated</returns>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectReferenceProperties.Origin">
            <summary>
            Store information of what data the reference was created
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectReferenceProperties.AutoReferenced">
            <summary>
            This property set to TRUE when the references is added implicitely by Visual Studio
            see http://youtrack.jetbrains.com/issue/RSMSFT-37 for more details
            The only aspect affected by the property is whether the reference can be removed respecting NoStdLib property
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectReferenceProperties.IsOutputAssembly">
            <summary>
            This property means the assembly reference was created as an output assembly to a project when 
              project reference was not resolved. 
            Is not used inside Vistual Studio
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.IProjectReferenceProperties.ReferenceOutputAssembly">
            <summary>
            This property set to FALSE when the project reference was created with the attribute
              ReferenceOutputAssembly = false
            In that case the reference is used to enforce build order but there should not be reference between PSI Modules
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Update.ProjectModelNeedsToBeChangedException">
            <summary>
            Fired when project model update is performed in read-only mode (the first part of async methods of <see cref="T:JetBrains.ProjectModel.Update.IProjectModelUpdater"/>) 
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.Update.ProjectModelUpdater.PreserveProjectElementOrigin">
            <summary>
            Whether to update files and references origins. 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.ProjectModelUpdater.UpdateReferenceProperties(JetBrains.ProjectModel.Update.LateWriteLockCookie,JetBrains.ProjectModel.IProjectToModuleReference,JetBrains.ProjectModel.Update.IProjectReferenceProperties)">
            <summary>
            Updates reference properties to the provided value, takes write lock if necessary. Return true if anything changed.
            </summary>
            <param name="lateWriteLockCookie">Cookie to acquire write locks</param>
            <param name="reference">Reference to update properties of</param>
            <param name="properties">Expected properties</param>
            <returns>True if anything changed</returns>
        </member>
        <member name="M:JetBrains.ProjectModel.Update.ProjectToAssemblyReferenceDescriptorEx.TryFindAssemblyReference(JetBrains.ProjectModel.IProject,JetBrains.ProjectModel.Update.IProjectToAssemblyReferenceDescriptor)">
            <summary>
            Try to find resolved or unresolved assembly reference 
            </summary>
            <param name="project">Project to search in</param>
            <param name="descriptor">Assembly reference descriptor</param>
            <returns><see cref="T:JetBrains.ProjectModel.IProjectToAssemblyReference"/> or <see cref="T:JetBrains.ProjectModel.IProjectToUnresolvedAssemblyReference"/> instance, or null</returns>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_UPDATE_PROJECT_PROPERTIES">
            <summary>
            Update project properties
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_CREATE_MISSING_ITEMS">
            <summary>
            Creates project and missing items, does not remove anything
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDANT_FILES_AND_FOLDERS">
            <summary>
            When project is being synchronized files and folders became redundant are removed. Nested projects are skipped.
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDANT_NESTED_PROJECTS">
            <summary>
            When project is being synchronized, nested projects that became redundant are removed
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.F_NOTIFY_CHANGE_MANGER">
            <summary>
            Change manager event is fired if the flag is on
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.CREATE_MISSING_ITEMS">
            <summary>
            Creates project and listed items only
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.ASL_STARTUP_SYNC">
            <summary>
            ASL startup synchronization. important not to turn on <see cref="F:JetBrains.ProjectModel.Update.UpdateFlags.F_REMOVE_REDUNDANT_NESTED_PROJECTS" /> because there are no loaded projects, 
            that would be removed otherwise
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.FULL_SYNC">
            <summary>
            Full project sync. Will remove nested projects, files and folders that became redundant
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.Update.UpdateFlags.FULL_SYNC_NOTIFY_CHANGE_MANAGER">
            <summary>
            Full sync with change manager notification
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.WellKnownFoldersTracker">
            <summary>
            Advices FileSystemTracker on some well known folders in order to merge subsequent FileSystemTracker jobs
            </summary>
        </member>
    </members>
</doc>
