<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.Shell</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Application.BuildScript.Application.ApplicationPackageArtifact">
            <summary>
            Defines the application package in the JetMetadata of a Nuget package.
            Companion artifacts: <see cref="T:JetBrains.Application.BuildScript.Application.ApplicationPackageRuntimeOnlyReferences"/>, <see cref="T:JetBrains.Application.BuildScript.Application.ApplicationPackageIsCompileTimeOnly"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.ApplicationPackageIsCompileTimeOnly">
            <summary>
            A companion for <see cref="T:JetBrains.Application.BuildScript.Application.ApplicationPackageArtifact" />, gives extra info on whether the package itself should be considered a compile-time-only package, and not used at runtime.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.ApplicationPackageIsCompileTimeOnly.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.ApplicationPackageIsCompileTimeOnly.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.ApplicationPackageIsCompileTimeOnly.JetBrains#Util#Storage#StructuredStorage#IStructuredStorageSerializable#GetObjectData(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.ApplicationPackageReferenceEx.GetRuntimeIdsFromMetadata(JetBrains.Application.BuildScript.Application.ApplicationPackageReference,JetBrains.Build.Serialization.SerializedValuesResolver)">
            <summary>
              Whether this subplatform reference should be used only on these runtimes, or <c>NULL</c> if everywhere.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.ApplicationPackageRuntimeOnlyReferences">
            <summary>
            A companion for <see cref="T:JetBrains.Application.BuildScript.Application.ApplicationPackageArtifact"/>, gives extra info about which references are runtime-only in it. A possible candidate for merging into the apppackage itself.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.BuildCommandLineSwitchNames">
            <summary>
            Names for build runner related command line switches.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Catalogs.CalculateModuleZoneTraitsForPartCatalogTables">
            <summary>
            Module zones with which a certain type is marked.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.CalculateModuleZoneTraitsForPartCatalogTables.TraitNamespace">
            <summary>
            Namespace for all module zone based traits.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.Catalogs.CalculateModuleZoneTraitsForPartCatalogTables.ModuleZoneTraitNameForIZone">
            <summary>
            <see cref="M:JetBrains.Application.BuildScript.Application.Catalogs.CalculateModuleZoneTraitsForPartCatalogTables.GetModuleZoneTraitName(JetBrains.Application.BuildScript.Application.Zones.ZonePart)" /> for <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IZone" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogs">
            <summary>
            Factory methods for standard catalogs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogs.CreateWithMetadataReader(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Metadata.Utils.AssemblyNameInfo},JetBrains.Application.Bindings.IAssemblyMasterBinder,JetBrains.Util.ILogger)">
            <summary>
            Loads assembly files from streams with our fast metadata reader.
            </summary>
            <param name="lifetime">Holds the view to the part catalog.</param>
            <param name="assemblies">The list of assembly names for assemblies which should be included with the catalog (and scanned for types).</param>
            <param name="masterbinder">Knows how to bind assembly names for reading, including the listed names and their references.</param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogs.CreateWithMetadataReaderFromAssemblyFiles(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath},System.Nullable{JetBrains.Metadata.Reader.API.DotNetFrameworkCurrentRuntimeAssemblyResolver.RuntimeAssemblySources},System.Collections.Generic.IEnumerable{JetBrains.Util.FileSystemPath},JetBrains.Util.ILogger)">
            <summary>
            Loads assembly files from disk with our fast metadata reader.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogs.CreateWithMetadataReaderFromAssemblyFiles(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.ICollection{JetBrains.Metadata.Utils.AssemblyNameAndLocation},System.Nullable{JetBrains.Metadata.Reader.API.DotNetFrameworkCurrentRuntimeAssemblyResolver.RuntimeAssemblySources},System.Collections.Generic.IEnumerable{JetBrains.Metadata.Utils.AssemblyNameAndLocation},JetBrains.Util.ILogger)">
            <summary>
            Loads assembly files from disk with our fast metadata reader.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogs.CreateWithMetadataReaderRaw(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Metadata.Utils.AssemblyNameInfo},JetBrains.Application.Bindings.IAssemblyMasterBinder,JetBrains.Util.ILogger)">
            <summary>
            Loads assembly files from streams with our fast metadata reader.
            </summary>
            <param name="lifetime">Holds the view to the part catalog.</param>
            <param name="assemblies">The list of assembly names for assemblies which should be included with the catalog (and scanned for types).</param>
            <param name="masterbinder">Knows how to bind assembly names for reading, including the listed names and their references.</param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.GetOrCreate(JetBrains.Application.Catalogs.PartCatalog)">
            <summary>
            Gets the zone mapping for a catalog.
            Reads a cached object, or creates a new one if missing yet.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.GetPartZones(JetBrains.Application.Catalogs.PartCatalogType)">
            <summary>
            For a type, gets either the list of module zones required for it (might be empty), or <c>NULL</c> if there're no <see cref="T:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarker" /> wherever in its hierarchy, which makes it ineligible for instantiation.
            For bulk calls which involves getting the transitively closed zones list, consider <see cref="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.GetPartZonesTransitivelyClosed(JetBrains.Application.Catalogs.PartCatalogType)" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.GetPartZonesTransitivelyClosed(JetBrains.Application.Catalogs.PartCatalogType)">
            <summary>
            For a type, gets either the list of module zones required for it (might be empty), or <c>NULL</c> if there're no <see cref="T:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarker" /> wherever in its hierarchy, which makes it ineligible for instantiation.
            Effectively operates the transitively closed zones list, but might take some time on the first call.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.IsPartInZones(JetBrains.Application.Catalogs.PartCatalogType,System.Collections.Generic.JetHashSet{JetBrains.Application.BuildScript.Application.Zones.ZonePart},JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.CachedPartsPerZone)">
            <summary>
            Gets whether all zones marked over the given <paramref name="part" /> are among the <paramref name="activeModuleZoneValues" />.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData">
            <summary>
            Declared zones within a single assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.myDistinctNodesTransitiveZoneList">
            <summary>
            Lazy-calculated mapping of unique transitively-closed zone lists for trie nodes, only the most common node with the same zone set is mentioned, its same-list children assumed but not added.
            The keys are all strings to which new zoning requirements are attached (either namespaces or type names). If a namespace is zoned, it will be listed here, but not its child namespaces or types, they'd be listed only if they got new zones attached. The list is sorted ordinally by these strings.
            The values are the transitively-closed lists of zones attached (this includes all zones propagated from parent namespaces and all base/required zones of those zones). The zones array is sorted ordinally by zone part type full names.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.myMapFqnToZones">
            <summary>
            The trie path is the class fullname. There are nodes for classes and namespaces.
            Each node might have a list of zones applied to it.
            For a class, its effective zone list is the union of all lists on its node and its ancestors up to the root.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.EnumerateZoneMarkers">
            <summary>
            Enumerates all zone markers in this assembly, class or namespace.
            </summary>
            <remarks>Currently, the zone marker kind is not tracked and it not returned.</remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.GetNameZones(JetBrains.Util.dataStructures.Sources.StringSource)">
            <summary>
            For a full name of a type, gets either the list of module zones required for it (might be empty), or <c>NULL</c> if there're no <see cref="T:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarker" /> wherever in its hierarchy, which makes it ineligible for instantiation.
            This list includes all zones required by parent names of this name (e.g. outer namespaces).
            This list might not include base classes of the required zones, even though they are also required, because it is enough to require the derived zone.
            </summary>
            <seealso cref="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.GetNameZonesTransitivelyClosed(JetBrains.Util.dataStructures.Sources.StringSource)">An optimized version for bulk-querying transitively-closed zones lists on types.</seealso>
            <returns>Zones, together with the prefixes of the <paramref name="fullname" /> at which the specific zone is applied. No deduplication, no transitive closing.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.GetNameZonesTransitivelyClosed(JetBrains.Util.dataStructures.Sources.StringSource)">
            <summary>
            For a full name of a type, gets either the list of module zones required for it (might be empty), or <c>NULL</c> if there're no <see cref="T:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarker" /> wherever in its hierarchy, which makes it ineligible for instantiation.
            This list includes all zones required by parent names of this name (e.g. outer namespaces).
            This list includes all base classes of the required zones.
            This list is sorted ordinally by the zone name.
            Has a noticeable first-call cost; after that, is very fast.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.AddPartZones(JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Util.QualifiedNamesTrie{JetBrains.Application.BuildScript.Application.Zones.ZonePart[]},JetBrains.Util.ILogger)">
            <summary>
              <para>Looks if the class has the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute" />, which means the specific class, or the whole namespace is marked as belonging to that zone. See attr doc for details.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.ZoneMarkerGetLocallyRequiredZones(JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Catalogs.PartCatalogAttribute},JetBrains.Util.ILogger)">
            <summary>
            For a class which has a <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute" /> or similar semantic, collects all of the zones required on this class.
            This includes <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute" /> parameters and base <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IRequire`1" /> type specializations.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.TrieNodeAndZones.IsWithNewZones">
            <summary>
            If this node zone list differs from the parent's zone list, ie new zones are added by this level.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarker.FullName">
            <summary>
            A class fully-qualified name, for a class zone marker.
            A namespace name, for a namespace zone marker.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarker.Zone">
            <summary>
            The zone applied by the zone marker.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarkerAllZones.FullName">
            <summary>
            A class fully-qualified name, for a class zone marker.
            A namespace name, for a namespace zone marker.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarkerAllZones.Kind">
            <summary>
            The kind, if known.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarkerAllZones.Zones">
            <summary>
            The zones applied by the zone marker.
            Empty means it just marks as zone-eligible without requiring any zones.
            A NULL means the structure has not been initialized.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarkerAllZones.ZoneMarkerKind.Undefined">
            <summary>
            The struct has not been defined.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarkerAllZones.ZoneMarkerKind.Unknown">
            <summary>
            Kind of the marker is not known here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarkerAllZones.ZoneMarkerKind.Class">
            <summary>
            A class marker.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.ZoneMarkerAllZones.ZoneMarkerKind.Namespace">
            <summary>
            A namespace marker.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.CompanyGlobalHostFolderLocations">
            <summary>
            <para>This class gives standard folder locations for apps running in hosts.</para>
            <para>They define if they should be shared between major product versions or be per-wave, and whether they should be shared between different hosts (that's different installations of independent products, not the products themselves, because they might all be running within Visual Studio).</para>
            <para>If you need folders for static non-shell-aware data, like in Utils, the compatible folder locations are in <see cref="T:JetBrains.Util.StandardFolderLocationsStatic"/>.</para>
            <para>Guaranteed to return the same path in all JetBrains products.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.CoreImages">
            <summary>
            Core images to be used for branding of supplementary tools an technical hosts which do not have their own branded images supplied.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Eula.LicenseAgreementArtifact.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.HostFolderLocations">
            <summary>
            <para>This class gives standard folder locations for apps running in hosts.</para>
            <para>They define if they should be shared between major product versions or be per-wave, and whether they should be shared between different hosts (that's different installations of independent products, not the products themselves, because they might all be running within Visual Studio).</para>
            <para>If you need folders for static non-shell-aware data, like in Utils, the compatible folder locations are in <see cref="T:JetBrains.Util.StandardFolderLocationsStatic"/>.</para>
            <para>Note that base path may vary in different products. I.e. Rider can override base path for TempFolder and LocalAppData.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.IApplicationPackage">
            <summary>
            One application package (subplatform, plugin, etc).
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BestBefore">
            <summary>
            Gets the expiry date.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BirthDate">
            <summary>
            The birth date of the package. Used for the lower copyright year and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BuiltOn">
            <summary>
            Gets the date and time when the current package was built.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.CompanyNameHuman">
            <summary>
              <para>Name of the company which has produced this unit.</para>
              <para>As plugins are becoming first-class packages in the app, not all the packages will be produced by JetBrains.</para>
              <para>This is the human-readable version, without "Inc" or "s.r.o." or else.</para>
            </summary>
            <seealso cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.CompanyNameLegal" />
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.CompanyNameLegal">
            <summary>
              <para>Name of the company which has produced this unit.</para>
              <para>As plugins are becoming first-class packages in the app, not all the packages will be produced by JetBrains.</para>
              <para>This is the full legal version with all the "Inc" and "s.r.o." and else.</para>
            </summary>
            <code>IApplicationHost.CompanyNameHuman</code>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.Files">
            <summary>
            The list of files included with this package.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.Id">
            <summary>
            ID of this application package. Corresponds to the Nuget package ID.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.References">
            <summary>
            Gets the IDs of the referenced application packages.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.SubplatformName">
            <summary>
            Gets the subplatform name of the subplatform which has produced this package.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.Version">
            <summary>
            Gets the product full version.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IApplicationPackageLocallyInstalled.LocalInstallDirectory">
            <summary>
            Base directory into which the package is locally installed.
            Package files are placed at <see cref="F:JetBrains.Application.BuildScript.Application.ApplicationPackageFile.myLocalInstallPath" /> under it.
            Note that packages might either share the same local install folder, or have it different.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.IApplicationTrait">
            <summary>
            Base interface for application traits, so that you could easily check which you're defining on your products and which you're not.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.IWindowBranding">
            <summary>
              <para>Branding for windows and other UI controls. Supplies the application-specific icon, the title prefix, etc.</para>
              <para>
                Historically, the <c>IApplicationDescriptor</c> was used for this, but in a shared-shell world it's not an option.
              </para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IWindowBranding.CompanyName">
            <summary>
            Gets the name of the company providing the main product identified by <see creLf="ProductDisplayName" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IWindowBranding.ProductDisplayName">
            <summary>
              <para>The user-friendly name of the product in the short form (no company, no version).</para>
              <para>The default choice if you want to mention the product name in UI.</para>
            </summary>
            <remarks>
              <para>There're three forms of the product name:</para>
              <h5>(1) <see cref="P:JetBrains.Application.BuildScript.IProductInfo.ProductTechnicalName" /></h5>
              <para>The short technical name which follows the identifier syntax.</para>
              <para>Use for IDs, filenames, Registry access, prefixes/disambiguations, etc.</para>
              <para><b>Example</b>: <c>“Receptor”</c>, <c>“DotMemory”</c>.</para>
              <h5>(2) <see cref="P:JetBrains.Application.BuildScript.Application.IWindowBranding.ProductDisplayName" /></h5>
              <para>The short UI name for use in display strings. Still does not include the version number.</para>
              <para>The default choice if you want to mention the product name in UI.<br />(NOTE: there's a special function for making window titles like “Receptor – Downloading”).</para>
              <para>Equal to <see cref="!:IProductNameAndVersion.ProductName" /> by default, but might differ in some products<br /> (e.g. DotMemory's technical product name is <c>“DotMemory”</c>, while its display product name is <c>“DotTrace Memory”</c>).</para>
              <para><b>Example</b>: <c>“Receptor”</c>, <c>“DotTrace Memory”</c>.</para>
              <h5>(3) <see cref="!:ProductFullName" /></h5>
              <para>The expanded marketing product name for detailed UI strings which also includes the marketing version, beta/EAP/RC designation, etc.</para>
              <para>Its use is narrow (for about-boxes and alike), just compare:<br />
            • “Receptor 7.0.2 Limited EAP – Code Cleanup” vs. “Receptor – Code Cleanup”<br />
            • “Reset all Receptor 7.0.2 Limited EAP settings” vs. “Reset all Receptor settings”.</para>
              <para>This is the only property which exposes the marketing version of the build which, if it has more than two components, does not directly match the technical version. For example, “Receptor 7.0.2” has the service pack number of 2, while the technical version build component (the third number) is roughly the number of the nightly published.</para>
              <para><b>Example</b>: <c>“Receptor 7.0.2 RC”</c>, <c>“DotTrace Memory 1.0 Public EAP”</c>.</para>
              <para>—</para>
              <para>None of these include the Company Name, use <see cref="T:JetBrains.Application.CompanyInfo" /> to concatenate if needed for display.</para>
            </remarks>
            <seealso cref="P:JetBrains.Application.BuildScript.IProductInfo.ProductTechnicalName"/>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.IWindowBranding.WindowIcon">
            <summary>
              <para>Gets the icon to use as product window icons, such as in dialogs.</para>
              <para>The icon might change with time, for example when theme is switched.</para>
              <para>
                An <c>IconId</c> cannot be used here because an icon is a rich format including multiple device images for the same icon.
              </para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.IWindowBranding.MakeWindowCaption(System.String)">
            <summary>
              Prepends a caption string with the product name, separated with an en-dash.
            </summary>
            <param name="caption">The original caption to prepend with the product name.</param>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute">
            <summary>
            Base attribute for self-chooser markers.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute.AutoselectZoneByAttributePrimitiveValue``1(JetBrains.Application.Catalogs.PartCatalog,System.UInt64,JetBrains.Util.OnError)">
            <summary>
            Looks up the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute" />-derived attributes of type <see cref="!:TAutoselectAttribute" />, looks up the single item which has the only parameter set to the <paramref name="valuePrimitive" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute.AutoselectZoneByAttributeValue``2(System.Collections.Generic.IEnumerable{JetBrains.Application.Catalogs.PartCatalog},``1,JetBrains.Util.OnError)">
            <summary>
            Looks up the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute" />-derived attributes of type <see cref="!:TAutoselectAttribute" />, looks up the single item which has the only parameter set to the <paramref name="value" />.
            <see cref="M:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute.AutoselectZoneByAttributePrimitiveValue``1(JetBrains.Application.Catalogs.PartCatalog,System.UInt64,JetBrains.Util.OnError)" /> is faster for use on startup.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute.AutoselectZonesByAttributePrimitiveValuesRange``1(JetBrains.Application.Catalogs.PartCatalog,System.UInt64,JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute.RangeOp,JetBrains.Util.OnError,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.BuildScript.Application.Zones.ZonePart}@)">
            <summary>
            Looks up the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneAttribute" />-derived attributes of type <see cref="!:TAutoselectAttribute" />, looks up the items which have their two parameters as a range which fits the <paramref name="op" /> against the <paramref name="value" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByClrImplementationAttribute">
            <summary>
            Marker to help choose the host zone by CLR implementation in an automatic fashion.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByClrVersionAttribute">
            <summary>
            Marker to help choose the host zone by CLR version without referencing all instances (which is not possible from the base class).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByCpuArchitectureAttribute">
            <summary>
            Marker to help choose the host zone by CPU Architecture in an automatic fashion.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.AutoselectZoneByOsAttribute">
            <summary>
            Marker to help choose the host zone by OS Platform in an automatic fashion.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IArm64CpuArchitectureHostZone">
            <summary>
              <para>The ARM64 (aka AArch64) CPU.</para>
              <para>In effect on ARM64 systems.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IArmCpuArchitectureHostZone">
            <summary>
              <para>The ARM CPU.</para>
              <para>Haven't seen such in wild life, but MSFT is onto that, let's reserve the zone.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IAvaloniaUIEnvZone">
            <summary>
            UI-interactive products with Avalonia framework.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IClrImplementationHostZone">
            <summary>
            Common root for CLR implementation-specific zones (Framework, Mono, Core).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ICpuArchitectureHostZone">
            <summary>
            Common root for CPU-specific zones.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IEnvironmentZone">
            <summary>
              <para>The base type for so-called Environment module zones.</para>
              <para>These zones define the difference between VS / test / standalone / cmd environments which is not specific to the product, but to the common component implementations which serve running in that specific environment. When the host is started, it's given the one Environment zone which would be active in the Environment container.</para>
              <para>Only environment zones and other host-specific zones (<see cref="T:JetBrains.Application.BuildScript.Application.Zones.IHostSpecificZone" />) could be activated in the Environment container. After that, the set of the environment zones cannot be changed when starting the Shell container.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IHostSpecificZone">
            <summary>
            <para>Base interface for module zones which are available right out of the JetBrains host runtime startup (the most low-level thing which starts the Environment container) and apply to the Environment container as active zones.</para>
            <para>Only module zones derived from this type could be activated in the Environment container. The set of the active module zones derived from this type cannot change afterwards within the host lifetime. Only non-<see cref="T:JetBrains.Application.BuildScript.Application.Zones.IHostSpecificZone" /> zones might be additionally activated.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IInternalVisibilityZone">
            <summary>
            The internal-only visibility zone. These items are only active when running in Internal mode.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ILinuxHostZone">
            <summary>
            Gets activated in the host when <see cref="F:JetBrains.Util.PlatformUtil.RuntimePlatform" /> is <see cref="F:JetBrains.Util.PlatformUtil.Platform.Linux" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IMacHostZone">
            <summary>
            Gets activated in the host when <see cref="F:JetBrains.Util.PlatformUtil.RuntimePlatform" /> is <see cref="F:JetBrains.Util.PlatformUtil.Platform.MacOsX" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.INetCoreHostZone">
            <summary>
            Gets activated in the host when <see cref="F:JetBrains.Util.PlatformUtil.IsRunningOnCore" /> is <c>True</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.INetFrameworkHostZone">
            <summary>
            Gets activated in the host when we work on .NET Framework.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IOperatingSystemHostZone">
            <summary>
            Common root for OS-specific zones.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IOuterWorldConnectEnvZone">
            <summary>
            All products allowed to connect outer world (internet)
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IPublicVisibilityZone">
            <summary>
            The default visibility zone. These items are active in both Public and Internal zones.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IRequire`1">
            <summary>
              <para>An interface to mark some class as requiring a zone.</para>
              <para>Applies either to a component class, or to a special marker class which marks the whole namespace it's placed in.</para>
            </summary>
            <typeparam name="TZoneInterface">The zone.</typeparam>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ISinceClr2HostZone">
            <summary>
            The CLR zones root.
            Available when running on CLR version 2+.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IStandaloneAvaloniaUIEnvZone">
            <summary>
            UI-interactive Avalonia-only.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IStandaloneCmdEnvZone">
            <summary>
            Commandline standalone products.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IStandaloneEnvZone">
            <summary>
            All products running in a standalone fashion — not under VS nor unit testing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IStandaloneTabWellAvaloniaUIEnvZone">
            <summary>
            UI-interactive standalone IDE-like products with tabwell-based main Avalonia window.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IStandaloneTabWellUIEnvZone">
            <summary>
            UI-interactive standalone IDE-like products with tabwell-based main window.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IStandaloneTabWellWpfUIEnvZone">
            <summary>
            UI-interactive standalone IDE-like products with tabwell-based main window.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IStandaloneUIEnvZone">
            <summary>
            Base sone for UI-interactive standalone shells. They might have custom UI instead of the standard main window with the tab well.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IUIInteractiveEnvZone">
            <summary>
            All products which are allowed to show graphical user-interactive interface.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IUnixHostZone">
            <summary>
            Gets activated in the host when <see cref="F:JetBrains.Util.PlatformUtil.IsRunningUnderWindows" /> is <c>False</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IWindowsNtHostZone">
            <summary>
            Gets activated in the host when <see cref="F:JetBrains.Util.PlatformUtil.IsRunningUnderWindows" /> is <c>True</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IWpfUIEnvZone">
            <summary>
            UI-interactive products with WPF framework.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IX64CpuArchitectureHostZone">
            <summary>
              <para>The x64 (aka AMD64) CPU.</para>
              <para>In effect on AMD64 systems when running in CPU-native processes (without WoW6432, which would show up as <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IX86CpuArchitectureHostZone" />).</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IX86CpuArchitectureHostZone">
            <summary>
              <para>The x86 (aka IA32) CPU.</para>
              <para>In effect on x86 systems and inside WoW6432 processes on AMD64 systems.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.IZone">
            <summary>
            The base interface for all zone axes.
            Is not a zone on itself.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers">
            <summary>
            Stateless algorithms on zones application, relations, dependencies, and so on.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.AddZoneBasesAndRequirements(System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Application.Zones.ZonePart},JetBrains.Util.ILogger)">
            <returns>A fast-lookup collection of zones.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.AddZoneBasesAndRequirements2(System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Application.Zones.ZonePart},System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            Transitively closes the zones list, considering their bases and requirements.
            </summary>
            <param name="zones"></param>
            <param name="isCollectingPaths">Whether dictionary values would be non-NULL, set FALSE to save cpu/gc.</param>
            <param name="logger"></param>
            <returns>Keys: transitively closed zones set. Values: if <paramref name="isCollectingPaths" />, the requirement path from the key to one of the zones in the original <paramref name="zones" /> list.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.GetNameZonesTransitivelyClosedAndExplained(System.String,JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData,JetBrains.Util.ILogger)">
            <summary>
            A version of <see cref="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.GetNameZones(JetBrains.Util.dataStructures.Sources.StringSource)" /> which also transitively closes the zones list and explains where each zone is getting from (there you can also tell apart non-transitively-closed zones).
            Much much slower than <see cref="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.GetNameZonesTransitivelyClosed(JetBrains.Util.dataStructures.Sources.StringSource)" />, only use when you need diagnostics.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.GetPartZonesTransitivelyClosedAndExplained(JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping,JetBrains.Util.ILogger)">
            <summary>
            A version of <see cref="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.GetNameZones(JetBrains.Util.dataStructures.Sources.StringSource)" /> which also transitively closes the zones list and explains where each zone is getting from (there you can also tell apart non-transitively-closed zones).
            Much much slower than <see cref="M:JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping.AssemblyData.GetNameZonesTransitivelyClosed(JetBrains.Util.dataStructures.Sources.StringSource)" />, only use when you need diagnostics.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.GetZoneFlags(JetBrains.Application.BuildScript.Application.Zones.ZonePart)">
            <summary>
            On a zone from the part catalog, gets its flags from the attribute declaration.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.GetZoneLevel(JetBrains.Application.Catalogs.PartCatalogType,System.Collections.Generic.IDictionary{JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Application.BuildScript.Application.Zones.ModuleZoneLevel})">
            <summary>
            Is this zone an environment zone?
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.SubtractSortedModuleZoneSets(JetBrains.Application.BuildScript.Application.Zones.ZonePart[],JetBrains.Application.BuildScript.Application.Zones.ZonePart[],JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.BuildScript.Application.Zones.ZonePart}@)">
            <summary>
            Zone sets are expected to be sorted ordinally by the full name of the zone part type.
            The result is expected normally to be empty or small.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneOrigin">
            <summary>
            Describes one instance of the zone coming from some zone marker.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneOrigin.AppliedAtName">
            <summary>
            The name at which this zone marker is applied. Might be the exact <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.ForName" /> (eg explicit class zone marker on a class), or its parent namespace (a namespace zone marker which implicitly zones all of the classes in that namespace).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneOrigin.Backtrace">
            <summary>
            Traces the zone in question to the zone which is explicitly required by the zone marker. At least one item long (when the zone is explicitly required by the marker).
            The first zone is always the <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Zone" />. The last zone is always the zone which is explicitly listed in the zone marker.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneOrigin.IsExplicit">
            <summary>
            Is marked explicitly with that zone (not with smth that requires/inherits it).
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneOrigin.Zone">
            <summary>
            <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Zone" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin">
            <summary>
            For a zone applicable to some part name (a dot-qualified name), explains how this zone got applied to it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.ForName">
            <summary>
            The FQN to which the zone application is explained. Typically, the diagnostics is collected for a class, so that would be the class name.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.IsTrivial">
            <summary>
            Marked with this exactly zone on this exactly level (no inheriting, no nothing).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Origins">
            <summary>
            The multiple origins how the <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Zone" /> got applied to the <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.ForName" />.
            That could be:
            (1) Explicit on this name: there's a zone marker right on the <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.ForName" /> (class zone marker if it's a class, namespace zone marker if it's a namespace), and this zone marker requires the exact <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Zone" /> type.
            (2) Implicit on this name: the marker is right on the name, but it requires some other zone X which in turn transitively requires the <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Zone" /> (with <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IRequire`1" /> or base types).
            (2) Explicit on parent name: there is a namespace zone marker on a parent namespace of the <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.ForName" /> which requires the exact <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Zone" /> type.
            (3) Implicit on parent name: a combination of the prev two.
            Explicit or implicit: see the length of <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneOrigin.Backtrace" /> chain.
            This name or parent name: see if <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneOrigin.AppliedAtName" /> equals to <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.ForName" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.Zone">
            <summary>
            The single zone whose origin is explained here. The <see cref="F:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneHelpers.ModuleZoneWithOrigin.ForName" /> is zoned with this zone, explicitly or implicitly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ModuleZoneLevel">
            <summary>
            For a Module Zone, gives if it's a special Host Zone, Environment Zone, etc.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionAttribute">
            <summary>
              <para>Declares a new zone.</para>
              <para>If the marked class/interface derives some other zone, then it's a value in the existing axis. Otherwise it's a root of the new axis.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Application.Zones.ZoneFlags.AutoEnable">
            <summary>
            Means that the zone is automatically enabled on startup once its dependencies are enabled.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute">
            <summary>
              <para>This attribute allows to mark classes as belonging to Zone Axes. A Zone Axis is declared with <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionAttribute" />, after which one or more classes might be marked as belonging to that Zone Axis. A class is the only unit to which the Zone Axis actually applies.</para>
              <para>• • •</para>
              <para>Which classes are affected by a specific <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute" /> instance:</para>
              <para>If the attribute is applied to just a regular class, e.g. a component, then just this class is marked with the respective Zone Axes.</para>
              <para>If the attribute is applied to an empty class named <c>ZoneMarker</c>, or whose name ends with <c>_ZoneMarker</c>, then it's a syntax sugar for marking all of the classes under the current namespace by applying a single marker. This applies to classes from the same assembly, from the same namespace as the marked <c>ZoneMarker</c> class, and in all the nested namespaces.</para>
              <para>• • •</para>
              <para>Which Zone Axes are applied with a specific <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute" /> instance:</para>
              <para>First, you can specify the list of Zone Axis types as the attribute constructor parameters.</para>
              <para>Then, the class which is marked with the attribute might implement any number of <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IRequire`1" /> interfaces (including those from its base classes), whose type parameters should be instantiated to the Zone Axis types.</para>
              <para>The total set of Zone Axes of the attribute is a union of all these, both for regular classes and for <c>ZoneMarker</c> classes.</para>
              <para>An empty set of the Zone Axes is a special case. It does not restrict the class to any zones, but marks an opt-in to the zoning system, which is required to make the class pass any of the zoning filters. A class to which no zone markers apply is invisible to the component container.</para>
              <para>• • •</para>
              <para>The total set of Zone Axes to which a certain class belongs is a union of:</para>
              <para>— Zone Axes applied by the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute" /> on this class itself.</para>
              <para>— Zone Axes applied to all the <c>ZoneMarker</c> classes in the namespace of the class.</para>
              <para>— Zone Axes applied to all the <c>ZoneMarker</c> classes in any parent namespaces of this class (within the same assembly).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute.#ctor(System.Type[])">
            <summary>
            Lists the Zone Axes. Only Zone Axis types registered with <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionAttribute" /> are allowed in this list.
            </summary>
            <param name="zones"></param>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Application.Zones.ZoneMarkerAttribute.Zones">
            <summary>
              <para>Some of the zones required by the marked class.</para>
              <para>Note that zones might also be required by base interfaces of the class, <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IRequire`1" />.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Application.Zones.ZonePart">
            <summary>
            Represents an <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IZone" />-derived interface without loading the runtime type, in part catalog terms.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ZonePart.FromType(System.Type,JetBrains.Application.Catalogs.IPartCatalogSet)">
            <summary>
            Creates a zone part object from a runtime type.
            </summary>
            <param name="type">The module zone type.</param>
            <param name="catalogset">The part catalog to create the module zone type in a much more efficient manner. It's recommended to supply it in any perf-sensitive scenarios.</param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Application.Zones.ZonePart.FromType``1(JetBrains.Application.Catalogs.IPartCatalogSet)">
            <summary>
            Creates a zone part object from a runtime type.
            </summary>
            <typeparam name="TIZone">The module zone type.</typeparam>
            <param name="catalogset">The part catalog to create the module zone type in a much more efficient manner. It's recommended to supply it in any perf-sensitive scenarios.</param>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact">
            <summary>
            When running a build for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage" />, specifies which objective to invoke on the binary stage. The source stage always runs for <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerArtifact">
            <summary>
            All build runner related artifacts, this includes Build Runner Core and Build App, in EXE and Nuget and Script References forms.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerArtifact.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerArtifact.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerArtifact.PublishPlatformCoreForRefs(JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackagesEx)">
            <summary>
            Republish the Platform Core Shell nuget, for use in references where applicable (eg initially the sdk task body).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerArtifact.PublishWaveBundlePackageForRefs(JetBrains.Application.BuildScript.InputPackage[])">
            <summary>
            Republish the Wave nuget, for use in references where applicable (eg initially the sdk task body).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreArtifact">
            <summary>
            All files for the Build Runner Core: the Single-exe, the Nupkg with Single-Exe, and the build script assembly references.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreArtifact.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreArtifact.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreArtifact.AsBuildRunner(JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreArtifact[])">
            <summary>
            Mount as <see cref="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerArtifact" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreAssemblyLists">
            <summary>
            A single-.exe with the Build Runner Core assemblies.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreAssemblyLists.BuildRunnerCoreAssemblies">
            <summary>
            Non-GAC assemblies of the Build Runner Core, which is Build Engine (executor) + Shell (entry point and collector infrastructure) + their dependencies.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreAssemblyLists.BuildScriptReferenceAssemblies">
            <summary>
            The set of assemblies which are intrinsically available for use in build script files, that's Build Interface and its refs (this list only includes non-GACs).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreExePacked">
            <summary>
            A single-.exe with the Build Runner Core assemblies.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreExePackedNuget">
            <summary>
            A single-.exe with the Build Runner Core assemblies, packed into a Nuget
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildScriptReferencesNuget">
            <summary>
            Makes a nuget package with non-GAC DLLs which are intrinsically available for use in build scripts, which is Build Interface DLL plus all its references.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.TeamCityBuildTags">
            <summary>
            Allows to specify tags for marking running/completed builds with.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildApp.Artifacts.WarmUpBuildRunnerCoreBootstrap">
            <summary>
            Causes an empty build, but that build causes the fresh self-bootstrapped Build Runner Core be compiled in the process (if outdated), and so warms-up the cache.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuildEntryPointAttribute">
            <summary>
            Means the marked artifact should be suggested as a build entry point.
            // TODO: probably, a temporary solution.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.BuildVersionSuffix.Build">
            <summary>
            The third component of the full version number.
            (the first two components identify binary compatibility and are specified in the component being built, while the last two are merely incremental)
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.BuildVersionSuffix.PrereleaseMetadata">
            <summary>
            The “pre-release metadata” component of the semantic version spec, one after a hyphen.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.BuildVersionSuffix.Revision">
            <summary>
            The fourth component of the full version number.
            (the first two components identify binary compatibility and are specified in the component being built, while the last two are merely incremental)
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.BuildVersionSuffix.DefaultBuildVersionSuffixForNow(JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata},JetBrains.Application.Components.Optional{JetBrains.Build.Running.IncrementalBuild},JetBrains.Util.ILogger)">
            <summary>
            Unless specifically provided, makes it from the current date-time.
            SPECIAL HANDLING for INCREMENTAL MODE: the date-based versions are very rough when run locally, changing them often would prevent incrementality.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.BuiltOn">
            <summary>
            The time of the build, in UTC, in the form of an artifact.
            For use in package metadata and in product info.
            </summary>
            <seealso cref="T:JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact" />
        </member>
        <member name="T:JetBrains.Application.BuildScript.CompileLevelEntryPoint">
            <summary>
            For linking as the after-compile stage.
            // TODO: probably, a temporary solution.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact">
            <summary>
            Specifies the GUID to be used for Visual Studio CommandID for the actions in this subplatform.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact.ActionsCommandGroupGuid">
            <summary>
            Gets the VS Command Group GUID to be used for regular actions in this subplatform when they are turned into VS commands.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact.GenerateGuidForActions(JetBrains.Application.BuildScript.Solution.SubplatformName)">
            <summary>
            For subplatforms for which a custom hard-coded GUID is not set, generates a new dynamic GUID deterministically for use on action commands.
            </summary>
            <param name="sname"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.Actions.SubplatformVsCommandsGuidArtifact.GenerateGuidForGroups(JetBrains.Application.BuildScript.Solution.SubplatformName)">
            <summary>
            Generates a new dynamic GUID deterministically for use on subplatform's command groups.
            </summary>
            <param name="sname"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.AddTargetsFileToIncludeAssembliesInProject">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService._regexContentNameNegativeCharset">
            <summary>
              The allowed charset for the content name (actually specified on server side, here's a snapshot at some moment of time; update to actual server value if it changes).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningService._sInvalidCharsReplacementString">
            <summary>
              When replacing the content name chars which don't fit into the charset, use this string instead of each contiguous pack of invalid chars.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.CodeSigning.DigestUtil.Format">
            <summary>
              See https://ant.apache.org/manual/Tasks/checksum.html
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.DigestUtil.Format.Checksum">
            <summary>
              Only the checksum itself. Example:
              <code>
            4d75b8402a758db4a96274cf3fa16dbb5f96a9f3edcbd3832d0430f803c2de62
            0c4fddb07efff34d186271b283ba299f0330f5436f98b8053d8d83e99747fc21
            8a6572e910a9bfefbf7ff2696b752b3162ce6062296264dda7eddce9c09ab553
            </code>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.DigestUtil.Format.GNU">
            <summary>
              The format of GNU textutils md5sum/sha1sum/sha256sum/sha384sum/sha512sum. Binary mode only. Example:
              <code>
            4d75b8402a758db4a96274cf3fa16dbb5f96a9f3edcbd3832d0430f803c2de62 */etc/man.conf
            0c4fddb07efff34d186271b283ba299f0330f5436f98b8053d8d83e99747fc21 *dotnet70-arm64/dotnet
            8a6572e910a9bfefbf7ff2696b752b3162ce6062296264dda7eddce9c09ab553 *.local/share/mc/history
            /// </code>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.DigestUtil.Format.SVF">
            <summary>
              The format of BSD md5 command. Example:
              <code>
            SHA256(/etc/man.conf)= 4d75b8402a758db4a96274cf3fa16dbb5f96a9f3edcbd3832d0430f803c2de62
            SHA256(dotnet70-arm64/dotnet)= 0c4fddb07efff34d186271b283ba299f0330f5436f98b8053d8d83e99747fc21
            SHA256(.local/share/mc/history)= 8a6572e910a9bfefbf7ff2696b752b3162ce6062296264dda7eddce9c09ab553
            </code>
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.IsAvailable">
            <summary>
              Gets whether it's possible to sign with this server at this moment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.IsSigningThisFileTypeSupported(JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem)">
            <summary>
              Checks if the file fits for signing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.SignAsync(JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem,System.String,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningParameters)">
            <summary>
              If the signing service is available, sends the file for signing and receives the signed version.
              If the signing service is unavailable, throws an exception.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService.VerifySignatureAsync(JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem,JetBrains.Util.OnError)">
            <summary>
              Verify the signature of the file. The platform specific method, be careful!
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx.EnsureSignedAsync(JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem,System.String,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningParameters)">
            <summary>
              If the file has no signature yet, sends the file for signing and receives the signed version when possible.
              If the file has a valid signature already, keeps the file AS IS. The signature might be third-party rather than JetBrains.
              If the signing service is unavailable, throws an exception.
              See <see cref="M:JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx.SignIfNeededAsync(JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,System.Boolean,JetBrains.Util.ILogger,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningParameters)" /> for more automatic and failsafe operation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx.Sign(JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem,System.String,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningParameters)">
            <summary>
              If the signing service is available, sends the file for signing and receives the signed version.
              If the signing service is unavailable, throws an exception.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx.SignIfAvailable(JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem,System.String,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningParameters)">
            <summary>
              Returns the original content if the signing server has not been specified for this build (e.g. this is a local build).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.ISignAuthenticodeEx.SignIfAvailableAsync(JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningMode,JetBrains.Util.Storage.ImmutableFileItem,System.String,JetBrains.Application.BuildScript.Compile.CodeSigning.AuthenticodeSigningParameters)">
            <summary>
              Returns the original content if the signing server has not been specified for this build (e.g. this is a local build).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.OptionFlags.Kill">
            <summary>
              Forces the signed code's kill flag to be set when the code begins execution.  Code with the kill flag set will die
              when it becomes dynamically invalid. It is therefore safe to assume that code marked this way, once validated, will
              have continue to have a valid identity while alive.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.OptionFlags.Hard">
            <summary>
              Forces the signed code's hard flag to be set when the code
              begins execution.  The hard flag is a hint to the system that
              the code prefers to be denied access to resources if gaining
              such access would invalidate its identity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.OptionFlags.Host">
            <summary>
              Marks the code as capable of hosting guest code. You must set this option if you want the code to act as a code
              signing host, controlling subsidiary ("guest") code. This flag is set automatically if you specify an internal guest
              requirement.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.OptionFlags.Expires">
            <summary>
              Forces any validation of the code to consider expiration of the certificates involved. Code signatures generated with
              this flag will fail to verify once any of the certificates in the chain has expired, regardless of the intentions of
              the verifier. Note that this flag does not affect any other checks that may cause signature validation to fail,
              including checks for certificate revocation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.OptionFlags.Library">
            <summary>
              Forces the signed code's library validation flag to be set when the code begins execution.  The code will only be
              able to link against system libraries and frameworks, or libraries, frameworks, and plug-in bundles with the same
              team identifier embedded in the code directory.  Team identifiers are automatically recorded in signatures when
              signing with suitable Apple-issued signing certificates.  Note that the flag is not supported for i386 binaries, and
              only applies to the main executable.  The flag has no effect when set on frameworks and libraries.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.OptionFlags.Runtime">
            <summary>
              Enable the Hardened Runtime. See https://developer.apple.com/documentation/security/hardened_runtime
              On macOS versions >= 10.14.0, opts signed processes into a hardened runtime environment which includes runtime code
              signing enforcement, library validation, hard, kill, and debugging restrictions.  These restrictions can be
              selectively relaxed via entitlements. Note: macOS versions older than 10.14.0 ignore the presence of this flag in the
              code signature.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.OptionFlags.LinkedSigned">
            <summary>
              Identifies a signature as signed by the linker. Linker signatures are very similar to adhoc signatures, except:
              <list type="bullet">
                <item>linker signatures can be replaced without using the --force option.</item>
                <item>linker signatures are never preserved regardless of the use of the --preserve-metadata option.</item>
                <item>linker signatures will usually not contain any embedded code requirements including a designated requirement.</item>
              </list>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.Deep">
            <summary>
              (DEPRECATED for signing as of macOS 13.0) When signing a bundle, specifies that nested code content such as helpers,
              frameworks, and plug-ins, should be recursively signed in turn. Beware:
              <list type="bullet">
                <item>All signing options will be applied, in turn, to all nested content. This is almost never what you want.</item>
                <item>
                  Nested code content is a special term that only applies to macOS style bundles with a Contents folder. Only bare
                  Mach-Os and well structured bundles qualify as nested code content. Non-bundle directories in nested code content
                  locations will cause an error when signing. The codesign tool will only discover nested code content in the
                  following directories:
                  <list type="bullet">
                    <item>Contents</item>
                    <item>Contents/Frameworks</item>
                    <item>Contents/SharedFrameworks</item>
                    <item>Contents/PlugIns</item>
                    <item>Contents/Plug-ins</item>
                    <item>Contents/XPCServices</item>
                    <item>Contents/Helpers</item>
                    <item>Contents/MacOS</item>
                    <item>Contents/Library/Automator</item>
                    <item>Contents/Library/Spotlight</item>
                    <item>Contents/Library/LoginItems</item>
                  </list>
                </item>
                <item>
                  If any code (Mach-Os, bundles) are located outside the above listed locations they will not be signed by the
                  --deep option
                </item>
                <item>
                  Using the --deep option on an iOS style bundle without a Contents folder will not cause an error but will
                  only sign the main binary of the bundle. When verifying a bundle, this option specifies that any nested code
                  content will be recursively verified as to its full content. By default, verification of nested content is
                  limited to a shallow investigation that may not detect changes to the nested code.
                </item>
              </list>
              When displaying a signature, this option specifies that a list of directly nested code should be written to the
              display output. This lists only code directly nested within the subject; anything nested indirectly will require
              recursive application of the codesign command.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.Entitlements">
            <summary>
              When signing, take the file at the given path and embed its contents in the signature as entitlement data. If the
              data at path does not already begin with a suitable binary ("blob") header, one is attached automatically. If the
              signature has no   entitlement data, nothing is written (this is not an error).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.Force">
            <summary>
              When signing, causes codesign to replace any existing signature on the path(s) given. Without this option, existing
              signatures will not be replaced, and the signing operation fails.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.Identity">
            <summary>
              Sign the code at the path(s) given using this identity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.CodeSigning.MacOsSigningParameters.Options">
            <summary>
              During signing, specifies a set of option flags to be embedded in the code signature. The value takes the form of a
              comma-separated list of names (with no spaces). Alternatively, a numeric value can be used to directly specify the
              option mask (CodeDirectory flag word).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerFlavor">
            <summary>
            Flavor parameter that allows to override sign server behavior (like switch to some other certificate).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerInfo">
            <summary>
            Identifies the sign server which serves the authenticode signing request without exposing the private keys.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerInfo.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerInfo.#ctor(System.String,System.String,System.Uri)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.CodeSigning.SignServerPgpKeyIdentity">
            <summary>
            GPG key id to be used for signing by new sign server.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CodeSigning.StrongNameSignatureHelpers.SignDelaySignedAssembly(JetBrains.Util.Storage.ImmutableFileItem,System.Byte[])">
            <summary>
            Resigns a delayed-sign assembly with a valid signature.
            </summary>
            <param name="assembly">The assembly. Must be delay-signed, i.e. have the signature RVA in its CLI header, but no "Strong name signed"(0x8) flag, and "Has public key" flag and its RVA in the Assembly metadata table.</param>
            <param name="snk">Strong name key pair for signing, in the same format as the SNK file. The public key must match the one in the Assembly metadata table of the assembly. The private key must match the public key.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.CompiledSubplatformFile">
            <summary>
            A freshly-compiled file output from the Subplatform Compile stage. Will be turned into a SubplatformFileForPackaging automatically, or might be also put to use by some side steps.
            Don't consume unless pretty sure of what you're doing.
            Yield instead of a <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging" /> if you consider your step to be a compilation-related one (but this is purely optional).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks.CompilationNeedsNuggetsLocallyRestored(JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact[])">
            <summary>
            This is just to make sure that packages are restored before we run the compilation.
            </summary>
            <param name="nuggets"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks.MainSolutionToolsets.DetectToolsetForAllAssemblies(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.FileSystemPath,JetBrains.Util.ILogger)">
            <summary>
            Looks at the set of projects, whether just the managed compilers would be enough to build them, or not.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.CompileSubplatformsInput">
            <summary>
            Allows to link your execution before compiling subplatforms.
            // TODO: refactor? maybe we might want to generate more files instead?
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.CompileTasksSinceClr4.LinkCompileLevelEntryPointToBinaries(JetBrains.Application.BuildScript.SubplatformBinariesPackage[],JetBrains.Application.BuildScript.DeployablePackage[])">
            <summary>
            Defines what <see cref="T:JetBrains.Application.BuildScript.CompileLevelEntryPoint"/> actually means when running the compilation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.EmbeddedPackageFileLicense">
            <summary>
            Embedded files from third-party packages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact">
            <summary>
            Yield this artifact to request embedding contents of a certain Nuget package into the subplatform package being compiled.
            Some native tools are distributed this way: they're pre-compiled into nuget form, and they're embedded to be always next to the managed DLLs which would be using them.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact.MoveToFolder">
            <summary>
            By default, the stuff is embedded right into the content folder of the package.
            This option allows to embed into a sub-path under the content folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact.PackageId">
            <summary>
            Nuget package which should be embedded into the subplatform.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact.PackageVersion">
            <summary>
            Nuget package which should be embedded into the subplatform.
            Optional. If omitted, will be looked up in the central <see cref="T:JetBrains.Application.BuildScript.PackageVersionLocks" /> file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact.Subplatform">
            <summary>
            The target subplatform of the embedding.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformTasks">
            <summary>
            Handles <see cref="T:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact" /> tasks.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformTasks.RequirePackages(JetBrains.Application.BuildScript.Compile.EmbedPackageInSubplatformArtifact[],JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.BuildScript.PackageVersionLocks,JetBrains.Util.ILogger)">
            <summary>
            This only requests for retrieval, embed would happen later.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.EmitsApplicationPackageForNuget.CreateAppPkg(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging[],JetBrains.Application.BuildScript.BuildVersionSuffix,JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact,JetBrains.Util.ILogger)">
            <summary>
            The main application package artifact. Can't be fast, needs real info. Lightweight meta creates an imitation for it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.EmitsApplicationPackageForNuget.CreateAppPkgCompanionArtifactsFast(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Companions to <see cref="T:JetBrains.Application.BuildScript.Application.ApplicationPackageArtifact" />, as FAST components (get into lightweight meta).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog">
            <summary>
            Produces the part catalog which is to be embedded into the generated subplatform package as a component.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog.EmbedCatalogInPackage(System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Compile.PackagePartCatalogArtifact})">
            <summary>
            Packages the catalog as the primitive pre-shell object which could be understood by all possible consumers.
            </summary>
            <param name="catalogs"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog.PackageExcludedFromSubplatformCatalogingAssemblyResolve">
            <summary>
            Packages identified by these artifacts will be excluded from Assembly Master Binder resolve when building catalogs for subplatform assemblies.
            This might be required as a dirty hack when you are taking assemblies from packages and planting them manually into the subplatform package.
            The marked package must be a development-only reference (such references are not present at runtime; for a normal shippable reference, excluding it from cataloging is questionable).
            DO NOT USE this without prior discussion. All current uses are a mistake which should have been handled otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.EmitsPackagePartCatalog.SubplatformDataForCataloging.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages">
            <summary>
            Specifically handles creation of subplatform packages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.EmitsSubplatformPackages.AssertNoItemsForAbsentSubplatformsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,System.Linq.ILookup{JetBrains.Application.BuildScript.Solution.SubplatformName,JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging},System.Linq.ILookup{JetBrains.Application.BuildScript.Solution.SubplatformName,JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackaging},JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
              <para>Asserts that all of the items which have been supplied for packaging are attributed to actually-present subplatforms-on-sources.</para>
              <para>Otherwise they'd just to to /dev/null which is not a big problem on itself but their production might be costly and would be run in builds which do not need it. So let's ensure the producers only do them when needed.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.EmptyTransformSubplatformFilesForPackaging">
            <summary>
            A placeholder build helper to ensure some helpers are always registered for the <see cref="T:JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging" /> interface, and resolve succeeds for them.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion">
            <summary>
              <para>Causes all projects to be compiled targeting specified framework regardless of their settings.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion.TargetFrameworkName">
            <summary>
            Parses the version, returns the formatted framework name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion.TargetFrameworkVersion">
            <summary>
              <para>TargetFrameworkVersion in the same format as in msbuild properties</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.INestedBuildRunnerOnSources">
            <summary>
            Runs a nested build which works off sources.
            Sets up parameters for the nested stage run correctly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging">
            <summary>
            Allows to have a go on files which are to be packaged into a subplatform, after they all are produced, but before they are packaged.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.Priority">
            <summary>
            Executed in ascending order.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging.ApplyTransformAsync(JetBrains.Lifetimes.OuterLifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging})">
            <summary>
            Applies the transformation by modifying the list of files.
            You should not modify the file contents directly, but by removing the item and inserting another one for the same path you can effectively modify the file contents.
            Yield <c>Null</c> if you don't want to modify.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants">
            <summary>
            Mocks <c>Launcher</c> in a compile-time-build-script-accessible form.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants.ConsoleMainMethod">
            <summary>
            Mocks <c>Launcher::ConsoleMainMethod</c> in a compile-time-build-script-accessible form.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants.ConsoleMainMethodScattered">
            <summary>
            Mocks <c>Launcher::ConsoleMainMethod</c> in a compile-time-build-script-accessible form.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants.MainMethod">
            <summary>
            Mocks <c>Launcher::MainMethod</c> in a compile-time-build-script-accessible form.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LauncherCompileTimeConstants.MainMethodScattered">
            <summary>
            Mocks <c>Launcher::MainMethod</c> in a compile-time-build-script-accessible form.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry.PackageId">
            <summary>
              The original ID of the Nuget package.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry.DisplayName">
            <summary>
              The display name for presenting end-user info on this library. Prefers the Nuget package title, or reverts to the
              Package ID if the former is not available.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry.Equals(JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry.CompareTo(JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LicenseDeclarationsApprovedByLegalTeam.CreateSimpleSpdxLicenses">
            <summary>
              BE VERY CAREFUL TO MODIFY THIS CODE BECAUSE EVERY CHANGE SHOULD BE APPROVED THE LEGAL TEAM!!!
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LicenseDeclarationsApprovedByLegalTeam.CreateSpdxExpressionLicenses">
            <summary>
              BE VERY CAREFUL TO MODIFY THIS CODE BECAUSE EVERY CHANGE SHOULD BE APPROVED THE LEGAL TEAM!!!
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LicenseDeclarationsApprovedByLegalTeam.CreateCustomLicenses">
            <summary>
              BE VERY CAREFUL TO MODIFY THIS CODE BECAUSE EVERY CHANGE SHOULD BE APPROVED THE LEGAL TEAM!!!
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LicenseDeclarationsApprovedByLegalTeam.CreatePackageIdentityMappings">
            <summary>
              BE VERY CAREFUL TO MODIFY THIS CODE BECAUSE EVERY CHANGE SHOULD BE APPROVED THE LEGAL TEAM!!!
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LicenseDeclarationsApprovedByLegalTeam.CreateLicenseFileMappings">
            <summary>
              BE VERY CAREFUL TO MODIFY THIS CODE BECAUSE EVERY CHANGE SHOULD BE APPROVED THE LEGAL TEAM!!!
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LicenseDeclarationsApprovedByLegalTeam.CreateCopyrightHoldersAliases">
            <summary>
              BE VERY CAREFUL TO MODIFY THIS CODE BECAUSE EVERY CHANGE SHOULD BE APPROVED THE LEGAL TEAM!!!
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.LicensesApprovedByLegalTeam">
            <summary>
              THIS IS THE CLOSED LIST OF LICENSES!!! PLEASE DO NOT ADD NEW LICENSES HERE WITHOUT APPROVING THE LEGAL TEAM!!!
              PLEASE ASK THE RESPONSIBLE PERSON BEFORE MODIFICATION IF YOU DON'T UNDERSTAND SOMETHING COMPLETELY OR DOUBT
              SOMETHING!!!
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler">
            <summary> 
            Provides a task scheduler that ensures a maximum concurrency level while 
            running on top of the ThreadPool. 
            </summary> 
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary> 
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary> 
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary> 
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary> 
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary> 
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the 
            specified degree of parallelism. 
            </summary> 
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param> 
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary> 
            <param name="task">The task to be queued.</param> 
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary> 
            Informs the ThreadPool that there's work to be executed for this scheduler. 
            </summary> 
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary> 
            <param name="task">The task to be executed.</param> 
            <param name="taskWasPreviouslyQueued"></param> 
            <returns>Whether the task could be executed on the current thread.</returns> 
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary> 
            <param name="task">The task to be removed.</param> 
            <returns>Whether the task could be found and removed.</returns> 
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary> 
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary> 
            <returns>An enumerable of the tasks currently scheduled.</returns> 
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.MsbuildFileJet">
            <summary>
            JetBrains-specific names of MSBuild file entities, as an addition to <see cref="T:JetBrains.Build.Helpers.Msbuild.MsbuildFile" /> values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.BinaryProjectOutputs">
            <summary>
            See docs in <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport._InputsInBinarySubplatforms_ReadMe_" />.
            Used in managed project stuffing. Produced only when running a non-incremental (isolated) build driven from ABuild. Specifies the folder which holds the binary reference files to be used instead of the project references.
            </summary>
            <seealso cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport._InputsInBinarySubplatforms_ReadMe_" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.JetAlwaysSignOnBuildAgents">
            <summary>
            Specify whether it should be signed on build agents always.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.JetPlatformFolder">
            <summary>
            Special property for set obj and bin folder for C++ projects.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.JetReferencesPrivate">
            <summary>
            <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Metadatas.Private" /> macro value on the <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.ItemGroups.Reference" /> which we generate.
            With no property value, has the default behavior.
            Or could be set to any desired True/False value on projects.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.JetRemoteCacheUrl">
            <summary>
            NOTE: Currently not emitted, example emit:         yield return new GeneratedMsbuildProperty(MsbuildFileJet.Properties.JetRemoteCacheUrl, distributedCacheParams?.RemoteCacheUrl ?? "", subandproj);
             NOTE: preferrably, DO NOT emit the common property, better emit a single property per each feature which wants to see it, this way it's better to track dependencies
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.JetVsInstallDirBaseName">
            <summary>
            Prefix for per-VS-version props which tell the VS install dir on this machine, in XXYY format, e.g <c>1200</c>. For instanceid-aware VSes like 15 it appends the instance ID to the version, but also picks a random any of them for publishing as the bare version without the instanceid suffix.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.ProfileName">
            <summary>
            Set to the name of the profile for which the targets file has been emitted.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Targets.RemoveSubstitutedProjectReferences">
            <summary>
            For <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesNonSdk" />, name of the emitted MSBuild target which removes task items with project references before the call into <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Targets.ResolveProjectReferences" />/<see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Targets.ResolveAssemblyReferences" />, to avoid warnings on missing projects if they are missing, or avoid use of actual local projects if they are present, but not included with the current profile.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.AssemblyKeyValueMetadata">
            <summary>
            A <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" /> parameter name give key-value pairs of strings (in a form of Name=Value in the item spec) which should be compiled into assembly attributes to specify custom metadata values (originally, by emitting an <see cref="T:System.ComponentModel.EditorAttribute" /> attribute, because it's a suitable string key-value attribute available without any extra references).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.Default">
            <summary>
            DefaultProjectConfigurationName.
            In main solution projects, their only project config.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.ExeAsDll">
            <seealso cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Properties.OutputType" />
            <summary>SDK Mini custom output type for building a .NET Core executable with the DLL extension.</summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.ForceModeOptimize">
            <summary>
            A <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" /> <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">parameter name</see> to transfer the <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ForceModeOptimize" /> artifact values (plural) to the SDK build.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.IsModeOptimize">
            <summary>
            A <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" /> <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">parameter name</see> to transfer the <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize" /> artifact value to the SDK build.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.ProductBinariesDirRelativeHint">
            <summary>
            A <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" /> <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">parameter name</see> to give a rel hint to product binaries dir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.SubstituteProjectReferencesWithDllReferencesDirectory">
            <summary>
            A <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" /> <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">parameter name</see> used by <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.SubstituteProjectReferencesWithDllReferencesList">
            <summary>
            A <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" /> <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">parameter name</see> used by <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.ValidateCleanCompilation">
            <summary>
            A <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" /> <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">parameter name</see> to transfer the <see cref="T:JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation" /> artifact values (plural) to the SDK build.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.Version4">
            <summary>
            Within an item whose <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">parameter name</see> is <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.AssemblyKeyValueMetadata" /> in <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" />, a name of the metadata which has the 4-component version number to be used with all assemblies.
            Expected to be defined when emitting the SDK Parameters.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetContent">
            <summary>
            Task items for non-DLL files in the subplatform package targets file, path is in <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.TargetPath" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetMetadata">
            <summary>
            In-package path to the JetMetadata file of a subplatform package, a task item in the subplatform package targets file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetReference">
            <summary>
            The full list of references in the targets file we emit into the produced subplatform packages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter">
            <summary>
            Classic projects are stuffed by emitting a side-Targets file which gets included into the project. This includes both statically-defined parameters to set up MSBuild and dynamic parameters which depend on the current profile settings.
            SDK-based do not have a side-Targets file. Their statically-defined parameters are defined right in the SDK, and dynamic per-profile parameters are written into the common settings file which is read by the build task of the SDK. For uniformity, this settings file is formatted as an MSBuild file, and all parameters are task items of this item name.
            These task items are formatted ready for passing as parameters to a <c>ProxyToSolutionCompiledTask</c>, including a <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName" /> on them.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetVsInvalidateMefDir">
            <summary>
            Lists dirs which should be deleted to invalidate MEF.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JsLibGen">
            <summary>
            A task item for our in-solution generator custom task.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.PackageLock">
            <summary>
            In the Nuget Package Version Locks file (see <see cref="T:JetBrains.Application.BuildScript.PackageVersionLocks" />), an imitation of an MSBuild task item which maps the key (usually, a package ID) in the item spec to the <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Metadatas.Version" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.TsLibGen">
            <summary>
            A task item for our in-solution generator custom task.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.Unreference">
            <summary>
            When referencing a Nuget package with <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.ItemGroups.PackageReference" />, allows to exclude certain DLLs in it from referencing. Given as a separate task item for now.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.IsDevelopmentDependency">
            <summary>
            In the <see cref="T:JetBrains.Application.BuildScript.PackageVersionLocks" /> file, an attribute on an entry (imitates setting MSBuild file metadata on a task item) which makes <see cref="F:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata.IsDevelopmentDependency" />.
            Might be either unset, or a valid <see cref="T:System.Boolean" /> value string representation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.IsEmbedInteropTypes">
            <summary>
            1)
            Custom meta on <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.XItemGroups.PackageReference" /> for our SDK Mini.
            2)
            In the <see cref="T:JetBrains.Application.BuildScript.PackageVersionLocks" /> file, an attribute on an entry (imitates setting MSBuild file metadata on a task item) which makes <see cref="F:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata.IsDevelopmentDependency" />.
            Might be either unset, or a valid <see cref="T:System.Boolean" /> value string representation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.RuntimeIds">
            <summary>
            In the <see cref="T:JetBrains.Application.BuildScript.PackageVersionLocks" /> file, an attribute on an entry (imitates setting MSBuild file metadata on a task item) which makes <see cref="F:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata.RuntimeIds" />.
            Might be either unset, or a comma separated list of <see cref="T:JetBrains.Util.JetRid" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.ParameterName">
            <summary>
            When passing all task params in a TaskItem, this metadata holds the parameter name in that item.
            By the <c>ProxyToSolutionCompiledTask</c> / <c>Satellite</c> MSBuild task convention.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.TargetFrameworkVersion">
            <summary>
            Same as prop name, but for metadata.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.TargetFrameworkVersionNumber">
            <summary>
            Same as prop name, but for metadata.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XMetadatas.TargetPath">
            <summary>
            Path on the <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetContent" /> task items in the subplatform package targets file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XProperties.JetSdkProjectParameterFilePath">
            <summary>
            When writing out <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact" /> file to a custom location (e.g. when compiling), passes the specific path to this file to MSBuild.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XProperties.TargetFrameworkVersionNumber">
            <summary>
            Like <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Properties.TargetFrameworkVersion" />, but as a single number for linear order.
            Format: Major*1000 + Minor, e.g. 3005 for v3.5.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CacheUtil.ourCacheEntry">
            See https://github.com/Kitware/CMake/blob/master/Source/cmState.cxx#L815
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CacheUtil.ourCacheEntryQuoted">
            See https://github.com/Kitware/CMake/blob/master/Source/cmState.cxx#L818
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.CMakeTarget.ActivateTrackFileAccessMsBuild">
            Bug: The TrackFileAccess property should be enabled to activate the incremental build for cl.exe and rc.exe!!! See https://youtrack.jetbrains.com/issue/NP-1435
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.EnvironmentValue.Paths">
            <summary>
              null - use <see cref="F:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.EnvironmentValue.Str" /> instead.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICMakeTarget.ActivateTrackFileAccessMsBuild">
            Bug: The TrackFileAccess property should be enabled to activate the incremental build for cl.exe and rc.exe!!! See https://youtrack.jetbrains.com/issue/NP-1435
            Note: Only MsBuild!!!
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICMakeTarget.ToolsetMsBuild">
            Note: Only MsBuild!!!
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.ICMakeTarget.WindowsSdkVersionMsBuild">
            Note: Only MsBuild!!!
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.NativeSolutions.Impl.NativeSolutionsUtil.GetIsolatedPathDirs_Windows">
            Note: Calculate overridden PATH to isolate tools. Very important on agents!!!
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeDefaultHelper.GetSolution(System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Compile.NativeSolutions.BaseNativeSubplatformArtifact},JetBrains.Util.RelativePath,JetBrains.Util.RelativePath,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,System.Func{JetBrains.Application.BuildScript.Compile.NativeSolutions.BaseNativeSubplatformArtifact,System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeFile}},System.Func{JetBrains.Util.JetRid,System.Collections.Generic.IEnumerable{JetBrains.Util.RelativePath}},JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeDefaultHelper.PostfixMode)">
            <summary>
              Get the current platform solution for all suitable architectures and configurations in packages splitted into
              <see cref="T:JetBrains.Application.BuildScript.Compile.NativeSolutions.NativeSubplatformType" /> and <see cref="!:getSubplatformPostfix" />. The subplatform names has
              following format: <i>&lt;prefix&gt;\&lt;platform&gt;\&lt;subplatformType&gt;\&lt;postfix&gt;</i>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.NestedBuildRunnerOnSources">
            <summary>
            Runs a nested build which works off sources.
            Sets up parameters for the nested stage run correctly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.NestedBuildRunnerOnSources.JetBrains#Application#BuildScript#Compile#INestedBuildRunnerOnSources#RunNestedBuildOnSourcesForArtifactsAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Build.Serialization.AssemblyQualifiedTypeName,System.Action{JetBrains.Build.Running.IBuildRunnerRequest},JetBrains.Application.BuildScript.Solution.AllAssembliesFilter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.Notarization.INotaryService.IsAvailable">
            <summary>
              Gets whether it's possible to notarize with the server at this moment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.Notarization.INotaryService.NotarizeAsync(JetBrains.Util.Storage.ImmutableFileItem)">
            <summary>
              If the Notary service is available, uploads the file for notarizing to Apple S3 and waits the result.  Otherwise throws an exception.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.Notarization.NotarizationServerInfo">
            <summary>
              Identifies the Notary service access info by giving issuer id, key id, and its private key, similar to <see cref="T:JetBrains.Application.BuildScript.Helpers.ToolServerInfo" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.Other">
            <summary>
            Generic. Goes to the main package, <see cref="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetBrainsContentFilesFolder" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.ManagedAssembly">
            <summary>
            Managed assembly (.dll or .exe). Goes to the main package, <see cref="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetBrainsContentFilesFolder" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.NativeExecutableOrSharedLibrary">
            <summary>
            Native executable or shared library (.dll, .so, .dylib, .exe or w/o extension). Goes to the main package, <see cref="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetBrainsContentFilesFolder" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.NativeLinkLibrary">
            <summary>
            Native link library file. Goes to the main package, <see cref="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetBrainsContentFilesFolder" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.ProgramDatabase">
            <summary>
            PDB file. Goes to the separate .symbols package.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.BuildTargets">
            <summary>
            .targets or .props file to import in package main build files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.XmlDocumentation">
            <summary>
            XmlDoc file for some managed assembly. Goes to the main package, <see cref="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetBrainsContentFilesFolder" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.NugetBuildFile">
            <summary>
            A .targets or .props file which should be recognized as such by Nuget when processing the main package as a reference. Goes to the main package, Nuget's Build folder.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.PackagePartCatalogArtifact">
            <summary>
            A component in the subplatform package components which holds the part catalog for the package managed assemblies.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.RequestPlatformCleanCompile">
            <summary>
            The Platform project has been cleaned up of all the compilation warnings.
            Useless technical values have been suppressed, and useful ones have been fixed.
            Note that this is also possible to enable the warning for in-VisualStudio analysis yet disable it for compilation.
            To maintain this clean state, a validator is imposed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SkipAssemblyRewrites">
            <summary>
            Skips the compilation stage steps (those before obtaining the nuget packages) that rewrite compiled assembly before they're added to the package.
            An example of such rewrites are obfuscation steps.
            This interferes with the "Do not compile" local scenario because after the DLLs are extracted to Bin Dir from the compiled nuget packages, it would be used as if it were just compile and will get into rewrite for the second time.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Compile.SkipAssemblyRewrites.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements">
            <summary>
            When we're about to compile a subplatform (for example, get a nupkg for it by running a build with it as a <see cref="T:JetBrains.Application.BuildScript.Solution.SubplatformOnSources" /> for <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" /> goal), tells which special requirements this subplatform has in this mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.RuntimeRequirement.CompareTo(JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.RuntimeRequirement)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.RuntimeRequirement.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.RuntimeRequirement.Equals(JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.RuntimeRequirement)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.RuntimeRequirement.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements.RuntimeRequirement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackaging">
            <summary>
            Components which are to be serialized into the package metadata.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingBase">
            <summary>
              <para>Base class for different stages of components intended for being put into subplatform Nuget packages.</para>
              <para>The full family of these files includes:</para>
              <para>• <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackaging" /> — the most common one ("Common"). Yield this if not sure and want to add smth to a package.</para>
              <para>• <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingFast" /> — yield instead of the Common one if your yielding graph is FAST enough to be included with Prepare Working Copy. I.e. it shan't result in a compilation. These items are merged into the Common list automatically.</para>
              <para>—</para>
              <para>Scenarios:</para>
              <para>• Main, or Full. When producing Nuget packages for subplatforms, either to deploy, or to local-install. All producers for Common and Fast items are executed (all end up in the Common list), and fed into the package producing code. That's what also happens when you run the full version of the Extract to Bin Dir task. All the necessary compilations are invoked in the course.</para>
              <para>• Prepare Working Copy. Only FAST items are produced, and only them are written to the Lightweight Metadata Files (<see cref="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.JetMetadataLightInApplicationPackageExt" />). This should be somewhat enough to develop and run tests, even though a full Local Install or Extract to Bin Dir is recommended. But FAST is FAST and can be done before opening the solution.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingBase.ComponentForSerialization">
            <summary>
            The component instance to be serialized into the package metadata.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingBase.SubplatformName">
            <summary>
            The target subplatform.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingFast">
            <summary>
            Components which are to be serialized into the package metadata, and which can be produce fast enough to be run on the Prepare Working Copy stage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingFast.FastToCommon(JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackagingFast[],JetBrains.Util.ILogger)">
            <summary>
            Contributes the fast items to the full list of items.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging">
            <summary>
            A file which will be put into the Subplatform Binaries Package of the specified subplatform, which is the primary compilation output for that subplatform.
            You should yield this artifact if you want to add something to the package being produced for the subplatform.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingBase">
            <summary>
              <para>Base class for different stages of files intended for being put into subplatform Nuget packages.</para>
              <para>The full family of these files includes:</para>
              <para>• <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging" /> — the most common one ("Common"). Yield this if not sure and want to add smth to a package.</para>
              <para>• <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingFast" /> — yield instead of the Common one if your yielding graph is FAST enough to be included with Prepare Working Copy. I.e. it shan't result in a compilation. These items are merged into the Common list automatically.</para>
              <para>• <see cref="T:JetBrains.Application.BuildScript.Compile.CompiledSubplatformFile" /> — a special flavor of files which are the compilation result. Needed for some hacking when you need to reference other compiled files before they're in the package. These items also are merged into Common.</para>
              <para>• <see cref="T:JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging" /> — don't yield these. They're produced out of Common by applying <see cref="T:JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging" /> handler. And that's what specifically gets added into the package.</para>
              <para>—</para>
              <para>Scenarios:</para>
              <para>• Main, or Full. When producing Nuget packages for subplatforms, either to deploy, or to local-install. All producers for Common, Fast and Compiled items are executed (all end up in the Common list), then transformers are applied, then the resulting Transformed list is fed into the package producing code. That's what also happens when you run the full version of the Extract to Bin Dir task. All the necessary compilations are invoked in the course.</para>
              <para>• Prepare Working Copy. Only FAST items are produced, and only them are written to the outdir. This should be somewhat enough to develop and run tests, even though a full Local Install or Extract to Bin Dir is recommended. But FAST is FAST and can be done before opening the solution.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingFast">
            <summary>
            A file which will be put into the Subplatform Binaries Package of the specified subplatform, which is the primary compilation output for that subplatform.
            You should yield this artifact if you want to add something to the package being produced for the subplatform.
            FAST mode: only yield this from steps which are fast to execute, so that this could be run as a part of the Prepare Working Copy task.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingFast.FastToCommon(JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingFast[],JetBrains.Util.ILogger)">
            <summary>
            Contributes the fast items to the full list of items.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformOriginalRevision">
            <summary>
            Package-embedded metadata which points to the original SCC revision which compiled this package.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformProjectExemptFromManagedAssemblies">
            <summary>
              <para>Allows to mark a subplatform project to be exempt from the <see cref="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.ManagedAssembly" /> listing, its output will be packaged with the <see cref="F:JetBrains.Application.BuildScript.Compile.PackageFileRole.Other" /> instead.</para>
              <para>As a result, such a project output won't be listed with <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.Files" /> as an assembly, catalogs won't be build for it, components won't run from it, and so on.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SubplatformProjectExemptFromManagedAssemblies.ProjectInSubplatform">
            <summary>
            Rel path to the project file in the subplatform. Must exist.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SubplatformProjectExemptFromManagedAssemblies.SubplatformName">
            <summary>
            Name of the subplatform with the project.
            Must exist as a subplatform-on-sources.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformThirdPartyLicenseInfo">
            <summary>
            Third-party license info for specified files in subplatform
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact">
            <summary>
              <para>In a subplatform package, there are assemblies, some of them referencing assemblies from dependency packages. If those packages are development-only (say, Visual Studio), such references might be missing on the target machine, and that's expected and non-critical for the means of cataloging and so on. This is a whitelist of assemblies which are allowed to be missing when resolving references.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact.WhitelistMissingAssemblyReferences" /> is a Subplatform Package Component (<see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackaging" />), embedded into the packages and then loaded at runtime by this name.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact" /> is an artifact emitted at sources stage which is then turned into <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformComponentForPackaging" /> and written to the package, as well as used for other parties which want to know the list of assemblies-ok-to-be-missing.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact.#ctor(JetBrains.Application.BuildScript.Solution.SubplatformName,JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact.WhitelistMissingAssemblyReferences)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact.AssemblyReferences">
            <summary>
            The stuff to whitelist.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact.SubplatformName">
            <summary>
            The target subplatform this applies to.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact.WhitelistMissingAssemblyReferences">
            <summary>
            Data storage class, and a package component.
            <inheritdoc cref="T:JetBrains.Application.BuildScript.Compile.SubplatformWhitelistMissingAssemblyReferencesArtifact" />
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SymbolsMarker.Native">
            <summary>
              All native symbols.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.SymbolsMarker.Managed">
            <summary>
              All managed symbols.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.TimeBombSpan">
            <summary>
              <para>Causes the subplatform packages compiled in presence of this artifact to be timebombed at the moment given by the time span in this object.</para>
              <para>Specifies the timespan between <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BuiltOn" /> and <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BestBefore" />.</para>
              <para>A NULL or nonpositive value (an empty string in string form) will result in no BB on packages.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.TimeBombSpan.TimeSpan">
            <summary>
              <para>The timespan between <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BuiltOn" /> and <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BestBefore" />.</para>
              <para>A NULL or nonpositive value will result in no BB on packages build in presence of this value.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging">
            <summary>
            That's what actually gets packaged into the subplatform nugget, after applying all of the transforms.
            Don't yield these directly, use <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging" /> instead.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging.ApplyTransformAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging[],JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging[],JetBrains.Util.ILogger)">
            <summary>
            Takes <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging" />, runs <see cref="T:JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging" /> on them, produces <see cref="T:JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging" /> which will go into the nuggets.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging.Transformed.AssertTransformationsOrder">
            <inheritdoc cref="T:JetBrains.Application.BuildScript.Compile.TransformSubplatformFilesForPackaging.AssertTransformationsOrder" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.TransformedSubplatformFileForPackaging.Transformed.TransformedFiles">
            <summary>NULL if you do not want to modify.</summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.TransformSubplatformFilesForPackaging.AssertNoMoreManagedAssemblies(JetBrains.Application.BuildScript.Compile.ITransformSubplatformFilesForPackaging,System.Collections.Generic.JetHashSet{JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging})">
            <summary>
            Asserts the list of managed assemblies in this package is not modified after your transform runs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.TransformSubplatformFilesForPackaging.AssertTransformationsOrder">
            <summary>
            For a transform, asserts that subsequent transformations do not violate its expectations.
            Like, if it computes data from all assemblies in the package, subsequent transformations must not be adding new assemblies.
            </summary>
            <param name="resultsAttempted">The output of some later transform which should be tested for being consistent with expectations of this transform.</param>
            <param name="transformerAttempted">The transformer which did the transform we're inspecting. For using its name in the diagnostics.</param>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk">
            <summary>
            Controls how the validate/autofix steps run.
            On the server, they should not be touching the sourcecontrolled files. On client, when run by command, they should apply fixes automatically where applicable.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation">
            <summary>
            If this artifact is set to <c>True</c>, the <see cref="T:JetBrains.Application.BuildScript.Compile.Validation.ValidateWorkingCopyDirectoryCaseFolding" /> will not do its checks.
            This suppression is intended for server builds because, while locally it helps with fixing the local case mismatches, on the server it's (a) not needed due to a case-insensitive filesystem always, (b) not wanted to do WC modifications, (c) not consistent with the <see cref="T:JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk" /> flag because the server does not have it and it would just issue an error without this flag.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.SkipWorkingCopyDirectoryCaseFoldingValidation.IsSkipWorkingCopyDirectoryCaseFoldingValidation">
            <summary>
            If this artifact is set to <c>True</c>, sources will not be validated before being compiled into Nuget packages.
            Locally this speeds up repeated runs of packages generation.
            Shan't be set to <c>True</c> on the server.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.Validation.SourcesValidationResult">
            <summary>
            Pulls various validations on the sources codebase — which don't require the compiled binary form, but require the source code to be available in the home dir.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation">
            <summary>
            Requests that compilation of certain subplatforms be clean.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation.SubplatformOrCollection">
            <summary>
            Denotes a subplatform or a collection of subplatforms for which clean compilation without warnings should be ensured.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation.EmitCleanCompileIntoSdkParameters(JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation[])">
            <summary>
            Let SDK-Mini projects know the prefixes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.FileEncodingVerdict.OK">
            <summary>
            Either pure ASCII or UTF-8 with a BOM.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.FileEncodingVerdict.NonAsciiNoEncoding">
            <summary>
            A file without BOM with non-ASCII chars.
            Suspicious for a 8bit encoding, which means characters might be interpreted differently depending on the context: hg will think then utf8, C# will consider ANSI, either 1252 or 1251 or whatever else. The worst case scenario I've seen were a Japanese box on which some of the 1252-usual chars were illegal bytes breaking compilation. To deal with that, make it Unicode.
            Also might be a Unicode file without a BOM, but also to avoid ambiguity we'd like to enforce the BOM.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.FileEncodingVerdict.ZeroBytes">
            <summary>
            The file has zero bytes in it. Either a non-text file with a text extension. Or maybe UTF-16 without a byte order mark. See below for that.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.FileEncodingVerdict.Utf16">
            <summary>
            A UTF-16 file with a BOM.
            Should better be changed to UTF-8. For instance, HG thinks such files binary (by the zero bytes) and fails with all diff/merge stuff, so any merge conflicts are a mess.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.FileEncodingVerdict.Utf32">
            <summary>
            A UTF-32 file with a BOM.
            Should better be changed to UTF-8. For instance, HG thinks such files binary (by the zero bytes) and fails with all diff/merge stuff, so any merge conflicts are a mess.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.SourceFilesForEncodingCheck.#ctor">
            <summary>
            Default files filter.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.SourceFilesForEncodingCheck.RegexAllow">
            <summary>
            Allow-filters are applied to the file set first. Only matching files are let thru.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compile.Validation.ValidateFileEncoding.SourceFilesForEncodingCheck.RegexDeny">
            <summary>
            Deny-filters are applied to the allowed file set. Matching files are dropped out.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compile.Validation.WorkingTree.WorkingCopyTreeNodes.GetLocalNameCasingInIndex(JetBrains.Util.StringSlice,JetBrains.Util.StringSlice)">
            <summary>
            For the file with local name <paramref name="localname" /> in directory <paramref name="directory" />, returns its casing as given in the index, matching case-insensitively, or an empty string if the file is not present in the index.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Compression.ZipCompress(JetBrains.Util.RelativePath,System.Collections.Generic.IEnumerable{JetBrains.Util.Storage.ImmutableFileItem},JetBrains.Util.ILogger,System.String,JetBrains.Application.BuildScript.Compression.WhenToCompressEntry)">
            <summary>
            Creates a ZIP file, streaming fashion, without using intermediate storage.
            Makes sure all entries have their sizes assigned correctly.
            Assesses each entry if it's compressable and writes in storing mode if not.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Compression.WhenToCompressEntry">
            <summary>
            Per-entry compression control.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compression.WhenToCompressEntry.IfCompressable">
            <summary>
            Tests each entry content on whether compression would actually decrease its size, so it won't re-compress already-compressed entries (eg nested zips/opcs/nugets).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compression.WhenToCompressEntry.Never">
            <summary>
            Stores all entries without compression. Efficient for in-memory direct stream access. Saves time if you know your stuff won't compress.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Compression.WhenToCompressEntry.Always">
            <summary>
            Forces compression on every entry.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.DeployablePackage">
            <summary>
            A package result of the build which should go to deployment.
            This includes subplatform-compiled packages and Nuget references of subplatforms (those which are not development-only references).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.DeployablePackage.Subplatforms">
            <summary>
            Lists the subplatforms for which this package with these flags has been issued.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.DeployablePackage.DeployablePackageFlags.IsRetrievable">
            <summary>
            The package is retrievable from the external Nuget server and has been obtained from it (rather than calculated during the build), so there's no need in carrying it around.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.DeployablePackage.DeployablePackageFlags.IsNativeImage">
            <summary>
            The package has been built as a native image for the subplatform managed DLLs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.DistributedCacheParamsEx.Init(JetBrains.Build.Platform.DistributedCache.DistributedCache,JetBrains.Application.BuildScript.DistributedCacheParams,JetBrains.Util.ILogger)">
            <summary>
            Does the full init of the distrocache for use in our infrastructure.
            </summary>
            <param name="distrocache">The cache instance.</param>
            <param name="cacheparams">The cache parameters object, available for import as an optional build artifact.</param>
            <param name="logger">Setup the cache to log its messages into this logger.</param>
            <returns>Fluent.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.DistributedCacheParamsEx.Init(JetBrains.Build.Platform.DistributedCache.DistributedCache,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.DistributedCacheParams},JetBrains.Util.ILogger)">
            <summary>
            Does the full init of the distrocache for use in our infrastructure.
            </summary>
            <param name="distrocache">The cache instance.</param>
            <param name="cacheparams">The cache parameters object, available for import as an optional build artifact.</param>
            <param name="logger">Setup the cache to log its messages into this logger.</param>
            <returns>Fluent.</returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalMakePackedInstaller">
            <summary>
            The end-user entry point artifact to create a packed installer and copy it to Bin folder.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalPrepareWorkingCopy">
            <summary>
            The end-user entry point artifact for preparing the local working copy.
            Runs <see cref="T:JetBrains.Application.BuildScript.PreCompile.LocalPrepareWorkingCopy" /> in a nested build with all the full context.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage">
            <summary>
            The main local entry point for running second-stage builds which require already-compiled packages produced in the source stage.
            Runs both stages of the build: first, the source stage to produce the packages (for <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" /> artifact, with all options for Incremental Build or Dont Compile, if passed); then, the second stage for the given <see cref="T:JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact" /> artifact).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage.RunBinaryStage(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact,JetBrains.Application.BuildScript.ISourceStageBinStageBuild)">
            <summary>
            Implements the local binstage entrypoint.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunSourceStage">
            <summary>
            The entry point for running a source-stage build (i.e. right on <c>BuildScript</c> sources from the main solution, no product packages compiled yet).
            Runs the source stage on build script sources from across the whole solution (from under <c>BuildScript</c> folders in Subplatform and Project dirs, regardless of whether they're included with any project) for the given <see cref="T:JetBrains.Application.BuildScript.SourceStageObjectiveArtifact" /> artifact.
            The difference beween running the build for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunSourceStage" /> with your target artifact in <see cref="T:JetBrains.Application.BuildScript.SourceStageObjectiveArtifact" /> and running the build directly for your target artifact is that the standard build bootstrap code only cosiders build script sources under Platform Core, for speed and reproduceability and because bootstrap code does not have the <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator" /> yet to find all build scripts correctly, while <see cref="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunSourceStage" /> already runs on the up-to-date Shell project build script code and loads build scrtips for the whole solution, so it's a way of running a build for an artifact which sits under another project.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunSourceStage.RunSourceStage(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.SourceStageObjectiveArtifact,JetBrains.Application.BuildScript.ISourceStageBinStageBuild)">
            <summary>
            Implements the local source stage entrypoint.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.EntryOpenInIde">
            <summary>
            The end-user entry point artifact for preparing the local working copy + opening solution in Visual Studio.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.EntryStdAfx">
            <summary>
            The test entry point for fast debugging of build steps.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks">
            <summary>
            Prototype for splitting and running the build across the multiple hosts, as needed to have compilations run on specific runtime.
            For now, expects the full sources codebase to be available at every host.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryCompileAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPreviousLayerResults},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildArtifact[]},JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Build.Running.INestedBuildRunner,JetBrains.Build.Helpers.Nuget.NugetConfigFile,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
            </summary>
            <param name="lifetime"></param>
            <param name="homedir">Product home dir to build from.</param>
            <param name="maybePrevResults">Links to results of prev layers. Based on this, decides which layer to build.</param>
            <param name="maybeArtifacts">Custom string artifacts to apply to the Compile stage. Artifacts applied to this build WILL NOT be applied to compilation automatically.</param>
            <param name="allassSrc">Takes All Assemblies from the build pipeline, which means it's affected by <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesFilter" /> and <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile" />/<see cref="T:JetBrains.Application.BuildScript.ProfileNameArtifact" />/<see cref="T:JetBrains.Application.BuildScript.Solution.Profiles.ProfilesArtifact" />. Allows thus limiting the graph, issues a warning.</param>
            <param name="nester"></param>
            <param name="nuconfig"></param>
            <param name="tasker"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryPostCompileAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPreviousLayerResults},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildArtifact[]},JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPostCompileObjective[],JetBrains.Build.Running.INestedBuildRunner,JetBrains.Build.Helpers.Nuget.NugetConfigFile,JetBrains.Util.ILogger)">
            <summary>
            </summary>
            <param name="lifetime"></param>
            <param name="maybePrevResults">Links to results of prev layers. Based on this, decides which layer to build.</param>
            <param name="maybeArtifacts">Custom string artifacts to apply to the Compile stage. Artifacts applied to this build WILL NOT be applied to compilation automatically.</param>
            <param name="objectives">Tells for which objectives to run the binary stage of the postcompile build.</param>
            <param name="nester"></param>
            <param name="nuconfig"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.AssertPrevLayersConsistent(JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPreviousLayerResults},System.Nullable{JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.PlannedLayers},JetBrains.Util.ILogger)">
            <summary>
            No stages have been skipped from prev layers. A new layer should be getting all of the results.
            </summary>
            <returns>Number of prev layers in the set.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.SetCommonStageInputs(JetBrains.Build.Running.IBuildRunnerRequest,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildArtifact[]},JetBrains.Build.Helpers.Nuget.NugetConfigFile)">
            <summary>
            Common for bin/src
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.TossSubsIntoBuildLayers(JetBrains.Application.BuildScript.Solution.AllAssembliesAccess,System.Collections.Generic.Dictionary{JetBrains.Application.BuildScript.Solution.SubplatformName,JetBrains.Application.BuildScript.Compile.SubplatformCompilationRequirements},JetBrains.Util.ILogger)">
            <summary>
            Paint graph nodes (subs) with layer numbers
            Platform core is layer #0
            Any other node is a max of all parent dependencies, a parent dependency takes the same layer as parent if it can be built on the same host, or adds 1 if needs to switch host
            Then we get the number of layers we'd have, might need multiple kinds of hosts within each layer
            Assume we complete each layer first and then run the next layer with all build results from all previous layers
            NOTE: for now, we assume all neutral subs use WinNT
            </summary>
            <param name="aaa"></param>
            <param name="mapRequirementsAsDeclared"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryRunMultiHostBuildPostCompileStage">
            <summary>
            Entry point for the Binary Stage Post-Compile build. Also carries the outputs. They'd get written under the outdir of the build.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryRunMultiHostBuildPostCompileStage.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryRunMultiHostBuildPostCompileStage.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryRunMultiHostCompileStage">
            <summary>
            Entry point for the Compile build. Also carries the outputs. They'd get written under the outdir of the build.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryRunMultiHostCompileStage.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.EntryRunMultiHostCompileStage.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.Layer.Nodes">
            <summary>
            Build nodes planned on this layer.
            They can run in parallel and do not depend on each other.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildArtifact">
            <summary>
            Input artifacts for a multi host build.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildArtifact.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildCompileOutputs">
            <summary>
            Results from prev layer builds.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildCompileOutputs.ToFileItem">
            <summary>
            Serializes to a file item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildCompileOutputs.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildCompileOutputs.JetBrains#Util#Storage#StructuredStorage#IStructuredStorageSerializable#GetObjectData(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPostCompileObjective">
            <summary>
            Supply this input artifact to instruct the binary post-compile stage run a build for the target given here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPostCompileObjective.ArtifactName">
            <summary>
            Name of the artifact which should be an objective for a multi-host build's binary post-compile stage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPostCompileObjective.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPreviousLayerResults">
            <summary>
            Results from prev layer builds.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPreviousLayerResults.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPreviousLayerResultsDir">
            <summary>
            Dir with results from prev layer builds (checked recursively).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.MultiHostBuildPreviousLayerResultsDir.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.NodeOnLayer">
            <summary>
            Single build node on a layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.NodeOnLayer.Runtime">
            <summary>
            Requirement for running this node.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.NodeOnLayer.Subplatforms">
            <summary>
            Subplatforms to be built on this node.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.MultiHostBuildTasks.PlannedLayers">
            <summary>
            Set of layers planned for build.
            Each layer is run sequentially after prev layers and given all of their outputs.
            Nodes within a layer run in parallel.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks">
            <summary>
            Implementation for TeamCity build entry points.
            Has code which begins running on TeamCity and then executes the regular compile or binary stages. Knows how to pass artifacts out to furhter builds and how to get them from preceding builds in the chain.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.AbuildCurrentExeFileName">
            <summary>
            When bootstrapping in the Platform Core chain starting build, makes a build runner executable which is fully compatible with the current sources, names it thus, and passes along the chain as an artifact dependency. All further builds run off it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.BuildEngineAndCoreScriptFileName">
            <summary>
            The build engine binaries and core build script are saved to this file by the bootstrapper build. The outermost isolated build session is run off this set for all other compilations and binary stages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.IsolatedRequestDefaultOutputDirName">
            <summary>
            Default name of the output dir for the build which produces the isolated request (<see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.EntryTeamCityMakeIsolatedRequest" />) to write its outputs, unless overridden.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.IsolatedResultDefaultOutputDirName">
            <summary>
            Default name of the output dir for the build which runs the build on the isolated request and makes the raw isolated result.
            By default, the dir is created under where the isolated request/bootstrap/runner is located, so it's under the <see cref="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.IsolatedRequestDefaultOutputDirName" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.GetPackagesFromParentBuildsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Build.Helpers.TeamCity.TeamCityBuildHelpers.TeamCityPropertiesMockable,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestBootstrapMode},JetBrains.Util.ILogger)">
            <summary>
            When running inside a TC build, scans all snapshot dependencies, transitively, to fill <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.DeployablePackagesFromParentBuilds" />.
            This is expected to run in a non-isolated build, which has access to <see cref="T:JetBrains.Build.Helpers.TeamCity.TeamCityProperties" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.InvokeInnerOnIsolatedRequest(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapRequestFileLocation,JetBrains.Build.Running.INestedBuildRunner,JetBrains.Util.ILogger)">
            <summary>
            Runs for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultOuterFile" />, called by the second stage of the TC bootstrap build which should take the isolated request and execute a build for it.
            Runs a nested build on the isolated request (supposedly, for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultInnerFile" />, but that does not matter much for this code).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.MakeCompileCoreAndBootstrapResult_IncludeCompileResult(JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultFile)">
            <summary>
            Platform Core Compile, among other things, also does the regular Compile.
            Take the regular compile results and repost them as our result.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.MakeCompileCoreAndBootstrapResult_PrepareBootstrapper(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.DeployablePackage[],JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Build.Running.INestedBuildRunner,JetBrains.Build.Helpers.Nuget.NugetConfigFile,JetBrains.Util.ILogger)">
            <summary>
            Platform Core Compile prepares build runner env for all other builds off the current sources, bootstrapped.
            This part makes the build runner, necessary config files, and preps the entry scripts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.MakeCompileResult(System.Collections.Generic.IList{JetBrains.Application.BuildScript.DeployablePackage},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ListProducePackagesFromPreviousBuilds},JetBrains.Util.ILogger)">
            <summary>
            Runs within the regular Compile stage after <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" />s have been produced, to pack them in a form for consumption in further builds in the chain (with unique produces as package bodies, and with retrievable packages listed as IDs for retrieval).
            This is the target artifact for Compile builds on the CI server.
            </summary>
            <param name="dpkgs">Compile stage main results.</param>
            <param name="transits">Tells which packages are expected from previous builds as produces, mark them as passthru.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.PublishAndAssignToRequestBuildNumber(JetBrains.Build.Running.EitherBuildRunnerRequest,JetBrains.Util.ILogger)">
            <summary>
            Publlishes a build number based on the current WAVE and current versuffix to TC.
            Remember to pass this versuffix to all nested builds, otherwise theirs might differ (will be generated from their own current time).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.UnmakeRootDir(JetBrains.Util.FileSystemPath,JetBrains.Util.ILogger)">
            <summary>
            Operations on the root dir after running the build.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.MakeIsolatedRequestAsync_Bootstrappers(JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.BuildRunnerCoreExeLocation,JetBrains.Util.RelativePath,JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestHomeDir,JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestBootstrapMode,JetBrains.Util.ILogger)">
            <summary>
            Along with the isolated request file, writes the bootstrapping code to execute it: the build runner core, and the cmd entry point.
            </summary>
            <param name="runnercore">Path to the runner core file, must have been given when starting the build.</param>
            <param name="relRequest">The expected request file name, no dir.</param>
            <param name="homedirForDiag">The PHDA. The request is bound to this PHDA, write its name to the bootstrapper to then make sure it runs correctly.</param>
            <param name="teamCityMakeIsolatedRequestBootstrapMode"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.BuildRunnerCoreExeLocation">
            <summary>
            Tells the build the full path to a Build Runner Core EXE (compatible with the current sources), so that the implementation could schedulle scripts executing it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.BuildRunnerCoreExeLocation.#ctor(System.String)">
            <param name="filepath"></param>
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.BuildRunnerCoreExeLocation.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.CmdEmit.ForEach(System.Action{System.Text.StringBuilder,JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.CmdEmit})">
            <summary>
            Invokes the callback for each OS, builds a multi-OS command file.
            </summary>
            <param name="F"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.CmdEmit.FullPath(JetBrains.Util.RelativePath)">
            <summary>
            Like <see cref="P:JetBrains.Util.IPath.FullPath" />, but with the current directory separator char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.CmdEmit.FullPath(JetBrains.Util.FileSystemPath)">
            <summary>
            Like <see cref="P:JetBrains.Util.IPath.FullPath" />, but with the current directory separator char.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.DeployablePackagesFromParentBuilds">
            <summary>
            Stores packages obtained from the prev builds, after they're all downloaded and collected together.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.EntryTeamCityMakeIsolatedRequest">
            <summary>
            The entry point for the CI server build which reads the settings from the server and prepares the request to run the build in a fully isolated manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.EntryTeamCityMakeIsolatedRequest.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.EntryTeamCityMakeIsolatedRequest.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ListProducePackagesFromPreviousBuilds">
            <summary>
            Written to the isolated request by <see cref="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.MakeIsolatedRequestAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment,JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestHomeDir,JetBrains.Build.Helpers.Nuget.NugetConfigFile,JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.BuildRunnerCoreExeLocation,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Build.Helpers.TeamCity.TeamCityBuildHelpers.TeamCityPropertiesMockable,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestBootstrapMode},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestObjective},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Solution.AllAssembliesFilter},JetBrains.Util.ILogger)" />, lists which packages were obtained from previous builds as their produces, so that <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData" /> could list them as required pasthru packages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ListProducePackagesFromPreviousBuilds.PassThruPackages">
            <summary>
            Package IDs, sorted.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ListProducePackagesFromPreviousBuilds.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ListProducePackagesFromPreviousBuilds.JetBrains#Util#Storage#StructuredStorage#IStructuredStorageSerializable#GetObjectData(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ParentBuildCompileDataRetrieved.ToString">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ParentBuildInfo.PropNameDeclareProducingCompileResult">
            <summary>
            TC prop name which marks a build type as declaring that it MUST produce a compile result, and missing compile result is an error.
            This name MUST be in sync between the TeamCity configuration property and C# TeamCityTasks code.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ParentBuildInfo.BuildId">
            <summary>
            ID of the specific build instance, e.g. <c>22357579</c>.
            Used for identifying build in queries, like getting props and artifacts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ParentBuildInfo.BuildTypeExtId">
            <summary>
            External ID of the build type, e.g. <c>DotNetDiv_Wave11_Compile_DotMemory</c>.
            Used for diagnostic display.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ParentBuildInfo.Properties">
            <summary>
            TeamCity properties, as they were reported on the build.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.ParentBuildInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapRequestFileLocation">
            <summary>
            Full serialized isolated build request for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultInnerFile" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapRequestFileLocation.#ctor(System.String)">
            <param name="filepath"></param>
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapRequestFileLocation.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultInnerFile">
            <summary>
            See <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultOuterFile" />. This artifact is run as an inner build within it, to execute the actual isolated request file from disk.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultInnerFile.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultInnerFile.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultOuterFile">
            <summary>
            Build result for the isolated request run in the Compile Platform Core build. The isolated request execution CMD file runs the bootstrap script on the older build runner version for BuildRunnerCoreCallResult, which makes an engine off the current sources and runs it for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultOuterFile" />, which loads the prepared isolated request which runs for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultInnerFile" /> and returns its result.
            It should bootstrap, compile the Platform Core subplatform, produce it as a build result, make a bootstrapped build runner out of it, and prepare all files required for running builds in all the subsequent steps.
            Includes <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData" /> just like all other compile builds, but that's just one of the files here rather than the only file.
            <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultFile" /> is for non-core compile builds.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultOuterFile.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultOuterFile.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData">
            <summary>
            The result of a Compile stage.
            Normally, the stage produces a set of <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" /> files.
            Publishing the full set of these files generates overhead on the storage and when subsequent builds retrieve previous build results over multiple paths. So the build should only publish what is uniquely produced in it, and omit anything which has been received either from Nuget server (precompiled dependencies) or from previous builds. These must be listed explicitly though, so that the consumer could validate that it has assembled the full set from all the original sources.
            </summary>
            <seealso cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultFile" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData.Dependencies">
            <summary>
            Identities of the output deployable packages which have been originally retrieved from the external Nuget server as ready binary packages. The content is not written for these, they should be re-retrieved when neeeded.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData.Produces">
            <summary>
            The packages which have been produced by this build.
            These are the only kind for which there is content and not just identities.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData.Transitives">
            <summary>
            Identities of the output deployable packages which have been produced by some other build, and this specific build has received them in ready binary form. The content is not written for these, they should be obtained from dependee builds.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData.JetBrains#Util#Storage#StructuredStorage#IStructuredStorageSerializable#GetObjectData(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultFile">
            <summary>
            A wrapping for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData" /> to represent it as a build output file for automatic registering as a build result.
            This is the build artifact, while <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData" /> is the data stored in it.
            Non-bootstrap compile builds produce this artifact (= all compile builds except for Compile Platform Core, see <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileCoreAndBootstrapResultOuterFile" /> for those).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultFile.DefaultFileName">
            <summary>
            File name for serialized file items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultFile.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultFile.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestBootstrapMode">
            <summary>
            When running a build for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.EntryTeamCityMakeIsolatedRequest" />, defines if we're making the request for the Platform Core and Bootstrap build rather than a regular isolated request.
            These differ in two ways: platform core does not have and cannot have parent builds; and the build runner files to run differ because in bootstrap it's a CMD and in non-bootstrap it's the bootstrapped exe.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestBootstrapMode.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestBootstrapMode.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestHomeDir">
            <summary>
            When running a build for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.EntryTeamCityMakeIsolatedRequest" />, specifies root directory (like <see cref="T:JetBrains.Application.BuildScript.ProductHomeDirArtifact" /> for compilation or <see cref="T:JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact" /> for tests) for the needs of preparing the request.
            The specific root dir to be written to the request is not specified in this context, and should be passed as a regular artifact.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestHomeDir.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestHomeDir.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestObjective">
            <summary>
            When running a build for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.EntryTeamCityMakeIsolatedRequest" />, specifies the objective to set on the isolated request.
            The isolated build would be run for these objectives.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityMakeIsolatedRequestObjective.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Git.ConfigureGitBlame">
            <summary>
            Configures <code>blame.ignoreRevsFile</code> Git configuration option to point to the <code>.git-blame-ignore-revs</code> file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.FullVersion">
            <summary>
            Full version consists of three numbers and optional suffix. Supported suffixes "EAP X [D]", "RC" and "EXP X". For details see <see cref="T:JetBrains.Application.BuildScript.GlobalFullVersionParser"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.IsEap">
            <summary>
            Whether the build is EAP or RTM.
            False if the build is Release, otherwise True.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.IsDevelopmentBuild">
            <summary>
            True if the build is development.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.IsExperimentalBuild">
            <summary>
            True if the build is experimental.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.ExperimentalBuildDescription">
            <summary>
            A description of an experimental build to be shown on Help/About dialog.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.MarketingVersionStringWithoutSuffix">
            <summary>
            Marketing version. Two parts for main releases, e.g. "2018.1". Three parts for bugfix releases, e.g. "2018.1.2".
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.FullMarketingVersionString">
            <summary>
            Full marketing version, e.g. "2018.1.1 EAP 1 D"
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.FullMarketingVersionStringWithoutSpaces">
            <summary>
            Full marketing version without any spaces, e.g. "2018.1.1EAP1D"
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.WaveMarketingName">
            <summary>
            Wave marketing name. Always two parts, e.g. "2018.2" for Wave 182.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.WaveTechnicalNumber">
            <summary>
            Current Wave technical number, e.g. 182.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.StandaloneHostIconFile">
            <summary>
            Product icon for Control Panel.
            If the file exists in the product bin dir, it is used as product icon for Control Panel Add/Remove Programs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.GlobalDefines.VsHostIconFile">
            <summary>
            VS host icon for Control Panel.
            If the file exists in the product bin dir, it is used as product icon for Control Panel Add/Remove Programs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper">
            <summary>
            Helps with the code which MUST be executed on a STA thread within the build.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper.StaScheduler">
            <summary>
            Gets the scheduler which you might use for placing tasks on a STA thread within the build.
            You MUST link these tasks to your build step task so that no execution were left behind your build step on that thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper.ExecuteOnStaAsync(JetBrains.Lifetimes.Lifetime,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Yields asynchronous execution to a helper STA thread. That thread is created on-demand for the build to execute activities which cannot be run on an MTA thread (require a dispatcher or involve operating on interactive UI objects).
            Proceeds on the thread pool after executing the action.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper.YieldTo(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Yields asynchronous execution to a helper STA thread. That thread is created on-demand for the build to execute activities which cannot be run on an MTA thread (require a dispatcher or involve operating on interactive UI objects).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DebuggerHelpers.PreparePostMortemCdbAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            Runs the CDB debugger to watch for second-chance exceptions in the own process and descendants.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DebuggerHelpers.SelfAttachPostMortemCdbAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Helpers.DebuggerHelpers.IsEvadeSelfDebug},JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            Runs the CDB debugger to watch for second-chance exceptions in the own process and descendants.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Helpers.DebuggerHelpers.IsEvadeSelfDebug">
            <summary>
            Evades self-attaching a debugger for trapping second-chance exceptions within the test run with <see cref="M:JetBrains.Application.BuildScript.Helpers.DebuggerHelpers.SelfAttachPostMortemCdbAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Helpers.DebuggerHelpers.IsEvadeSelfDebug},JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)" />.
            Might be needed if it affects the tests (e.g. they want to use their own debugger) or if it slows down the process considerably.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper">
            <summary>
            Knows how to choose a .NET Core SDK package for the current runtime.
            Can install it and locate characteristic tools within.
            Instance members are for the current runtime. Static implementation members all take it as a param.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.myMaybePackage">
            <seealso cref="P:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.PackageId" />
        </member>
        <member name="P:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.IsAvailable">
            <summary>
            Gets if we have a .NET Core SDK for the current runtime. Most other members will throw if not.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.Package">
            <summary>
            Nuget package with .NET Core SDK for the current runtime, throws if N/A.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.PackageId">
            <summary>
            Nuget package with .NET Core SDK for the current runtime, throws if N/A.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.GetDotnetHostPath">
            <summary>
            Downloads and local expands the .NET Core SDK package for the current runtime (or throws if N/A, see <see cref="P:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.IsAvailable" />).
            Locates and returns the path to the DotNet Host entry point executable.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.GetMsbuildDllPath">
            <summary>
            Downloads and local expands the .NET Core SDK package for the current runtime (or throws if N/A, see <see cref="P:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.IsAvailable" />).
            Locates and returns the path to MSBuild in it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.GetNetCoreSdkPackageForCurrentRuntime(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            Gets the NetCoreSDK suitable for the current runtime, if avail.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.GetNetCoreSdkPackageIdFor(JetBrains.Util.JetRid)">
            <summary>
            Gets the NetCoreSDK suitable for that runtime, if avail.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.GetNetCoreSdkPackageIdForCurrentRuntime">
            <summary>
            Gets the NetCoreSDK suitable for the current runtime, if avail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper.NetCoreSdkInstallHelper(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            The full procedure helper. For the current runtime, use instance properties.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment">
            <summary>
            Gets the artifact strings from the environment, which includes the env variables, TeamCity properties when running in TeamCity, or app properties when running user-interactively.
            This is the main channel which allows to conveniently transfer TC properties to the nested stages as strongly-typed artifacts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment.ApplyArtifactStringsToRequest(JetBrains.Build.Running.BuildRunnerRequest,JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment.Sources)">
            <summary>
            Does <see cref="T:JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment" /> and adds them to <see cref="P:JetBrains.Build.Running.IBuildRunnerRequest.InputArtifactStrings" /> of this <paramref name="request" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment.GetArtifactStrings(JetBrains.Application.BuildScript.Helpers.GetArtifactStringsFromEnvironment.Sources)">
            <summary>
            Gets the artifact strings (name-value pairs) which can then be applied to the nested build request as input artifact strings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx">
            <summary>
            A part of the extensions to <see cref="T:JetBrains.Build.Running.IBuildRunnerRequest" /> which requires references to Shell project.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx.WithCompiledBinariesForScriptAlreadyInInputs``1(JetBrains.Build.Running.IBuildRunnerRequest,JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx.CustomEngineInBinaries)">
            <summary>
              Same as <see cref="M:JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx.WithCompiledBinariesForScriptAndInputs``1(JetBrains.Build.Running.IBuildRunnerRequest,System.Collections.Generic.IReadOnlyCollection{``0},JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx.CustomEngineInBinaries)" />, but does not submit the new artifacts for inputs, assumes those are already in the <paramref name="thіs">request</paramref>, and just have to be registered as build script binaries / looked up for the custom engine bins.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx.WithCompiledBinariesForScriptAndInputs``1(JetBrains.Build.Running.IBuildRunnerRequest,System.Collections.Generic.IReadOnlyCollection{``0},JetBrains.Application.BuildScript.Helpers.IBuildRunnerRequestEx.CustomEngineInBinaries)">
            <summary>
              <para>Submits the given artifacts for:</para>
              <para>1) Input artifacts of the build request (in binary serialized form), <see cref="P:JetBrains.Build.Running.IBuildRunnerRequest.InputArtifacts" />.</para>
              <para>2) Build script binaries from which runtime types for artifacts, steps, etc would be used — by referencing a copy from the input artifacts, to save space, <see cref="P:JetBrains.Build.Running.IBuildRunnerRequest.BuildScriptBinariesInInputArtifacts" />.</para>
              <para>3) Build engine custom binaries — by looking up relevant build engine files in the content, if requested, <see cref="P:JetBrains.Build.Running.IBuildRunnerRequest.CustomEngineBinaries" />.</para>
              <para>The artifacts must comply with <see cref="T:JetBrains.Build.Running.BuildOutputFileArtifact" /> serialization layout for this to work (most easily, be derived from it).</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Helpers.ToolServerInfo">
            <summary>
            Identifies the tool server access info by giving the URI, and auth username + password.
            The serialized form would be <code>Username:Password@URI</code>. NOTE that this is NOT exactly the URI format for username and password, because the user info goes before the URI scheme and not after it, for simplicity of parsing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Helpers.ToolServerInfo.#ctor(System.String)">
            <summary>The parsing overload.</summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.HostEnvironmentZoneArtifact">
            <summary>
            Written into serialized host components.
            Defines the zone to run the host in.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.ILocalBuildOptimizationArtifact">
            <summary>
            Marks artifacts which help with skipping certain operations when local-building.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.InputPackage">
            <summary>
            A Nuget package supplied to the whole build sequence for input.
            </summary>
            <remarks>Derives from <see cref="T:JetBrains.Build.Running.BuildOutputPackageFileArtifact" /> to comply with serialization layout requirement for reuse as <see cref="P:JetBrains.Build.Running.IBuildRunnerRequest.BuildScriptBinariesInInputArtifacts" />.</remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.InputPackage.#ctor(JetBrains.Util.Storage.Packages.IJetNugetPackage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.InputPackage.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.CdnGalleryPackagesJson">
            <summary>
            Json with information about all packages and products. Required for web installer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.CdnLatestUpdatesJson">
            <summary>
            Json with information about all packages and products. Required for check for updates only.
            </summary>
            <remarks>(DK) In fact the artifact is Optional-Single, it's made Plural to be able to return an empty collection.</remarks>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.ContentPackExecutableArtifact">
            <summary>
            The standard executable with packed content, like Build System, DotPeek Pack, or Installer Pack, as produced during the build.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme">
            <summary>
            Stuffs all main installer-portables-zips artifact file names with the current version number (unless preparing for RTM submission). This allows for tracking their exact versions after they get downloaded from TC, and mapping to their exact originating TC build.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Name(System.String)">
            <summary>
            Begins the file name with this string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.CompanyName">
            <summary>
            Begins the file name with the company name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Construction.CheckedSuffixOptOut">
            <summary>
            Opts out of adding the "Checked" suffix to the name in checked mode. Use for artifacts independent of assertion mode
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Construction.Extension(System.String)">
            <summary>
            Adds the file extension to the end.
            If you add a dot to the extension, it will still be handled correctly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Construction.Name(System.String)">
            <summary>
            Adds one more component to the beginning of the file name (before the variable parts), in order of appearance.
            Multiple components are dot-separated.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Construction.NoExtension">
            <summary>
            Denotes that it's not a complete file name, and it should not have an extension added.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Construction.Render">
            <summary>
              <para>Renders the final string. It's presented as a rel-path to make sure it's a filesystem-valid file name.</para>
              <para>Includes custom names, suffices, extension, wave marketing name, checked suffix, and so on. For non-deployment builds, also adds ther TeamCity build origin string (TC build number in parentheses) before the file extension. This won't be included with the deployed file names.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Construction.Suffix(System.String)">
            <summary>
            Adds a custom suffix to the file name, dot-separated. This goes after the standard suffices; all custom suffices are written in order of appearance. The only things going after these are the extension and the autogenerated TeamCity build identity in parentheses.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeployedFilesNamingScheme.Construction.FullMarketingVersion">
            <summary>
            Adds the marketing name with the current flavor suffix (from <see cref="F:JetBrains.Application.BuildScript.GlobalDefines.FullMarketingVersionString" />), with spaces removed, to the file name, after the prefices.
            </summary>
            <example>10.1.EAP1</example>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles">
            <seealso cref="F:JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles.DeploymentPackagingIdentityFileName" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles.DeploymentPackagingIdentityFileName">
            <summary>
              <para>A file that might be added to deployment packages (like the installer, zips, etc) and identifies the identity of the packaging itself by getting unpackged to the installdir.</para>
              <para>The first line of the file should have the semver of the build which has done the packaging, which is equal to the TC build identity and thus can track the originating TC build of this specific installation.</para>
              <para>This identity is not important because a deployment package is almost fully identified with the set of packages comprising it and their identities (but for possible TC options change), but this gives little help with finding the exact originating TC build with its changes list and status and all, as packages are reused, while the packaging identity does not mean much about the contents, but points to the originating TC build.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles.RenderIdentityFile(JetBrains.Application.BuildScript.BuildVersionSuffix)">
            <summary>
            The file for inclusion with the packages.
            Used by <see cref="M:JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings.AddFilesAsync(JetBrains.Lifetimes.OuterLifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.IHaveJetNugetPackage})" />, call it (or <see cref="M:JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagingsEx.AddFilesAsync(JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings[],JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.IHaveJetNugetPackage},JetBrains.Util.ILogger)"/>) instead of using this directly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles.AddDeploymentPackagingIdentityFile">
            <seealso cref="F:JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles.DeploymentPackagingIdentityFileName" />
            <seealso cref="T:JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings" />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DeploymentPackagingIdentityFiles.AddDeploymentPackagingIdentityFile.AddFilesAsync(JetBrains.Lifetimes.OuterLifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.IHaveJetNugetPackage})">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DevEnv.VsExtensionsHelperConstants.DevEnvExtensionsRelPath">
            <summary>
            A relative path from VS InstallDir (the IDE folder) or VS local app data folder to the Extensions folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DevEnv.VsExtensionsHelperConstants.CompanyExtensionsRelPath">
            <summary>
            A relative path from VS InstallDir (the IDE folder) or VS local app data folder to the JetBrains extensions folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DevEnv.VsExtensionsHelperConstants.SinceVs11ExtensionsConfigurationChangedFileRelPath">
            <summary>
            A relative path from VS InstallDir to the special file which has to be touched on VS11 to signal that configuration has to be rebuilt on doing devenv/setup.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DevEnv.VsExtensionsHelperConstants.LocalAppDataVsComponentModelCacheFolderRelPath">
            <summary>
            Path to the MEF component model cache folder in local app data, relative to the VS local app data folder.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.DevEnv.VsExtensionsHelperConstants.GetExtensionFolderRelPath(JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>
            Gets the path to the folder into which the R# VSIX Manifest and PkgDef are installed in per-machine or per-user installation scenario.
            Per-machine: the path is relative to the VS installdir, which is what's written into Registry by VS, and it points to the "IDE" folder not the very VS installation root.
            Per-user: the path is relative to the VS LocalAppData hive-specific folder.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry">
            <summary>
            Define a folder Windows Shell context menu action.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.IsBackground">
            <summary>
            False for right clicking on a folder.
            True for right clicking on a blank part of an open folder (folder background)
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.VerbNameHuman">
            <summary>
            Friendly action name suitable to display to the user (e.g. "Open Folder as Project").
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.CommandLineParam">
            <summary>
            Optional additional command line parameter passed to the application.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.IconFile">
            <summary>
            Optional path to the file that contains the icon. If not specified, the application executable is used.
            If both <see cref="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.IconFile"/> and <see cref="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.IconIndex"/> are null, the association has no icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.IconIndex">
            <summary>
            Optional path to a file that contains the icon. If not specified, the application executable is used.
            If both <see cref="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.IconFile"/> and <see cref="F:JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry.IconIndex"/> are null, the association has no icon.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Dmg.DmgFileArtifact">
            <summary>
              .dmg file with product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Dmg.DmgsDeployableFile">
            <summary>
              <para>Target artifact for the Post Compile “Dmgs” stage.</para>
              <para>It produces .dmg files from the ones prepared in Post Compile “Installers, Portables and Zips” stage.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Dmg.SitFileArtifact">
            <summary>
              .sit file for building .dmg in later build steps on dedicated agents.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Dmg.SitFileInputDirArtifact">
            <summary>
              Tells the build the full path to folder with .sit files.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDir">
            <summary>
            Causes the packages be extracted into the Product Binaries Dir.
            On the binary stage, extracts all of the input packages (product packages and their dependencies, usually).
            On the source stage, extracts input packages from the previous build results (typically, nothing, unless the profile has binary subplatforms).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks">
            <summary>
            <see cref="T:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDir" /> impl.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.OptionConcurrentDiskWrites">
            <summary>
            These many write operations allowed at the same time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.ExtractInputPackagesAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Application.BuildScript.InputPackage[],JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehaviorArtifact},JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            Called on the binary stage, extracts all of the input packages (product packages and their dependencies, usually).
            For the source stage, <see cref="M:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.PreExtractPackagesOnPrepareWorkingCopy(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact[],JetBrains.Application.BuildScript.InputPackage[],System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath},JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehaviorArtifact},JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)" /> is the counterpart. Previously, they used to be called both, this extracted inputs and that extracted references, but since inputs and references in case of B-subs intersect, this were causing conflicts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.PreExtractPackagesOnPrepareWorkingCopy(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact[],JetBrains.Application.BuildScript.InputPackage[],System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath},JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehaviorArtifact},JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            Wire this step to the PWC, to get the contents of the BIN dir earlier.
            Note that this won't get the LevelDB and other stuff we're not taking as references but embedding (because they are not packages yet, just files to make our packages), see <see cref="T:JetBrains.Application.BuildScript.PreCompile.LocalPreExtractFastFilesForPackaging" /> for that.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.FileWriteOperation`1.ToString">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.OpIterationMode.CanCheckIfUpTodate">
            <summary>
            On first iteration, check if there's already a good file in that location. Do not do writes if we can skip.
            1) Check file size. If bad, switch into write mode.
            2) Decompress the first buffer and read bytes from disk and compare. If bad, switch into write mode using this buffer immediately.
            3) Decompress the next buffer and read bytes from disk and compare. If bad, abort operation with should-retry code: we cannot start writing from the beginning because we do not have the buffer already and the decompression stream has gone past that data, should better restart the op, this time with <see cref="F:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.OpIterationMode.MustWrite" />.
            4) If all buffers checked OK, do nothing (and do not advance the timestamp).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.OpIterationMode.MustWrite">
            <summary>
            On first iteration we've found that we need to rewrite, but too late to start writing right there. Start a new writing, no checks.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.OpIterationResult.Done">
            <summary>
            Don't call again for this op.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.OpIterationResult.RetryAsMustWrite">
            <summary>
            Call again for this op with <see cref="F:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.OpIterationMode.MustWrite" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.ReturnBufferOnRelease.Dispose">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.FileAssociationEntry">
            <summary>
            Defines a file type Windows Shell association.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.IsPrivateType">
            <summary>
            Private is a file type introduced by our application (e.g. dotPeek's ".dpl" or dotMemory's ".dmw").
            All the file type data could be deleted when the application is uninstalled.
            Non-private is a common file type (e.g. ".dll" or ".sln").
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.Extension">
            <summary>
            File extension (e.g. ".txt"). Must start with the dot (".").
            "*" means all the file types in the system.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.TypeNameHuman">
            <summary>
            Optional friendly type name suitable to display to the user (e.g. "dotPeek Assembly List").
            Could be a plain string or resource reference in form "@%SystemRoot%\shell32.dll,-154" (preceded by the @ symbol).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.VerbNameHuman">
            <summary>
            Optional friendly action name suitable to display to the user (e.g. "Open with JetBrains dotPeek").
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.IconFile">
            <summary>
            Optional path to the file that contains the icon. If not specified, the application executable is used.
            If both <see cref="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.IconFile"/> and <see cref="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.IconIndex"/> are null, the association has no icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.IconIndex">
            <summary>
            Optional icon index inside the icon file defined by <see cref="F:JetBrains.Application.BuildScript.Install.FileAssociationEntry.IconFile"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath">
            <summary>
            Provides <see cref="T:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks"/> with an ability to extract packages to custom folders under product bin dir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath.PackageIdentity">
            <summary>
            The package identity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath.FolderToExtract">
            <summary>
            The folder under product bin dir.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehavior">
            <summary>
            Controls how <see cref="T:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks"/> extracts packages when <see cref="T:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath"/> specified.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehavior.ExtractCopyToBinDir">
            <summary>
            If <see cref="T:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath"/> is specified for a package, extract a copy to the bin dir.
            That's a default behavior not to fail local install of several products.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehavior.StrictExtract">
            <summary>
            If <see cref="T:JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath"/> is specified for a package, extract the package to the specified folder only.
            Used by the Installer, which installs products one by one.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings">
            <summary>
            A base interface for build helpers which add files to deployment packagings (installers, ZIPs, Rider packs, etc).
            Normally, deployment packagings are built from a set of Nuget packages coming from our compilatons and third-party dependencies.
            Visual Studio installations (and other local installs) can produce additional files into the bin dir when they are installing. This is somewhat analogous for pre-packaged shipments.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings.AddFilesAsync(JetBrains.Lifetimes.OuterLifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.IHaveJetNugetPackage})">
            <summary>
            Calculates files for these deployment packagings.
            See helper <see cref="M:JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagingsEx.AddFilesAsync(JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings[],JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.IHaveJetNugetPackage},JetBrains.Util.ILogger)"/> for calling on a set of helpers.
            </summary>
            <param name="lifetime">Limiting lifetime for the operation.</param>
            <param name="packages">The list of the packages which go into the deployment packaging.</param>
            <returns>Files.</returns>
            <seealso cref="M:JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagingsEx.AddFilesAsync(JetBrains.Application.BuildScript.Install.IAddFilesToDeploymentPackagings[],JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.IHaveJetNugetPackage},JetBrains.Util.ILogger)"/>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallAppConfig">
            <summary>
            Requests an <c>App.Config</c> file be picked for a project and packed for deploy and installed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.InstallAppConfig.FromBuildScriptClassInThatProject``1(JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.BuildScript.ProductHomeDirArtifact)">
            <summary>
            Given a build script class from the project whose app config is to be installed, requests installation of the app config if that project is in sources, or skips if the build script is running from binaries and should not yield any installation requests.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.InstallAppConfig.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallerExeBootstrapper">
            <summary>
            The executable of the installer bootstrapper, a single-exe responsible for downloading and executing installer form gallery.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallerExePackedLight">
            <summary>
              The executable of the installer, a single-exe pack with all the installer DLLs, but without any embedded Nugets.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallerExePackedWeb">
            <summary>
              The executable of the web installer, a single-exe pack with all the installer DLLs, but without any embedded Nugets.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedChannelId">
            <summary>
            A special version of <see cref="T:JetBrains.Application.BuildScript.Install.InstallerExePackedWeb"/> with embedded marketing channel ID.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackages">
            <summary>
            The executable of the installer, a single-exe pack with all the installer DLLs, and with pre-embedded Nugets which can be used as a gallery for the installation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesForToolbox">
            <summary>
            The executable of the installer, a single-exe pack with all the installer DLLs, and with pre-embedded Nugets which can be used as a gallery for the installation.
            This installer is used to install dot-products from Toolbox.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesForToolboxJSon">
            <summary>
            json files containing metadata for the installer for the needs of JetBrains Toolbox discovery
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.InstallersPortablesZipsDeployableFile">
            <summary>
              <para>Target artifact for the Post Compile “Installers, Portables and Zips” stage.</para>
              <para>It regroups deployable packages produced by compilation into installers, single-exe tools, and ZIP packages for various distributions.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.IsolationOptions">
            <summary>
            Should the local installer actions be system-wide or isolated.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.IsolationOptions.NotIsolated">
            <summary>
            Full local installation mode.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.IsolationOptions.IsolatedToProductBinariesDir">
            <summary>
            When set, the local installer will only execute file installs (putting aside Registry and Shell Links), and only those targeting the product binaries dir (skipping any VS/userfolder installs).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.IsolationOptions.PerUserInstall">
            <summary>
            The install should go per-user, if there's an option.
            For example, the HKMU Registry hive should resolve to HKCU with this flag, and to HKLM without it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase">
            <summary>
              <para>The clean (not branded with any product nor stuffed with content, just as built) launcher executables.</para>
              <para>This is the base artifact for compile-time and post-compile-time artifacts, choose the specific one depending on where you are running.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.CompileIdentity">
            <inheritdoc cref="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash" />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.GetObjectDataCore(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash">
            <summary>
            Identifies the sources and tools from which a launcher is produced.
            Does NOT include the configuration, the whole launchers set has the same compilation ID.
            The launchers of the same config and with the same compilation identity are supposed to be equivalent (not necessarily byte equal because cpp compiler might not be deterministic, and sign server signing is definitely not).
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash.RcdataValueString">
            <summary>
            Makes a string suitable for supplying as a value for an RT_RCDATA resource within an .rc resource file, inside the curlies (curlies not included).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash.Equals(JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherCompileTimeArtifact">
            <summary>
              <para>The clean (not branded with any product nor stuffed with content, just as built) launcher executables.</para>
              <para>This is the artifact to be used at compile-time stages, where it either compiles from sources (if Core Shell is available in src), or is taken from the Core Shell binaries if it's been compiled before.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLaunchersCompileTimePackedCacheArtifact">
            <summary>
              <para>Takes <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherCompileTimeArtifact" /> and makes them into a package suitable for caching (as used by <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.ProduceCleanLauncherCompileTimeArtifacts(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProductHomeDirArtifact},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProductBinariesDirArtifact},JetBrains.Application.BuildScript.Solution.SubplatformsInAllInputPackages,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.SkipLocalCompilationArtifact},JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Build.Helpers.Msbuild.IInvokeMsbuild,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,JetBrains.Util.ILogger)" />).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLaunchersCompileTimePackedCacheArtifact.#ctor(JetBrains.Util.Storage.Packages.IJetNugetPackage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLaunchersCompileTimePackedCacheArtifact.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks">
            <summary>
            Manages the Clean Launcher artifacts lifecycle.
            If we have the Core in sources, compiles Clean Launcher and makes it embedded into the Platform Core Shell package.
            If we have the Core in binaries, loads the Clean Launcher from the embedded files.
            This is this build-script and common part, and there's the post-compile part also.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.PackCompiledForCachingAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase[],JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.BuildScript.Application.Eula.SdkLicenseAgreementArtifact)">
            <summary>
            When we have compiled launchers from a fresh compilation or from disk, make a caching nuget out of them.
            When we obtain launchers from a downloaded caching nuget, then we keep it as is.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.PackCompileTimeForCachingAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherCompileTimeArtifact[],JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.BuildScript.Application.Eula.SdkLicenseAgreementArtifact)">
            <summary>
            <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.PackCompiledForCachingAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase[],JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.BuildScript.Application.Eula.SdkLicenseAgreementArtifact)" /> for compile-time artifact.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.ExtractCompilationIdentityFromLauncherExecutable(JetBrains.Util.Storage.ImmutableFileItem,JetBrains.Util.OnError)">
            <summary>
            Takes a compiled launcher body and reads the compilation identity from it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.GatherSourceCode(JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Util.ILogger)">
            <summary>
            Returns files and bytes for representing their hash.
            For most files, that's just their <see cref="P:JetBrains.Util.Storage.ImmutableFileItem.ContentHash" />.
            In special cases of generated files, might be the identity of the generation source.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.IsFullSet``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Nullable{JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash},JetBrains.Util.OnError)">
            <summary>
            Checks if got launchers for all supported configurations in this set.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.MakeIdentityHash(System.Collections.Immutable.ImmutableArray{System.ValueTuple{JetBrains.Util.Storage.ImmutableFileItem,System.Collections.Immutable.ImmutableArray{System.Byte}}},JetBrains.Build.Helpers.Msbuild.MsbuildToolsetPackageIdentity,JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig[])">
            <summary>
            Should fully identify the resulting compiled native launcher by its inputs' content.
            Should not depend on timestamps.
            The output would not be deterministically derivable from this, unfortunately, because it is signed (with a timestamp) and this introduces randomness.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.RenderManagedAttributesWithLauncherResources(System.Collections.Generic.IReadOnlyCollection{JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher})">
            <summary>
            Writes given resources as managed assembly-level attributes.
            </summary>
            <param name="resources"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.CompileTimeLauncherHosts.EmbedCompileTimeLauncherHosts(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostInPackageArtifact[],System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherCompileTimeArtifact},JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Util.ILogger)">
            <summary>
            Generates the compile-time launcher hosts which are to be embedded in the package, <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostInPackageArtifact" />.
            Os integration is run at install-time, so schedule some data for it to execute.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.GuiLauncherNamingScheme">
            <summary>
            Default naming scheme which should produce shorter and non-techy-looking file names, preferring shorter for GUI.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme">
            <summary>
            Tells how to name launcher files depending on their config.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme.GetExeFileSuffix(JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig)">
            <summary>
            Gets the suffix to add to the launcher file name to disambig different configs on disk.
            Must be defined and distinct for all configs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherArtifactBase.Configuration">
            <summary>
            Which CPU architecture, and is it for windows or console subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherArtifactBase.Executable">
            <summary>
            The main executable of the launcher.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherArtifactBase.ProgramDatabase">
            <summary>
            The launcher's PDB, if applicable.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherArtifactBase.NetCoreSupplementaryFiles">
            <summary>
            The launcher's .runtimeconfig.json file and .deps.json file, if applicable.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine">
            <summary>
            Declarations for the launcher-specific command line args.
            Syntax: <c>(Prefix='/'|'-')</c> <c>(Namespace='Launcher')</c> <c>(NamespaceSep='::')</c> <c>(Name)</c> <c>(NameValueSep=':')?</c> <c>(Value)?</c>.
            Example: <c>/Launcher::Mode:InvokeMethod</c>. Here <c>Launcher</c> is the namespace name, <c>Mode</c> is the command name, and <c>InvokeMethod</c> is the value (missing in some commands).
            The namespace allows launcher to tell apart command line args directed to the launcher from the other app commands; it also decreases the chance that the app would mistake launcher commands for its own commands.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name)">
            <summary>
            Appends a launcher command line argument switch to the command line builder, with all proper escaping.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Mode)">
            <summary>
            Appends a launcher command line argument switch to the command line builder, with all proper escaping.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Target)">
            <summary>
            Appends a launcher command line argument switch to the command line builder, with all proper escaping.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name,System.String)">
            <summary>
            Appends a launcher command line argument switch to the command line builder, with all proper escaping.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.RenderUnescaped(JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Mode)">
            <summary>
            Concatenates the command line string. Does NOT do any escaping! To build a correctly escaped command line string, use <see cref="T:JetBrains.Util.CommandLineBuilderJet" /> and call <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name)" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.RenderUnescaped(JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Target)">
            <summary>
            Concatenates the command line string. Does NOT do any escaping! To build a correctly escaped command line string, use <see cref="T:JetBrains.Util.CommandLineBuilderJet" /> and call <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name)" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.RenderUnescaped(JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name)">
            <summary>
            Concatenates the command line string. Does NOT do any escaping! To build a correctly escaped command line string, use <see cref="T:JetBrains.Util.CommandLineBuilderJet" /> and call <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name)" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.RenderUnescaped(JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name,System.String)">
            <summary>
            Concatenates the command line string. Does NOT do any escaping! To build a correctly escaped command line string, use <see cref="T:JetBrains.Util.CommandLineBuilderJet" /> and call <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.AppendLauncherSwitch(JetBrains.Util.CommandLineBuilderJet,JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name)" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name">
            <summary>
            The command line key name goes after the namespace and is separated from the namespace with a double-colon.
            Example: in <c>/Launcher::Mode:InvokeMethod</c>, the name is <c>Mode</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AssemblyFile">
            <summary>
            In the mode which invokes a managed method, specifies the path to the assembly to load; the directory of the file would be used as <see cref="P:System.AppDomain.BaseDirectory" /> by default, unless overridden with <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AppDomainBaseDir" />. Alternatively, see <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AssemblyName" />.
            In the mode which invokes something from a native file, specifies the path to that file.
            </summary>
            <remarks>The name of this key were introduced when only managed targets were supported, and could not be renamed for compatibility reasons.</remarks>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AppDomainLoaderOptimization">
            <summary>
            Payload code is executed in the new appdomain. Allows to enforce which <see cref="T:System.LoaderOptimization" /> to use for the new appdomain.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AssemblyName">
            <summary>
            In the mode which invokes a managed method, specifies the name of an assembly to load (by simple or full name). Alternatively, see <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AssemblyFile" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.ClassName">
            <summary>
            For <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Mode.InvokeMethod" />, specifies the full name of the class which has that method.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.DebugForceClr2">
            <summary>
            Forces running on CLR2 even if CLR4 is available on this machine.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.MethodName">
            <summary>
            For <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Mode.InvokeMethod" />, specifies the local name of the method to call.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.Mode">
            <summary>
            The operating mode for the Launcher. See <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Mode" /> for command values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.NetfxClientProfile">
            <summary>
            Allows running on v4 Client Profile without requiring presence of the Full Profile. N/a for modern frameworks.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.NetfxRequiredVersion">
            <summary>
            Requires the given .NET Framework version, or higher, to run. Shows an error if only an older netfx version is available.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.NoStuffedCmdline">
            <summary>
            Skips reading the command line arguments which have been stuffed into the Launcher. Otherwise they're applied automatically as if given on the command line.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.NonInteractive">
            <summary>
            Suppresses Launcher's interactive features, such as error or question message boxes, splash screens, and waiting for any key when payload is done.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.NoSplash">
            <summary>
            Prevents from showing the splash screen on start.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.Target">
            <summary>
            The invocation target for the <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Mode.InvokeMethod" /> mode. See <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Target" /> for command values. If omitted, assumes <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value.Target.Assembly" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.WaitForAnyKey">
            <summary>
            Unless running non-interactively, waits for any key to be pressed in the console after running the payload app. A non-console launcher ignores this parameter.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AppDomainBaseDir">
            <summary>
            A manual override for <see cref="P:System.AppDomain.BaseDirectory" /> of the started application to a custom folder.
            If you specify an <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AssemblyName" /> to run, then it must be resolvable under that base dir.
            If product content pack has been expanded, normally its expansion dir would be the base directory, but this value overrides it. The app might not run correctly in this case.
            If you specify an <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.AssemblyFile" /> ro run, by default its directory is used as the appdomain base directory, but this value would override the directory. The app might still run correctly if it arranges for loading its DLLs from proper paths.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.TargetFrameworkName">
            <summary>
            Allows to override the perceived Target Framework of the running app, which is checked by certain system classes to modify behavior at runtime. Supposedly, if the app does not specify a recent enough target framework, it is not aware of the new behaviors and legacy behavior should be used.
            If omitted, tries to declare awareness of the most recent .NET Framework.
            Note that unlike <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.NetfxRequiredVersion" /> this does not prevent the app from running in either case, but only affects the declared awareness of the app.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.ExpandProductContent">
            <summary>
            Instructs the launcher to expand the Product Content files (in <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDR_PRODUCT_CONTENT" />) to a temporary folder and use it as the base dir.
            The resource MUST exist in this case.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.CompanyAndProductName">
            <summary>
            Overrides the stuffed/default Product Display Name for all messages and error reporting.
            Normally, the Product Display Name consists of the Company Name and the Product Name, space-separated. Launcher stuffing writes them separately into the resources. However, as they're always used together in the UI, and there's a use case of calling the launcher a totally custom tool name rather than company+product form, so this key allows to override the composite string as is, even with a single word.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.SafeLibraryLoad">
            <summary>
            Tries to prevent DLL preloading attacks (see https://docs.microsoft.com/en-us/windows/desktop/Dlls/dynamic-link-library-security).
            Turns on self protection against DLL injection attacks, unless the <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.DisableSelfProtection" /> is specified.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.DisableSelfProtection">
            <summary>
            If <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.SafeLibraryLoad" /> is specified, turn off self protection against DLL injection attacks.
            To be used as a workaround in case self protection produces false positives on user's PC.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.JetSecurityLog">
            <summary>
            If <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.SafeLibraryLoad" /> is specified, forces security log creation, and gives an ability to specify the log file name.
            By default security log is created only if a vulnerability is detected.
            By default the log is created in the TEMP folder and has the name "JetSecurityLog.timestamp.executable.txt" (e.g. JetSecurityLog.2019-05-10T18-50-24.JetLauncher32.exe.txt).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.GcServer">
            <summary>
            Switch GC to server mode.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Namespace">
            <summary>
            The command line key starts with a namespace, after the prefix and before the namespace-to-name separator.
            Example: in <c>/Launcher::Mode:InvokeMethod</c>, the namespace is <c>Launcher</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Namespace.Launcher">
            <summary>
            Launcher only reads keys in this namespace. The others are ignored and expected to be treated by the payload app itself. On the other hand, the presence of the namespace makes it unlikely that the app reads the key as its own.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Prefix">
            <summary>
            Possible prefix chars.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Separator">
            <summary>
            Separators.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Value">
            <summary>
            The command line argument value goes after the name and is separated from the name with a colon. Not every command has a value, some only have the namespace and the name.
            Example: in <c>/Launcher::Mode:InvokeMethod</c>, the value is <c>InvokeMethod</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder">
            <summary>
            Keeps the launcher command line arguments which would be then stuffed into the launcher as pre-coded command line args.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.myMapNameToValue">
            <summary>
            Namespace is always assumed to be <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Namespace.Launcher" />. Name is the map key. Value is the map value, or NULL/empty for a valueless key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.#ctor">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.#ctor(JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder)">
            <summary>
            Makes a non-frozen copy of another object.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.AllArgs">
            <summary>
            Gets a readonly view on all the added args.
            Namespace is always assumed to be <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Namespace.Launcher" />. Name is the map key. Value is the map value, or NULL/empty for a valueless key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.RenderAsCommandLineAndFreeze(JetBrains.Util.CommandLineBuilderJet)">
            <summary>
            Makes it a command line suitable for passing to the launcher executable directly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.RenderAsResourceAndFreeze">
            <summary>
            Makes it a native resource suitable for stuffing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.JetBrains#Util#Collections#IFreezable#Freeze">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLineBuilder.JetBrains#Util#Collections#IFreezable#IsFrozen">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig">
            <summary>
              Configuration of the launcher artifact (which bitness, and is it console).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig.Subsystem">
            <summary>
              The windows/console subsystem.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig.CompareTo(JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherHostHelpers">
            <summary>
            Utilities for stuffing launchers into host entry points.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.FindLauncherExecutableAtRuntime(JetBrains.Application.BuildScript.Install.Launcher.LauncherConfig)">
            <summary>
            When running an app installed from the standard package, locates the Launcher executable which is expected to be shipped with that package.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.IsHostComponentsResourcePresentInExecutable">
            <summary>
            Checks if the entry point executable has the resource which is expected to be present for the <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ReadHostComponentsFromNativeExecutable(JetBrains.Lifetimes.Lifetime)" /> to read its contents, without throwing if it's missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.IsProductContentResourcePresentInExecutable">
            <summary>
            Checks if the entry point executable has the resource which holds the packed product content for single-exe distribution.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.MakeSplashFile(System.String,System.String,System.String,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Renders the default boilerplate splash for the given product info.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.MakeSplashVisual(System.String,System.String)">
            <summary>
            Creates the default boilerplate vector splash for the given product info.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ReadProductContentResourceFromStuffedExecutable">
            <summary>
            Gets the resource which holds the packed product content for single-exe distribution from the entry point executable.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.StuffLauncherAsync(JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase,System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher},JetBrains.Application.BuildScript.ProductNameAndVersionArtifact,JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,JetBrains.Util.ILogger,System.String,JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme,JetBrains.Util.RelativePath,JetBrains.Application.BuildScript.Helpers.Icons.SkiaHelper)">
            <summary>
            Takes a clean launcher plus all parameters, makes a launcher stuffed with all those things.
            </summary>
            <seealso cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper.StuffLaunchersAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper.StuffingParams,JetBrains.Util.ILogger,JetBrains.Application.BuildScript.Helpers.Icons.SkiaHelper)" />
            <seealso cref="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostInPackageArtifact" />
            <seealso cref="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostArtifact" />
            <seealso cref="T:JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherHostArtifact" />
            <param name="cleanLauncherArtifact">The non-stuffed clean launcher, take from an artifact. Defines the file body and the configuration (OS/CPU).</param>
            <param name="resources">Resources to embed. Native resources for a native launcher; for MSIL, natives are only stuffed if supported on the current OS, and corresponding managed resources are always added to be actually used at runtime.</param>
            <param name="product">Product name and version. Get written as custom resource strings plus into native version info of the file. Product name also makes base executable name, unless <paramref name="sPreferredFileNameNoExt" />, augmented with <paramref name="namingscheme" /> to ensure it does not conflict for launchers from multiple configurations emitted for the same product.</param>
            <param name="signer">If the current <paramref name="buildflavor" /> requires authenticode signing of all files, give the signing service. Take from artifacts.</param>
            <param name="tasker">Take from artifacts.</param>
            <param name="staer">Take from artifacts.</param>
            <param name="buildflavor">Take from artifacts.</param>
            <param name="logger">Your logging target.</param>
            <param name="sPreferredFileNameNoExt">Optional. If given, defines the exact file name (without ext) for the future stuffed launcher executable (<paramref name="namingscheme" /> MUST be NULL in this case). If omitted, name is derived from the <paramref name="product" /> name against the <paramref name="namingscheme" />.</param>
            <param name="namingscheme">Optional. If given, and <paramref name="sPreferredFileNameNoExt" /> is omitted, defines how <paramref name="product" /> name is turned into the file name for multiple configurations without a conflict. If given, and <paramref name="sPreferredFileNameNoExt" /> is given, asserts. If omitted, the default <seealso cref="T:JetBrains.Application.BuildScript.Install.Launcher.GuiLauncherNamingScheme" /> is used when needed.</param>
            <param name="netCoreAppBinaryRelativePath">Optional. If given, defines the relative path to app binary that will be embedded to apphost template.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.StuffLauncher_AddIdentityNativeResource(System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher},JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase)">
            <summary>
            Calculates the launcher identity based on what we have before stuffing and what will be stuffed into it, so that they could eg allocate independent cache folders.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.StuffLauncher_AddProductInfoNativeResourcesIfMissing(System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher},JetBrains.Application.BuildScript.ProductNameAndVersionArtifact)">
            <summary>
            Write product branding into resources so that Launcher could use it with LoadString()
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.StuffLauncher_AddSplashHighDpiNativeResourceIfMissing(System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher},JetBrains.Application.BuildScript.ProductNameAndVersionArtifact,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Util.ILogger)">
            <summary>
            Adds the boilerplate splash to the launcher, unless there's a custom one already.
            To have the boilerplate splash: do nothing.
            To have a custom splash image: supply a native resource with the splash.
            To have NO splash screen: supply an empty native resource for the splash.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.StuffLauncher_AddSplashNativeResourceIfMissing(System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher},JetBrains.Application.BuildScript.ProductNameAndVersionArtifact,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Util.ILogger)">
            <summary>
            Adds the boilerplate splash to the launcher, unless there's a custom one already.
            To have the boilerplate splash: do nothing.
            To have a custom splash image: supply a native resource with the splash.
            To have NO splash screen: supply an empty native resource for the splash.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher.IsWritingAsManagedResource">
            <summary>
            Icon groups make no sense in managed resources (in native resources, they change the appearance of the file or associated documents); other than that, we want all resources in managed form also.
            Native won't need them, but let's have for uniformity (save for a few large resources, avoid duplication).
            MSIL launchers, when run on cheaper systems, are only able to read managed resources.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ProductContentFile">
            <summary>
            Describes a file which will be packed as product content, and what should be done to that file when product content is expanded.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ProductContentFile.GetEncodedFile">
            <summary>
            Gets the file name as it should be written into the product content package, to encode what should be done to it upon extraction.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ProductContentFile.GetEncodedFileName">
            <summary>
            Gets the file name as it should be written into the product content package, to encode what should be done to it upon extraction.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ProductContentFile.ExpansionFlags.SaveFile">
            <summary>
            The file from the container should be saved to disk as a file (even if it's a container on itself).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ProductContentFile.ExpansionFlags.ExpandNuget">
            <summary>
            The file in the container is a Nuget package, and it should be expanded to disk following our general Nuget extraction rules rather than just saved as a file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ProductContentFile.ExpansionFlags.Gallery">
            <summary>
            The file should not be expanded onto disk. Instead, it's intended for reading into Gallery right from the packed form in the resources.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier">
            <summary>
            MUST be in sync with main solution!
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDB_SPLASH">
            <summary>
            Splash bitmap, in PNG format.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDR_COMPILATION_IDENTITY_HASH">
            <summary>
            A byte value of <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase.LaunchersCompilationIdentityHash" /> from which this instance were compiled, written to the instance's resources.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDR_IDENTITY">
            <summary>
            A unique identity of this launcher stuffing (should be deterministic for stuffing). Allows product content expansion code to choose a unique but repeatable folder. Should be a strong hash.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDR_PRODUCT_CONTENT">
            <summary>
            The product content resource with packed files to be expanded to a temp dir on startup. See <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherCommandLine.Name.ExpandProductContent" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDR_PRODUCT_VERSION_SEMANTIC">
            <summary>
            The 4-semantic version of the product, i.e. the <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDR_PRODUCT_VERSION_4" /> plus any possible prerelease or build suffices. An unparsed string.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceIdentifier.IDI_LAUNCHER">
            <summary>
            Icon of the EXE file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceValues">
            <summary>
            Looks up resource values in stuffed launcher files.
            Synced manually between the Launcher and the main solution.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceValues.IResSource">
            <summary>
            We can read resources either from the classical native stuffing or from the managed-only stuffing which is a tail-appended ZIP archive.
            TODO: consider reading from managed resources if stuffing can plant them effectively, that's more structural than tail-appending a ZIP.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceValues.NativeResSource">
            <summary>
            Reads resources from native resources of the entry module of the process (e.g. native launcher).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceValues.NativeResSource.JetBrains#Application#BuildScript#Install#Launcher#LauncherInstaller#ResourceValues#IResSource#TryGetResourceStream(JetBrains.Interop.WinApi.Declarations.Structures.NativeResourceTypeAndName)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceValues.ZipResSource">
            <summary>
            Reads resources from the given ZIP file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceValues.ZipResSource.#ctor(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.ResourceValues.ZipResSource.JetBrains#Application#BuildScript#Install#Launcher#LauncherInstaller#ResourceValues#IResSource#TryGetResourceStream(JetBrains.Interop.WinApi.Declarations.Structures.NativeResourceTypeAndName)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper">
            <summary>
            Wraps operations with <seealso cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.StuffLauncherAsync(JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase,System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher},JetBrains.Application.BuildScript.ProductNameAndVersionArtifact,JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,JetBrains.Util.ILogger,System.String,JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme,JetBrains.Util.RelativePath,JetBrains.Application.BuildScript.Helpers.Icons.SkiaHelper)" /> for compile-time and pwc-time tasks.
            Goals:
            • Better code reuse.
            • Avoid importing lots of supporting helpers and artifacts.
            • <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper.StuffingParams" /> for filling up.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper.StuffingParams.AppIconFileUnderSub">
            <summary>
            Rel path to app icon file, same as <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper.StuffingParams.WithAppIconFromFile(JetBrains.Util.FileSystemPath)" />, but the path would be resolved under the given sub automatically, and only if the sub is present in sources. Only for calling subplatform-related methods.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherInstallHelper.StuffingParams.Subplatform">
            <summary>
            Only for calling subplatform-related methods.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.LauncherNamingScheme">
            <summary>
            Base impl.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherSubsystem.Windows">
            <summary>
              Default. Windows only! Parent process does not wait for it to exit.
            </summary>
            <remarks>Name must match the CPP project file constant value.</remarks>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.LauncherSubsystem.Console">
            <summary>
              Console parent process waits for it to exit, and its console is reused.
            </summary>
            <remarks>Name must match the CPP project file constant value.</remarks>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.NetCoreCleanLauncherArtifact">
            <summary>
              The clean (not branded with any product nor stuffed with content, just as built) launcher native executables for .NET Core.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherHostArtifact">
            <summary>
            Requests a portable Single Exe distribution for a product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherStuffed.Configuration">
            <summary>
            Configuration of the launcher used for stuffing (bitness+subsystem). The stuffed EXE is in <see cref="F:JetBrains.Build.Running.BuildOutputFileArtifact.File" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherStuffed.ProductNameAndVersion">
            <summary>
            The product from <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase.ProductNameAndVersion" /> which were under the <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherHostArtifact" /> which instructed this stuffed launcher to be made.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.SingleExeStandaloneLauncherStuffed.GetObjectDataCore(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets">
            <summary>
            Which launchers (from the Clean Launchers total set) should be stuffed for a request for standalone launchers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets.NativeWinNT">
            <summary>
            Windows NT native launchers, for x86 and x64.
            This is the classic option.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets.Managed">
            <summary>
            Pure MSIL launcher, works on every platform.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets.Suppress32Bit">
            <summary>
            Suppress 32-bit native launchers. Will produce 64-bit launchers only, if any.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostArtifact">
            <summary>
            Requests that a standalone host be installed.
            The entry point executable is created on the Local Install stage. It does not appear in the product packages and is only generated on the target deployment machine. Thus, it can hold the full host components with any localinstalltime-serialized info.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostArtifact.#ctor(JetBrains.Build.Serialization.AssemblyQualifiedTypeName,JetBrains.Application.BuildScript.Install.Launcher.LauncherSubsystem,JetBrains.Application.BuildScript.ProductNameAndVersionArtifact,JetBrains.Application.BuildScript.WindowBrandingArtifact,JetBrains.Build.Serialization.AssemblyQualifiedTypeMemberName,System.Boolean,JetBrains.Util.Media.Imaging.RasterDeviceImages,System.String,System.Collections.Immutable.ImmutableArray{JetBrains.Util.Media.Imaging.ByteArrayIconGroup},System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.Install.FileAssociationEntry},System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.Install.DirectoryAssociationEntry},System.Version,JetBrains.Application.BuildScript.Install.Launcher.ILauncherNamingScheme,System.Nullable{JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets},System.String)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase">
            <summary>
            Describes the standalone launcher, common properties.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase.CpuSets">
            <summary>
            Which launchers (from the Clean Launchers total set) should be stuffed for a request for standalone launchers.
            The default is to use <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherCpuSets.NativeWinNT" /> — the original set of two WinNT native launchers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase.ExecutableName">
            <summary>
            The desired base name of the executable file which will be generated for this standalone host.
            In case it is not set (is null ) use <see cref="P:JetBrains.Application.BuildScript.ProductNameAndVersionArtifact.ProductName" /> of <see cref="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase.ProductNameAndVersion" /> instead.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostInPackageArtifact">
            <summary>
            Requests that a standalone host be embedded into a product package.
            The entry point executable is created on the Compile stage. It is explicitly included with the product packages and is just extracted on the target deployment machine. It thus cannot have host components which have any install-specific serialized info or know the full set of installed application packages. Such launchers have to collect available packages on startup by reading the package metadata files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostInPackageArtifact.Subplatform">
            <summary>
            Specific to in-package hosts.
            The subplatform whose package is to deploy it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostOsIntegration">
            <summary>
              <para>A subset of the <see cref="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostBase" /> properties which governs launcher's integration with the OS.</para>
              <para>For in-package hosts, this has to be carried out to the binary stage (which is executed upon installation) to be carried out.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostOsIntegration.LauncherLocation">
            <summary>
            Gives out the location of the stuffed launcher file, relatively to its originating package.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.StuffedLauncherArtifact">
            <summary>
            The ready launcher executables, branded with the product and stuffed with the serialized host components.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.TechnicalConsoleLauncherNamingScheme">
            <summary>
              Alt naming scheme with technical names for entries, looks more techy and verbose, but better for service executables.
              Prefers shorter names for console executables.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.TechnicalGuiLauncherNamingScheme">
            <summary>
              Alt naming scheme with technical names for entries, looks more techy and verbose, but better for service executables.
              Prefers shorter names for GUI executables.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.Launcher.WrappedNamingScheme">
            <summary>
            Augments another naming scheme.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalInstallPart">
            <summary>
            Denotes core parts of the Local Install process.
            Forces all installation steps required for Local Install to be executed, but does not commit the results.
            This art is requested when we're doing Install from the Installer or Local Install from the Build Application.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalInstallCommitPart">
            <summary>
            Denotes parts that should be evaluated on "Local Install" command of the Build Application (aka ArtOfBuild).
            These steps are executed after <see cref="T:JetBrains.Application.BuildScript.Install.LocalInstallPart"/> steps to commit the installation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalInstallRootSuffix">
            <summary>
            Chooses the root suffix to be used when local-installing the host, both VS and standalone hosts.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalInstallWithPostInstallStepsPart">
            <summary>
            Denotes parts that should be evaluated on "Local Install" command of the Build Application (aka ArtOfBuild).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.LocalMakePackedInstallerTasks.InstallPackedInstaller(JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackages,JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesForToolbox,JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedPackagesForToolboxJSon,System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.InstallerExeBootstrapper},System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.InstallerExePackedLight},System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.InstallerExePackedWeb},System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Install.InstallerExePackedWithEmbeddedChannelId},JetBrains.Application.BuildScript.Install.CdnGalleryPackagesJson,JetBrains.Application.BuildScript.Install.AllPackagesZip,JetBrains.Application.BuildScript.Install.ProductMainPackagesJson,JetBrains.Util.ILogger)">
            <summary>
            Create a packed installer and copy it to the Bin folder.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact">
            <summary>
            Isolation options for local install.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact.IsolationOptions">
            <summary>
            Isolation options for local install.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsOverrideArtifact">
            <summary>
            Isolation options for local install.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsOverrideArtifact.IsolationOptions">
            <summary>
            Isolation options for local install.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDir">
            <summary>
            Causes the packages be saved into the Product Binaries Dir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDir.SavePackagesParameters.Subplatforms">
            <summary>
            Optional filter for subplatforms whose packages (with all their recursive deps) will be saved. Take all if NULL.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDir.SavePackagesParameters.TargetDirOverride">
            <summary>
            Optional override of the output dir. Writes to a subdir of the bindir if NULL.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDirTasks">
            <summary>
            <see cref="T:JetBrains.Application.BuildScript.Install.LocalSavePackagesToBinDir" /> impl.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.PackagedMsi.SharedMsiArtifact">
            <summary>
            First stage build produces this artifact. Then we store it in package metadata and transfer to the second stage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Install.PackagedMsi.SharedMsiArtifact.NoAutoUninstall">
            <summary>
            Do not uninstall the msi when all products (that use it) are uninstalled.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.PostInstallExecutableArtifact">
            <summary>
            Local machine executables to run on register and unregister.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.ProductMainPackagesJson.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Install.ProductMainPackagesJson.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Install.VersionJSon">
            <summary>
            json files containing metadata for the installer for the needs of JetBrains Toolbox discovery and R# Check for updates.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact.Name">
            <summary>
            Local name of the per-profile folder under the common intermediate dir.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact.RelToHomeDir">
            <summary>
            Per-profile intermediate dir, rel to the home dir. Includes the common intermediate dir and the per-profile folder under it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.IProductInfo">
            <summary>
            Either host or sub-product information
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.ISourceStageBinStageBuild">
            <summary>
            Helps with writing standard local two-stage builds, where the first stage just collects the packages (optionally, compiles), and the second stage does smth with those packages, like local install.
            The first stage is all set, and the second stage differs only by the requested package, which is the only parameter here.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunSourceStageAsync``1(JetBrains.Lifetimes.OuterLifetime,System.Action{JetBrains.Build.Running.IBuildRunnerRequest})">
            <summary>
            </summary>
            <param name="lifetime"></param>
            <param name="FAdjustRequest"></param>
            <typeparam name="TObjective"></typeparam>
            <returns>If the objective is serializable, and one or more of them are produced during the second stage, returns these instances.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunSourceStageAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Build.Serialization.AssemblyQualifiedTypeName,System.Action{JetBrains.Build.Running.IBuildRunnerRequest})">
            <summary>
            </summary>
            <returns>The output file artifacts produced during the build.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunTwoStageAsync``1(JetBrains.Lifetimes.OuterLifetime)">
            <summary>
            </summary>
            <param name="lifetime"></param>
            <typeparam name="TObjective"></typeparam>
            <returns>If the objective is serializable, and one or more of them are produced during the second stage, returns these instances.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ISourceStageBinStageBuild.RunTwoStageAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Build.Serialization.AssemblyQualifiedTypeName)">
            <summary>
            </summary>
            <returns>The output file artifacts produced during the build.</returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.LocalCleanupConflictingAssembliesAndJetMetadata">
            <summary>
            After previous PWC/Extract/Install, there might be more assemblies in the Bin Dir than expected by the current profile.
            Normally, only assemlbies mentioned in the JetMetadata files are considered, any extras would be ignored.
            There are two exceptions:
            1) Excessive metadata. If there's JetMetadata (or lightweight JetMetadata) from previous runs, then extra DLLs will be considered for use. JetMetadata has to be cleaned down to the actual set.
            2) Ambiguous assemblies. Assembly is loaded by looking for a file which has the same name-without-extension as the assembly simple name, and a supported extension. If there's a DLL and an EXE at the same time, they'd conflict. One of them has to be cleaned up.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.LocalCleanupConflictingAssembliesAndJetMetadata.DeleteProblematicFilesFromBinDir(JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Util.ILogger)">
            <summary>
            Checks the Bin Dir for potential problems — leftovers from prior PWC or MSBuild builds or Extract to Bin Dir (incl Local Install).
            For assembly conflicts, might erase useful files too in case of a conflict, so this should be called BEFORE any relevant writes.
            This includes:
            * Full Jet Metadata:
            ** On a source stage (hence, PWC), any full metadata is considered problematic (except for B-subplatforms of course). It might list stuff from a very very old extract to bin dir, while PWC tries to make fresh light-metadata. Full metadata takes precedence when loading, so it should be deleted. So filter down to available binary subs.
            ** On a bin stage (extract), shan't have metadata except for the actually available subplatforms-on-packages. So again filter down to available binary subs.
            * Lightweight Jet Metadata:
            ** On a source stage (hence, PWC), shan't have light-metadata from subplatforms which we do not have in sources at the moment. So filter down to available source subs.
            ** On a bin stage (extract), we're getting real metadata, so any light metadata is not needed. So again filter down to available source subs.
            * Assembly files:
            ** Assemblies are loaded by looking up files by the assembly simple name, plus known assembly extensions, case-insensitively. This makes it possible to match more than one file when loading (eg you change project target between DLL and EXE and you get both, all good for loading). We have to delete the extra one. Also ensure case matches.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.LocalInstallTargetArtifact.DefaultFallback">
            <summary>
            When there's no preference for any specific VS, take the latest one. Or a fake invalid value, if none.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact">
            <summary>
            Chain: <see cref="T:JetBrains.Application.BuildScript.PackageReferenceArtifact" /> … <see cref="T:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact" /> … <see cref="T:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact.RestoredLocation">
            <summary>
            Relative to the Product Home Dir.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.LocalRestoredPackages">
            <summary>
            Handles the locally-restored packages in the sources mode, a grouping accessor to the <see cref="T:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact" /> artifacts collection.
            That's when there's a <see cref="T:JetBrains.Application.BuildScript.PackageReferenceArtifact" /> which gets retrieved as a <see cref="T:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact" /> and then written out to the Packages folder as a <see cref="T:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.MonoRuntimeConfig">
            <summary>
            Config for our custom Mono runtime.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.MonoRuntimeConfig.GetFullPathToMonoRuntimeBootstrapperFile(JetBrains.Application.BuildScript.ProductHomeDirArtifact)">
            <summary>
            Full path to <see cref="F:JetBrains.Application.BuildScript.MonoRuntimeConfig.MonoRuntimeBootstrapperFileName" /> against this home dir.
            Works on any OS because this is a file in scripts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.MonoRuntimeConfig.GetMonoRuntimeBootstrapperRequiredFiles(JetBrains.Application.BuildScript.ProductHomeDirArtifact)">
            <summary>
            Get files required to run <see cref="F:JetBrains.Application.BuildScript.MonoRuntimeConfig.MonoRuntimeBootstrapperFileName" /> including itself.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.MonoRuntimeConfig.GetMonoRuntimeExecutableForThisEnvironmentAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Threading.Tasks.ITaskHost)">
            <summary>
            Works only on envs where Mono is applicable. Returns this executable which you must run and pass the .NET executable as the first param, then its args.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.NugetApplicationPackageConvention">
            <summary>
            Nuget package layouts, locations, constants, etc.
            </summary>
            <remarks>
              <para><see cref="T:JetBrains.Application.BuildScript.NugetApplicationPackageConvention" /> — Nuget package layouts, locations, constants, etc for application shell aware needs.</para>
              <para><see cref="T:JetBrains.Util.Storage.Packages.NugetHelpers" /> — very generic Nuget helpers in the <c>Util</c>, not aware of Build nor Application Shell packages layout.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell" /> — Nuget services for working with the Application Shell packages.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.NugetApplicationPackageTasks" /> — Application Shell packages logic.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.GetSubplatformReferencedPackageVersionRange(JetBrains.Util.JetSemanticVersion)">
            <summary>
            When referencing another subplatform, makes a version spec with constraints following the convention.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.GetSubplatformReferencedPackageVersionRange(JetBrains.Application.BuildScript.Solution.Subplatform,JetBrains.Application.BuildScript.BuildVersionSuffix)">
            <summary>
            When referencing another subplatform, makes a version spec with constraints following the convention.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Folder.Lib">
            <summary>
            The standard Nuget Lib folder name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Folder.Net">
            <summary>
            .NET framework default folder name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Folder.NugetBuild">
            <summary>
            Folder in which Nuget looks for Targets and Props files to include in projects it's referenced in.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Folder.NugetTools">
            <summary>
            Folder in which Nuget looks for tools.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Folder.PackagesFolder">
            <summary>
            Gets relative path from the home dir to the standard local packages repository folder under the product home dir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Folder.PlatformPackageFilesFolder">
            <summary>
            The path in a platform package under which all of the platform package files from <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackaging" /> are written.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Version.PackageMinNugetClientVersion">
            <summary>
              <para>Defines the value for <see cref="P:NuGet.IPackageMetadata.MinClientVersion" /> of the Nuget packages created for subplatforms.</para>
              <para>This value means that only Nuget clients or servers of at least this version will be able to handle our packages.</para>
              <para>Advance this version when we use breaking features from new Nuget.</para>
              <para>The current heuristic is to fix for the major version of the Nuget (supposing we are good with any minor version). So far so good for 2.x. If you ever change this to manual, make sure there's a check we do not go to a new major version without moving this value.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.NugetApplicationPackageTasks">
            <summary>
            Major build tasks producing our Nuget packages.
            </summary>
            <remarks>
              <para><see cref="T:JetBrains.Application.BuildScript.NugetApplicationPackageConvention" /> — Nuget package layouts, locations, constants, etc for application shell aware needs.</para>
              <para><see cref="T:JetBrains.Util.Storage.Packages.NugetHelpers" /> — very generic Nuget helpers in the <c>Util</c>, not aware of Build nor Application Shell packages layout.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell" /> — Nuget services for working with the Application Shell packages.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.NugetApplicationPackageTasks" /> — Application Shell packages logic.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NugetApplicationPackageTasks.IsRegularManagedRefs(JetBrains.Application.BuildScript.PackageReferenceArtifact.PackageReferenceFlags)">
            <summary>
            Refs in the regular managed references sense. Either on a project or subplatform-level or wherever else it's coming from.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NugetApplicationPackageTasks.LocalRestoreReferencedNugetPackages(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact[],JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.BuildScript.NuGetHelpers.LocalRestoreNugetPackagesCentralCacheArtifact,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
              <para>Does the Local Restore of Nuget packages — having an artifact with the package body, ensures its contents ends up extracted under the $(HomeDir)/Packages folder.</para>
              <para>As opposed to the standard Nuget procedure:</para>
              <para>• Ensures the folder contains no more packages than the retrieved list, to prevent projects from using non-whitelisted pkgs by accident. Operates on the Backlog folder to quickly retrieve such packages whenif we switch context.</para>
              <para>• Ensures the expanded content still matches the original packages (the file set and their content, by timestamp of the last time we wrote them).</para>
              <para>• Fixes exceptions in Nuget which probably resulted from some race (NP-1199).</para>
              <para>• Operates on the already-retrieved package body, as an artifact object.</para>
              <para>• Uses a slightly optimized procedure for accessing the artifact body (not so important).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NugetApplicationPackageTasks.ReferenceBeingRetrieved.Result">
            <summary>
            Filled in the process of trying to get the package from inputs or from source. At the end, all must be filled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NugetApplicationPackageTasks.ReferenceBeingRetrieved.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.NuGetHelpers.LocalRestoreNugetPackagesCentralCacheArtifact">
            <summary>
              <para>Represents a central NTSF folder into which all packages are actually expanded upon local-restore and then linked into individual Packages folders with directory junctions as needed.</para>
              <para>The actual folder path might be <c>NULL</c>, which means that the central folder is not available (e.g. due to the lack of filesystem support for junctions), and local package folders must be used normally in such a case.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.LocalRestoreNugetPackagesCentralCacheArtifact.CreateInLocalAppDataIfSupported">
            <summary>
            If the localappdata volume supports junctions.
            Always returns a non-NULL instance, but it might have a NULL path.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.NuGetHelpers.NugetConfigFileLocatorShell">
            <summary>
            Knows of the <see cref="T:JetBrains.Application.BuildScript.ProductHomeDirArtifact" />, looks for the config file in it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell">
            <summary>
            Nuget package helpers which are specific to the build semantic, but do not contain the packaging logic.
            </summary>
            <remarks>
              <para><see cref="T:JetBrains.Application.BuildScript.NugetApplicationPackageConvention" /> — Nuget package layouts, locations, constants, etc for application shell aware needs.</para>
              <para><see cref="T:JetBrains.Util.Storage.Packages.NugetHelpers" /> — very generic Nuget helpers in the <c>Util</c>, not aware of Build nor Application Shell packages layout.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell" /> — Nuget services for working with the Application Shell packages.</para>
              <para><see cref="T:JetBrains.Application.BuildScript.NugetApplicationPackageTasks" /> — Application Shell packages logic.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.ExtractBinDirFilesFromPackagesAsync``1(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{``0},JetBrains.Application.Threading.Tasks.ITaskHost,System.Action{JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict})">
            <summary>
            Extracts files from several packages using <see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetContentEntriesWithJetMetadata2``1(``0,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod)" /> twice for CLR and NetCore, merges and processes conflicts.
            </summary>
            <param name="lifetime"></param>
            <param name="packages"></param>
            <param name="tasker"></param>
            <param name="λOnConflict">Custom handling of file conflicts. Logs an onerror by default.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.ExtractBinDirFilesFromPackagesCoreAsync``1(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{``0},JetBrains.Application.Threading.Tasks.ITaskHost,System.Action{JetBrains.Util.Storage.Packages.NugetHelpers.ExtractedFileConflict})">
            <summary>
            Extracts files from several packages using <see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetContentEntriesWithJetMetadata2``1(``0,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod)" /> twice for CLR and NetCore, merges and processes conflicts.
            </summary>
            <param name="lifetime"></param>
            <param name="packages"></param>
            <param name="tasker"></param>
            <param name="λOnConflict">Custom handling of file conflicts. Logs an onerror by default.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FindPackagesAndTheirReferencesForJetRids``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{JetBrains.Util.JetRid},JetBrains.Util.OnError)">
            <summary>
            Gets the packages by ID, plus all their references for specified <see cref="T:JetBrains.Util.JetRid" />s, transitively. A missing reference is an error.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FindPackagesWithManagedSymbolsAsync``1(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.IEnumerable{``0},JetBrains.Application.Threading.Tasks.ITaskHost)">
            <summary>
            For a set of packages with binaries, tries to look up corresponding packages with symbols in the total packages set.
            Skips out packages with native symbols, as denoted by the <see cref="T:JetBrains.Application.BuildScript.Compile.SymbolsMarkerArtifact" />, as they're large and generally should not be shipped to the user.
            Extends <see cref="M:JetBrains.Util.Storage.Packages.NugetHelpers.FindPackagesWithSymbols``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.IEnumerable{``0})" />.
            </summary>
            <typeparam name="TPackage"></typeparam>
            <param name="lifetime"></param>
            <param name="packagesWithBinaries">Subset of binaries packages.</param>
            <param name="allpackages">The total set of packages to consider.</param>
            <param name="tasker"></param>
            <returns>The set of found symbol packages.</returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.ForEachPackageJetMetadata``2(System.Collections.Generic.IEnumerable{``0},JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod,System.Func{``0,JetBrains.Build.Serialization.SerializedValuesResolver,``1},JetBrains.Util.OnError,JetBrains.Build.Serialization.IBindTypeByName)">
            <summary>
            Calls <see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadata(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Lifetimes.Lifetime,JetBrains.Util.OnError,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod,JetBrains.Build.Serialization.IBindTypeByName)" /> on each package in turn. Optimizes creating the resolver in the loop.
            </summary>
            <param name="thіs"></param>
            <param name="method"></param>
            <param name="λ"></param>
            <param name="onerror">Reports if a certain package could not be queried for metadata. If omitted, issues a logger-verbose message.</param>
            <param name="typebinder"></param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.ForEachPackageJetMetadataAsync``2(System.Collections.Generic.IEnumerable{``0},JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod,JetBrains.Application.Threading.Tasks.ITaskHost,System.Func{``0,JetBrains.Build.Serialization.SerializedValuesResolver,``1},JetBrains.Util.OnError,JetBrains.Build.Serialization.IBindTypeByName)">
            <summary>
            Calls <see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadata(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Lifetimes.Lifetime,JetBrains.Util.OnError,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod,JetBrains.Build.Serialization.IBindTypeByName)" /> on each package in turn. Optimizes creating the resolver in the loop.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="method"></param>
            <param name="tasker"></param>
            <param name="λ"></param>
            <param name="onerror">Reports if a certain package could not be queried for metadata. If omitted, issues a logger-verbose message.</param>
            <param name="typebinder"></param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GenerateFakeJetMetadata``1(JetBrains.Lifetimes.Lifetime,JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Util.OnError,System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage{``0}})">
            <summary>
            If a package is wave'd but lacks an explicit metadata stream, tries to think up the fake metadata values resolver which would allow this package to run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetContentEntriesWithJetMetadata(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod)">
            <inheritdoc cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetContentEntriesWithJetMetadata2``1(``0,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod)" />
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetContentEntriesWithJetMetadata2``1(``0,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod)">
            <summary>
            Gets those file items which are under our <see cref="F:JetBrains.Util.Storage.Packages.SubplatformPackageLayoutConstants.JetBrainsContentFilesFolder" /> content folder, by their effective path which is relative to that folder.
            If such folder is missing (e.g. in third-party packages), reverts to collecting <see cref="F:JetBrains.Application.BuildScript.NugetApplicationPackageConvention.Const.Folder.Lib" /> files.
            If the package is detected as a product package (<see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.IsReferencingWavePackage(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage)" />), and has no explicit jet package metadata file in it, such file is generated as with <see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadata(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Lifetimes.Lifetime,JetBrains.Util.OnError,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod,JetBrains.Build.Serialization.IBindTypeByName)" /> function.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadata(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Lifetimes.Lifetime,JetBrains.Util.OnError,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod,JetBrains.Build.Serialization.IBindTypeByName)">
            <summary>
            Gets the serialized value resolver from the jet metadata stream in the package (see <seealso cref="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.JetMetadataInApplicationPackageExt" /> for its extension), if one is present.
            For any package which references the Wave package, in case such stream is missing, it's optionally generated on-the-fly upon the available package data.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="onerror"></param>
            <param name="method"></param>
            <param name="typebinder">Optional type binder for the resolver. Binds to loaded assemblies if not specified.</param>
            <returns></returns>
            <remarks><see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.ForEachPackageJetMetadataAsync``2(System.Collections.Generic.IEnumerable{``0},JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod,JetBrains.Application.Threading.Tasks.ITaskHost,System.Func{``0,JetBrains.Build.Serialization.SerializedValuesResolver,``1},JetBrains.Util.OnError,JetBrains.Build.Serialization.IBindTypeByName)" /> optimizes requesting metadata for multiple packages in a row.</remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetPackageMetadata(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Util.ILogger)">
            <summary>
            Gets JetBrains-custom metadata attached to the Nuget package. This extends the standard Nuget package metadata and should be available by viewing just the Nuget Package metadata without downloading the whole package body; originally, this were available by just querying the package gallery. Currently, embedded as text into the Release Notes field of the standard Nuget metadata.
            If missing, returns an empty metadata object.
            On errors, log but does not  throw.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.HasJetMetadata(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage,JetBrains.Util.OnError,JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod)">
            <summary>
            Gets whether the package has JetMetadata stream inside.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.IsReferencingWavePackage(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage)">
            <summary>
            Whether this package is referencing our root Wave package (of either version).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.ReadConfigFileInHomeDir(JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProductHomeDirArtifact})">
            <summary>
            If homedir is known, and if it has the config file, gives it out as the default.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.ShouldHaveJetMetadataInPackage(JetBrains.Util.Storage.Packages.IHaveJetNugetPackage)">
            <summary>
            Gets whether this package is our subplatform-based package, and getting jet-metadata should yield smth, real or fake.
            Detected by reference to the Wave package currently.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1">
            <summary>
            Working struct for files being extracted from packages in parallel.
            </summary>
            <typeparam name="THavePackage"></typeparam>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.myPartPathIfRealFromPackage">
            <seealso cref="P:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.IsRealFromPackage" />
            <seealso cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.GetPartPath" />
        </member>
        <member name="P:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.ContentLength">
            <summary>
            Allows to peek into content length without starting to render the file body.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.EffectivePath">
            <summary>
            Equal to <see cref="F:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.FileBody" />.<see cref="P:JetBrains.Util.Storage.ImmutableFileItem.RelativePath" /> when you lazy-create the file body.
            Originally comes from the Nuget entry effective path (or synthetic rel path), but might be remapped with <see cref="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.WithAnotherPath(System.Func{JetBrains.Util.RelativePath,JetBrains.Util.RelativePath})" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.FileBody">
            <summary>
            Lazy for a nuget package origin; eager when synthetic.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.IsRealFromPackage">
            <summary>
            Sometimes fake JetMetadata is emitted, would have this <c>False</c> and would have no part path.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.GetPartPath">
            <summary>
            Gets the real original path of the package part of this file in the package, in case it's a real file from the package (<see cref="P:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.IsRealFromPackage" />), otherwise, throws.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.OpenSequentialStream(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Gets the streaming access to the body, without a random-access caching wrapper and no permanent allocations.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.TryGetAsAssemblyItem">
            <summary>
            If this file is a managed assembly, wraps its <see cref="F:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.FileBody" /> into an <see cref="T:JetBrains.Metadata.Utils.IAssemblyItem" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.TryReadAssemblyName(JetBrains.Metadata.Utils.AssemblyNameReader.AssemblyInfo@)">
            <inheritdoc cref="M:JetBrains.Build.Helpers.Nuget.NugetAssemblyItemsExtensions.TryReadAssemblyName(JetBrains.Util.Storage.Packages.JetNugetEntry,JetBrains.Metadata.Utils.AssemblyNameReader.AssemblyInfo@)" />
        </member>
        <member name="P:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.FileFromPackage`1.JetBrains#Util#Storage#Packages#IHaveJetNugetPackage#Package">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod">
            <summary>
            How to fetch metadata from packages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod.FromRealFileOnly">
            <summary>
            Classic: only read metadata explicit in the stream under the known path.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.NuGetHelpers.NugetHelpersShell.GetJetMetadataMethod.GenerateFakeMetadataForWavedPackages">
            <summary>
            Advanced, for extensions which are waved packages but might not have the explicitly-compiled-in jet-metadata stream: if the package references a Wave package, try generating relevant metadata on-the-fly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Obfuscation.Obfuscator.DiagnosticSerializeObfuscatorInputs(System.Collections.Generic.List{JetBrains.Application.BuildScript.Obfuscation.Obfuscator.AssemblyFileAndKeyPair},System.Collections.Generic.List{JetBrains.Application.BuildScript.Obfuscation.Obfuscator.AssemblyFileAndKeyPair})">
            <summary>
            Call this in real-life obfuscator calls so that to dump the inputs to be given to obfuscator in a repro.
            </summary>
            <param name="assembliesToObfuscateLib"></param>
            <param name="assembliesToObfuscateUser"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata">
            <summary>
              <para>Unless <see cref="T:JetBrains.Application.BuildScript.BuildVersionSuffix" /> is explicitly specified, gives the default <see cref="P:JetBrains.Util.JetSemanticVersion.PrereleaseMetadata">prerelease metadata</see> part of the semantic version which is to be used on the packages we produce during the build.</para>
              <para>On the build server, there's a setting for this value to either a prerelease suffix (eap, beta, rc) or release (an empty string). Locally, it should designate a custom build.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata.DefaultValue">
            <summary>
            This applies to builds which have not been compiled on the build server (and thus received any specific, possibly empty for release, metadata).
            For example, local compilations and locally installed products.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata.PrereleaseMetadata">
            <summary>
              <para>Unless <see cref="T:JetBrains.Application.BuildScript.BuildVersionSuffix" /> is explicitly specified, gives the default <see cref="P:JetBrains.Util.JetSemanticVersion.PrereleaseMetadata">prerelease metadata</see> part of the semantic version which is to be used on the packages we produce during the build.</para>
              <para>On the build server, there's a setting for this value to either a prerelease suffix (eap, beta, rc) or release (an empty string). Locally, it should designate a custom build.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageReferenceArtifact">
            <summary>
            A reference to a Nuget package mentioned somewhere in the subplatform.
            Chain: <see cref="T:JetBrains.Application.BuildScript.PackageReferenceArtifact" /> … <see cref="T:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact" /> … <see cref="T:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferenceArtifact.PackageReferenceInfo">
            <summary>
            The package reference record, as read from the packages.config file or else.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferenceArtifact.ReferencingContextFlags">
            <summary>
            Additional flags. These do not apply to the package reference itself (as they should go into <seealso cref="T:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo" /> in such case) but to the origin of the reference (in addition to the original subplatform/project).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferenceArtifact.ReferencingProjectInSubplatform">
            <summary>
            If the package has been requested by some specific project in the subplatform (and not the subplatform as a whole), points to rel path to the project file in the subplatform. Otherwise, <c>NULL</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferenceArtifact.ReferencingSubplatformName">
            <summary>
            The subplatform which requested this package.
            If the package is not a dev-only reference, the output package of the subplatform would also list this package as a reference.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageReferenceArtifact.PackageReferenceFlags">
            <summary>
            Additional flags. These do not apply to the package reference itself (as they should go into <seealso cref="T:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo" /> in such case) but to the origin of the reference (in addition to the original subplatform/project).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferenceArtifact.PackageReferenceFlags.IsFromPackagesConfig">
            <summary>
            The package reference is coming from the static project description on disk (eg has not been injected by code in the build script or else).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferenceArtifact.PackageReferenceFlags.IsNativeSpecific">
            <seealso cref="!:NugetApplicationPackageConvention.Const.File.PackageNativeReferenceFiles" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferenceArtifact.PackageReferenceFlags.IsFromSdkProject">
            <summary>
            New SDK-style project have package references embedded in the project file body rather than in a separate <c>packages.config</c> file, in <c>&lt;PackageReference/&gt;</c> elements.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.Format">
            <inheritdoc cref="T:JetBrains.Application.BuildScript.PackageReferencesFileInfo.FileFormat" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PathUnderProjectDir">
            <summary>
            Might not exist. The API returns all possible file locations without checking for their existence.
            Rel to project dir. If no project, rel to sub dir. If no sub, rel to home dir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.ReferencingProjectInSubplatform">
            <summary>
            If belongs to a project, path to its project file (not dir!).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.ReferencingSubplatformName">
            <summary>
            If under a subplatform, name of the referencing subplatform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageReferencesFileInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageReferencesFileInfo.FileFormat">
            <summary>
            Now we support original Nuget <c>packages.config</c> files, and also giving package references in projects.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.FileFormat.PackagesConfigOriginal">
            <summary>
            The original <c>packages.config</c> file of Nuget.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.FileFormat.PackageReferencesInProj">
            <summary>
            Package references embedded into the project files as <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.ItemGroups.PackageReference" /> task items.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.FileFormat.PackageVersionLocks">
            <summary>
            <see cref="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.FileFormat.PackageVersionLocks" /> file, when treated together with package references (e.g. for normalizing versions).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.IsDevelopmentDependency">
            <summary>
            Whether this should be treated as dev-only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.IsEmbedInteropTypes">
            <summary>
            Whether this reference should be embedded rather than linked.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.OriginOfVersion">
            <seealso cref="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.PackageId" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.PackageId">
            <summary>
            Package ID, its version part might be either written locally or coming from the version locks, see <see cref="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.OriginOfVersion" />.
            The ID we currently expect to know locally.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.RuntimeIds">
            <summary>
            Whether this reference should be used only on these runtimes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageReferencesFileInfo.PackageReferenceInfo.ToString">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.ValueOrigin.Local">
            <summary>
            The value (version, dev-only, etc) has been written locally on the entry.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.ValueOrigin.Inherited">
            <summary>
            The value (version, dev-only, etc) is omitted on the entry, and has been inherited from an upper level (for example, for a package reference on a project it inherits from the package locks file).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageReferencesFileInfo.ValueOrigin.Defaults">
            <summary>
            The value isn't given anywhere but it's the assumed default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.HostName">
            <summary>
            Name of the standalone product host. Must be not null for standalone products, and null for VS integrated products.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.ComplementedProductName">
            <summary>
            Denotes an optional part of another product.
            The name must match <see cref="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInfo.ProductTechnicalName"/> of the main product package.
            For VS integrated products, <see cref="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.VsHosts"/> must be also specified.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.VsHosts">
            <summary>
            For VS integrated products. A list of supported VS versions (see <see cref="F:JetBrains.Application.BuildScript.GlobalDefines.AllSupportedVsHosts"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.AutomaticFeature">
            <summary>
            Was never used. The semantic is unclear; nobody remembers what it means. Do not use, if you're not its author.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.BinaryPackageFor">
            <summary>
            Denotes a package that contains a collection of files to be extracted into product binaries folder.
            The name must match <see cref="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInfo.ProductTechnicalName"/> of the main product package.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.BinaryPackageRuntimeIds">
            <summary>
            Denotes a package that consists of runtime-specific files to be extracted for these runtimes only (non-<c>NULL</c>),
            otherwise <c>NULL</c> for everywhere. Should only be used with <see cref="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.BinaryPackageFor"/>.
            Use <see cref="M:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpecEx.GetBinaryPackageRuntimeIds(JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec)"/> to get the parsed array of the runtime identifiers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.InstallOptions">
            <summary>
            A collection of flags used by the installer to present the product and show install options to the user.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpecEx.GetBinaryPackageRuntimeIds(JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec)">
            <summary>
              Gets an array of runtime identifiers from <see cref="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformSpec.BinaryPackageRuntimeIds" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact.Requires">
            <summary>
            Specifies which zones should be activated, minimally, for this package to run.
            Because the components in the package do not necessarily have a common minimal set, might have multple sets.
            The outer array is a list of sets, each inner array is a set of module zones which should be active.
            If the outer array has one empty inner array, then the package has components eligible for zoning but with no requirements of them (an empty zone marker).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact.ZoneDefs">
            <summary>
            Lists which module zones are declared in this package, with their hierarchy.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageSpecification.PackageZoningSpecTasks">
            <summary>
            Out of the package assemblies, take the zoning information and publishes it in the package metadata, as package components of type <see cref="T:JetBrains.Application.BuildScript.PackageSpecification.JetSubplatformZoningSpecArtifact" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageSpecification.PackageZoningSpecTasks.CalculatePackageZoneMinRequirements_AssemblyRecurseNames_AddSet(JetBrains.Application.BuildScript.Application.Zones.ZonePart[],System.Collections.Generic.List{System.Collections.Generic.JetHashSet{JetBrains.Application.BuildScript.Application.Zones.ZonePart}})">
            <summary>
            We found a new minimal zone requirements set for the package, register it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec">
            <summary>
            A collection of flags used by the installer to present the product and show install options to the user.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec.Is64bitOnly">
            <summary>
            Don't show the product on 32-bit OS.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec.SupportsPlugins">
            <summary>
            The product supports plugins. The installer asks to keep plugins from the previous installation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec.NGenAssemblies">
            <summary>
            An ability to run NGen.exe after product's installation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec.EtwHostService">
            <summary>
            An ability to install ETW Host service after product's installation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec.FileAssociations">
            <summary>
            Product has file type associations (Windows Shell integration).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageSpecification.ProductInstallSpec.DirectoryAssociations">
            <summary>
            Product has directory context menu actions (Windows Shell integration).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageVersionLocks">
            <summary>
            Represents a loaded file with the Nuget packages centralized versions lock storage. Allows to skip giving package versions on every reference, stating them all in the central place instead.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey">
            <summary>
            Keys in the package version lock storage, by package ID in the simple case (until there are groups).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey.CompareTo(JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey.Equals(JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata">
            <summary>
            Values in the package lock storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata.IsDevelopmentDependency">
            <summary>
            <c>True</c>: only allowed as dev.
            <c>False</c>: not allowed as dev.
            <c>NULL</c>: not restricted.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata.IsEmbedInteropTypes">
            <summary>
            <c>True</c>: only allowed as embed.
            <c>False</c>: not allowed as embed.
            <c>NULL</c>: not restricted.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata.RuntimeIds">
            <summary>
            non-<c>NULL</c>: only required on these runtimes.
            <c>NULL</c>: everywhere.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocksEx.LookupPackageIdentity(JetBrains.Application.BuildScript.PackageVersionLocks,System.String)">
            <summary>
            Looks up the full identity (ID + version) for a package in the version locks file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocksEx.LookupPackageIdentityAndIsDevOnly(JetBrains.Application.BuildScript.PackageVersionLocks,System.String)">
            <summary>
            Looks up the full identity (ID + version) for a package in the version locks file, plus whether it is a development dependency.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PackageVersionLocksEx.TryLookup(JetBrains.Application.BuildScript.PackageVersionLocks,System.String)">
            <summary>
            Looks up the full identity (ID + version) for a package in the version locks file, plus its dev-only flag, and makes a package reference out of it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.AssetsJsonGenerate">
            <summary>
            Generates project.assets.json files so that full-SDK (e.g. from git-subplatform) projects can be compiled without calling the full nuget restore.
            Generation is embedded as a build target within build itself because the file has to be placed in the Obj dir of the project, which in case of an isolated build is a temporary location and won't be visible from any pre-build writeouts.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.Autofix.AutofixAllowedDefineConstant">
            <summary>
            If you want to have custom defines in your project and have them left alone by Autofix, publish their names here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.AutofixAllowedDefineConstant.DefineConstant">
            <summary>
            The define constant symbol which is allowed to be set in projects.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.AutofixAllowedDefineConstant.SubplatformName">
            <summary>
            Only effective in this subplatform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.AutofixAllowedDefineConstant.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Helpers.ErrorOrWarning(JetBrains.Util.ILogger,System.String,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk})">
            <summary>
            Warn if live (because will be fixed), err if non-live because would fail the build.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="isModeLive"></param>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.Autofix.IAutofixSingleProjectStage">
            <summary>
            Allows to extend Autofix with specific stages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.IAutofixSingleProjectStage.RunStage(JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,System.Xml.Linq.XDocument)">
            <summary>
            Runs your stage for this single project.
            Modify the project XML if you want to change it or report as invalid.
            Only write files to disk if <see cref="T:JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk" /> optional artifact is set. The project XML won't be saved in non-live mode.
            Don't forget to report errors in non-live mode or if you could not fix them. It's nice to report warnings for fixable errors if you're running live.
            </summary>
            <returns>
            Must be set to <c>True</c> if something were modified (or attempted to be modified), besides the <paramref name="xdoc" />, because it's okay to modify the project XML object without setting this flag, that would be detected by caller automatically.
            </returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.LocalAutofixProjectFiles.SpawnCompileStageValidation(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ISourceStageBinStageBuild,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            On the autofix entry point, enables the LIVE mode and spawns all of the compile-time validators procedures.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.ManualUnskipProjectsFileName">
            <summary>
            A file in the product home dir with a list of projects (by project file local name, plain text, one per line) to manually force migrating a certain project to SDK Mini no matter what its conditions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.ProfileEnforcingSdkMini">
            <summary>
            Lists projects to be converted to SDK Mini by Autofix.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.RenderDetailedSdkStatistics(System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.SourceProjectSdkAbilityStatus},JetBrains.Util.ILogger)">
            <summary>
            Some simple stats are rendered on PWC (like, how many already in SDK). Here we give more details and reasons for why projects are not in SDK yet.
            Those reasons require detailed exploration, so they're too slow to run on PWC.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.SourceProjectSdkAbilityStatus.RejectCode">
            <summary>
            A set of hardcoded strings why this project cannot be SDK yet, should be a limited set for grouping by problem.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.SourceProjectSdkAbilityStatus.RejectComment">
            <summary>
            Optional comment to <see cref="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.SourceProjectSdkAbilityStatus.RejectCode" />, might vary with specific info for that project.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixHelpers.SourceProjectSdkAbilityStatus.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.SdkMiniAutofixStages.JetBrains#Application#BuildScript#PreCompile#Autofix#IAutofixSingleProjectStage#RunStage(JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,System.Xml.Linq.XDocument)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.SubextensionOfGeneratedFiles">
            <summary>
            Gets the "sub-extension" for the generated files which are ignored from our source control. Subextension means that it's like a second extension which precedes the real extension, e.g. <c>Stuff.Generated.xml</c>. The ignore pattern is like <c>*.Generated.*</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.CleanupProjectDefines(System.Xml.XmlDocument,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,System.Collections.Generic.ISet{System.String},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            We have defines which come from the stuffing, and if you open the VS properties editor and change defines there by hand, they get also written to the project file, and might contradict to what we want to see at runtime. Let's sanitize them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.FixDllReferences_ProjectReference(JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.XmlDllReference,System.Linq.ILookup{System.String,JetBrains.Util.Pair{JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Application.BuildScript.Solution.Subplatform}},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            This is especially important if we allow substituting project references with DLL references
            If our own project has been added as a DLL reference instead, replace it with the correct project reference
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.SerializeEmptyElementsInShortFormat(System.Xml.XmlDocument)">
            <summary>
            Turns [element][/element] into [element/], so that they weren't overwritten by VS project saver (which prefers another formatting style on them).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.SingleProjectConfiguration(System.Xml.XmlDocument,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            Enforces the single project configuration named “Default” instead of the “Debug”/“Release” pair.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.NugetRootFolderImpors(System.Xml.XmlDocument,JetBrains.Util.ILogger)">
            <summary>
            Cleans up Nugets's attempts of adding a folder with an empty name under solution and placing some stuff there.
            We don't have the common sourcecontrolled solution root, so this ain't gonna work.
            Some props are removed with other props, and we'd remove bad imports and error blocks for them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.MakeImportTargetsUnconditional(System.Xml.XmlDocument,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Util.ILogger)">
            <summary>
            Many .targets files are imported conditionally on whether the file exists. We would like to have reliable effects on build — to see errors
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.GlobalAssertNoDeepProjects(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)">
            <summary>
            After subplatform stopped looking for project files with full recursion, this here thing ensures there're no missed projects.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.MakeWildcardFriendly(System.Xml.XmlDocument,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            Ensures that the project Compile item group is wildcard-friendly, i.e. can potentially list its source files with the “*.cs” mask.
            Checks that all files under the project are included in the project.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.EnforceWildcardIncludes(System.Xml.XmlDocument,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            Enforces that task items of the specific types, such as .cs, are only included by wildcard if they're under the project directory.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.DefaultProjectConfigurationName">
            <inheritdoc cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Values.Default"/>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.CustomAddDllReferenceByTemplate(System.Xml.XmlDocument,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.BuildScript.PreCompile.LookupFilesInNugetPackages,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            A veeery custom and by-task script which mass-adds dll references by certain criteria. Off by default.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.NeatUp(System.Xml.XmlDocument)">
            <summary>
            Just some visual improvements, like cleaning up commented-out stuff from old old times.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.GlobalAssertPackageVersionLocksFileMergible(JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            To ensure concurrent changes from multiple branches are merged smoothly in the file written by many, ensure that:
            • There is strict ordering for items.
            • There are empty lines between items so that independent changes in adjacent items merged without conflicts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.Stages.PromoteSdkPackageReferenceVersionsAndDevToLocks(System.Xml.XmlDocument,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Application.BuildScript.PackageVersionLocks,System.Collections.Concurrent.ConcurrentDictionary{JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockKey,JetBrains.Application.BuildScript.PackageVersionLocks.PackageVersionLockMetadata},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.Validation.CanAutofixFilesOnDisk},JetBrains.Util.ILogger)">
            <summary>
            In SDK projects, we want regular package references to have their versions listed in the common Locks file rather than locally.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SubplatformReferencesValidator.MapProjectToSub">
            <summary>
            Index all known project files by their rel path from home dir.
            NOTE that not all projects are available in sources, some might be binary.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.Autofix.SubplatformReferencesValidator.ValidateCompileTimeUseOfSubplatform(JetBrains.Application.BuildScript.Solution.SubplatformName,JetBrains.Application.BuildScript.Solution.SubplatformName,System.String)">
            <summary>
            Checks if certain <paramref name="who" /> can use stuff from <paramref name="what" />.
            Schedule an autofix if not.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SubplatformReferencesValidator.RefKind.IsCompileTimeValid">
            <summary>
            There is a path between these two subs which does not have the <see cref="P:JetBrains.Application.BuildScript.Solution.SubplatformReference.IsRuntimeOnly" /> flag.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.Autofix.SubplatformReferencesValidator.RefKind.IsRuntimeValid">
            <summary>
            There is a path between these two subs which does not have the <see cref="P:JetBrains.Application.BuildScript.Solution.SubplatformReference.IsCompileTimeOnly" /> flag.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini">
            <summary>
            Supports B-subs in profiles when referenced from SDK Mini projects in [S]-subs, for PWC and ABuilt-driven runs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini.LoadFromListFile(JetBrains.Util.Storage.ImmutableFileItem,JetBrains.Util.ILogger)">
            <summary>
            Deserializes the written list file. Intended for SDK Task Body.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini.RelFolderWithSubstitutedAssembliesForPwc(JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact)">
            <summary>
            When emitted on PWC (into Obj), here's path from root.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsForSdkMini.RelPathToSubstitutionsListForPwc(JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact)">
            <summary>
            When emitted on PWC (into Obj), here's path from root.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsLocalTasks">
            <summary>
            Support for PWC, two-stage builds, etc.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsLocalTasks.LoadPackages(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.ProfileNameArtifact,JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.ShadowPackageDirArtifact,JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
            Guys like two-stage-build load for use precompiled packages saved by PWC (when in incremental mode).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.BinarySubplatformsLocalTasks.SavePackages(System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.InputPackage},JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.ShadowPackageDirArtifact,JetBrains.Application.BuildScript.ProfileNameArtifact,JetBrains.Util.ILogger)">
            <summary>
            PWC pre-compiles them and saves for two-stage build to use.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms">
            <summary>
            Implements serialization to support [B]-profiles for local operations.
            Used on the outermost stage of a build which has a sources stage (PWC, source validation, two-stage build with binary stage, etc).
            Produced on PWC, stored under bindir, then loaded by subsequent builds to supply input packages for the source stage.
            See docs in <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport._InputsInBinarySubplatforms_ReadMe_" />.
            </summary>
            <seealso cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport._InputsInBinarySubplatforms_ReadMe_" />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms.AssertMatchesCurrentProfile(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
            PWC is supposed to write packages for B-subs. We can only run correctly if there're enough packages for B subs there.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms.WithAllAssembliesFilterAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
            Legacy code: filter down by AllAssemblies.
            Now as this isn't used on TC, we're supposed to be getting only useful assemblies from the shadow dir, as PWC does the filtering and writes them down useful. So this filtering should not be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms.JetBrains#Util#Storage#StructuredStorage#IStructuredStorageSerializable#GetObjectData(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.ShadowPackageDirArtifact">
            <summary>
            Allows the build to read some of the precalulated nupkgs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo">
            <summary>
            Collects info about project reference substitution, so that PWC/build could then emit necessary info and write isolated assemblies.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo.OriginatingProjectKinds">
            <inheritdoc cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo.EOriginatingProjectKinds" />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo.CollectSubstitutedProjectReferenceInfos(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackagesEx,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            Analyzes projects in [S]-subs and tells which projects in [B]-subs they reference, so that info could be emitted to substitute project references in their projects with assembly references to assemblies from [B]-subs' packages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstitutedProjectReferenceInfo.EOriginatingProjectKinds">
            <summary>
            What kinds of projects have project references that substitute like described in this info.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper">
            <summary>
            Helps with compiling pre-SDK projects which reference a subplatform missing in sources (but present in binaries).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper.DeployReferenceReplacementsIsolatedAsync(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Called during compilation (before ABuild calls its driven MSBuild), in non-incremental/isolated mode, knows the compilation lifetime.
            Deploys the binary reference files to be used as replacements for project references into subs which we have as binary subs instead of source subs into an isolated workdir.
            </summary>
            <param name="lifetime">Lifetime of the compilation, for which duration the files exist on disk.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper.EnsureReferenceReplacementsWrittenIncrementalAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ProductBinariesDirArtifact)">
            <summary>
            Called during compilation (before ABuild calls its driven MSBuild), in incremental mode, knows the compilation lifetime.
            Ensures that binary reference files (to be used as replacements for project references into subs which we have as binary subs instead of source subs) are present in the bin dir.
            Locally, they get extracted on PWC, but compilation must be self-contained.
            </summary>
            <param name="lifetime">Lifetime of the compilation, for which duration the files exist on disk.</param>
            <param name="bindir"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesNonSdk">
            <summary>
            When doing staging compile on the server, we already have part of the codebase in the binary form, and have no sources on disk. To compile projects which reference it, we need to substitute such project references with references to already-compiled binaries.
            This also applies to [B]-profiles locally, [S]-projects referencing projects which got into the [B]-part need to get DLLs rather than the source projects.
            This code runs classic projects. SDK Mini obviously does the replacement on-board.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.UsedSubplatformsWithBinRefs">
            <summary>
            Lists subplatforms with binary refs which have actually been used for substitutions. Allows to limit down the number of deployed subplatforms.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport._InputsInBinarySubplatforms_ReadMe_">
            <summary>
            These tasks support binary subplatforms in profile on source stage. That is, when compiling some of the subplatforms from sources, and some of their referenced subplatforms are in packages already.
            When this happens:
            • On TeamCity, when building a non-first part of the solution.
            • Locally, when we have [B] subs in the profile.
            Problems to solve:
            • Regular csproj files reference other csproj files from other subplatforms, and those MUST be replaced with binary references to corresponding DLLs from nugets.
              The project files themselves are either missing on disk (TC with proper sparse checkout) or present but must be ignored (local story).
            Integartion points:
            * Doing PWC.
            * Opening projects in IDE (must ignore project references, must have binary references available).
            * Building with just MSBuild alone (should not recurse into substituted project references, should see their binary counterparts from nugets, should always run the “incremental” scenario). TODO
            * Building from within the build system task (should not recurse into substituted project references, should see their binary counterparts from nugets, incremental and isolated mode). TODO
            * Running TeamCity build step. TODO
            Implementation:
            * PWC (if got [B]s in profile):
              * First bakes an isolated profile with [S] removed, and [B] turned into [S], and builds it into nugets the usual way (<see cref="T:JetBrains.Application.BuildScript.DeployablePackage" /> target).
              * Writes the result into the shadow dir (<see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms" />), those are packed nugets for reuse not expanded DLLs.
              * Then runs the regular LPWC (<see cref="T:JetBrains.Application.BuildScript.PreCompile.LocalPrepareWorkingCopy" /> target) with nugets from above as <seealso cref="T:JetBrains.Application.BuildScript.InputPackage" />.
                * Its <see cref="M:JetBrains.Application.BuildScript.Install.ExtractPackagesToBinDirTasks.PreExtractPackagesOnPrepareWorkingCopy(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact[],JetBrains.Application.BuildScript.InputPackage[],System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackageRelativePath},JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Install.Hacks.ExtractPackagesToBinDirBehaviorArtifact},JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)" /> should land a copy of the extracted DLLs from B-subs into bindir, for use at runtime, by legacy projects' binary refs, and by incremental-mode MSBuild runs. NOT used by SDK Mini projects or ABuild-driven build runs in non-incremental mode.
            * Local two-stage builds (if got [B]s in profile):
              * In incremental mode, PWC is required to have been run, and <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.PackagesForPwcWithBinarySubplatforms"/> must be readable with up-to-date set of nuges for [B] subs (some validation in place).
              * In non-incremental mode, first runs the build to make nugets for [B] subs, just like in PWC first stage, then uses them immediately.
            * TeamCity:
              * Prepare Isolated Request fetches nugets from dependencies and puts them as <see cref="T:JetBrains.Application.BuildScript.InputPackage" /> into the request (both for inputs and build script).
              * Run Isolated Request: just runs. No special treatment on this part.
            * Pre-SDK projects:
              * All driven thru Managed Targets included side-file, emitted on PWC time (or when running ABuild-driven compile).
              * Removing substituted project references:
                * Removed build-time in <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Targets.RemoveSubstitutedProjectReferences" /> target (emitted by <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesNonSdk" />).
                * IDE / Visual Studio: they're read on MSBuild Eval, so it's impossible to modify what comes from the project file on disk. VS just ignores them when missing or invalid.
                * IDE / Rider: runs a design-time build, so the build-time target is in effect.
              * Adding substitution binary references:
                * Added with eval-time task items group in Managed Targets, effective in all scenarios (emitted by <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesNonSdk" />).
                * Bare MSBuild builds or incremental mode when driven from ABuild: points to a copy in the bindir.
                * Non-incremental builds and when driven from ABuild: points to a unique subfolder in a folder <seealso cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.Properties.BinaryProjectOutputs" /> supplied by ABuild (unique per-build, in individual subfolders, only exists for the duration of the build), with helper <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.SubstituteProjectReferencesWithAssemblyReferencesDeployForCompileHelper" />, also uses info from <see cref="T:JetBrains.Application.BuildScript.PreCompile.BinarySubplatformsSupport.UsedSubplatformsWithBinRefs" />.
            * SDK Mini projects:
              * Driven thru <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" />.
                * PWC writes it to the solution-wide file. In effect when opening in IDE or when building with bare MSBuild. TODO and document the file/format
                * ABuild makes an isolated copy of this when driving MSBuild for compile stage. TODO
              * No magic on eval-time. IDEs only open SDK projects with design-time build. So all magic is within the Task Body.
              * Substituted project references:
                * Task Body never does recursive calls in into those projects. TODO
                * The task items set is filtered for IDEs, does not matter for builds, MIGHT be omitted for speed. TODO
              * Substitution binary references:
                * IDE: extracted to a shadow location (like, Obj). TODO
                * Builds: used directly. TODO
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.BuildSourcesProj">
            <summary>
              Allows to edit tasks which are written in source code in a convenient way.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.EntryLocalAutofixFiles">
            <summary>
            The entry point for running autofix of local projects.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml">
            <summary>
            Like other generated MSBuild items, allows to add custom MSBuild includes to all project files in the solution, but does not limit the text to specific MSbuild items.
            See base class doc for details.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml.Id">
            <summary>
            Diagnostic identity of the custom section.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml.XmlDocumentFragment">
            <summary>
            A valid XML document fragment to be inserted into the project file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml.CompareToTypeSpecific(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml.Helpers.MountCustomTargetBeforeCompilation(System.String)">
            <summary>
            Creates an <see cref="T:System.Xml.Linq.XElement" /> with an MSBuild Property Group which mounts the target named <paramref name="sTargetUniqueName" /> appropriately into the build process, for use as the <see cref="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml.Helpers.MountCustomTargetBeforeCompilationViaBeforeTargets(System.Xml.Linq.XElement,JetBrains.Util.ILogger)">
            <summary>
            Like <see cref="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml.Helpers.MountCustomTargetBeforeCompilation(System.String)" />, but adds <c>BeforeTargets</c> stuff to the target rather than manipulating property lists.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase">
            <summary>
            Allows to include pieces of an MSBuild script into each of the project files in the solution in a centralized manner.
            This means setting up properties with common project settings like outdir and optimization, stuffing assemblies, including tools from nuggets, etc.
            Each project in the solution (as part of the <c>LocalAutofixProjectFiles</c> procedure) gets the single import directive for the generated MSBuild file which receives all of these items. It gets written to disk either as part of the <see cref="T:JetBrains.Application.BuildScript.PreCompile.LocalPrepareWorkingCopy" /> or as a dependency of the compilation stage.
            Yield one such item per each project to be stuffed, filter by subplatform if needed.
            // TODO: when each subplatform is precompile-processed separately, these items would be effectively per-sp, so <see cref="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Subplatform" /> won't be needed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Condition">
            <summary>
            Optional condition.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Disposition">
            <summary>
            How to place this injection in relation with the standard language imports for this project (e.g. <c>Microsoft.CSharp.Targets</c>).
            The “<c>Before</c>” stuff can predefine scalar property values to be used for paths in the standard imports.
            The “<c>After</c>” stuff can inject into list property values at first/last position because the standard targets have already had their say.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Priority">
            <summary>
            Specifies ordering for inserting this element within the corresponding section (<see cref="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Disposition" />). Zero is the dontcare level.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.ProjectInSubplatform">
            <summary>
            Path of the project to be stuffed, relative to the <see cref="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Subplatform" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Reason">
            <summary>
            An explanation of the entity. Makes up for a comment in the emitted targets file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.Subplatform">
            <summary>
            The subplatform to which the project to be stuffed belongs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase.CompareToTypeSpecific(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase)">
            <summary>
            Stuff specific to params of the derived type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildImport">
            <summary>
            A pre-compile-time generated MSBuild Import directive.
            See base class doc for details.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildImport.ImportTarget">
            <summary>
            The import target, relative to the project directory (as it will be written into the resulting generated file).
            </summary>
            <remarks>Here's no support for providing the import contents as a <see cref="T:JetBrains.Util.Storage.ImmutableFileItem" /> because if you've got the contents in your hands rather than somewhere on disk in a tool Nuget package folder, then you'd better insert it as custom content right into the generated MSBuild imported file, for simplicity.</remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildImport.CompareToTypeSpecific(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject">
            <summary>
            The generated MSBuild project files to be injected into each of the solution's project files, built of all of the <see cref="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase" /> items.
            Originally, injected directly into the .*proj, as the profile name makes a part of the injected file name, the reference had to specify the profile name, for which the SolutionFileName MSBuild property were used. This had a problem of requiring the SLN file to make a build.
            Now a proxy MSBuild file is included by a fixed name, which in turn tries to include the file based on the current solution name, if known; or, as a fallback, the file for the most recently prepare-working-copy'ed profile, hence the <see cref="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.ProxyImportedProjectFile" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.ItemsToRealize">
            <summary>
            Any items taking part in the generation which must also be realized relatively to the project folder (unless of empty content).
            This does not include the <see cref="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.MainImportedProjectFile" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.MainImportedProjectFile">
            <summary>
            The file content of the generated imported project.
            Would be imported from the proxy file.
            To be realized on disk in the project folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.ProjectInSubplatform">
            <summary>
            Path of the project which is being stuffed, relative to the <see cref="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.Subplatform" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.ProxyImportedProjectFile">
            <summary>
            The file content of the generated proxy project.
            To be realized on disk in the project folder.
            Would be imported from the *proj file itself, and it will in turn import the main imported project file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject.Subplatform">
            <summary>
            The subplatform to which the project to be stuffed belongs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty">
            <summary>
            A pre-compile-time generated MSBuild Property.
            See base class doc for details.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty.PropertyName">
            <summary>
            Name of the MSBuild property.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty.PropertyValue">
            <summary>
            Value for the MSBuild property.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty.CompareToTypeSpecific(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildRoslynFeature">
            <summary>
            Allows to contribute to the <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Properties.Features" /> property which then gets passed to the Roslyn compiler as a semicolon-separated list of these custom feature parameters.
            This is global so far, not per-project.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildRoslynFeature.#ctor(System.String)">
            <summary>
            Deserialization.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildRoslynFeature.ToString">
            Serialization to string.
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildTaskItem">
            <summary>
            A pre-compile-time generated MSBuild Task Item.
            See base class doc for details.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildTaskItem.File">
            <summary>
            This file's <see cref="T:JetBrains.Util.RelativePath" /> defines the task item's <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Attributes.Include" /> text.
            If the file has non-empty content, it will be realized on disk per-project (and thus effectively included as a real disk file). Otherwise it's just a task item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildTaskItem.ItemGroupName">
            <summary>
            Item group name for the task item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildTaskItem.CompareToTypeSpecific(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildElementBase)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile">
            <summary>
            A set of files from <see cref="T:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject" />, including the main generated project file, realized on disk for preparing the solution or compilation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile.File">
            <summary>
            The file content which were written.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile.LocalPath">
            <summary>
            The path to which the file were written.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile.ProjectInSubplatform">
            <summary>
            Path of the project which is being stuffed, relative to the <see cref="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile.Subplatform" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile.Subplatform">
            <summary>
            The subplatform to which the project to be stuffed belongs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile.LocallyWriteItemsForAllProjects(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject[],JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)">
            <summary>
            Realizes items on disk.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile.MountLocallyWrittenGeneratedCompileItems(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.LocallyWrittenGeneratedMsbuildFile[])">
            <summary>
            Locally write before compile.
            // TODO: make compile write the stuff itself, for better isolation
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks">
            <summary>
            We do not store the main solution file in the source control, because it depends on the subset of projects you've chosen for work.
            This emits the solution and related stuff (solution settings, toolset for opening the solution, etc).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.SettingsStorageFileExtensionWithDotCopy">
            <summary>
            A clone, cannot use the original one because it's not in the build script area but written into the Shell.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.SolutionDotsettingsSourceFileName">
            <summary>
            Name of the file as it gets shipped from SCC.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.ChooseToolsetForMainSolutionAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact,JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper,JetBrains.Util.ILogger)">
            <summary>
            Chooses toolset based on solution caps, then downloads it together with the runtime, and yields valid local file paths.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.EmitSolutionSettingsForToolsetAndRuntime(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution,JetBrains.Application.BuildScript.Helpers.DotNetCoreSdkHelper,JetBrains.Util.ILogger,JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.Threading.Tasks.ITaskHost)">
            <summary>
            Makes the IDE which opens the SLN choose our toolset for building with Solution Builder.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.GetDirectoryForSolutionToolset(JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact)">
            <summary>
            Gets the directory full path where the solution toolset would be installed for this solution. That's a per-profile path in under the Obj dir.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.InjectDevKitConfigSettingsIntoSolutionSettings(JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.BuildScript.ProfileNameArtifact,JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionSharedSettingsFilePath,JetBrains.Util.ILogger)">
            <summary>
            In DevKit/Config, we have a common solution settings file which should be applied to every Main Solution we generate here.
            To do that, we inject that exact original file as an injected settings layer into the solution settings file we write alongside the emitted solution file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.WriteToolsetMsbuildCmd(JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution,JetBrains.Application.BuildScript.ProfileNameArtifact,JetBrains.Util.ILogger)">
            <summary>
            Plant a batch file into the solution root to run the chosen toolset msbuild for the main solution.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionFilePath">
            <summary>
            Full path to the local main solution file on disk, based on the current homedir and profile name and all.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionFilePath.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionSharedSettingsFilePath">
            <summary>
            Full path to the local main solution shared settings file on disk, based on the current homedir and profile name and all.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionSharedSettingsFilePath.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalSolutionSettingsGenerated">
            <summary>
            A contribution to the <see cref="T:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionSharedSettingsFilePath" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalSolutionSettingsGenerated.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalSolutionSettingsGenerated.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution">
            <summary>
            Ensures the toolset for building the main solution in the current profile is fetched and installed. Fetches runtimes such as Mono if needed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution.PathToMsbuild">
            <summary>
            <c>msbuild.exe</c> entry point in that toolset.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution.PathToRuntime">
            <summary>
            Path to the executable entry point of the runtime (e.g. Mono), in case <see cref="F:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution.PathToMsbuild" /> cannot be run directly but rather via that runtime.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution.ToolsetDisplayName">
            <summary>
            Identity for the toolset we've chosen for this solution.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.LocalPreExtractFastFilesForPackaging">
            <summary>
            As part of the <see cref="T:JetBrains.Application.BuildScript.PreCompile.LocalPrepareWorkingCopy" />, extracts to Bin Dir those package-wannabe items which are fast to produce, hence <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformFileForPackagingFast" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.LocalPrepareWorkingCopy">
            <summary>
            A service artifact for wiring related tasks to it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DefineConstantArtifact">
            <summary>
            Defines this conditional compilation symbol for all of the managed projects in the solution.
            C#/VBNet projects don't have values on #defines, so these only specify the name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DefineConstantArtifact.EmitDefinesIntoMsbuild(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DefineConstantArtifact[],JetBrains.Util.ILogger)">
            <summary>
            Emits defines (value-less) for generic managed projects, such as C#, VB.NET, F#, etc.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.AssemblyVersionCs">
            <summary>
            Generates the standard Assembly Version attribute set for including into each project file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.AssemblyVersionCs.CoerceAssemblyVersionToWord(System.Version,JetBrains.Util.ILogger)">
            <summary>
            File version and assembly version component must not exceed the WORD size.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.AssemblyVersionCs.PerSubplatformMetadata(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)">
            <summary>
            Emits metadata which might differ by project (depends on its sub), so it's not directly usable by the SDK build, but it should not depend on the current build envirnoment, so it can be reproduced from the sub by the SDK build.
            WARNING! SDK builds do this independently in the body task!
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.AssemblyVersionCs.SameForAllMetadata(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.BuildVersionSuffix,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,JetBrains.Util.ILogger)">
            <summary>
            Emits metadata which is the same for all projects, but isn't constant (based on the current build artifacts), hence it can and must be supplied for use in the SDK projects.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor">
            <summary>
             Every "Trigger XXX" build on TeamCity defines a build chain used to 
            build everything in .NET with specific parameters.
            This enum defines type or 'flavour' of a build chain.
            <p>For more see <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum"/></p>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum">
            <summary>
            Every "Trigger XXX" build on TeamCity defines a build chain used to 
            build everything in .NET with specific parameters.
            This enum defines type or 'flavour' of a build chain.
            <p>
            For building a release it's required to run two chains: <see cref="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.RELEASE_CHECKED"/> and <see cref="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.RELEASE_UNCHECKED"/>
            since we need two versions of compiled code (in this case, with assertions and without them)
            </p>
            <p>
            For building EAPs it provides two kinds of them: EAP_DEVELOPMENT and EAP_PRODUCTION.
            EAP_DEVELOPMENT is the usual EAP builds with all assertions etc.
            EAP_PRODUCTION - EAP installers without assertions to gauge performance before release.
            </p>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.SNAPSHOT">
            <summary>
            Ordinal builds on TeamCity in Trigger All configuration. Minimum signed files, no signed installers. Set for builds in any branch for usual VCS trigger or merge robot.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.INTERNAL_DEV">
            <summary>
            Internal builds by request with signed files, assertions, exception reporting, timebomb etc
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.NIGHTLY_DEV">
            <summary>
            Every night builds with signed files, assertions, exception reporting, timebomb etc
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.EAP_DEV">
            <summary>
            Usual EAP builds with signed files, assertions, exception reporting, timebomb etc
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.EAP_PRODUCTION_CHECKED">
            <summary>
            SDK, checked installers etc, with assertions and exception reporting
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.EAP_PRODUCTION_UNCHECKED">
            <summary>
            EAP 'release' installers, without assertions, but with exception reporting and a timebomb.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.RELEASE_CHECKED">
            <summary>
            SDK, checked installers etc, with assertions and exception reporting
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEnum.RELEASE_UNCHECKED">
            <summary>
            Production installers, without assertions and exception reporting
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEx.IsOkToOmitCompressionForSpeed(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor)">
            <summary>
            Some artifacts might take much CPU to compress, make uncompressed ZIPs when doing for Snapshot for speed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEx.WhenToCompressOrOmit(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor)">
            <inheritdoc cref="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavorEx.IsOkToOmitCompressionForSpeed(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor)"/>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CodeDomProviderHelper.CodeDomCppProviderLanguageStrings">
            <summary>Borrowed from <see cref="T:System.CodeDom.Compiler.CodeDomCompilationConfiguration" />.</summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CompilerWarningsDevKit">
            <summary>
            For <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit" />, builds the list of compiler warnings we suppress.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CompilerWarningsDevKit.Show.Never">
            <summary>
            The warning is suppressed everywhere.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CompilerWarningsDevKit.Show.DesignTimeWarning">
            <summary>
            The warning is suppressed when building in MSBuild.
            The warning should nevertheless be shown as a warning at design-time (in IDE).
            Example: Obsolete. Useless on build, must be seen in the editor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CompilerWarningsDevKit.Show.AsError">
            <summary>
            This warning must always be an error.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneralJetSdkProjectParameters.ModeOptimize(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize)">
            <summary>
            Whether to tell the compiler to optimize.
            NOTE that define constants are emitted and passed via <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DefineConstantArtifact" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneralJetSdkProjectParameters.ProductBinariesDirRelativeHint(JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact},JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Application.BuildScript.ProductHomeDirArtifact)">
            <summary>
            Critical for the case we're building with MSBuild passing a csproj, we do not know the profile, we read parameters from a MRU file, we learn the profile name from there.
            Then it affects bin/int dirs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneralJetSdkProjectParameters.ProfileName(JetBrains.Application.BuildScript.ProfileNameArtifact)">
            <summary>
            Critical for the case we're building with MSBuild passing a csproj, we do not know the profile, we read parameters from a MRU file, we learn the profile name from there.
            Then it affects bin/int dirs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.AssemblyAttribute">
            <summary>
            This is added to the assembly attributes of the project.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.ProjectInSubplatform">
            <summary>
            Path of the project to be stuffed, relative to the <see cref="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.Subplatform" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.Subplatform">
            <summary>
            The subplatform to which the project to be stuffed belongs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.CompareTo(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.op_GreaterThan(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.op_GreaterThanOrEqual(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.op_LessThan(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact.op_LessThanOrEqual(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedPerProjectCodeFiles.TaskItemNameSpecial">
            <summary>
            The tmp task item group name into which the file gets emitted before being mounted into Compile with deduplication.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedPerProjectCodeFiles.EmitAssemblyCustomAttributesAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.GeneratedAssemblyAttributeArtifact[],JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Util.ILogger,JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact,JetBrains.Application.BuildScript.ProductHomeDirArtifact)">
            <summary>
            Emits a file with custom assembly attributes for inclusion into each project.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit">
            <summary>
            Does most of emitting the <c>ManagedProject.(profile).Generated.sln.Targets</c> for each of our projects, with common project props and setups.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.ConditionOnOutputInSeparateFolders">
            <summary>
            IsOutputPathInSeparateFolders: when building with a build tool, each project gets its own outdir, to avoid mixing up any of the output files which we're about to collect for deployment. Locally, everything is built into the same folder
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.ConditionOnOutputInSingleFolder">
            <inheritdoc cref="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.ConditionOnOutputInSeparateFolders" />
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.RoslynUserFileName">
            <seealso cref="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.RoslynKillerV2HideSourceCodeFilesFromVisualStudio(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)" />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.BinAndObj(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.ProductBinariesDirArtifact,JetBrains.Application.BuildScript.IntermediateOutputFolderPerProfileArtifact,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProjectShortNamesArtifact)">
            <summary>
            Path to build output and intermediate dirs. Included “before”.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.CompilerWarnings(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.CompilerWarningsDevKit,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsTreatWarningsAsErrors},JetBrains.Application.BuildScript.Compile.Validation.ValidateCleanCompilation[],JetBrains.Util.ILogger,System.Collections.Generic.IList{JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty}@,System.Collections.Generic.IList{JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildCustomXml}@)">
            <summary>
            Sets up compiler warnings on/off at design/compile time, plus some VBNet warnings as errors.
            Some settings apply both in VS and in build, and some in build only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.DefaultDefineConstants">
            <summary>
            #defines which are not regulated with any Mode-artifacts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.DefineSolutionDirectories(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            <c>ProductHomeDir</c>
            <c>SubplatformHomeDir</c>
            Also, <c>SubplatformName</c> (TODO: not needed?)
            </summary>
            <param name="allassSrc"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.DeterministicBuild(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Parameters required to make CSC produce binary equal output on the same inputs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.DontCopyReferences(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Prevents the common targets from copying any referenced DLLs to the project's output folder on build. Included “before”.
            NOTE: copying refs to output folder is not needed because we're packing them from sources anyway, and since we're laying out project outputs by their subplatform/project folders, copying everything into each folder takes much time/diskspace, and should be avoided.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.EnableXmlDocGeneration(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProjectShortNamesArtifact)">
            <summary>
            Enables XmlDoc generation for all our projects.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.FixLeftoversFromSdkProjects(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            If a working copy were once operated as with SDK projects, the leftovers from that era might be confusing modern toolsets and failing builds with messages like "Your project file doesn't list 'win' as a "RuntimeIdentifier". You should add 'win' to the "RuntimeIdentifiers" property in your project file and then re-run NuGet restore.". These properties suppress the parts of the toolset which might be getting confused.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.GeneralSettings(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize,System.Collections.Generic.List{JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ForceModeOptimize})">
            <summary>
            General settings for C#/VBNet projects. Included “before”.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.GetProjectIntermediateOutputPathWithMacros(JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProjectShortNamesArtifact,System.Boolean)">
            <summary>
            </summary>
            <param name="project"></param>
            <param name="shortnames"></param>
            <param name="isSharedBetweenAllConfigs">If <c>True</c>, the path cannot contain things specific to the Configuration or Platform.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.HackAwayExtensionsImplicitlyExpandNETStandardFacades(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Suppress <c>ImplicitlyExpandNETStandardFacades</c> <c>Microsoft.NET.Build.Extensions.NETFramework.targets</c> for now, because we have nuget packages for these references and they do not behave good with overwriting our dlls in the output dir. They'd check if the project looks like it should reference NetStandard, and add pseudo-reference-assemblies for its DLLs to compilation via a dirty hack.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.HackRoslynForMono(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Roslyn uses named pipes for interprocess calls when reusing processes between compiler runs. This currently fails on Mono, so turn it off.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.IncludeSourcesByGeneralWildcard(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)">
            <summary>
            Instead of listing source files one by one, includes the list of them with a single wildcard.
            The wildcard is standard and does not sit in the .csproj but in the included managed targets file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.LanguageSettings(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Language settings for C#/VBNet projects.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.MsbuildWarnings(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Suppresses some of the MSBuild warnings which we inevitably see in our solution due to having a mix of frameworks and architectures.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.RoslynFeatures(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildRoslynFeature[])">
            <summary>
            Assembles together the Roslyn feature members.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.RoslynKillerV2HideSourceCodeFilesFromVisualStudio(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)">
            <summary>
            Hides all of the <c>Compile</c> items from Visual Studio so that no mem were wasted on their handling.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.SkipGetTargetFrameworkProperties(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize)">
            <summary>
            Add project reference metadata to avoid call NuGet targets. (https://github.com/Microsoft/msbuild/blob/master/documentation/ProjectReference-Protocol.md)
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.StrongNameSign(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)">
            <summary>
            Sets up strong name signing of assemblies. Might have varying policy for Debug/Release builds. Included “before”.
            </summary>
            <remarks>
            Seems like a strong name is not a problem even in Debug builds, so let's have it everywhere for uniformity.
            Until R#9, we'd strong-name-sign only Release builds, but with SharedShell we have switched to SNing all.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.SubplatformsAware(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.ProfileNameArtifact,JetBrains.Util.ILogger)">
            <summary>
            A few info about the subplatforms-layout-specific environment.
            The idea is to only add info here on-demand, to avoid mis-use.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.SuppressInProcessCompiler(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Disables VS in-process compiler, does not affect the build process itself. Included “before”.
            NOTE: we do not need VS build helping because we're running out-of-process MSBuild with heuristics, on the other hand, VS runs its background builds when allowed and slows down the things very much.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.TargetFrameworkAndToolsetPackages(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Compile.ForceTargetFrameworkVersion},JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SolutionToolsetHelpers,JetBrains.Util.ILogger,JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalToolsetForMainSolution)">
            <summary>
            For each project, decides and sets its Target Framework, and adds toolset packages with compilers and headers, as appropriate.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.FundamentalProperties.Priority">
            <summary>
            We don't want to bind to full physical paths because this requires re-running PrepareWorkingCopy on each change, which we don't want to do locally.
            So we define fundamental properties, <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ManagedProjectsDevKit.FundamentalProperties" />, and then reference them in other paths.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAssert">
            <summary>
            Whether debug asserts should be active and throw runtime exceptions.
            Default is True. False for production builds.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeAssert.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize">
            <summary>
            Whether stuff should be compiled optimized or not.
            This explicitly applies to the standard subplatform projects. Side compilations are welcome, but not required to favor it (e.g. might always be building for release, or always debug+release).
            Default is False. True for production builds.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeOptimize.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions">
            <summary>
            Whether exceptions should be shown to the user.
            Default is ON.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions.ApplyAssemblyCustomAttribute(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions,JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything)">
            <summary>
            Mark each assembly with an assembly attribute, so that we could later get the per-assembly mode at runtime.
            TODO: eventually, this should work per-package probably (with gettin the package of the host and its metadata then), but right now it's easier this way.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeReportExceptions.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsModeStatistics">
            <summary>
            Whether statistics should be collected by the Statistics class.
            Default is OFF.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsTreatWarningsAsErrors">
            <summary>
            Whether set TreatWarningsAsErrors property.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.Modes.IsTreatWarningsAsErrors.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeploy">
            see <see cref="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeployEnum"/>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeployEnum">
            <summary>
            Declare which products should go into deploy.json for subsequent deploy process.
            <p>We need this since R# Ultimate and Rider releases are not sycnhronized.</p>
            <p>Default for ordinary builds is <see cref="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeployEnum.ALL"/>.</p>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeployEnum.RIDER">
            <summary>
            Everything about Rider
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProductsToDeployEnum.RESHARPER_ULTIMATE">
            <summary>
            All R# Ultimate Products (R#, dot*, R# SDK etc)
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.ProjectShortNamesArtifact">
            <summary>
            Keeps shortened project names unique among the source projects of this profile.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SdkMiniOptionalFeaturesOnPwc">
            <summary>
            These are not required for functioning, but work around certain IDE features.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SdkMiniOptionalFeaturesOnPwc.PreCreateDesignTimeBuildRequestFile(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Util.ILogger)">
            <summary>
            The Design-Time-Build-Request file tells the IDE when to re-run a design-time-build.
            Unfortunately, if this file does not exist initially when opening a solution, it won't be watched for changes later. Pre-create on PWC even if not needed yet.
            TODO: up Rider Model to watch for creation of these files even if missing initially.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SolutionToolsetHelpers">
            <summary>
            Helps with installing the toolset for working with the solution. <see cref="T:JetBrains.Build.Helpers.Msbuild.ToolsetHelpers" /> is the basic implementation, and this class adds usages of types specific to our solution.
            Now we prefer not to ship the whole toolset alongside the MSBuild, but instead plug in the relevant parts into each of the projects.
            So this has two parts, some recommended MSBuild, and a set of packages to add on per-project basis.
            The process is implemented by static methods in the <see cref="T:JetBrains.Build.Helpers.Msbuild.ToolsetHelpers.Tasks" /> class, this helper allows to avoid passing components manually and tracks that no two clients write into the same folder.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SolutionToolsetHelpers.FillPropertiesAndInstallPackagesAsync(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Build.Helpers.Msbuild.ToolsetHelpers.Tasks.Request},System.String,System.String)">
            <summary>
            The main entry to the process. Expands properties from some of the <see cref="T:JetBrains.Build.Helpers.Msbuild.ToolsetHelpers.Sets" />, downloads and expands Nuget packages required for them.
            </summary>
            <param name="lifetime"></param>
            <param name="requests">Which props to expand — and fetch nugets for them.</param>
            <param name="folderid">ID of the folder with toolsets. MUST be unique among calls to this method.</param>
            <param name="progresstitle">Title for progress messages if dloading toolsets takes a long time.</param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.SolutionToolsetHelpers.ToManagedProjectStuffing(JetBrains.Build.Helpers.Msbuild.ToolsetHelpers.Tasks.Request,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper,System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildProperty}@,System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildImport}@,JetBrains.Util.ILogger)">
            <summary>
            Makes artifacts for Managed Project Stuffing out of the expanded properties. The request must have been already run.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.EmitsPerProjectGeneratedTargets">
            <summary>
            For each project taking part in AllAssemblies, emits the generated Whatever.Project.Name.csproj.Generated.Targets file.
            This generated file should be included into the project as the one and only import at the end.
            This generated file includes the per-language common targets import, plus a number of standard project stuffing imports and task items, as calculated in the build engine.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.EmitsPerProjectGeneratedTargets.GeneratedProxyImportedProjectName">
            <summary>
            The proxy imported project file name. Must not be possible to match with a profile-based main project file, for any profile name, including empty. Now, as it contains the "sln" word, that's a simple task.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.EmitsPerProjectGeneratedTargets.EmitProxyImportedProjectFile(JetBrains.Application.BuildScript.ProfileNameArtifact)">
            <summary>
            Emits the proxt import MSBuild project file.
            This file has a fixed name and is included from the main project file by a fixed name.
            The file doesn't have any meaningful assignments inside, it only chooses which main msbuild imported project file to include, based on the current solution file name, if available, which tells the profile name. If not available, then the fallback is emitted to import by the most-recently-PWCed profile.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ForceModeOptimize">
            <summary>
            Forces projects in a subplatform to always compile with optimizations.
            Quite useful for various CPU-bound code generators.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ForceModeOptimize.ToSdkProjectParameterArtifacts(System.Collections.Generic.IReadOnlyCollection{JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.ForceModeOptimize},JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Util.ILogger)">
            <summary>
            For SDK Mini projects, list rel-to-homedir projects which should be forced into Mode Optimize.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.HackCleanupLegacyGeneratedFiles">
            <summary>
            Transitional. If legacy projects were generating files into under their source dirs, those files would interfere with SDK projects, clean them up.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.IChooseCommonTargetsForProjectKind">
            <summary>
            Knows what <c>Microsoft.CSharp.Targets</c> etc is to be imported as the common targets import into project files of certain type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.IChooseCommonTargetsForProjectKind.TryGetCommonTargetsImportForProject(JetBrains.Util.RelativePath,System.String@)">
            <summary>
            Knows what <c>Microsoft.CSharp.Targets</c> etc is to be imported as the common targets import into project files of certain type.
            </summary>
            <param name="relProjFileName">The name of the project file (possibly with partial folder path, for context).</param>
            <param name="commonTargetsImport">The path for Import, or null/empty if this kind is not supported or not needed.</param>
            <returns>True if this kind is supported</returns>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact">
            <summary>
              <para>A item emitted as <see cref="F:JetBrains.Application.BuildScript.Compile.MsbuildFileJet.XItemGroups.JetSdkProjectParameter" />, see there for comments. NOTE they're global, not per-project.</para>
              <para>Origin: various emitters for project settings.</para>
              <para>Destinations:</para>
              <para>(1) PWC: emitted to product root alongside the solution file, per-profile. Imported by SDK targets automatically. See <see cref="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.WriteToProductRootOnPwc(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact[],JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionFilePath,JetBrains.Util.ILogger)" />.</para>
              <para>(2) Compile: written to an isolated location, passed to compilation by path. See <see cref="T:JetBrains.Application.BuildScript.Compile.CompileStandardSubplatformProjectsTasks" />.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.CompareTo(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.Equals(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.WriteOut(System.Collections.Generic.IReadOnlyCollection{JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact})">
            <summary>
            Writes out a file which can be directly used by the SDK Task to take parameters passed from project stuffing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact.WriteToProductRootOnPwc(JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.JetSdkProjectParameterArtifact[],JetBrains.Application.BuildScript.PreCompile.LocalMainSolutionFileTasks.LocalMainSolutionFilePath,JetBrains.Util.ILogger)">
            <summary>
            PWC-way: written to the Product Root under the name of the profile. Imported by SDK Targets automatically.
            NOTE on compile from build steps, the file gets emitted to an isolated location and passed to the build by path. This way it does not affect the current PWC even if with another props.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SdkMiniEmitSideProjects" -->
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SdkMiniEmitSideProjects.EmitSideGeneratedTargets(JetBrains.Application.BuildScript.PreCompile.GeneratedMsbuild.GeneratedMsbuildMainImportedProject)">
            <summary>
            For those projects which remain as non-SDK, fix them not finding their managed targets because of a changed solution name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.SdkMiniEmitSideProjects.RefitProjectForSdk(JetBrains.Application.BuildScript.Solution.ProjectAndAssembly,JetBrains.Application.BuildScript.Solution.SubplatformOnSources,JetBrains.Util.FileSystemPath,System.Collections.Generic.JetHashSet{System.ValueTuple{JetBrains.Application.BuildScript.Solution.SubplatformName,JetBrains.Util.RelativePath}},System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            NOTE: most of the operations are done for ANY project, but SDK projects get an SDK attached rather than the managed targets.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppEnableDeveloperMode">
            <summary>
              Whether C++ internal stuffs have to be generated and sources are included.
              This should be OFF by default for general population, with turning ON for those who wants to play with C++.
              Default is False.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppEnableDeveloperMode.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppSuppressUnityBuild">
            <summary>
              Whether CPP builds are not allowed to be run as Unity builds (where applicable and supported).
              This should be OFF by default for general population (thus allowing the builds to run as Unity), with turning ON for
              those who want to compile CPP the non-Unity way.
              Note that certain builds (e.g. CPP-CLI) might have additional considerations, like turning off Unity builds when
              optimization is turned ON.
              Default is False.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppSuppressUnityBuild.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppUseCompilationCache">
            <summary>
              Whether CPP builds should use cahced compilation results from previous builds.
              Cached results are reused only in case sources has not been changed/
              This should be ON by default for general population (since that speed up build a lot),
              with turning OFF only in case some cache fails.
              Default is False.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.PreCompile.NativeProjectsStuffing.CppUseCompilationCache.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.PackageFileRoleEx.IsInstalled(JetBrains.Application.BuildScript.Compile.PackageFileRole)">
            <summary>
            Whether it might be installed to the Bin Dir with the installer (supposedly, symbols packages are also included — check for <see cref="M:JetBrains.Application.BuildScript.PreCompile.PackageFileRoleEx.IsIncludedInMainPackage(JetBrains.Application.BuildScript.Compile.PackageFileRole)" /> if you want to filter that as well).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.SetupProductRoot">
            <summary>
            Ensures the Product Root Dir has all the product root files, like <c>Product.Root</c>, <c>Nuget.config</c>, etc.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.PreCompile.SetupProductRoot.#ctor(JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Build.Helpers.Nuget.NugetConfigFile,JetBrains.Util.ILogger)">
            <summary>
            This is the basic setup which can be performed for any set of sources/bin subs.
            This should be enough for all compilation build steps, but not for PWC. See <see cref="T:JetBrains.Application.BuildScript.PreCompile.SetupProductRoot.SetupProductRootExtendedForSln" /> for that.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ToolPackages.CachedRoslynTask.DisableRefasmerMarkerFile">
            <summary>
            Place in root dir to opt in for refasmer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact">
            <summary>
            Requests that the tool package be injected by (a) requiring local restore of the tool Nuget package and (b) adding an MSBuild Import directive for it to all possible projects.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact.Condition">
            <summary>
            Condition for an artifact import
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact.FileToImportFromPackage">
            <summary>
            Rel path within the package (real, not effective) to be imported into MSBuild project files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact.PackageId">
            <summary>
            Nuget package with the tool.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact.PackageVersion">
            <summary>
            Nuget package with the tool.
            Optional. Taken from the central <see cref="T:JetBrains.Application.BuildScript.PackageVersionLocks" /> list of omitted.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact.SubplatformNamePassFilterRegex">
            <summary>
            Optional. <c>NULL</c> to apply to all subplatforms, or a Regex which is matched against the subplatform name to determine if the tool task should be injected into the certain subplatform.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageTasks">
            <summary>
            Handles <see cref="T:JetBrains.Application.BuildScript.PreCompile.ToolPackages.InjectToolPackageArtifact" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ProductBinariesDirArtifact.#ctor(JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProfileNameArtifact},JetBrains.Util.ILogger)">
            <summary>
            If the binaries dir is not given, defers it from the product home dir as a fallback.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact">
            <summary>
            A supplementary artifact for specifying a local product binaries dir as a path relative to the product home dir (as a relative path behaves better in persistent settings).
            If the <see cref="T:JetBrains.Application.BuildScript.ProductBinariesDirArtifact" /> is given a value, this value is ignored.
            If the <see cref="T:JetBrains.Application.BuildScript.ProductBinariesDirArtifact" /> has to be calculated, it uses this value or falls back to <see cref="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.DefaultProductBinariesDirFolderName" /> if not set.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.ProductBinariesDirRelativeHintArtifact.ProductBinariesDirRelativeHint">
            <summary>
            If relative, gives the desired <see cref="T:JetBrains.Application.BuildScript.ProductBinariesDirArtifact" /> path relatively to the <see cref="T:JetBrains.Application.BuildScript.ProductHomeDirArtifact" />. Otherwise, the path to use as is.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.ProductHeadlineBuilder">
            <summary>
            Builds product headline like 'Product Name 2017.3 EAP 8 build 111.0.20171124.0-eap08. Copyright © 2009-2017 JetBrains s.r.o.'
            according to https://youtrack.jetbrains.com/issue/LegalCZ-9
            </summary>
            <remarks>
            This class is accessible in build stage only, if you need to format product headline in runtime, use <see cref="T:JetBrains.Util.ProductHeadline"/> instead.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ProductHeadlineBuilder.ProductName(System.String)">
            <summary>
            Appends product name.
            </summary>
            <param name="productName"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ProductHeadlineBuilder.Version(JetBrains.Application.BuildScript.BuildVersionSuffix)">
            <summary>
            Appends product version (wave + build number) like '2017.3 EAP 8 build 111.0.20171124.0-eap08'.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ProductHeadlineBuilder.Version(JetBrains.Util.JetSemanticVersion)">
            <summary>
            Appends product version (wave + build number) like '2017.3 EAP 8 build 111.0.20171124.0-eap08'.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ProductHeadlineBuilder.Copyright(System.Int32,System.Boolean,System.String)">
            <summary>
            Appends copyright notice like 'Copyright © 2009-2017 JetBrains s.r.o.'.
            </summary>
            <remarks>
            If <paramref name="sinceYear"/> is zero then only current year appended like 'Copyright © 2017 JetBrains s.r.o.'.
            </remarks>
            <param name="sinceYear">year of first product publication</param>
            <param name="useAnsiMark">whether use (C) or © mark</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.ProductNameAndVersionArtifact.#ctor(System.String,JetBrains.Application.BuildScript.Solution.SubplatformOnSources,JetBrains.Application.BuildScript.BuildVersionSuffix)">
            <summary>
            Takes company and version from subplatform.
            Requires <see cref="T:JetBrains.Application.BuildScript.Solution.SubplatformOnSources" /> not <see cref="T:JetBrains.Application.BuildScript.Solution.Subplatform" /> because the <see cref="T:JetBrains.Application.BuildScript.BuildVersionSuffix" /> is only validly available with the sources, otherwise it would be an autogenerated unrelated install-time item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.ProfileNameArtUtil.ourPattern">
            <summary>
            Must not start with a digit because we derive VS Root Suffix names from the profile, and those take part in VS Hives (which are version+rootsuffix) which do not roundtrip well with text representation if the suffix could not be told apart from the version part.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact">
            <summary>
            A <see cref="T:JetBrains.Application.BuildScript.PackageReferenceArtifact" /> which has already been retrieved as a package (but not necessarily written to the local folder, see <see cref="T:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact" /> for that).
            Chain: <see cref="T:JetBrains.Application.BuildScript.PackageReferenceArtifact" /> … <see cref="T:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact" /> … <see cref="T:JetBrains.Application.BuildScript.LocalRestoredPackageReferenceArtifact" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact.IsSynthetic">
            <summary>
            Gets whether this package has been emitted as a simulated retrieved package reference rather than actually retrieved from the server.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact.Package">
            <summary>
            The package.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact.PackageReferences">
            <summary>
            The original references to which the retrieved package conforms. Unless <see cref="F:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact.IsSynthetic" />, it has been retrieved by this reference.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact.DeployNonDevelopmentPackageReferences(JetBrains.Application.BuildScript.RetrievedPackageReferenceArtifact[],JetBrains.Util.ILogger)">
            <summary>
            Supply as deployable those refs which are not development-only dependencies.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.SerializedHostComponentItemArtifact">
            <summary>
            Lists build artifact values which should be serialized during the Local Install to be then available at runtime as components.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.SkipLocalCompilationArtifact">
            <summary>
            If this artifact is set to <c>True</c>, all of the compilation should be skipped in favor of reusing the already-compiled stuff in the bindir.
            This helps with the local scenario when you often want to do stuff like LocalRegister without rebuilding everything anew.
            Shan't be set to <c>True</c> on the server.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.SkipLocalCompilationArtifact.IsSkipCompileAll">
            <summary>
            If this artifact is set to <c>True</c>, all of the compilation should be skipped in favor of reusing the already-compiled stuff in the bindir.
            This helps with the local scenario when you often want to do stuff like LocalRegister without rebuilding everything anew.
            Shan't be set to <c>True</c> on the server.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.SkipLocalCompilationArtifact.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.BuildScript.SkipLocalCompilationCpp.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.SkipLocalCompilationCpp.Calculated">
            <summary>
            Calculates a ready value for CPP compliation criterion.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.SkipLocalCompilationCpp.Calculated.IsSkip">
            <summary>
            Calculates a ready value for CPP compliation criterion.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.SkipLocalCompilationCpp.Calculated.ReportMissingCompiledFile(JetBrains.Util.IPath,JetBrains.Util.ILogger,JetBrains.Util.OnError)">
            <summary>
            When your native compilation tries to collect an output file and does not see it there, call this method to report that it could be due to the Do Not Compile Native mode (if really so).
            </summary>
            <param name="file">Path to the file, for diagnostics. Rel paths might be nicer for readability.</param>
            <param name="logger">Target logger.</param>
            <param name="onerrorIfFatal">If not running in Do Not Compile Native mode, uses this <see cref="T:JetBrains.Util.OnError" /> (<see cref="M:JetBrains.Util.OnError.Error(JetBrains.Util.ILogger)" /> if omitted) to report the fatal error. If Do Not Compile Native is active, then it's always a non-breaking logger error.</param>
        </member>
        <member name="T:JetBrains.Application.BuildScript.SkipSourcesValidation">
            <summary>
            If this artifact is set to <c>True</c>, sources will not be validated before being compiled into Nuget packages.
            Locally this speeds up repeated runs of packages generation.
            Shan't be set to <c>True</c> on the server.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.SkipSourcesValidation.IsSkipSourcesValidation">
            <summary>
            If this artifact is set to <c>True</c>, sources will not be validated before being compiled into Nuget packages.
            Locally this speeds up repeated runs of packages generation.
            Shan't be set to <c>True</c> on the server.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.SkipSourcesValidation.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration">
            <summary>
            If this artifact is set to <c>True</c>, standalone hosts will not be integrated with the OS (Start Menu shortcuts and file associations).
            Shan't be set to <c>True</c> on the server.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration.IsSkipOsIntegration">
            <summary>
            If this artifact is set to <c>True</c>, standalone hosts will not be integrated with the OS (Start Menu shortcuts and file associations).
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.SkipStandaloneHostOsIntegration.JetBrains#Build#Helpers#General#IBooleanArtifact#Value">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.BuildScript.SolutionGenerator.GeneratorInfo.InputSolutionItems">
            <summary>
            Input for the generator. Makes solution list these paths as solution items, under corresponding solution folders.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.SolutionGenerator.GeneratorInfo.Projects">
            <summary>
            Generated real projects for project files on disk.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.SolutionGenerator.GeneratorInfo.SubplatformsToProjects">
            <summary>
            Input.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.SolutionGenerator.GeneratorInfo.VirtualProjects">
            <summary>
            Generated solution folders to parent other stuff.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.FilterBinDependencies(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile)">
            <inheritdoc cref="M:JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile.FilterBinDependencies(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)" />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.FindProjectByClass``1(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Given a build script class, finds the project it belongs to. Works for build scripts in sources because <see cref="T:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper" /> only has a meaning for subs-in-sources.
            </summary>
            <remarks>If required, a similar method which supports binary script as well (but has a more relevant return type) could be written, based on <see cref="T:JetBrains.Application.BuildScript.Solution.PackageOriginalProjects" /> meta for bin subs.</remarks>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.FindSubplatformByClass``1(JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything)">
            <summary>
            Given a build script class, finds the subplatform it belongs to. Works for build scripts both in sources (gets sub on sources) and in binaries (gets sub on package).
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.FindSubplatformByPathInside(System.Collections.Generic.IEnumerable{JetBrains.Application.BuildScript.Solution.Subplatform},JetBrains.Util.RelativePath,JetBrains.Util.OnError)">
            <summary>
            Given a path to some sample file under the subplatform dir, looks up the subplatform for it.
            </summary>
            <param name="subplatforms">All list of subs. Might include non-src ones, no problem.</param>
            <param name="relSampleFileUnderHomeDir">Rel path to sample file, under home dir (just like subplatform names themselves).</param>
            <param name="onerror"></param>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.GetBuildScriptFilePathByClass(System.Type)">
            <summary>
            Extracts the path to the original build script file (assuming relative to ProductHomeDir, based on how scripts are fed for compilation) from a sample class from that file.
            This is based on PDB info, so the class must have some code in it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.Has(JetBrains.Application.BuildScript.Solution.AllAssemblies,JetBrains.Application.BuildScript.Solution.SubplatformName)">
            <summary>
            Gets whether the subplatforms list has the given subplatform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.HasInSources``1(JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything)">
            <summary>
            Gets whether the subplatforms list has a subplatform for the given type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembilesEx.TryFindProjectByClass``1(JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.BuildScript.ProductHomeDirArtifact,JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper@)">
            <summary>
            Given a build script class, finds the project it belongs to. Works for build scripts in sources because <see cref="T:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper" /> only has a meaning for subs-in-sources.
            If the class belongs to a sub-on-binaries, gracefully returns a <c>False</c>/<c>NULL</c>. If a class cannot be found to belong to any subplatform, it's an error.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.AllAssemblies">
            <summary>
            Basic API to all-assemblies lists.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.AllAssembliesAccess">
            <summary>
            Caching and indexing of all-assemblies info.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesFilterByProfile.FilterBinDependencies(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Takes assemblies on sources, returns those of them which have been marked as [B] in the current profile.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.DefaultIntermediateOutputPathFolderName">
            <summary>
            The default name for the <see cref="F:JetBrains.Build.Helpers.Msbuild.MsbuildFile.Properties.IntermediateOutputPath" /> intermediate directory during the build, under Product Home Dir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.DefaultProductBinariesDirFolderName">
            <summary>
            The default name for a ProductBinariesDir as a subfolder of the ProductHomeDir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.JetMetadataInApplicationPackageExt">
            <summary>
            Package part extension for the jet package metadata objects embedded into a subplatform package.
            The part contains a structured storage with a <c>SerializedValuesResolver</c> holding the components.
            The other half of the part local name is the package ID (no version included, for easier cleanup when extracting), and the folder is the main content folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProductHomeDirEnvironmentVariableName">
            <summary>
            An explicit value for Product Home Dir when it has to be transferred to the callee via Environment Variables, e.g. when running NUnit tests on TeamCity in a sandboxed folder. Required for locating the test data. TODO: maybe pass the test data folder explicitly?
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProductHomeDirMarkerFile">
            <summary>
            Name of the marker file which must be present in the root folder of the product.
            Used for autodetection of the product home dir from any dir under it, e.g. with <see cref="M:JetBrains.Util.FileSystemUtil.GetDirectoryNameOfFileAbove(JetBrains.Util.FileSystemPath,System.String)" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProgramDatabasePackageIdAppendix">
            <summary>
            Add to the subplatform package ID (generated with <see cref="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetSubplatformPackageId(JetBrains.Application.BuildScript.Solution.SubplatformName,System.String)" />) to get the ID of the Nuget package with the program database for that subplatform, separated with a dot.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProjectsCollectionDirMarkerFile">
            <summary>
              <para>Name of the marker file which, when planted in a non-root folder of a subplatform, instructs to look one more level down for project files. By default, only the subplatform folder itself and its immediate first-level child folders are considered for project files.</para>
              <para>In the root folder of a subplatform, this marker file is ignored.</para>
              <para>Otherwise, if this file is found in a folder X, any child folders (X/*) would also be checked for either project files or a marker file to look even deeper.</para>
              <para>If a project file sits too deep under the subplatform without the marker files, it would not be swept during a normal <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator" /> scan to save time. However, running <see cref="T:JetBrains.Application.BuildScript.PreCompile.Autofix.LocalAutofixProjectFiles" /> would make a slower fully recursive scan to see if there are potentially useful project files missed from the runtime scan. If so, an autofix error would be issued, telling how to place the marker files to make this project reachable. If the project file is not intended to be included in the soluition (e.g. goes as resources instead), use <see cref="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProjectsHiddenFromSolutionDirMarkerFile" /> marker file.</para>
            </summary>
            <remarks>
              <para>The <c>proj</c> extension makes it match the filename mask used when scanning for project files, which saves a filesystem lookup.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProjectsHiddenFromSolutionDirMarkerFile">
            <summary>
              <para>Name of the marker file which prevents <see cref="T:JetBrains.Application.BuildScript.PreCompile.Autofix.LocalAutofixProjectFiles" /> from complaining on potential project files normally omitted by a <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator" /> scan due to its limited depth, see <see cref="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProjectsCollectionDirMarkerFile" /> docs for details.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.SubplatformRootDirStrongNameKeyPairFileName">
            <summary>
            The SNK file in the subplatform root dir (next to <see cref="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.SubplatformRootDirMarkerFileName" />) which is used for strong-name-signing of all the assemblies.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetAllAssembliesOnLocallyInstalledBinariesFlat(JetBrains.Application.BuildScript.ProductBinariesDirArtifact)">
            <summary>
            Gets the list of subplatforms based on the locally-installed product binaries, as were extracted from the packages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetAllAssembliesOnSources(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the list of project files generating assemblies from all subplatforms of the product, and reads their expected assembly names.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetProductHomeDirOnSources(JetBrains.Util.FileSystemPath)">
            <summary>
            Called on any folder within the source code tree of a product.
            Locates the product home dir by the marker file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetProjectFilesUnderFolder(JetBrains.Util.FileSystemPath,System.Boolean)">
            <summary>
            Used by subplatform to list project files.
            </summary>
            <param name="pathFolderWithProjects">The folder to look under.</param>
            <param name="isDeep">False: used by runtime, looks in the folder and its first-level child folders (unless got special marker). True: diagnostical, yields all of the projects (unless got another special marker).</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetSubplatformOnSourcesFolders(JetBrains.Util.FileSystemPath)">
            <summary>
            Looks for subplatforms which are represented by source code folders under the product home dir.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetSubplatformPackageId(JetBrains.Application.BuildScript.Solution.SubplatformName,System.String)">
            <summary>
            Calculates Package ID for a subplatform package.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetSubplatformPackageId(JetBrains.Application.BuildScript.Solution.Subplatform)">
            <summary>
            Calculates Package ID for a subplatform package.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.TryGetProductHomeDirOnSources(JetBrains.Util.FileSystemPath)">
            <summary>
            Called on any folder within the source code tree of a product.
            Locates the product home dir by the marker file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.FetchAssemblyNameAndFlagsFromProjectFile(JetBrains.Util.FileSystemPath,System.Boolean,JetBrains.Metadata.Utils.AssemblyNameInfo@,JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags@)">
            <summary>
              <para>A hack for ripping the assembly name and the ouput type from the project file.</para>
              <para>We're not spawning the whole MSBuild here, but just read the expected XML element. Should work for most our cases.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything">
            <summary>
            Collects all-assemblies on sources and on packages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackages">
            <summary>
            Just as <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssemblies" />, but specifically being created over already-compiled packages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackagesEx">
            <summary>
            An extended (CLR4+) version which knows its package of origin.
            Also not available in runtime because loading all packages into memory on startup would be very expensive.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources">
            <summary>
            Just as <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssemblies" />, but specifically being created over source-code-presented assemblies.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.PackageOriginalProjects">
            <summary>
            Optional package metadata which specifies the project files from which the DLLs were originally built.
            Used for mapping project references into the binary DLL replacements.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.PackageOriginalProjects.ProjectInSubplatformPath_AssemblyName">
            <summary>
            Lists project-in-subplatform — assembly name pairs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.AssemblyName">
            <summary>
            Assembly name of the DLL compiled from this project.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.ProjectFileInSubplatform">
            <summary>
            Path of the project file from the root dir of its subplatform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.Equals(JetBrains.Application.BuildScript.Solution.ProjectAndAssembly)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.System#IComparable{JetBrains#Application#BuildScript#Solution#ProjectAndAssembly}#CompareTo(JetBrains.Application.BuildScript.Solution.ProjectAndAssembly)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.System#IComparable#CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags.CompilesIntoDll">
            <summary>
            If known that this project will compile into a DLL. With NetCore, this does not necessarily mean that the project does not have an entry point.
            If not set, either <see cref="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags.CompilesIntoExe" /> or unknown.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags.CompilesIntoExe">
            <summary>
            If known that this project will compile into an EXE.
            If not set, either <see cref="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags.CompilesIntoDll" /> or unknown.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags.IsMiniSdk">
            <summary>
            The project is based on an MSBuild Mini SDK, the new format which imports implementation targets from an custom mini-SDK, rather than as an explicit import.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags.IsMicrosoftSdk">
            <summary>
            The project is based on an Microsoft full SDK, the new format which imports implementation targets from an full Microsoft SDK, rather than as an explicit import.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.ProjectAndAssembly.EFlags.IsSdkBasedPluginEmbedding">
            <summary>
            Indicates that this subplatform contains public repositories.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.ProjectAndAssemblyEx.ExtensionWithDot(JetBrains.Application.BuildScript.Solution.ProjectAndAssembly,JetBrains.Util.OnError)">
            <summary>
            Gets project output extension, based on its flags.
            <paramref name="onerror" /> throws by default. If non-throwing, fallbacks to a DLL.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.ProjectAndAssemblyEx.GetApplicationPackageFileLocalInstallPath(JetBrains.Application.BuildScript.Solution.ProjectAndAssembly,JetBrains.Util.OnError)">
            <summary>
            Guesstimates the local name (with ext) of the project output assembly file.
            That's what you get in <see cref="P:JetBrains.Application.BuildScript.Application.ApplicationPackageFile.LocalInstallPath" /> for this project after packaging it.
            On problems with determining the ext, falls back to DLL (unless throws).
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformInfo">
            <summary>
            The root object of the subplatform descriptor.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformInfo.CompanyNameHuman">
            <summary>
            Like <see cref="F:JetBrains.Application.CompanyInfo.Name" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformInfo.CompanyNameLegal">
            <summary>
            Like <see cref="F:JetBrains.Application.CompanyInfo.NameWithInc" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformInfo.IsCompileTimeOnly">
            <summary>
            Whether this subplatform only exists to provide build script sources to other subs. It won't produce an output Nuget package, and references to it won't result in Nuget package references.
            This is somewhat a hack because it only works if the subplatform is taken in sources, but at this point that's the most optimal solution for cases like native builds.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformInfo.SubplatformReferences">
            <summary>
            Lists other subplatforms referenced by this subplatform.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformInfo.VersionOverride">
            <summary>
            Optional. Manually overridden subplatform version number. By default you should leave this NULL to allow the wave-number-derived version to be used.
            Do not read directly unless you want the manual value only, use <see cref="M:JetBrains.Application.BuildScript.Solution.SubplatformEx.GetVersion(JetBrains.Application.BuildScript.Solution.Subplatform,JetBrains.Application.BuildScript.BuildVersionSuffix)" /> to get the version of a specific subplatform, which takes auto-substituted versions into account as well.
            If <c>NULL</c>, usages like <see cref="M:JetBrains.Application.BuildScript.Solution.SubplatformEx.GetVersion(JetBrains.Application.BuildScript.Solution.Subplatform,JetBrains.Application.BuildScript.BuildVersionSuffix)" /> will derive a value from the current wave number, <see cref="M:JetBrains.Util.WaveInfoEx.GetDefaultSubplatformVersion(JetBrains.Util.WaveInfo)" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.SubplatformName.System#IComparable{JetBrains#Application#BuildScript#Solution#SubplatformName}#CompareTo(JetBrains.Application.BuildScript.Solution.SubplatformName)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.SubplatformName.System#IComparable#CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformOnPackage">
            <summary>
            A subplatform which has been created from an already-compiled application package, without access to the sources.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.SubplatformOnPackage.ApplicationPackage">
            <summary>
            The product package of this subplatform.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformOnPackageEx">
            <summary>
            An extended (CLR4+) version which knows its package of origin.
            Also not available in runtime because loading all packages into memory on startup would be very expensive.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.SubplatformOnPackageEx.Package">
            <summary>
            The original package on which this subplatform has been created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.SubplatformOnPackageEx.PackageOriginalProjects">
            <summary>
            Gives info on name and location of the original projects off which the package has been compiled, in case such info were available with the package.
            Yielded by our build system and used by it to do swiches between source-based and binary-based subplatforms, e.g. in project-to-project references.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformOnSources">
            <summary>
            A subplatform which has just been created from source code projects, by parsing out assembly names out of project files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.SubplatformOnSources.ProjectFiles">
            <summary>
            Project files. Paths are relative to the subplatform root folder.
            Partial info from <see cref="F:JetBrains.Application.BuildScript.Solution.SubplatformOnSources.ProjectFilesEx" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Solution.SubplatformOnSources.ProjectFilesEx">
            <summary>
            Project files and the assemblies they would produce.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformPlatformCoreShell">
            <summary>
            Gets the info on the Platform Core Shell subplatform, the center-most subplatform of all the infrastructure.
            NOTE: for other subplatforms, probably there'll be an auto-generated “Current Subplatform Name” class.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper">
            <summary>
            Access wrapper for <see cref="F:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper.ProjectAndAssembly" /> in <see cref="T:JetBrains.Application.BuildScript.Solution.SubplatformOnSources" /> in <see cref="F:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper.AllAssembliesOnSources" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper.Equals(JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper.System#IComparable{JetBrains#Application#BuildScript#Solution#SubplatformProjectWrapper}#CompareTo(JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.Solution.SubplatformProjectWrapper.System#IComparable#CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformReference">
            <summary>
              References another subplatform by its name, which is a relative path from the product root.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformReference.IsCompileTimeOnly">
            <summary>
              Whether this subplatform reference only exists to provide build script sources to other subs. It won't result in
              Nuget package references. This is somewhat a hack because it only works if the subplatform is taken in sources, but
              at this point that's the most optimal solution for cases like native builds.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformReference.IsRuntimeOnly">
            <summary>
              Whether this subplatform reference only exists to be included into Nuget package references.
              It won't be used during subplatform compilation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Solution.SubplatformReference.RuntimeIds">
            <summary>
              Whether this subplatform reference should be used only on these runtimes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Solution.SubplatformsInAllInputPackages">
            <summary>
            Collects subplatforms from all of the input packages, without applying the <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesFilter" /> to them.
            Similar to <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackages" /> and <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackagesEx" />, but those two obey the <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesFilter" /> and might not include smoe of the subplatforms-originating input packages. Those two should be used by features which should obey the filter (like, running tests, packing installers, etc), while this object is for retrieving content from an expected input package, like clean launchers from Platform Core.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.SourceStageBinStageBuild">
            <summary>
            With a standard local build over the main solution, the outermost build stage (not including bootstrap) is an “entry” build which runs on the built-in engine, on Platform Core builds script sources (so that the bootstrapper only knew about this and not about how to discover the whole solution), and does nothing special but for discovering the actual solution structure, running a source stage (on the whole build script sources set now), optionally running the bin stage on its compile results, and optionally prepping B-profile subs before running all that.
            This class encapsulates the logic for spawning these stages.
            NOTE that server builds are usually either source-only or bin-only, so their bootstrapper (Make Isolated Request) would do all the discovery and make a request for running already a pre-setup stage right on full build script and ready previous binaries etc.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.SourceStageBinStageBuild.JetBrains#Application#BuildScript#ISourceStageBinStageBuild#RunSourceStageAsync``1(JetBrains.Lifetimes.OuterLifetime,System.Action{JetBrains.Build.Running.IBuildRunnerRequest})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.SourceStageBinStageBuild.JetBrains#Application#BuildScript#ISourceStageBinStageBuild#RunSourceStageAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Build.Serialization.AssemblyQualifiedTypeName,System.Action{JetBrains.Build.Running.IBuildRunnerRequest})">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.SourceStageObjectiveArtifact">
            <summary>
            When running a build for <see cref="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunSourceStage" />, specifies which objective to invoke on the source stage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.SourceStageObjectiveArtifact.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.BuildScript.SubplatformBinariesPackage">
            <summary>
            The Nuget package with binaries of a freshly-compiled subplatform.
            Gets into the whole <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" />s collection by the end of the compile stage.
            On the binary stage, available among other <see cref="T:JetBrains.Application.BuildScript.InputPackage" />s.
            The ID of the package is calculated with <see cref="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetSubplatformPackageId(JetBrains.Application.BuildScript.Solution.SubplatformName,System.String)" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact">
            <summary>
            Calculates datetime fields for compiled packages.
            A service artifact, not intended for manual use.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact.BestBefore">
            <summary>
            Gets the expiry date.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.SubplatformPackagesTimesArtifact.BuiltOn">
            <summary>
            Gets the date and time when the current package was built.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.SubplatformProgramDatabasePackage">
            <summary>
            The Nuget package with program database files for the binaries of a freshly-compiled subplatform.
            Gets into the whole <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" />s collection by the end of the compile stage.
            On the binary stage, available among other <see cref="T:JetBrains.Application.BuildScript.InputPackage" />s.
            The ID of the package is calculated with <see cref="M:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.GetSubplatformPackageId(JetBrains.Application.BuildScript.Solution.SubplatformName,System.String)" />, plus the <see cref="F:JetBrains.Application.BuildScript.Solution.AllAssembliesLocator.ProgramDatabasePackageIdAppendix" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestTargetVsHive">
            <summary>
            Visual Studio hive (version, instance Id and root suffix) for integration tests.
            Examples: "15.0", "15.0_a0848a47" or "15.0_a0848a47Exp".
            Instance Id and root suffix are optional. If omitted, they will be guessed from the current environment.
            If not defined or the value "0.0" means a standalone app (not a VS).
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestTargetStandaloneApp">
            <summary>
            File name of the standalone application executable for integration tests.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestTargetArchitecture">
            <summary>
            Optional environment variable that specifies the architecture for the standalone application to be tested.
            Use constants from <see cref="T:JetBrains.Util.JetArchitecture"/> enum. If not defined, current OS architecture will be used.
            Is not applicable and ignored for Visual Studio.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestProcessorArchitecture">
            <summary>
            Obsolete. Sets the CPU for the integration tests server process.
            Use constants from ProcessorArchitecture enum.
            ProcessorArchitecture.PROCESSOR_ARCHITECTURE_UNKNOWN means “same as the current runtime”.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestRunInVirtualEnvironment">
            <summary>
            "True" defines that integration tests are running on TC in a virtual environment - server is started in a separate virtual machine.
            Obsolete and is not used now, kept for historical reasons.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestRunOnSingleMachine">
            <summary>
            "True" defines that integration tests are running on TC in a single machine mode - client and sever are on the same TC agent.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestCheckoutDir">
            <summary>
            The environment variable defines a checkout directory on a TC agent.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestInstallDir">
            <summary>
            The environment variable defines a product install directory on a TC agent.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestAllowCaptureTraces">
            <summary>
            "True" allows to run capture traces if required, otherwise no capture traces taken.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestCleanupUserSettings">
            <summary>
            When "true" the integration tests client should reset user settings before each new integration tests server process started.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.EnvInTestProductLoggingLevel">
            <summary>
            Logging level to be passed to the product through "LogLevel" command line switch. Use <see cref="T:JetBrains.Diagnostics.LoggingLevel"/> enum values.
            </summary>
        </member>
        <member name="P:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.InTestsRunMode">
            <summary>
            Integration tests run mode.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Testing.IntegrationTestsEnvironmentVariables.VsFirstDryRun">
            <summary>
            Requests run an empty VS process to warm up after Local Install and before running actual tests.
            It should be performed only once per tests episode, which may consist of more than one test assembly.
            The tests client should be able to clear the flag when dry run is performed. We cannot use environment variables for this purpose and have to use a marker file on the disk.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Testing.IntegrationTestsHomeDirArtifact">
            <summary>
            Denotes that the integration testing task wants to know the home dir for its affairs, even though the regular home dir is not normally available for binary stage tasks.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Testing.InTestsRunMode">
            <summary>
            Integration tests run mode.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.InTestsRunMode.Local">
            <summary>
            Integration tests are running locally.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.InTestsRunMode.SingleMachine">
            <summary>
            Integration tests are running on TC in a single machine mode - client and sever are on the same TC agent.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.InTestsRunMode.VirtualEnvironment">
            <summary>
            Integration tests are running in a virtual environment - server is started in a separate virtual machine.
            Obsolete and is not used now, kept for historical reasons.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Testing.TestDataHomeDirArtifact">
            <summary>
            A separate artifact to specify the home dir root for test data.
            This is to avoid mixing up with the regular home dir when we're running binaries-only builds with tests.
            Also, the test data home folder might quite differ from the regular home dir.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Testing.UnitTestBatchParameter">
            <summary>
            Specifies batch parameters for Parallel Tests build feature by TeamCity.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Testing.UnitTestFilter">
            <summary>
            Applies a filter to the unit tests, either by category or by assembly to run.
            To filter by subplatforms, set the <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesFilter" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.UnitTestFilter.AssemblyBareNameFilter">
            <summary>
            A Regex which filters which subplatform assemblies are getting fed into the unit test runner.
            <see cref="T:JetBrains.Application.BuildScript.Solution.AllAssembliesFilter" /> filters subplatforms which are deployed for running the tests, and this allows to further limit it down.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.UnitTestFilter.CategoryExclude">
            <summary>
            As in <see cref="T:JetBrains.Application.BuildScript.Testing.TestsFilter" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.UnitTestFilter.CategoryInclude">
            <summary>
            As in <see cref="T:JetBrains.Application.BuildScript.Testing.TestsFilter" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.UnitTestFilter.NamespaceFilter">
            <summary>
            As in <see cref="T:JetBrains.Application.BuildScript.Testing.TestsFilter" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.Testing.UnitTestFilter.ClassFilter">
            <summary>
            As in <see cref="T:JetBrains.Application.BuildScript.Testing.TestsFilter" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.Testing.UnitTestPlatform">
            <summary>
            Specifies the platform for running unit tests, which includes the CPU architecture and CLR version.
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.UltimateLicensingConstants">
            <summary>
            Constants used to check ReSharper Ultimate license
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.UltimateLicensingConstants.LicenseVersion">
            <summary>
            Version of corresponding ReSharper Ultimate release
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.UltimateLicensingConstants.ProductBuiltDateUsedForSubscriptionCheck">
            <summary>
            DateTime of corresponding ReSharper Ultimate release
            </summary>
        </member>
        <member name="F:JetBrains.Application.BuildScript.UltimateLicensingConstants.UrlToShowWhenLicenseServerIsBlacklisted">
            <summary>
            Url to show the user who uses pirated blacklisted license server
            </summary>
        </member>
        <member name="T:JetBrains.Application.BuildScript.WaveBundleReferencePackage">
            <summary>
            Each product package we emit must have a reference to the synthetic <c>Wave</c> package.
            This class manages either fetching this package from previous builds binary results, or emitting a new one.
            If emitted, should go to <see cref="T:JetBrains.Application.BuildScript.DeployablePackage" /> list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.WaveBundleReferencePackage.#ctor(JetBrains.Util.Storage.Packages.IJetNugetPackage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.WaveBundleReferencePackage.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.BuildScript.WaveBundleReferencePackage.AddBundleReference(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata},JetBrains.Application.BuildScript.InputPackage[],JetBrains.Util.ILogger)">
            <summary>
            Identifies subplatform packages as belonging to a certain bundle.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.WaveBundleReferencePackage.CreateBundlePackage(JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata})">
            <summary>
            Create bundle package.
            </summary>
        </member>
        <member name="M:JetBrains.Application.BuildScript.WaveBundleReferencePackage.MakeBundlePackageIdentity(JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.PackageDefaultPrereleaseMetadata})">
            <summary>
            The expected/prospected bundle package ID for this wave and for this prerelease metadata.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the ThemedIconExtension markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.Application.Resources.IdeThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.Application.Resources.IdeThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.Application.Resources.IdeThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.Application.Resources.IdeThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = IdeThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCsCs.CompiledIconCsId(typeof(IdeThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;IdeThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml">
             <summary>
            	<para>
            		<para>ExportHtml Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                               `&lt;2eeeeeeeeee
                CCCCCCCCCCCCC35V{~--------kk
                uu''''''''''rkC~----------ZZ
                uu----------666666u;------66
                22----       `c62;--^}----bb
                jj----     `rby!::~[dd::~[dx
                ee----   `rdk=::~Cm2mm~Cmf:
                aa----   -sDu;;uDf~-DDDG:
                kk----     -}88u: ----kk
            uuuuuuuuuuuuuuuuf?"`;Cuuuuuuuu
            tt  tt          :|[{|:  tt  tt
            }}``}}``}}``}}````}}````}}``}}
            ss``````ss``ss``+-``-+``ss``ss
            77``77``77``77``77``77``77``7777
            TT``TT``TT``TT``TT``TT``TT````TT
            ))))))))))))))))))))))))))))))))
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportHtml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportHtml))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.ExportHtml.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportHtml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml.Id">
             <summary>
            	<para>
            		<para>ExportHtml Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml"></see> identifier class.</para>
            		<para>
            			<code>
                               `&lt;2eeeeeeeeee
                CCCCCCCCCCCCC35V{~--------kk
                uu''''''''''rkC~----------ZZ
                uu----------666666u;------66
                22----       `c62;--^}----bb
                jj----     `rby!::~[dd::~[dx
                ee----   `rdk=::~Cm2mm~Cmf:
                aa----   -sDu;;uDf~-DDDG:
                kk----     -}88u: ----kk
            uuuuuuuuuuuuuuuuf?"`;Cuuuuuuuu
            tt  tt          :|[{|:  tt  tt
            }}``}}``}}``}}````}}````}}``}}
            ss``````ss``ss``+-``-+``ss``ss
            77``77``77``77``77``77``77``7777
            TT``TT``TT``TT``TT``TT``TT````TT
            ))))))))))))))))))))))))))))))))
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportHtml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportHtml))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.ExportHtml.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportHtml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml.Load_Color">
            <summary>Loads the image for Themed Icon ExportHtml theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml.Load_Gray">
            <summary>Loads the image for Themed Icon ExportHtml theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExportHtml theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportHtml.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExportHtml.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.ExportText">
             <summary>
            	<para>
            		<para>ExportText Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.ExportText.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                               `=2eeeeeeeeee
                fffffffffffffujVF~--------kk
                uu----------?kC;----------hh
                22----------666666u;------66
                22----       `)42;::^}::::bb
                jj----     `rbS&lt;::~]dd::~]d1
                yy----   `rdk=::;fR2RR;fR3:
                VV----   -zD2;;2D3;-DDDO:
                kk----     -{882: ----kk
            wwwwwwwwwwwwwwwwwwwwwwwwwwEE
            XX      XX  XX  XX      XXZZ
            kkkk  kkkk^ kk :kkkk  kkkkXX
              yy``yyyyyy``yyyyyy``yy--66
              22``2222``22``2222``22--ww
              33``3333``33``3333``33bbbb
              [[[[[[[[[[[[[[[[[[[[[[
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportText}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportText))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.ExportText.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportText&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.ExportText.Id">
             <summary>
            	<para>
            		<para>ExportText Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.ExportText"></see> identifier class.</para>
            		<para>
            			<code>
                               `=2eeeeeeeeee
                fffffffffffffujVF~--------kk
                uu----------?kC;----------hh
                22----------666666u;------66
                22----       `)42;::^}::::bb
                jj----     `rbS&lt;::~]dd::~]d1
                yy----   `rdk=::;fR2RR;fR3:
                VV----   -zD2;;2D3;-DDDO:
                kk----     -{882: ----kk
            wwwwwwwwwwwwwwwwwwwwwwwwwwEE
            XX      XX  XX  XX      XXZZ
            kkkk  kkkk^ kk :kkkk  kkkkXX
              yy``yyyyyy``yyyyyy``yy--66
              22``2222``22``2222``22--ww
              33``3333``33``3333``33bbbb
              [[[[[[[[[[[[[[[[[[[[[[
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportText}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportText))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.ExportText.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportText&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportText.Load_Color">
            <summary>Loads the image for Themed Icon ExportText theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportText.Load_Gray">
            <summary>Loads the image for Themed Icon ExportText theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportText.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExportText theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportText.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExportText.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.ExportXml">
             <summary>
            	<para>
            		<para>ExportXml Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.ExportXml.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                               `&lt;2eeeeeeeeee
                CCCCCCCCCCCCC35V{~--------kk
                uu''''''''''rkC~----------ZZ
                uu----------666666u;------66
                22----       `c62;--^}----bb
                jj----     `rby!::~[dd::~[dx
                ee----   `rdk=::~Cm2mm~Cmf:
                aa----   -sDu;;uDf~-DDDG:
                kk----     -}88u: ----kk
            ggggggggggggQf.`JQggggggggEE
            QQ..QQ..QQ..&lt;#Q$#&lt;..QQ..QQPP
            QQL.QQ.=QQ....QQ....QQ..QQXX
            $$$$--$$$$--K~--~K--$$--$$66
            $$--$$--$$--$$--$$--$$--$$$$
            00::00::00::00::00::00::::00
            MMMMMMMMMMMMMMMMMMMMMMMMMMMM
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportXml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportXml))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.ExportXml.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportXml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.ExportXml.Id">
             <summary>
            	<para>
            		<para>ExportXml Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.ExportXml"></see> identifier class.</para>
            		<para>
            			<code>
                               `&lt;2eeeeeeeeee
                CCCCCCCCCCCCC35V{~--------kk
                uu''''''''''rkC~----------ZZ
                uu----------666666u;------66
                22----       `c62;--^}----bb
                jj----     `rby!::~[dd::~[dx
                ee----   `rdk=::~Cm2mm~Cmf:
                aa----   -sDu;;uDf~-DDDG:
                kk----     -}88u: ----kk
            ggggggggggggQf.`JQggggggggEE
            QQ..QQ..QQ..&lt;#Q$#&lt;..QQ..QQPP
            QQL.QQ.=QQ....QQ....QQ..QQXX
            $$$$--$$$$--K~--~K--$$--$$66
            $$--$$--$$--$$--$$--$$--$$$$
            00::00::00::00::00::00::::00
            MMMMMMMMMMMMMMMMMMMMMMMMMMMM
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportXml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportXml))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.ExportXml.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportXml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportXml.Load_Color">
            <summary>Loads the image for Themed Icon ExportXml theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportXml.Load_Gray">
            <summary>Loads the image for Themed Icon ExportXml theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportXml.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExportXml theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.ExportXml.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExportXml.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument">
             <summary>
            	<para>
            		<para>HtmlDocument Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                CCCCCCCCCCCCCCC=`
                uu''''''''''''^73=`
                uu--------------^vu\`
                22----        ----~J2*`
                jj----        ------~so+
                ee----            ----ee
                aa----            ----aa
                kk----            ----kk
            uuuuuuuuuuuuuuuuf/``;Cuuuuuuuu
            tt  tt          :|[{|:  tt  tt
            }}``}}``}}``}}````}}````}}``}}
            ss``````ss``ss``+-``-+``ss``ss
            77``77``77``77``77``77``77``7777
            TT``TT``TT``TT``TT``TT``TT````TT
            ))))))))))))))))))))))))))))))))
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+HtmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.HtmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.HtmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.HtmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument.Id">
             <summary>
            	<para>
            		<para>HtmlDocument Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument"></see> identifier class.</para>
            		<para>
            			<code>
            
                CCCCCCCCCCCCCCC=`
                uu''''''''''''^73=`
                uu--------------^vu\`
                22----        ----~J2*`
                jj----        ------~so+
                ee----            ----ee
                aa----            ----aa
                kk----            ----kk
            uuuuuuuuuuuuuuuuf/``;Cuuuuuuuu
            tt  tt          :|[{|:  tt  tt
            }}``}}``}}``}}````}}````}}``}}
            ss``````ss``ss``+-``-+``ss``ss
            77``77``77``77``77``77``77``7777
            TT``TT``TT``TT``TT``TT``TT````TT
            ))))))))))))))))))))))))))))))))
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+HtmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.HtmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.HtmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.HtmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument.Load_Color">
            <summary>Loads the image for Themed Icon HtmlDocument theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument.Load_Gray">
            <summary>Loads the image for Themed Icon HtmlDocument theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument.Load_GrayDark">
            <summary>Loads the image for Themed Icon HtmlDocument theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.HtmlDocument.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon HtmlDocument.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.InternalPage">
             <summary>
            	<para>
            		<para>InternalPage Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.InternalPage.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                :+|z33JL&lt;-    -=)zjjfJr^
              !jkkT-``.-&lt;Iu;~2kL,:..:T99X+`
            `skkkkk3^     ^SEr`````~2wwwwwj.
            +a;;2aaaaf:    "aL```,owwwwXr;wi
            }a. `;2aJ:     `a[````^3wXr-`.w6
            &lt;S~   `:       ,S|``````^-```~bT
            `v2^```````````.=27_........~he.
              !2J;-````.``````=2J^..-:=C6L
                :/)suoy21~`````.=2VXeFL_
                  -vw7:-~s[~`````.=u)-
                -vb7_----:)j[;`````'=u)-
              -vbJ"----:+Pe~:TY;.````-/3c-
            `7wJ":::::rUy~    :T{;.....-/fc`
            Ip;:::::rUy~        :T};.....:uJ
            Tp7^:_?Uy~            :T};-.-!f)
             ;CqqPz^                :+JCC|~
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+InternalPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.InternalPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.InternalPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.InternalPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.InternalPage.Id">
             <summary>
            	<para>
            		<para>InternalPage Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.InternalPage"></see> identifier class.</para>
            		<para>
            			<code>
                :+|z33JL&lt;-    -=)zjjfJr^
              !jkkT-``.-&lt;Iu;~2kL,:..:T99X+`
            `skkkkk3^     ^SEr`````~2wwwwwj.
            +a;;2aaaaf:    "aL```,owwwwXr;wi
            }a. `;2aJ:     `a[````^3wXr-`.w6
            &lt;S~   `:       ,S|``````^-```~bT
            `v2^```````````.=27_........~he.
              !2J;-````.``````=2J^..-:=C6L
                :/)suoy21~`````.=2VXeFL_
                  -vw7:-~s[~`````.=u)-
                -vb7_----:)j[;`````'=u)-
              -vbJ"----:+Pe~:TY;.````-/3c-
            `7wJ":::::rUy~    :T{;.....-/fc`
            Ip;:::::rUy~        :T};.....:uJ
            Tp7^:_?Uy~            :T};-.-!f)
             ;CqqPz^                :+JCC|~
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+InternalPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.InternalPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.InternalPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.InternalPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.InternalPage.Load_Color">
            <summary>Loads the image for Themed Icon InternalPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.InternalPage.Load_Gray">
            <summary>Loads the image for Themed Icon InternalPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.InternalPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon InternalPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.InternalPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon InternalPage.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle">
             <summary>
            	<para>
            		<para>PreviewToggle Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
              jjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
              yyrr?Lc))|TT7vJssl}F]1Cnu225yy
              kkrr?Lc))|TT7vJssl}F]1Cnu225kk
              KKrr?Lc))|TT7vJssl}F]1Cnu225KK
              XX                        "^XX
              44  ``````@@``````````````"^44
              ww  ``````@@``@@``@@``@@``"^ww
              pp  ......@@.............."^pp
            jjjjjjjjjjjjjjjjjjjj@@--@@--"^AA
            kk                kk::::::::"^RR
            XX````````TTTTTT``XX@@::@@::"^##
            bb''.` `''TTTTTT''bb"""""""""^DD
            AA::::--::TTTTTT::AA-::::,_""^88
            DD""""""""""""""""DD888888888888
            88888888888888888888
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+PreviewToggle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.PreviewToggle))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.PreviewToggle.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.PreviewToggle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle.Id">
             <summary>
            	<para>
            		<para>PreviewToggle Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle"></see> identifier class.</para>
            		<para>
            			<code>
            
              jjjjjjjjjjjjjjjjjjjjjjjjjjjjjj
              yyrr?Lc))|TT7vJssl}F]1Cnu225yy
              kkrr?Lc))|TT7vJssl}F]1Cnu225kk
              KKrr?Lc))|TT7vJssl}F]1Cnu225KK
              XX                        "^XX
              44  ``````@@``````````````"^44
              ww  ``````@@``@@``@@``@@``"^ww
              pp  ......@@.............."^pp
            jjjjjjjjjjjjjjjjjjjj@@--@@--"^AA
            kk                kk::::::::"^RR
            XX````````TTTTTT``XX@@::@@::"^##
            bb''.` `''TTTTTT''bb"""""""""^DD
            AA::::--::TTTTTT::AA-::::,_""^88
            DD""""""""""""""""DD888888888888
            88888888888888888888
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+PreviewToggle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.PreviewToggle))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.PreviewToggle.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.PreviewToggle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle.Load_Color">
            <summary>Loads the image for Themed Icon PreviewToggle theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle.Load_Gray">
            <summary>Loads the image for Themed Icon PreviewToggle theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle.Load_GrayDark">
            <summary>Loads the image for Themed Icon PreviewToggle theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.PreviewToggle.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon PreviewToggle.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.SearchResults">
             <summary>
            	<para>
            		<para>SearchResults Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.SearchResults.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            XXXXXXXXXXXXXXXXXX
            44~~^"_,:::---..44
            ww~~^"_,:::---..ww
            bbbbbbbbbbbbbbbbbb
            dd~~^"_,:::-dd    -;+(iiTr!-
            GG~~^"_,:::-GG  ;1ur_:--:_+C3&gt;
            RRRRRRRRRRRRRR`Tk+.-_~;;;"-.!V}`
            ##~~^"_,::##  =Ur-:_:````:":-!Uc
            DD~~^"_,::DD  2w"---`     ---:wh
            888888888888  ?pr:. `````` `:&lt;ps
                         `=pHr:-`    `-:=bh-
                       `;}7;j#hT;^__^;)V#l`
                     `;}7~:~+S8mabDDdkx;`
                    ;}7~:~+e#2:
                    rjJ&lt;+e#2:
                     -7d#2:
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResults}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResults))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.SearchResults.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResults&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.SearchResults.Id">
             <summary>
            	<para>
            		<para>SearchResults Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.SearchResults"></see> identifier class.</para>
            		<para>
            			<code>
            XXXXXXXXXXXXXXXXXX
            44~~^"_,:::---..44
            ww~~^"_,:::---..ww
            bbbbbbbbbbbbbbbbbb
            dd~~^"_,:::-dd    -;+(iiTr!-
            GG~~^"_,:::-GG  ;1ur_:--:_+C3&gt;
            RRRRRRRRRRRRRR`Tk+.-_~;;;"-.!V}`
            ##~~^"_,::##  =Ur-:_:````:":-!Uc
            DD~~^"_,::DD  2w"---`     ---:wh
            888888888888  ?pr:. `````` `:&lt;ps
                         `=pHr:-`    `-:=bh-
                       `;}7;j#hT;^__^;)V#l`
                     `;}7~:~+S8mabDDdkx;`
                    ;}7~:~+e#2:
                    rjJ&lt;+e#2:
                     -7d#2:
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResults}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResults))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.SearchResults.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResults&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResults.Load_Color">
            <summary>Loads the image for Themed Icon SearchResults theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResults.Load_Gray">
            <summary>Loads the image for Themed Icon SearchResults theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResults.Load_GrayDark">
            <summary>Loads the image for Themed Icon SearchResults theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResults.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SearchResults.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow">
             <summary>
            	<para>
            		<para>SearchResultsWindow Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            XXXXXXXXXXXXXXXXXX
            44~~^"_,:::---..44
            ww~~^"_,:::---..ww
            bbbbbbbbbbbbbbbbbb
            dd~~^"_,:::-dd    -;+(iiTr!-
            GG~~^"_,:::-GG  ;1ur_:--:_+C3&gt;
            RRRRRRRRRRRRRR`Tk+.-_~;;;"-.!V}`
            ##~~^"_,::##  =Ur-:_:````:":-!Uc
            DD~~^"_,::DD  2w"---`     ---:wh
            888888888888  ?pr:. `````` `:&lt;ps
                         `=pHr:-`    `-:=bh-
                       `;}7;j#hT;^__^;)V#l`
                     `;}7~:~+S8mabDDdkx;`
                    ;}7~:~+e#2:
                    rjJ&lt;+e#2:
                     -7d#2:
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResultsWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResultsWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.SearchResultsWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResultsWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow.Id">
             <summary>
            	<para>
            		<para>SearchResultsWindow Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow"></see> identifier class.</para>
            		<para>
            			<code>
            XXXXXXXXXXXXXXXXXX
            44~~^"_,:::---..44
            ww~~^"_,:::---..ww
            bbbbbbbbbbbbbbbbbb
            dd~~^"_,:::-dd    -;+(iiTr!-
            GG~~^"_,:::-GG  ;1ur_:--:_+C3&gt;
            RRRRRRRRRRRRRR`Tk+.-_~;;;"-.!V}`
            ##~~^"_,::##  =Ur-:_:````:":-!Uc
            DD~~^"_,::DD  2w"---`     ---:wh
            888888888888  ?pr:. `````` `:&lt;ps
                         `=pHr:-`    `-:=bh-
                       `;}7;j#hT;^__^;)V#l`
                     `;}7~:~+S8mabDDdkx;`
                    ;}7~:~+e#2:
                    rjJ&lt;+e#2:
                     -7d#2:
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResultsWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResultsWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.SearchResultsWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResultsWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow.Load_Color">
            <summary>Loads the image for Themed Icon SearchResultsWindow theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow.Load_Gray">
            <summary>Loads the image for Themed Icon SearchResultsWindow theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow.Load_GrayDark">
            <summary>Loads the image for Themed Icon SearchResultsWindow theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.SearchResultsWindow.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SearchResultsWindow.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.TextDocument">
             <summary>
            	<para>
            		<para>TextDocument Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.TextDocument.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                333333333333333333333333
                uu--------------------uu
                22--------------------22
                22----````````````----22
                ee----    ;!=+rL  ----ee
                yy----            ----yy
                VV----  ^~;!=+rL  ----VV
                kk----            ----kk
                EE----  ^~;!=+rL  ----EE
                ZZ----            ----ZZ
                XX----  ^~;!=+    ----XX
                66::::            ::::66
                44::::::::::::::::::::44
                ww::::::::::::::::::::ww
                bbbbbbbbbbbbbbbbbbbbbbbb
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+TextDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.TextDocument))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.TextDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.TextDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.TextDocument.Id">
             <summary>
            	<para>
            		<para>TextDocument Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.TextDocument"></see> identifier class.</para>
            		<para>
            			<code>
                333333333333333333333333
                uu--------------------uu
                22--------------------22
                22----````````````----22
                ee----    ;!=+rL  ----ee
                yy----            ----yy
                VV----  ^~;!=+rL  ----VV
                kk----            ----kk
                EE----  ^~;!=+rL  ----EE
                ZZ----            ----ZZ
                XX----  ^~;!=+    ----XX
                66::::            ::::66
                44::::::::::::::::::::44
                ww::::::::::::::::::::ww
                bbbbbbbbbbbbbbbbbbbbbbbb
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+TextDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.TextDocument))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.TextDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.TextDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.TextDocument.Load_Color">
            <summary>Loads the image for Themed Icon TextDocument theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.TextDocument.Load_Gray">
            <summary>Loads the image for Themed Icon TextDocument theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.TextDocument.Load_GrayDark">
            <summary>Loads the image for Themed Icon TextDocument theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.TextDocument.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TextDocument.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.Tools">
             <summary>
            	<para>
            		<para>Tools Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.Tools.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                      tttttttttttttt
                      jj          jj
                      ZZ..ZZZZZZ..ZZ
              CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
              uu``````````````````````````uu
              55^^^^^^^^^^^^^^^^^^^^^^^^^^55
              SS;;;;=z  z=;;;;;;=z  z=;;;;SS
              kkkkkkkk``kkkkkkkkkk``kkkkkkkk
              hh&lt;&lt;&lt;&lt;VV--VV&lt;&lt;&lt;&lt;&lt;&lt;VV--VV&lt;&lt;&lt;&lt;hh
              66rrrrVVVVVVrrrrrrVVVVVVrrrr66
              bb))))))))))))))))))))))))))bb
              ddJJJJJJJJJJJJJJJJJJJJJJJJJJdd
              OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+Tools}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.Tools))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.Tools.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.Tools&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.Tools.Id">
             <summary>
            	<para>
            		<para>Tools Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.Tools"></see> identifier class.</para>
            		<para>
            			<code>
            
                      tttttttttttttt
                      jj          jj
                      ZZ..ZZZZZZ..ZZ
              CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
              uu``````````````````````````uu
              55^^^^^^^^^^^^^^^^^^^^^^^^^^55
              SS;;;;=z  z=;;;;;;=z  z=;;;;SS
              kkkkkkkk``kkkkkkkkkk``kkkkkkkk
              hh&lt;&lt;&lt;&lt;VV--VV&lt;&lt;&lt;&lt;&lt;&lt;VV--VV&lt;&lt;&lt;&lt;hh
              66rrrrVVVVVVrrrrrrVVVVVVrrrr66
              bb))))))))))))))))))))))))))bb
              ddJJJJJJJJJJJJJJJJJJJJJJJJJJdd
              OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+Tools}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.Tools))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.Tools.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.Tools&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.Tools.Load_Color">
            <summary>Loads the image for Themed Icon Tools theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.Tools.Load_Gray">
            <summary>Loads the image for Themed Icon Tools theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.Tools.Load_GrayDark">
            <summary>Loads the image for Themed Icon Tools theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.Tools.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Tools.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.UsageAll">
             <summary>
            	<para>
            		<para>UsageAll Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.UsageAll.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                   :*rT}555555555555555555
                `+2z;:-`                ee
               _2{- `:,^~~~~~~~~~~~~~~  VV
              "ET  ,~~~~~~~~~~~~~~~~~~  EE
              xZ: :^^^^^^^^~;^^^^^^^^^  ZZ
              XX  _________7{_________  XX
              44  ,,,,,,,,~bb;,,,,,,,,  44
              ww  ::^cs)cc2bbecc)s|~::  ww
              pp  ::::;TUbbbbbb67;::::  pp
              dd  ------:Xbbbbb"------  dd
              OO  ------Ybu=![b2------  OO
              ##  .....!L:....:r+.....  ##
              DD  ....................  DD
              DD  ````````````````````  DD
              88                        88
              WWWWWWWWWWWWWWWWWWWWWWWWWWWW
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageAll))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.UsageAll.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.UsageAll.Id">
             <summary>
            	<para>
            		<para>UsageAll Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.UsageAll"></see> identifier class.</para>
            		<para>
            			<code>
                   :*rT}555555555555555555
                `+2z;:-`                ee
               _2{- `:,^~~~~~~~~~~~~~~  VV
              "ET  ,~~~~~~~~~~~~~~~~~~  EE
              xZ: :^^^^^^^^~;^^^^^^^^^  ZZ
              XX  _________7{_________  XX
              44  ,,,,,,,,~bb;,,,,,,,,  44
              ww  ::^cs)cc2bbecc)s|~::  ww
              pp  ::::;TUbbbbbb67;::::  pp
              dd  ------:Xbbbbb"------  dd
              OO  ------Ybu=![b2------  OO
              ##  .....!L:....:r+.....  ##
              DD  ....................  DD
              DD  ````````````````````  DD
              88                        88
              WWWWWWWWWWWWWWWWWWWWWWWWWWWW
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageAll))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.UsageAll.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.UsageAll.Load_Color">
            <summary>Loads the image for Themed Icon UsageAll theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.UsageAll.Load_Gray">
            <summary>Loads the image for Themed Icon UsageAll theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.UsageAll.Load_GrayDark">
            <summary>Loads the image for Themed Icon UsageAll theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.UsageAll.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UsageAll.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument">
             <summary>
            	<para>
            		<para>XmlDocument Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                CCCCCCCCCCCCCCC=`
                uu''''''''''''^73=`
                uu--------------^vu\`
                22----        ----~J2*`
                jj----        ------~so+
                ee----            ----ee
                aa----            ----aa
                kk----            ----kk
            ggggggggggggQf.`JQggggggggEE
            QQ..QQ..QQ..&lt;#Q$#&lt;..QQ..QQPP
            QQL.QQ.=QQ....QQ....QQ..QQXX
            $$$$--$$$$--K~--~K--$$--$$66
            $$--$$--$$--$$--$$--$$--$$$$
            00::00::00::00::00::00::::00
            MMMMMMMMMMMMMMMMMMMMMMMMMMMM
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+XmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.XmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.XmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.XmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument.Id">
             <summary>
            	<para>
            		<para>XmlDocument Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument"></see> identifier class.</para>
            		<para>
            			<code>
            
                CCCCCCCCCCCCCCC=`
                uu''''''''''''^73=`
                uu--------------^vu\`
                22----        ----~J2*`
                jj----        ------~so+
                ee----            ----ee
                aa----            ----aa
                kk----            ----kk
            ggggggggggggQf.`JQggggggggEE
            QQ..QQ..QQ..&lt;#Q$#&lt;..QQ..QQPP
            QQL.QQ.=QQ....QQ....QQ..QQXX
            $$$$--$$$$--K~--~K--$$--$$66
            $$--$$--$$--$$--$$--$$--$$$$
            00::00::00::00::00::00::::00
            MMMMMMMMMMMMMMMMMMMMMMMMMMMM
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+XmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.XmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.XmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.XmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument.Load_Color">
            <summary>Loads the image for Themed Icon XmlDocument theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument.Load_Gray">
            <summary>Loads the image for Themed Icon XmlDocument theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument.Load_GrayDark">
            <summary>Loads the image for Themed Icon XmlDocument theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.XmlDocument.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon XmlDocument.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty">
             <summary>
            	<para>
            		<para>AutogeneratedProperty Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                 MMMMMMMMMMMMMMMMMMMMMMMM    
                 QQ_""^~~~;;;;!!==\*++rQQ    
                 gg_""^~~~;;;;!!==\*++rgg    
                 kE     `````````````  $$    
                 kE     `````````````  $$    
                 ke;=r|]32S_`D8N$Qg``  $$    
               `![FFFs``|FFFl\-``````  $$    
              :}F:.~=_``:=~.-zfA$Qg``  $$    
             ,uuus-.,~;;~,..Tuuu;````  $$    
             J2+!^-:"TdO}",-"!*2eQg``  $$    
             {S/;^:--J8Wf--:";!Sj````  $$    
             ;kkk5":.````.:_fkkk+````  $$    
              ;EE!^*c!^^!c+^;aZ=       $$    
               :1XK66K~~566hXwODD888M%$$$    
                 .!i3kwwEui!.                
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DesktopThemedIcons+AutogeneratedProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DesktopThemedIcons.AutogeneratedProperty))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DesktopThemedIcons.AutogeneratedProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DesktopThemedIcons.AutogeneratedProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty.Id">
             <summary>
            	<para>
            		<para>AutogeneratedProperty Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                 MMMMMMMMMMMMMMMMMMMMMMMM    
                 QQ_""^~~~;;;;!!==\*++rQQ    
                 gg_""^~~~;;;;!!==\*++rgg    
                 kE     `````````````  $$    
                 kE     `````````````  $$    
                 ke;=r|]32S_`D8N$Qg``  $$    
               `![FFFs``|FFFl\-``````  $$    
              :}F:.~=_``:=~.-zfA$Qg``  $$    
             ,uuus-.,~;;~,..Tuuu;````  $$    
             J2+!^-:"TdO}",-"!*2eQg``  $$    
             {S/;^:--J8Wf--:";!Sj````  $$    
             ;kkk5":.````.:_fkkk+````  $$    
              ;EE!^*c!^^!c+^;aZ=       $$    
               :1XK66K~~566hXwODD888M%$$$    
                 .!i3kwwEui!.                
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:DesktopThemedIcons+AutogeneratedProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(DesktopThemedIcons.AutogeneratedProperty))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = DesktopThemedIcons.AutogeneratedProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;DesktopThemedIcons.AutogeneratedProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty.Load_Color">
            <summary>Loads the image for Themed Icon AutogeneratedProperty theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty.Load_Gray">
            <summary>Loads the image for Themed Icon AutogeneratedProperty theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty.Load_GrayDark">
            <summary>Loads the image for Themed Icon AutogeneratedProperty theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.AutogeneratedProperty.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AutogeneratedProperty.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened">
             <summary>
            	<para>
            		<para>FolderOpened Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                               :+************
                             ,\;.          LL
               rrrrrrrrrrrrrr!'            rr
               TT``````````````````````````TT
               zz``````````````````````````zz
               ii--??????????????????????--ii
               11..7777777777777777777777..11
               II''iiiiiiiiiiiiiiiiiiiiii''II
               55''}}}}}}}}}}}}}}}}}}}}}}''55
               jj__5555555555555555555555__jj
               yy::EEEEEEEEEEEEEEEEEEEEEE::yy
               PP,,PPPPPPPPPPPPPPPPPPPPPP,,PP
               99~~~~~~~~~~~~~~~~~~~~~~~~~~99
               GGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+FolderOpened}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.FolderOpened))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = IdeThemedIcons.FolderOpened.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;IdeThemedIcons.FolderOpened&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened.Id">
            <inheritdoc cref="T:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened.Load_Color">
            <summary>Loads the image for Themed Icon FolderOpened theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened.Load_Gray">
            <summary>Loads the image for Themed Icon FolderOpened theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened.Load_GrayDark">
            <summary>Loads the image for Themed Icon FolderOpened theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Resources.IdeThemedIcons.FolderOpened.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FolderOpened.</summary>
        </member>
        <member name="T:JetBrains.Application.Resources.VsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.AggregateSourceName">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.AmbiguousProjectLevelUninstal">
            <summary>
              Looks up a localized string similar to Unable to find &apos;{0}&apos; in &apos;{1}&apos; and found multiple versions of &apos;{0}&apos; installed. Please specify a version..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.AmbiguousUninstall">
            <summary>
              Looks up a localized string similar to Found multiple versions of &apos;{0}&apos; installed. Please specify a version..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.AmbiguousUpdate">
            <summary>
              Looks up a localized string similar to Unable to update &apos;{0}&apos;. Found multiple versions installed..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.AskForRestoreMessage">
            <summary>
              Looks up a localized string similar to Some extensions are missing from this product. Click to restore..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.AskForUpdateMessage">
            <summary>
              Looks up a localized string similar to A new version of NuGet Package Manager is available..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Console_DisclaimerText">
            <summary>
              Looks up a localized string similar to Each extension is licensed to you by its owner. JetBrains is not responsible for, nor does it grant any licenses to, third-party extensions. Some extensions may include dependencies which are governed by additional licenses. Follow the extension source (feed) URL to determine any dependencies..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Console_HelpText">
            <summary>
              Looks up a localized string similar to Type &apos;get-help NuGet&apos; to see all available NuGet commands..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Console_InitializeHostFails">
            <summary>
              Looks up a localized string similar to Failed to initialize the PowerShell host. If your PowerShell execution policy setting is set to AllSigned, open the Package Manager Console to initialize the host first..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Debug_AddedFileToProject">
            <summary>
              Looks up a localized string similar to Added file &apos;{0}&apos; to project &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Debug_AddReference">
            <summary>
              Looks up a localized string similar to Added reference &apos;{0}&apos; to project &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Debug_RemovedFile">
            <summary>
              Looks up a localized string similar to Removed file &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Debug_RemovedFileFromFolder">
            <summary>
              Looks up a localized string similar to Removed file &apos;{0}&apos; from folder &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Debug_RemovedFolder">
            <summary>
              Looks up a localized string similar to Removed folder &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Debug_RemoveReference">
            <summary>
              Looks up a localized string similar to Removed reference &apos;{0}&apos; from project &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Dialog_DisclaimerText">
            <summary>
              Looks up a localized string similar to Each extension is licensed to you by its owner. JetBrains is not responsible for, nor does it grant any licenses to, third-party extensions..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.DialogTitle">
            <summary>
              Looks up a localized string similar to Extension Manager.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.DoNotRemindAgain">
            <summary>
              Looks up a localized string similar to Don&apos;t show again.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.DTE_InvalidProject">
            <summary>
              Looks up a localized string similar to The project is invalid.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.DTE_ProjectUnsupported">
            <summary>
              Looks up a localized string similar to The project &apos;{0}&apos; is unsupported.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.ErrorReadingFile">
            <summary>
              Looks up a localized string similar to Error reading &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.ExecutingScript">
            <summary>
              Looks up a localized string similar to Executing script file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.FailedToAddGacReference">
            <summary>
              Looks up a localized string similar to Failed to add reference to &apos;{0}&apos;. Please make sure that it is in the Global Assembly Cache..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.FailedToAddReference">
            <summary>
              Looks up a localized string similar to Failed to add reference to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.FailedToRemoveReference">
            <summary>
              Looks up a localized string similar to Case insensitive search for reference &apos;{0}&apos;, to be removed, returned more than 1 match. Request could not be performed..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.FileConflictTitle">
            <summary>
              Looks up a localized string similar to File Conflict.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.IgnoreUpgrade">
            <summary>
              Looks up a localized string similar to Ignore for now.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Log_PackageAlreadyInstalled">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; already installed..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.NoActivePackageSource">
            <summary>
              Looks up a localized string similar to Unable to retrieve extension list because no source was specified..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.NoUpdatesAvailable">
            <summary>
              Looks up a localized string similar to No updates available for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.OfficialSourceName">
            <summary>
              Looks up a localized string similar to NuGet official package source.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.OperationFailed">
            <summary>
              Looks up a localized string similar to Operation failed..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageCannotBeRemovedBecauseItIsInUse">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be removed because it in use by &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageNotInstalledInAnyProject">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; was not installed in any project. Update failed..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreCompleted">
            <summary>
              Looks up a localized string similar to Finished configuring this product to restore extensions on start..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreConfirmation">
            <summary>
              Looks up a localized string similar to Do you want to configure this product to download and restore missing extensions?.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreDownloadPackageFailed">
            <summary>
              Looks up a localized string similar to Downloading extension &apos;{0}&apos; failed..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreErrorMessage">
            <summary>
              Looks up a localized string similar to An error occurred while configuring the product to restore extensions on start.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreErrorTryAgain">
            <summary>
              Looks up a localized string similar to An error occurred while trying to restore extensions. Please try again..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreProgressMessage">
            <summary>
              Looks up a localized string similar to Downloading missing extensions....
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreSkipForProject">
            <summary>
              Looks up a localized string similar to Skipped reinstalling extension &apos;{0}&apos; in product &apos;{1}&apos; because the extension does not exist in the extension source..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreSkipForSolution">
            <summary>
              Looks up a localized string similar to Skipped reinstalling extension &apos;{0}&apos; because the extension does not exist in the extension source..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageRestoreWaitMessage">
            <summary>
              Looks up a localized string similar to Configuring the product to restore extensions on start....
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageSource_Invalid">
            <summary>
              Looks up a localized string similar to The extension source does not belong to the collection of available sources..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.PackageUpdatedSuccessfully">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; updated successfully..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.ProjectNotSpecified">
            <summary>
              Looks up a localized string similar to No project was specified..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.ReinstallProjectPackage">
            <summary>
              Looks up a localized string similar to Reinstalling &apos;{0}&apos; in project &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.ReinstallSolutionPackage">
            <summary>
              Looks up a localized string similar to Reinstalling &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.RequestRestartToCompleteUninstall">
            <summary>
              Looks up a localized string similar to You must restart application in order for the changes to take effect. The following extensions require a restart: {0}..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.RestartNow">
            <summary>
              Looks up a localized string similar to Restart Now.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.RestoreButtonLabel">
            <summary>
              Looks up a localized string similar to _Restore.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.ShowDetails">
            <summary>
              Looks up a localized string similar to Show Details.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.SolutionDirectoryNotAvailable">
            <summary>
              Looks up a localized string similar to Unable to locate the solution directory. Please ensure that the solution has been saved..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.SolutionNotAvailable">
            <summary>
              Looks up a localized string similar to The current environment does not have a solution loaded..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_ErrorDialogTitle">
            <summary>
              Looks up a localized string similar to Package Installation Error.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_ExtensionManagerError">
            <summary>
              Looks up a localized string similar to Error accessing Extension Manager..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_FailedToInstallPackage">
            <summary>
              Looks up a localized string similar to Could not add all required extensionы to the product. The following extensions failed to install from &apos;{0}&apos;:.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_InvalidExtensionId">
            <summary>
              Looks up a localized string similar to The project template has a reference to a missing Extension. Could not find an Extension with ID &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_InvalidPackageElementAttributes">
            <summary>
              Looks up a localized string similar to The project template lists one or more packages with missing, empty, or invalid values for the &quot;id&quot; or &quot;version&quot; attributes. Both attributes are required and must have valid values..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_InvalidRegistryValue">
            <summary>
              Looks up a localized string similar to The project template has a reference to a missing Registry value. Could not find a Registry key with name &apos;{0}&apos; under &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_InvalidRepositoryAttribute">
            <summary>
              Looks up a localized string similar to The &quot;repository&quot; attribute of the package element has an invalid value: &apos;{0}&apos;. Valid values are: &apos;template&apos; or &apos;extension&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_InvalidWizardRunKind">
            <summary>
              Looks up a localized string similar to This template wizard can only be applied to single-project or project-item templates..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_MissingExtensionId">
            <summary>
              Looks up a localized string similar to The project template is configured to use an Extension-specific package repository but the Extension ID has not been specified. Use the &quot;repositoryId&quot; attribute to specify the Extension ID..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_MissingRegistryKeyName">
            <summary>
              Looks up a localized string similar to The project template is configured to use a Registry-provided package repository but the Registry value name has not been specified. Use the &quot;keyName&quot; attribute to specify the Registry value..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_PackageInstallStatus">
            <summary>
              Looks up a localized string similar to Adding {0}.{1} to project....
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_RegistryKeyError">
            <summary>
              Looks up a localized string similar to The project template is configured to use a Registry-provided package repository but there was an error accessing Registry key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.TemplateWizard_VersionConflict">
            <summary>
              Looks up a localized string similar to Attempting to install version &apos;{1}&apos; of &apos;{0}&apos; but the project already includes a different version. Skipping....
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.UnableToFindPackageFromSource">
            <summary>
              Looks up a localized string similar to Unable to find extension &apos;{0}&apos; version &apos;{1}&apos; from the source &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.UnknownPackage">
            <summary>
              Looks up a localized string similar to Unable to find extension &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.UnknownPackageInProject">
            <summary>
              Looks up a localized string similar to Unable to find extension &apos;{0}&apos; in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.VisualStudioExpressForWindows8SourceName">
            <summary>
              Looks up a localized string similar to Windows 8 Packages.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_DirectoryNotEmpty">
            <summary>
              Looks up a localized string similar to Directory &apos;{0}&apos; is not empty. Skipping....
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_FailedToAddBindingRedirects">
            <summary>
              Looks up a localized string similar to Failed to generate binding redirects for &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_FailedToDeleteMarkedPackageDirectories">
            <summary>
              Looks up a localized string similar to Failed to remove extension directories that were marked for deletion on application restart: {0}.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_FailedToDeleteMarkedPackageDirectory">
            <summary>
              Looks up a localized string similar to Failed to remove extension directory &apos;{0}&apos; that was marked for deletion on application restart..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_FailedToFindMatchForRemoveReference">
            <summary>
              Looks up a localized string similar to Failed to find match for removing reference &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_FailedToMarkPackageDirectoryForDeletion">
            <summary>
              Looks up a localized string similar to Failed to mark extension directory &apos;{0}&apos; for deletion on application restart: {1}.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_FileAlreadyExists">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; already exists. Skipping....
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_NoExactMatchForReference">
            <summary>
              Looks up a localized string similar to No exact match found for removing reference &apos;{0}&apos;. Trying case-insensitive search....
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_PackageNotReferencedByAnyProject">
            <summary>
              Looks up a localized string similar to Extension {0} of version {1} is not referenced by any product..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Resources.VsResources.Warning_RollingBack">
            <summary>
              Looks up a localized string similar to Install failed. Rolling back....
            </summary>
        </member>
        <member name="T:JetBrains.Application.Res.StringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertAnchorNotInGroup">
            <summary>
              Looks up a localized string similar to Failed to insert actions because the anchoring action is not included in the actions group we are inserting into.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertCantLoad">
            <summary>
              Looks up a localized string similar to Failed to insert an action into the group because it failed to load.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertConflictingAnchor">
            <summary>
              Looks up a localized string similar to Failed to insert actions because an anchoring action was specified, which conflicts with the relative positioning value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertIntoNonexistentGroup">
            <summary>
              Looks up a localized string similar to Failed to insert actions because the target action group does not exist.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertIntoNonGroupAction">
            <summary>
              Looks up a localized string similar to Failed to insert actions because the target action ID belongs to an action that is not an action group.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertInvalidAnchor">
            <summary>
              Looks up a localized string similar to Failed to insert actions because the anchoring action does not exist.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertInvalidRelativePosition">
            <summary>
              Looks up a localized string similar to Failed to insert actions because the relative positioning value is invalid.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantInsertMissingAnchor">
            <summary>
              Looks up a localized string similar to Failed to insert actions because the anchoring action was not specified, as required by the relative positioning value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionCantLoad">
            <summary>
              Looks up a localized string similar to Failed to load the product action {0}.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ActionUnnamedXmlElementName">
            <summary>
              Looks up a localized string similar to Unnamed &lt;{0}&gt; Element.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Close">
            <summary>
              Looks up a localized string similar to Cl&amp;ose.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Copy_To_Clipboard">
            <summary>
              Looks up a localized string similar to Copy to clipboard.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Copy_URL">
            <summary>
              Looks up a localized string similar to Copy URL.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Created_new_issue">
            <summary>
              Looks up a localized string similar to Created new issue.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Do_Not_Show">
            <summary>
              Looks up a localized string similar to Do not show this window after exceptions are submitted.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Double_Click">
            <summary>
              Looks up a localized string similar to Double-click an item to open the corresponding issue in a web browser or press Enter.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Forget">
            <summary>
              Looks up a localized string similar to Forget.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Message">
            <summary>
              Looks up a localized string similar to Message:.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Mute_Selected">
            <summary>
              Looks up a localized string similar to &amp;Mute.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Please_Describe">
            <summary>
              Looks up a localized string similar to &amp;Please describe what you were doing when the exception occurred (example: I tried to open a 6-project solution with BizTalk projects):.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Please_Note">
            <summary>
              Looks up a localized string similar to Please note that exceptions are submitted to JetBrains public tracker, which is available publicly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Remove_Selected">
            <summary>
              Looks up a localized string similar to &amp;Remove.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.ExceptionBrowserForm_Submit_Selected">
            <summary>
              Looks up a localized string similar to &amp;Submit.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.JetPopupMenuMainThread">
            <summary>
              Looks up a localized string similar to The popup menu must be used on the UI thread only.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.JetPopupMenuNoItemsBanner">
            <summary>
              Looks up a localized string similar to There are no items to show in this menu.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.MenuAlreadyVisible">
            <summary>
              Looks up a localized string similar to The menu is already visible.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.MenuItemKeyMustBeNonNull">
            <summary>
              Looks up a localized string similar to The menu item key is expected to be non-null.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.NoItemsCaseShouldHaveBeenCutOffEarlier">
            <summary>
              Looks up a localized string similar to The no-items case should have been cut off earlier.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.PendingView_Initialize_Error_Summary">
            <summary>
              Looks up a localized string similar to Summary.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.PendingView_Initialize_When_Happened">
            <summary>
              Looks up a localized string similar to When Happened.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.SubmittedView_Initialize_Issue_Key">
            <summary>
              Looks up a localized string similar to Issue Key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.SubmittedView_Initialize_Result">
            <summary>
              Looks up a localized string similar to Result.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.SubmittedView_Initialize_Submitted">
            <summary>
              Looks up a localized string similar to Submitted.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdAllowDownloadCheckbox">
            <summary>
              Looks up a localized string similar to Download the list of available updates from the Web.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdAllowDownloadComment">
            <summary>
              Looks up a localized string similar to No personally identifiable information is uploaded to the server.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdAreNewPluginVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new plugin versions available.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdAreNewProductVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new {0} versions available.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdDownloadLink">
            <summary>
              Looks up a localized string similar to Download.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdEstimatedPrice">
            <summary>
              Looks up a localized string similar to Estimated price.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdFree">
            <summary>
              Looks up a localized string similar to free.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdIsNewPluginVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new plugin version available.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdIsNewProductVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new {0} version available.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdKindFeatures">
            <summary>
              Looks up a localized string similar to feature release.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdKindGeneric">
            <summary>
              Looks up a localized string similar to update.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdKindPreview">
            <summary>
              Looks up a localized string similar to prerelease build.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdKindService">
            <summary>
              Looks up a localized string similar to service update.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdNoUpdatesAvailable">
            <summary>
              Looks up a localized string similar to There are no updates available.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdNoUpdatesAvailableForProduct">
            <summary>
              Looks up a localized string similar to There are no updates available for {0}.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdPluginUpdates">
            <summary>
              Looks up a localized string similar to Plugin Updates.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdProductUpdates">
            <summary>
              Looks up a localized string similar to {0} Updates.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdReadMoreLink">
            <summary>
              Looks up a localized string similar to Read More.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdThisUpdateInstallsInstalls">
            <summary>
              Looks up a localized string similar to installs.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdThisUpdateInstallsPre">
            <summary>
              Looks up a localized string similar to This.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdUnidentifiedProduct">
            <summary>
              Looks up a localized string similar to Unidentified Product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdUnknownCompany">
            <summary>
              Looks up a localized string similar to Unknown Company.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Res.StringTable.UpdUntitledUpdate">
            <summary>
              Looks up a localized string similar to Untitled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ActivityTrackingNew.PermanentDeviceId.GetUniqueDeviceId">
            <summary>
            Gets permanent unique device Id. The Id is saved in Registry under HKCU\Software\JetBrains\Platform section. <br />
            The Id is used to idendify same user even after ReSharper (or another product) is reinstalled or downgraded.
            Please note that the Id is shared among all JetBrains applications intalled by the user.
            To make it sharable with Idea team it also resides in %appdata%\Roaming\JetBrains\PermanentUserId
            This one is to be used for feature statistics reporting.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ActivityTrackingNew.PermanentUserId.GetUniqueUserId">
            <summary>
            Gets permanent unique user Id. The Id is saved in Registry under HKCU\Software\JetBrains\Platform section. <br />
            The Id is used to idendify same user even after ReSharper (or another product) is reinstalled or downgraded.
            Please note that the Id is shared among all JetBrains applications intalled by the user.
            To make it sharable with Idea team it also resides in %appdata%\Roaming\JetBrains\PermanentUserId
            This Id appears compromised for feature statistics reporting. Use PermanentDeviceId instead.
            </summary>
        </member>
        <member name="T:JetBrains.Application.AdvancedSettingsLayersEditingTrait">
            <summary>
            Takes all <see cref="P:JetBrains.Application.ISettingsApplicationTrait.IsAdvancedSettingsLayersEditingSupported" /> and applies the combining rule.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ApplicationPackagesFiles.FileInPackage.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.ApplicationPackagesFilesEx.GetExtensionsFileSystemPaths(JetBrains.Application.ApplicationPackagesFiles,JetBrains.Util.RelativePath)">
            <summary>
            Returns files from the Extensions sub-folder
            </summary>
            <remarks>
            Extension settings and annotations files must be stored in a per-extension folder under
            "Extensions", e.g. "Extensions\{extensionId}\annotations\" or "Extensions\{extensionId}\settings\".
            This is to prevent name clashes since all packages are extracted to the main install directory.
            (Especially the case for annotations, where the filename is the name of the assembly being
            annotated). 
            </remarks>
            <param name="applicationPackagesFiles">An instance of <see cref="T:JetBrains.Application.ApplicationPackagesFiles"/>.</param>
            <param name="root">The <see cref="T:JetBrains.Util.RelativePath"/> to be returned from the per-extension Extensions folder.</param>
            <returns>An enumerable of all the files under <see cref="!:root"/> in the per-extension Extensions folder.</returns>
        </member>
        <member name="T:JetBrains.Application.IApplicationHost">
            <summary>
            Aggregating interface to access host properties, host product and shortcuts to host folders
            </summary>
        </member>
        <member name="T:JetBrains.Application.IApplicationHostImages">
            <summary>
            Images of end user product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationHostImages.ProductAboutBoxImage">
            <summary>
              <para>AboutBox for the product shows this image. Recommended minimum logical width: <c>200h</c>.</para>
              <para>Usually, it's the same image as the installer Welcome Page banner. So its logical width is 512 device-independent pixels.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationShortcutsTrait.IsOobeChoosingAltKeyboardScheme">
            <summary>
            Set to <c>True</c> to ask user whether he'd like to choose an alternative keyboard scheme during the product OOBE experience.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IExceptionReportingApplicationTrait">
            <summary>
              <para>Allows hosts to override some of the exception processing related features.</para>
              <para>Currently it's only consumed in Shell components, so its impls should be Shell components themselves.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.IExceptionReportingApplicationTrait.OverrideDefaultExceptionReportStrategy">
            <summary>
            Allows to override the exception report strategy for the host. <c>NULL</c> to exempt from selecting the strategy.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IExceptionReportingApplicationTrait.OverrideModeReportExceptions">
            <summary>
              <para>Allows to override the <c>IsModeReportException</c> modifier for a specific host.</para>
              <para>This runtime value takes precedence over the one compiled into the host's package on TC, but only takes effect after Shell is started and its reporter component is activated.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.IHostProductInfo">
            <summary>
            Examples: ReSharperPlatform, DotPeek, InspectCode, etc.
            Implementations are environment components.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ISettingsApplicationTrait.IsAdvancedSettingsLayersEditingSupported">
            <summary>
              <para>Whether advanced layer editing should be available in Options etc.</para>
              <para><c>Null</c> or no handlers means “Yes” (this functionality is activated by default).</para>
              <para>Any <c>False</c> wins over all <c>Null</c>s and means “No”.</para>
              <para>Any <c>True</c> wins over all <c>False</c>s and <c>Null</c>s and means “Yes”.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.ISettingsApplicationTrait.GetLegacySettingsFiles">
            <summary>
            Allows to look for older-version settings in non-standard folders when there are no up-to-date-version settings found and we would like to upgrade from an older version.
            The strings are file path names.
            The versions are versions of the product to which the settings supposedly belong.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IStandaloneApplicationTrait.CommandLineHelpText">
            <summary>
            Set this metadata on <code>IApplicationDescriptor.Bag</code> to enable showing product help on this command line key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IStandaloneApplicationTrait.MainMenuActionID">
            <summary>
            Set this on the application descriptor to the Action ID of the main menu for your application. <c>Null</c> means your application does not have a main menu.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IStandaloneApplicationTrait.MainToolbarActionID">
            <summary>
            Set this on the application descriptor to the Action ID of the main toolbar for your application. <c>Null</c> means your application does not have a main toolbar.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IStandaloneApplicationTrait.SingleInstanceBehavior">
            <summary>
            When an instance of this product is already running, whether to start a new instance or to pass the control to the existing one.
            </summary>
        </member>
        <member name="F:JetBrains.Application.SingleInstanceStandaloneProductBehaviorFlags.None">
            <summary>
            Standard multiple instance application. No single instance behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Application.SingleInstanceStandaloneProductBehaviorFlags.PassCommandLine">
            <summary>
            When an instance of this product is already running, starting the second instance will not create the host but
            will pass the command line to the first instance AS IS instead, and exit.
            </summary>
            <remarks>To watch for the new command line arguments, see the <see cref="P:JetBrains.Application.Hosting.ICommandLine.Parameters" />.</remarks>
        </member>
        <member name="F:JetBrains.Application.SingleInstanceStandaloneProductBehaviorFlags.MakeMainWindowVisible">
            <summary>
            Show the main application window which could be hidden.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductInfoExtensions.PresentableInfoForAboutBox(JetBrains.Application.BuildScript.IProductInfo)">
            <summary>
            Renders the product info in the same way as it's presented in ALL about-like UIs: About Box, VS About Box, VS Options, Exception Info, and so on.
            The first string is the company-name-marketversion part (“bold part”) and the second is the technical version. build date is omitted because it looks ugly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductInfoExtensions.PresentableInfoForAboutBox(JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>
            Renders the product info in the same way as it's presented in ALL about-like UIs: About Box, VS About Box, VS Options, Exception Info, and so on.
            The first string is the company-name-marketversion part (“bold part”) and the second is the technical version, builddate and alike (“faded part”).
            </summary>
        </member>
        <member name="T:JetBrains.Application.ProductInfoExtensions.MasterDetailInfo">
            <remarks>The cheat of using this instead of some <see cref="T:JetBrains.Util.Pair" /> is to have <see cref="M:JetBrains.Application.ProductInfoExtensions.MasterDetailInfo.ToString" /> format it decently by default.</remarks>
        </member>
        <member name="T:JetBrains.Application.Environment.ApplicationIdleEvent">
            <summary>
            Fires periodically during the application idle time. Uses WinForms Application.Idle event.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ApplicationIdleEvent.Idle">
            <summary>
            Fires periodically on the main thread during the application idle time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.IAnyProductSettingsLocation.GetSettingsRelativePath(JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the suffix that forms the <see cref="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.BuildScript.ApplicationHostDetails)"/>, <see cref="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetUserSettingsDir(JetBrains.Application.BuildScript.HostFolderLifetime,JetBrains.Application.BuildScript.ApplicationHostDetails)"/>.
            The template must not include location-specific parts (ie “Software” for registry or “AppData” for folder), as they should be concatenated by consumers.
            There should be no leading or trailing slashes.
            </summary>
            <param name="details"></param>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.IAnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the path to the product's Registry key.
            </summary>
            <param name="detail"></param>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.IAnyProductSettingsLocation.GetUserSettingsDir(JetBrains.Application.BuildScript.HostFolderLifetime,JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the location of the settings folders used by the product (product-specific or not).
            Creates the directory if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.IAnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{System.Tuple{System.String,System.String}})">
            <summary>
            The main implementation method for getting the settings directories for all products, per-product, product-specific, etc.
            </summary>
            <param name="nameProduct">Product short name, if the settings should be per-product. <c>NULL</c> or <c>""</c> for all-product settings location.</param>
            <param name="version">
              <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is specified, produces version-specific product settings.</para>
              <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is not specified, produces versioned all-products settings location.</para>
              <para>If <c>NULL</c>, produces version-invariant location (either all-products or product-specific).</para>
            </param>
            <param name="additionalParameters">
              <para>Allows to further differentiate locations by product or environment flavors, for example Visual Studio hives, as used to be up to R# 5.</para>
              <para>Each pair in the list is the name and the value of the additional parameter. Visual Studio 9.0 specific folder for the main Visual Studio hive has it as <c>("vs", "9.0")</c>.</para>
              <para>A subfolder will be created for every additional parameter, in the exact order as they're given here.</para>
              <para><c>NULL</c> or an empty list means there're no additional parameters.</para>
              <para>In this class, the default value for additional parameters is provided by the "GetSettingsPathSuffixAdditionalParameters" function (overridden by specific environments, like Visual Studio).</para>
            </param>
            <returns>Relative path to the directory (might not exist yet) from <c>%APPDATA%</c>, Registry <c>Software</c> key, etc.</returns>
            <remarks>
            <para>General rules for forming the suffix:</para>
            <para>• Folder with the company name. Always present.</para>
            <para>• Folder for the product, or the special “All Products” folder name (<see cref="F:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.AllProductsFolderName"/>) if getting an all-products location.</para>
            <para>• Folder for the version (as “v”{Major}{Minor}), or the special v∀ string (<see cref="F:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.AnyVersionString"/>) if getting an all-versions location.</para>
            <para>• One folder per each additional parameter (parameter name and value concatenated).</para>
            <para>The overall scheme looks like this: <c>{CompanyName}/{ProductName}/v{Version}[/vs{VsVersion}{VsRootSuffix}]</c>.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.AnyProductSettingsLocation">
            <summary>
            Component for providing environment-defined settings location of products (VS, non-VS, etc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsRelativePath(JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the suffix that forms the <see cref="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.BuildScript.ApplicationHostDetails)"/>, <see cref="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetUserSettingsDir(JetBrains.Application.BuildScript.HostFolderLifetime,JetBrains.Application.BuildScript.ApplicationHostDetails)"/>.
            The template must not include location-specific parts (ie “Software” for registry or “AppData” for folder), as they should be concatenated by consumers.
            There should be no leading or trailing slashes.
            </summary>
            <param name="details"></param>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the path to the product's Registry key.
            </summary>
            <param name="detail"></param>
        </member>
        <member name="F:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.ProductRegistryKeyPrefix_Software">
            <summary>
            Registry prefix which forms the Registry key when combined with the <see cref="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{System.Tuple{System.String,System.String}})"/> suffix.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetUserSettingsDir(JetBrains.Application.BuildScript.HostFolderLifetime,JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the location of the settings folders used by the product (product-specific or not).
            Creates the directory if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{System.Tuple{System.String,System.String}})">
            <summary>
            The main implementation method for getting the settings directories for all products, per-product, product-specific, etc.
            </summary>
            <param name="nameProduct">Product short name, if the settings should be per-product. <c>NULL</c> or <c>""</c> for all-product settings location.</param>
            <param name="version">
              <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is specified, produces version-specific product settings.</para>
              <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is not specified, produces versioned all-products settings location.</para>
              <para>If <c>NULL</c>, produces version-invariant location (either all-products or product-specific).</para>
            </param>
            <param name="additionalParameters">
              <para>Allows to further differentiate locations by product or environment flavors, for example Visual Studio hives, as used to be up to R# 5.</para>
              <para>Each pair in the list is the name and the value of the additional parameter. Visual Studio 9.0 specific folder for the main Visual Studio hive has it as <c>("vs", "9.0")</c>.</para>
              <para>A subfolder will be created for every additional parameter, in the exact order as they're given here.</para>
              <para><c>NULL</c> or an empty list means there're no additional parameters.</para>
              <para>In this class, the default value for additional parameters is provided by the "GetSettingsPathSuffixAdditionalParameters" function (overridden by specific environments, like Visual Studio).</para>
            </param>
            <returns>Relative path to the directory (might not exist yet) from <c>%APPDATA%</c>, Registry <c>Software</c> key, etc.</returns>
            <remarks>
            <para>General rules for forming the suffix:</para>
            <para>• Folder with the company name. Always present.</para>
            <para>• Folder for the product, or the special “All Products” folder name (<see cref="F:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.AllProductsFolderName"/>) if getting an all-products location.</para>
            <para>• Folder for the version (as “v”{Major}{Minor}), or the special v∀ string (<see cref="F:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.AnyVersionString"/>) if getting an all-versions location.</para>
            <para>• One folder per each additional parameter (parameter name and value concatenated).</para>
            <para>The overall scheme looks like this: <c>{CompanyName}/{ProductName}/v{Version}[/vs{VsVersion}{VsRootSuffix}]</c>.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.AllProductsFolderName">
            <summary>
            When making an all-products folder location (e.g. with <see cref="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{System.Tuple{System.String,System.String}})"/>), used in place of the product name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.AnyVersionString">
            <summary>
            Used in place of the version-named folder when getting a version-invariant location (e.g. with <see cref="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{System.Tuple{System.String,System.String}})"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetLegacyUserSettingsRoamingLegacyDirs(System.String)">
            <summary>
            Gets the list of legacy user-settings dirs (coming from previous product version), actually found on the local system, sorted in descending priority order.
            That means something like R# v2.5, which was in use even before platform v5 and compatibles, so it's double-legacy by now.
            The second part of the tuple is the product version of the legacy settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetLegacyUserSettingsXmlPath(JetBrains.Application.IApplicationHost)">
            <summary>
            Full path to the User Settings (<see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/>) XML file we save. Platform v5 and below.
            Overridden in some of the DotTrace subproducts.
            </summary>
            <param name="product"></param>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetLegacyWorkspaceXmlPath(JetBrains.Application.IApplicationHost)">
            <summary>
            Full path to the Workspace Settings (<see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.WorkspaceSettings"/>) XML file we save.
            Overridden in some of the DotTrace subproducts.
            </summary>
            <param name="product"></param>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.AnyProductSettingsLocation.GetInstallDir(JetBrains.Application.IApplicationHost)">
            <summary>
            Gets the directory in which the product assemblies are located.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.InternalModeProductZoneActivator">
            <summary>
            Provides environment config for internal/public modes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.Components.InternalModeProductZoneActivator.OverrideInternalModeOnNextStart">
            <summary>
            If assigned by somebody, explicitly specifies the internal mode for next shell start, regardless of the cmdline.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.ProductSettingsLocation">
            <summary>
            Component for providing environment-defined settings location of products (VS, non-VS, etc).
            Specializes <see cref="T:JetBrains.Application.Environment.Components.AnyProductSettingsLocation"/> with a specific product.
            If you'd like to override the behavior in your product, you should rather override the utility class <see cref="T:JetBrains.Application.Environment.Components.AnyProductSettingsLocation"/>, because it provides impl for this class and some more.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.ProductSettingsLocation.GetUserSettingsNonRoamingDir(JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the full path to the computer-local per-user folder that stores the product settings.
            This folder should be used for storing large or easily-re-generated files, like type index caches.
            </summary>
            <param name="details"></param>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.ProductSettingsLocation.GetUserSettingsRoamingDir(JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the full path to the network-roaming per-user folder that stores the product settings.
            This folder should be used for storing small and non-re-generatable files only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.ProductSettingsLocation.GetProductRegistryKey(JetBrains.Application.BuildScript.ApplicationHostDetails)">
            <summary>
            Gets the path to the product's Registry key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.Components.ProductSettingsLocation.InstallDir">
            <summary>
            Gets the directory in which the product assemblies are located.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.ReportUnhandledExceptions">
            <summary>
            Catches as many unhandled exceptions as possible, reports them, and prevents them from crashing the whole environment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.ReportUnhandledExceptions.SetUnhandledExceptionModeToCatch(System.Boolean)">
            <summary>
            Instructs WinForms to raise Application.ThreadException event instead of letting the exception out, which could lead to a second chance and terminating the application.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.SuspendResume">
            <summary>
            Manages Suspend/Resume functionality for the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.Components.SuspendResume.IsSuspended">
            <summary>
            Gets whether the product is currently in the suspended state.
            If you change the property value, or call one of the appropriate methods on this class, the product will be suspended or resumed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.SuspendResume.Init_CommandLine(JetBrains.Application.Hosting.IProductCommandLine)">
            <summary>
            Applies the command line key values to <see cref="F:JetBrains.Application.Environment.Components.SuspendResume.IsSuspended" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Components.SuspendResume.Init_Registry(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.Components.ProductSettingsLocation)">
            <summary>
            Supports persisting the suspended state in the Registry.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.SuspendResume.CmdLineResume">
            <summary>
            The product gets into the resumed state on startup
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.Components.SuspendResume.CmdLineResume.KeyName">
            <summary>
            Causes the package to start in the resumed stage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.SuspendResume.CmdLineSuspend">
            <summary>
            The product gets into the suspended state on startup.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.Components.SuspendResume.CmdLineSuspend.KeyName">
            <summary>
            Causes the package to start in the suspended stage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.Components.SuspendResumeProductCanBeStarted">
            <summary>
            Allows the product to start only if it's not suspended.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Helpers.ProductConfigurationsEx.GetInternalMode(JetBrains.Application.Environment.RunsProducts.ProductConfigurations)">
            <summary>
            Gets whether Internal mode is present among product configurations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.Helpers.ProductConfigurationsEx.IsInternalMode(JetBrains.Application.Environment.RunsProducts.ProductConfigurations)">
            <summary>
            Gets whether Internal mode is present among product configurations.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ApplicationPackages">
            <summary>
            Caches info on the list of the currently installed application packages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ApplicationPackagesLocallyInstalled">
            <summary>
            Turns <see cref="T:JetBrains.Application.BuildScript.Application.IApplicationPackage" /> known for deployable packages into the runtime <see cref="T:JetBrains.Application.BuildScript.Application.IApplicationPackageLocallyInstalled" /> which also knows where the packages are installed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ApplicationShutdownRequests">
            <summary>
            Handles requests from code to shut down the application.
            If you detect a situation when the app should be shut down, e.g. the main window has been closed, or File|Exit has been invoked, or the automated application has completed its task, call this handler.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownRequested(JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownErrorStatus)">
            <summary>
            Call this method if you would like the standalone application to shut down.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ApplicationShutdownRequests.OnRestartHostProcess(System.Boolean)">
            <summary>
              <para>Called by impl to restart the host process in the host-specific manner, as might be overridden by the environment.</para>
              <para>The base impl tries to replay the command line.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownErrorStatus.Success">
            <summary>
              <para>The Application Shell should be shut down.</para>
              <para>For own hosts (like Standalone Executable apps), the host process would be shut down as well.</para>
              <para>For integration hosts (like Visual Studio), the product will be suspended, but the host process would continue running.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownErrorStatus.Error">
            <summary>
              <para>The Application Shell should be shut down.</para>
              <para>For own hosts (like Standalone Executable apps), the host process would be shut down as well.</para>
              <para>For integration hosts (like Visual Studio), the product will be suspended, but the host process would continue running.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownErrorStatus.RestartApplicationShell">
            <summary>
            The Application Shell would be shut down and restarted without affecting the host process.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownErrorStatus.RestartHostProcessSameIntegrityLevel">
            <summary>
            The host process would be shut down and run again with the (possibly) same settings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownErrorStatus.RestartHostProcessElevated">
            <summary>
            The host process would be shut down and attempted to run again with high integrity level (“elevated”).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ApplicationShutdownRequests.ShutdownErrorStatus.LicenseAgreement">
            <summary>
            Any of the legal documents is not accepted by user or any of the policies is not satisfied.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ApplicationStartupTraceHelpers.TraceCatalogSet(JetBrains.Application.Catalogs.IPartCatalogSet,System.String,System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            All assemblies and types which pass the filter in the current catalog set.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.AdditionalDeployedPackages">
            <summary>
            Allows to specify additional Deployed Packages for running with a product, in addition to what's been installed with the host.
            For example, a plugin.
            This class carries the possible data, serializes it back and forth, and can read it from certain sources.
            The XML text serialization (e.g. used for <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.EnvironmentVariableNamePrefix" /> value) is performed by <see cref="M:JetBrains.Application.Environment.AdditionalDeployedPackages.ToString" /> / <see cref="M:JetBrains.Application.Environment.AdditionalDeployedPackages.Parse(System.String)" /> methods. The spec is on the <see cref="T:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.EnvironmentVariableNamePrefix">
            <summary>
              <para>Base name for environment variables in which the additional packages are assigned.</para>
              <para>The full name MIGHT have a process-specific suffix, like <c>_PID_DEADBEEF</c>, where <c>DEADBEEF</c> stands for the hex process id DWORD, which means that this variable is only intended for the process with such process ID.</para>
              <para>If the environment variable name has no PID specified, then it is suitable for any process.</para>
            </summary>
            <remarks>
              <para>Allows to specify additional packages for a child process through the environment variables, which has no problems with escaping and little problems with length limit.</para>
              <para>A variable name without the PID in it works good enough, except for one case when another JetBrains product is spawned from the process which has been given the environment variable. As the env values are derived by child processes, that new process would attempt to load packages which were not intended for it but only for its parent.</para>
              <para>When <seealso cref="T:JetBrains.Application.Environment.AdditionalDeployedPackages" /> reads this property, it renames it to include the PID of the current process, which prevents child processes from inheriting the value. As you do not know the PID of the child process when setting this variable, you're expected to set the variable without the PID initially.</para>
              <para>If both bare and PID-specific properties are set, the bare has priority, and is renamed into PID-specific anyway.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.AdditionalFolders">
            <summary>
            Lists additional folders which should be scanned the same way as the main installdir of the product.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.AdditionalDeployedPackages.TryReadFromEnvironmentVariable">
            <summary>
            Implements the logic for reading env var value and moving the env var to PID-specific to hide from child processes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage">
            <summary>
              <para>Allows to create an application package from ad-hoc metadata and files, without a Nuget package or a <c>JetMetadata</c> file actually present on disk. All assembly files which should end up in the application Part Catalog (for creating the components) MUST be listed as <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.PackageFile" /> child elements.</para>
              <para>This is the serialization info class for reading the additional packages data. Its goal is to parse and roundtrip, it does not do coersions and runtime validations yet. <see cref="M:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage.CreateApplicationPackageObject" /> does the final validation and creates the application package.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage.#ctor(JetBrains.Util.FileSystemPath,JetBrains.Application.BuildScript.Solution.SubplatformName,JetBrains.Util.JetSemanticVersion,System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Collections.Generic.ICollection{JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage.AdHocPackageFile})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage.CreateApplicationPackageObject">
            <summary>
            Does the final runtime validation (that the files do exist on disk etc), reads the delay-read assembly names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage.ToString">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage.AdHocPackageFile.AssemblyName">
            <seealso cref="P:JetBrains.Application.BuildScript.Application.ApplicationPackageFile.AssemblyName" />
            <summary>Boxed assembly name => assembly name; boxed null => read ad-hoc assembly name from file, must be a .net assembly; null box object => assembly name not expected.</summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage.AdHocPackageFile.RelativePath">
            <seealso cref="P:JetBrains.Application.BuildScript.Application.ApplicationPackageFile.LocalInstallPath" />
        </member>
        <member name="T:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema">
            <summary>
              <para>Defines the schema for the environment variable XML content (see <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.EnvironmentVariableNamePrefix" /> for possible env var names).</para>
              <para>Only local names of the elements are considered, namespaces are ignored, an empty one is used by default.</para>
              <para>The root element is the <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Root" />, and it might have one level of children in any order: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Folder" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.File" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Download" />.</para>
            </summary>
            <example>
              <code>
            <![CDATA[
             <Packages><Folder Path="C:\MorePlugins"/></Packages>
            ]]>
            </code>
            </example>
            <example>
              <code>
            <![CDATA[
            <Packages>
                <!-- Folder with already expanded packages (with JetMetadata files) -->
                <Folder Path="C:\Plugins" />
                <Folder Path="D:\Plugins" />
                <!-- Nuget packages to expand when loading (JetMetadata either contained inside, or will be emitted based on nuget data) -->
                <File Path="C:\temp\My.Plugin.1.0.0.0.nupkg" />
                <File Path="D:\temp\Another.Plugin.1.2.3.4-pre.nupkg" />
                <!-- Nuget packages to be downloaded from nuget.org and then same as with a local nuget. -->
                <Download Id="Plugin.Id" Version="1.2.0.0" />
                <Download Id="Another.Id" Version="6.6.6.0" />
            </Packages>
            ]]>
            </code>
            </example>
            <example>
              <code>
            <![CDATA[
            <Packages>
              <!-- A folder with only plugin DLLs and no pre-existing JetMetadata. This data has enough information to emit JetMetadata for the package on the fly. -->
              <AdHocMetadata 
                BaseDir="C:\MyCustomPlugins\SmartCodeSensePlugin" 
                Version="1.2.3.4-pre" 
                BuiltOn="2017-07-13T10:58:16.0000000" 
                CompanyNameLegal="Acme Inc" 
                CompanyNameHuman="Acme" 
                SubplatformName="SmartCodeSensePlugin\Common"
              >
              <PackageFile 
                RelativePath="MainManagedAssembly.dll" 
                AssemblyName="MainManagedAssembly, Version=1.0.0.0" 
              />
              <PackageFile 
                RelativePath="SecondaryManagedAssembly.dll" 
                AssemblyName="*" 
              />
              </AdHocMetadata>    
            </Packages>
            ]]>
            </code>
            </example>
            <remarks>
              <para>Format choice rationale: </para>
              <para>We need to set the basic formatting rules for splitting multiple items on the list and item fields like id/version, as well as escaping for the items text.</para>
              <para>Choosing a well-known and well-supported format defines these rules clearly and enables the use of standard tooling for a reliable result.</para>
              <para>Well-tooled formats would be XML and JSON, but JSON requires escaping for the backslash which is expected to be a common char in paths, while XML does not touch the most commonly used path chars. Manual input is still possible, but the environment variable is mostly expected to be produced programmatically.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.AssemblyName">
            <summary>
              <para>For a package file (in <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.PackageFile" />):</para>
              <para>— An empty string <c>""</c> or no attibute: means this is not an assembly file but a content file. Would not be included with the application Part Catalog, even if a managed assembly.</para>
              <para>— A valid full name of a .NET assembly, including at least the simple name (MUST match the file name without the extension) and version. The assembly would be added to the Part Catalog, and its classes created as components.</para>
              <para>— A star, <c>"*"</c>: a shortcut for the above, means that you do not know the version (and the simple name matches the file name). The file would be treated as an assembly.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BaseDir">
            <summary>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: the base directory of the ad-hoc application package, corresponds to the <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackageLocallyInstalled.LocalInstallDirectory" />. All <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.PackageFile" /> paths are relative to this directory. The path must be an absolute file system path and comply with parsing by <see cref="T:JetBrains.Util.FileSystemPath" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BestBefore">
            <summary>
              <para>Optional.</para>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: makes <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BestBefore" />.</para>
              <para>Should be serialized in ISO-8601.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BirthDate">
            <summary>
              <para>Optional.</para>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: makes <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BirthDate" />.</para>
              <para>Should be serialized in ISO-8601.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BuiltOn">
            <summary>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: makes <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.BuiltOn" />.</para>
              <para>Should be serialized in ISO-8601.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.CompanyNameHuman">
            <summary>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: makes <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.CompanyNameHuman" />.</para>
              <para>At least one of the company names MUST be set.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.CompanyNameLegal">
            <summary>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: makes <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.CompanyNameLegal" />.</para>
              <para>At least one of the company names MUST be set.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Id">
            <summary>
            ID of the package to be retrieved from the Nuget server.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Path">
            <summary>
            Attribute for the local file/directory paths in the <see cref="T:JetBrains.Util.FileSystemPath" />-friendly format.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.RelativePath">
            <summary>
            The relative path of the item, relatively to the base directory. Must comply with <see cref="T:JetBrains.Util.RelativePath" /> string parser. Generally, that's just a path with forward or backward slashes and no escaping (except for what XML does of course).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.SubplatformName">
            <summary>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: makes <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.SubplatformName" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Version">
            <summary>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Download" /> element: the exact version of the package to be retrieved from the Nuget server, prerelease versions are allowed.</para>
              <para>In <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" /> element: the semantic version for the application package. Must comply with <see cref="T:JetBrains.Util.JetSemanticVersion" /> parsing. Makes <see cref="P:JetBrains.Application.BuildScript.Application.IApplicationPackage.Version" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata">
            <summary>
              <para>First-level child. Allows to create an application package from ad-hoc metadata and files, without a Nuget package or a <c>JetMetadata</c> file actually present on disk. All assembly files which should end up in the application Part Catalog (for creating the components) MUST be listed as <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.PackageFile" /> child elements.</para>
              <para>Parent: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Root" />.</para>
              <para>Child elements: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.PackageFile" />.</para>
              <para>Attributes: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BaseDir" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Version" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BestBefore" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BirthDate" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.BuiltOn" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.CompanyNameHuman" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.CompanyNameLegal" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.SubplatformName" />.
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Download">
            <summary>
              <para>First-level child. Downloads a Nuget package from the Nuget server sources registered for this machine. The package exact identity is given by <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Id" /> and <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Version" />. The package would be retrieved, expanded to a shadow directory, and its expansion location scanned for files the same way as the main installdir.</para>
              <para>Parent: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Root" />.</para>
              <para>Child elements: none.</para>
              <para>Attributes: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Id" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Version" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.File">
            <summary>
              <para>First-level child. Reads the Nuget package file on the local filesystem at <see cref="T:System.IO.Path" />. The package would be expanded to a shadow directory, and its expansion location scanned for files the same way as the main installdir.</para>
              <para>Parent: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Root" />.</para>
              <para>Child elements: none.</para>
              <para>Attributes: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Path" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Folder">
            <summary>
              <para>First-level child. Scans the local filesystem folder at <see cref="T:System.IO.Path" /> the same way as the main installdir.</para>
              <para>Special handling: if installdir is given again as a <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Folder" />, it will not be added as a duplicate and scanned for the second time. This allows to describe the whole layout in additional packages without specifically excluding the directory with an entry point.</para>
              <para>Parent: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Root" />.</para>
              <para>Child elements: none.</para>
              <para>Attributes: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.Path" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.PackageFile">
            <summary>
              <para>Lists a package file for <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" />.</para>
              <para>Parent: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" />.</para>
              <para>Child elements: none.</para>
              <para>Attributes: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.RelativePath" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.AttributeName.AssemblyName" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Root">
            <summary>
              <para>Local name of the root element. As with all element names, they are matched by the local name, and the namespace is ignored.</para>
              <para>Parent: none.</para>
              <para>Child elements: <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.File" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Folder" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.Download" />, <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.Schema.ElementLocalName.AdHocMetadata" />.</para>
              <para>Attributes: none.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackages">
            <summary>
            For any folder into which a packages-based app is deployed, can cache the info which is normally extracted from the packages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackages.LoadWithCaching(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.DeployedPackagesIdentity,System.Lazy{JetBrains.Application.Threading.Tasks.ITaskHost})">
            <summary>
            Loads the set of deployed packages as given in the <paramref name="identity" />, which is the discovery result over some bindir or elsewhere.
            Tries to read the data from the fast cache if available.
            </summary>
            <param name="lifetime"></param>
            <param name="identity">Identifies the bindir, plus possibly some filtered view on it.</param>
            <param name="taskerForNugets"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackages.EFlags.DontCache">
            <summary>
            This flag prevents writing the loaded packages set to the cache.
            For example, if there were errors loading the packages this helps to avoid the situation when an incomplete packages set would be reused even after fixing the error condition.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesCache">
            <summary>
            Caches the information obtained by the <see cref="T:JetBrains.Application.Environment.DeployedPackagesLoader" /> so that to quickly retrieve <see cref="T:JetBrains.Application.Environment.DeployedPackages" /> for starting up the host without scanning thru their files.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.DeployedPackagesCache.GetCacheDirectory">
            <summary>
            The place for this data.
            It's complicated to get the host name at this point, so just bind to the wave.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesCache.LoadCache(JetBrains.Lifetimes.Lifetime,System.Byte*,JetBrains.Application.Environment.DeployedPackagesIdentity,JetBrains.Util.OnError)">
            <summary>
            Loads the cache from the memory dump.
            Validates what it can (e.g. header and bindir path match).
            </summary>
            <param name="lifeFile"></param>
            <param name="pBuffer"></param>
            <param name="identity">Validates that the memory dump has been created with this same bindir.</param>
            <param name="onerror">Defines the throw/canbenull behavior.</param>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesCache.LoadWithCaching(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.DeployedPackagesIdentity,System.Lazy{JetBrains.Application.Threading.Tasks.ITaskHost})">
            <summary>
            Tries to load the cached data for the specific bindir.
            </summary>
            <param name="lifetime"></param>
            <param name="identity">Identifies the bindir, plus possibly some filtered view on it.</param>
            <param name="taskerForNugets"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesCache.TryLoadCacheFile(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.DeployedPackagesIdentity,JetBrains.Util.OnError)">
            <summary>
            Tries to load the new cache file for the <paramref name="identity" />, from its location in Local App Data given by its <paramref name="identity" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesCache.WriteCache(JetBrains.Application.Environment.DeployedPackagesIdentity,JetBrains.Application.Environment.DeployedPackages,System.IO.Stream)">
            <summary>
            Makes new cache file content off the <paramref name="packages" />, also writes there the <paramref name="identity" /> to check when loading.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesCache.WriteCacheFile(JetBrains.Application.Environment.DeployedPackagesIdentity,JetBrains.Application.Environment.DeployedPackages)">
            <summary>
            Writes the new cache file for the Product Binaries Dir of <paramref name="identity" />, to its location in Local App Data given by its <paramref name="identity" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesCache.EnsureAlignment(System.IO.Stream,System.Byte)">
            <summary>
            Makes sure that the end of stream (= next write) is aligned by a multiple of the given number of bytes.
            Useful for reading UTF-16 strings in the binary file (they must be aligned by WORD).
            Even more useful if you're about to map the file into memory, then many functions like to have their pointers WORD or DWORD aligned. Or reading unaligned structs might come out deadly slow.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesCache.CacheHeader.Signature">
            <summary>
            Format marker.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesCache.CacheHeader.PartCatalogTables">
            <summary>
            RVA to the catalog tables. TODO: Format.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesCache.CacheHeader.PackageTimeComponents">
            <summary>
            RVA to the serialized build-time components (all such collected from all the packages).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesCache.CacheHeader.Identity">
            <summary>
            RVA to the identity of the deployed packages set cached in this instance. Format: a serialized version of <see cref="T:JetBrains.Application.Environment.DeployedPackagesIdentity" />.
            This is to validate that we're not colliding over the same hash.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesCacheIdentityEx.WithSubplatformPassFilter(JetBrains.Application.Environment.DeployedPackagesIdentity,JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
              <para>Filters subplatforms (=packages) whose DLLs are considered for caching and cataloging in this folder.</para>
              <para><c>NULL</c> means take em all.</para>
              <para>A specific value means that only the package which has this DLL and all of its referenced packages (transitively) should be taken.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesDiscovery">
            <summary>
            Discovers the set of available Deployable Packages, e.g. the ones in the installdir, per-session supplied additional packages coming from plugins, and so on.
            Gives the set of what should be running.
            Produces the <see cref="T:JetBrains.Application.Environment.DeployedPackagesIdentity" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesDiscovery.CreateFromFolder(JetBrains.Util.FileSystemPath,JetBrains.Application.Environment.DeployedPackagesDiscovery.DiscoveryFlags)">
            <summary>
            Discovers packages, using an installdir (ProductBinariesDir as installer output or a local build output) as the main source.
            </summary>
            <param name="bindir">An installdir (ProductBinariesDir as installer output or a local build output) as the main source.</param>
            <param name="discoflags">Additional options and sources.</param>
            <returns>The identity, which also serves as a file list for the host to load into the container.</returns>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesDiscovery.DiscoveryFlags.ReadEnvironmentVariable">
            <summary>
            Reads the environment variable (see <see cref="F:JetBrains.Application.Environment.AdditionalDeployedPackages.EnvironmentVariableNamePrefix" /> for possible names) to add more package sources.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesDiscovery.DiscoveryFlags.AutoExpandNupkg">
            <summary>
            If a nuget package is encountered in any source, it would be expanded and loaded automatically.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesDiscovery.DiscoveryFlags.AutoRetrieveNupkg">
            <summary>
            If a nuget package is specified by its ID and Version, it would be retrieved and expanded and loaded automatically.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesExpandLocationResolver">
            <summary>
              <para>Keeps track of specific locations where deployed packages have been discovered.</para>
              <para>For instance, this implementation gets created by <see cref="T:JetBrains.Application.Environment.DeployedPackagesLoader" /> and submitted to the cached host components to make specific per-package-origin resolve available for them. That's the main way of getting this available at Shell runtime.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesExpandLocationResolver.myMapPackageIdToDirectory">
            <summary>
            Keeps paths as strings so that to avoid parsing at load-time — delays till it's used.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesExpandLocationResolverTrivial">
            <summary>
            Assumes all are in the same directory.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesIdentity">
            <summary>
            Incapsulates calculating the identity for <see cref="T:JetBrains.Application.Environment.DeployedPackages" />. An identity uniquely describes the discovered set of packages, per folder, their set, and their content. Any packages related data could be cached keyed with this identity.
            This allows to tell cache files for different contexts from one another, and also to check if the cache is still up-to-date, or should rather be recalculated.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Revision">
            <summary>
            Change when caching formats changes globally.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folders">
            <summary>
            LWTime of the folders which took part in collecting the stuff. Modified folder lwtime might mean that some items could have been added to the folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.MinimalPackageSetFilter">
            <summary>
              <para>Filters subplatforms (=packages) whose DLLs are considered for caching and cataloging in this folder.</para>
              <para><c>NULL</c> means take em all.</para>
              <para>A specific value means that only the package which has this DLL and all of its referenced packages (transitively) should be taken.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.RetrievedNugets">
            <summary>
            Nuget packages which have been added by giving the package ID and version, and are to be retrieved by the loader.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.AssertReferencedPackagesOnlyFor">
            <summary>
            Assert when referenced packages are missed for these runtimes only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesIdentity.CalculateIdentityHash">
            <summary>
            A hash to be used as the cache storage key.
            As with a regular hashtable, the full identity should be checked after looking up by hash, but it's not expected to clash any often.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesIdentity.WriteIdentity(JetBrains.Serialization.UnsafeWriter.Cookie)">
            <summary>
            Writes out the identity data into a BLOB.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesIdentity.FileIdentity">
            <summary>
            Identity-significant attributes of a file: full path, timestamp (UTC last-write-time), and the byte size.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder">
            <summary>
            Data on each folder scanned for discovery.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.InMemoryJetMetadata">
            <summary>
            Package metadata — runtime-only metadata which does not exist on disk but has been added e.g. as <see cref="T:JetBrains.Application.Environment.AdditionalDeployedPackages.AdHocPackage" /> items.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.LocalNugets">
            <summary>
            Nuget packages which were discovered in the scanned folders in the package file form (were not pre-expanded).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.PreExpandedJetMetadataFiles">
            <summary>
            Files with package metadata — those which are in the already-expanded form in the folders. Files from nugets expanded by the loader are not listed here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.PreExtractedModuleFiles">
            <summary>
            Lists all of the module (dll/exe) files in the folder.
            Used to derive the identity from their timestamps.
            Files from nugets expanded by the loader are not listed here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.InMemoryMetadata.ApplicationPackage">
            <summary>
            The package object (must be present in the <see cref="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.InMemoryMetadata.Storage" />).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.InMemoryMetadata.Storage">
            <summary>
            The storage with metadata, including <see cref="F:JetBrains.Application.Environment.DeployedPackagesIdentity.Folder.InMemoryMetadata.ApplicationPackage" />, the cached part catalog, and any other components.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesLoader">
            <summary>
            In-depth loader of the Deployable Packages info needed for runtime.
            Uses the basic info fetched by <see cref="T:JetBrains.Application.Environment.DeployedPackagesDiscovery" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesLoader.Load(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.DeployedPackagesIdentity,System.Lazy{JetBrains.Application.Threading.Tasks.ITaskHost},JetBrains.Application.Environment.DeployedPackagesLoader.Diagnostyx)">
            <summary>
            Loads the data, no caching.
            </summary>
            <param name="lifetime">Lifetime of the data structures in the object returned.</param>
            <param name="identity">What's been discovered for loading.</param>
            <param name="taskerForNugets"></param>
            <param name="diag">Optional diag.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesLoader.CollectPackageComponents(System.Collections.Generic.ICollection{JetBrains.Application.Environment.DeployedPackagesLoader.LoadedMetadataFile},JetBrains.Build.Serialization.SerializedValuesResolver,JetBrains.Application.Environment.DeployedPackages.EFlags@)">
            <summary>
            Package components from all the packages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesLoader.CreateAdHocCatalogForUncatalogedAssemblies(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.ICollection{JetBrains.Metadata.Utils.AssemblyNameInfo},JetBrains.Application.Environment.DeployedPackagesMasterBinderData,System.Collections.Generic.ICollection{JetBrains.Application.Table.CatalogTables})">
            <summary>
            Assemblies which ain't got precalculated catalogs in their packages' metadata (or if they've been modified since) get cataloged here.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesLoader.CreateExpandLocationResolver(System.Collections.Generic.ICollection{JetBrains.Application.Environment.DeployedPackagesLoader.LoadedMetadataFile},JetBrains.Application.Environment.DeployedPackages.EFlags@)">
            <summary>
            Tracks locations of expanded packages for lookup at runtime.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesLoader.CreateMasterBinderData(System.Collections.Generic.ICollection{JetBrains.Application.Environment.DeployedPackagesLoader.LoadedMetadataFile},JetBrains.Application.Environment.DeployedPackages.EFlags@)">
            <summary>
            Assemblies which should be loaded, and which might not be present.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesLoader.Diagnostyx">
            <summary>
            Optional object for testing and diagnosing this instance.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesLoader.Diagnostyx.AutoexpandedPackages">
            <summary>
            Empty on input, collects info on nugets autoexpanded during the loader run.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesMasterBinderData">
            <summary>
            When deployed packages are
            <see cref="T:JetBrains.Application.Environment.DeployedPackages" />-cached data for disk-based master assembly binder, such as where it should be able to resolve assemblies from, and which assemblies are OK to be skipped.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesMasterBinderData.PossiblyUnresolvableAssemblies">
            <summary>
            These assemblies are OK to be missing at runtime (e.g. when walking the catalog).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesMasterBinderData.ResolvableAssemblyFiles">
            <summary>
            The binder should use this list to bind assemblies to backing disk files.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand">
            <summary>
            If a Nuget package is given as an input for loading Deployed Packages, it requires to be expanded into the local files before being loaded.
            This class does the expansion.
            TODO: expiration and autocleanup, probably means tracking the use
            TODO: self-validation that the data has not been corrupted
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand.ExpandNugetPackages(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IReadOnlyList{JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand.NugetAutoexpandable},JetBrains.Util.FileSystemPath,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.OnError)">
            <summary>
            Expands packages onto disk, each one into a separate folder, but otherwise the same way as the installation would do (except that the installation originally writes them to the single folder).
            </summary>
            <param name="packages">The set of packages to expand in parallel.</param>
            <param name="dirBaseExpansionFolderOverride">Optional. Allows to override the standard expansion location with a custom one, e.g. for isolation.</param>
            <param name="onerror">Handles errors.</param>
            <param name="lifetime"></param>
            <param name="tasker"></param>
        </member>
        <member name="T:JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand.NugetAutoexpandable">
            <summary>
            Full package with additional metadata, for autoexpanding.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand.NugetAutoexpandable.AdditionalIdentity">
            <summary>
            Optional. Additional identity of the package. It's been observed that some build chains are violating the rule that the nuget id should be unique per its content, so getting the same file-based package might not mean that we could share it with another of the same ID. In this case other properties of the disk-based file provide the extended identity here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand.NugetAutoexpandable.Package">
            <summary>
            The pkg with content, also gives the pkg id.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.DeployedPackagesNugetAutoexpand.NugetAutoexpandable.GetExpandDirName">
            <summary>
            Name for the expand dir, considering the additional identity, if available.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver">
            <summary>
              <para>Gets the deployment directory of a package by its identity.</para>
              <para>For instance, the implementation of <see cref="T:JetBrains.Application.Environment.DeployedPackagesExpandLocationResolver" /> gets created by <see cref="T:JetBrains.Application.Environment.DeployedPackagesLoader" /> and submitted to the cached host components to make specific per-package-origin resolve available for them. That's the main way of getting this available at Shell runtime.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.IDeployedPackagesExpandLocationResolver.GetDeployedPackageDirectory(JetBrains.Application.BuildScript.Application.IApplicationPackage)">
            <summary>
            Gets the deployment directory of a package by its identity.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.EnvironmentPartCatalogSet">
            <summary>
            Holds the product's pre-Shell <see cref="T:JetBrains.Application.Catalogs.PartCatalogSet" /> for running the Environment, already filtered down with Environment zones.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.EnvironmentPartCatalogSet.#ctor(JetBrains.Application.Catalogs.PartCatalog@)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Environment.EnvironmentPartCatalogSet.Catalog">
            <inheritdoc cref="P:JetBrains.Application.Catalogs.IPartCatalogSet.Catalog" />
        </member>
        <member name="P:JetBrains.Application.Environment.EnvironmentZones.AllZoneParts">
            <summary>
            All zone parts in part catalogue
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.EnvironmentZones.ZoneToSuccessorsMap">
            <summary>
            All immediate successors in zones graph
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.EnvironmentZones.ZoneToPredecessorsMap">
            <summary>
            All immediate predecessors in zones graph
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.EnvironmentZones.ZoneToInheritorsMap">
            <summary>
            immediate successors in zones graph which are derived type (not IReguire)
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.EnvironmentZones.TraceZonePartsNegative(System.String,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.BuildScript.Application.Zones.ZonePart})">
            <summary>
            Call when trace is enabled, tracks how negative zones are propagated.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.EnvironmentZonesExtra.TryGetProductInfo(JetBrains.Application.BuildScript.Application.Zones.ZonePart)">
            <summary>
            Gets the attr of type <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionProductAttribute" /> on the zone, if it got one.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.EnvironmentZonesExtra.FeatureInfo">
            <summary>
            Gets feature info for a module zone, extracts from the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionConfigurableFeatureAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.EnvironmentZonesExtra.ProductInfo">
            <summary>
            Gets feature info for a module zone, extracts from the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZoneDefinitionProductAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.FullPartCatalogSet">
            <summary>
            Holds the outermost catalog set for the <see cref="T:JetBrains.Application.Environment.JetEnvironment" /> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.FullPartCatalogSet.#ctor(JetBrains.Application.Catalogs.PartCatalog@)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Environment.FullPartCatalogSet.Catalog">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Environment.FullPartCatalogSet.CreateFromDiskFilesAndInstallResolver(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.ICollection{JetBrains.Metadata.Utils.AssemblyNameAndLocation},System.Collections.Generic.ICollection{JetBrains.Metadata.Utils.AssemblyNameAndLocation})">
            <summary>
            </summary>
            <param name="lifetime"></param>
            <param name="allassemblies">
              <para>Lists all of the product assemblies registered with this host.</para>
              <para>This generally includes all installed JB products and all static plugins.</para>
              <para>The <see cref="T:JetBrains.Application.Environment.FullPartCatalogSet" /> will be initially created on these, and other catalogsets will be a filtered-down subset of these assemblies.</para>
              <para>Lightweight plugins might be loaded dynamically and added to the part catalog set later, but major plugins go in this pack already.</para>
            </param>
            <param name="extras"></param>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatHostMixin">
            <summary>
              <para>Runs on a set of product packages as discovered in the actual Product Binaries Dir, extracted there in a flat manner.</para>
              <para>Applies appropriate caching for per-package components and the common part catalog.</para>
              <para>Starting with wave04, this is expected to be the main way of running the shell.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatHostMixin.myDeployedPackages">
            <summary>
            Lazy-inited when we're asked for the env part catalog.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatHostMixin.#ctor(System.Lazy{JetBrains.Application.BuildScript.ProductBinariesDirArtifact},System.Reflection.Assembly)">
            <summary>
            </summary>
            <param name="productBinariesDirArtifact">The dir with extracted packages. Lazy, to ensure any exceptions in getting it are trapped.</param>
            <param name="minimalPackageSetFilter">
              <para>Filters subplatforms (=packages) whose DLLs are considered for caching and cataloging in this folder.</para>
              <para><c>NULL</c> means take em all.</para>
              <para>A specific value means that only the package which has this DLL and all of its referenced packages (transitively) should be taken.</para>
            </param>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatNoCachingHostMixin">
            <summary>
            When there's no serialized info to run the build, but we have a set of locally-installed packages unpacked into a folder, collects the info on such packages for the app to run on these assemblies.
            Alternatively, the serialized info is submitted with <see cref="T:JetBrains.Application.Environment.HostParameters.SerializedComponentsIntoEnvironmentContainerHostMixin" /> directly as component implementations.
            This is the legacy no-caching version which builds the part catalog each time over the set of files available, and does not support AdditionalDeployedPackages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatNoCachingHostMixin.#ctor(System.Lazy{JetBrains.Application.BuildScript.ProductBinariesDirArtifact},System.Func{JetBrains.Application.BuildScript.Solution.AllAssemblies,System.Collections.Generic.IList{JetBrains.Application.BuildScript.Solution.Subplatform}},System.Func{JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackages,JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackages})">
            <summary>
            </summary>
            <param name="productBinariesDirArtifact">The dir with extracted packages.</param>
            <param name="λFilter">Allows to run on a subset of the total set of packages located in the folder.</param>
            <param name="allAssembliesProcessor">Allows to modify set of packages found in the folder</param>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.ConsoleLoggerMixin.PushToLogger(JetBrains.Util.ILogEventListener,JetBrains.Diagnostics.LoggingLevel,JetBrains.Util.Logging.IFilter[])">
            <summary>
            Adds self to the logger, removes when this object is disposed of.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.CustomComponentHostMixin">
            <summary>
            Adds custom object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.CustomComponentHostMixin.#ctor(System.Func{System.Object})">
            <summary>
            Adds a custom component to the host.
            Takes a functor instead of an object to discourage from executing code when writing the host chain, which usually has no loggers/reporters to handle the exception yet.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.DefaultApplicationHostMixin">
            <summary>
            Fills the default product info components, as required for running the application.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.HostParameters.EnvironmentZoneHostMixin.ZoneAsPart">
            <summary>
            Gets the zone as <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZonePart" /> type, if it's already available at creating the object.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.HostParameters.EnvironmentZoneHostMixin.ZoneAsRuntimeType">
            <summary>
            Gets the zone as a runtime type. The <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZonePart" /> will be created when this mixin is queried for the value because at that point the catalog set is available, and it's possible to look up the zone's PCType in a more efficient way.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.FullPartCatalogFromSerializedComponentsHostMixin">
            <summary>
            Makes a catalog based on app packages, as extracted from the SerializedValuesResolver which is embedded into the entry point.
            LEGACY: now we won't embed information on packages, just the Host Info and Environment Zone. The packages are collected  AD HOC based on the startup dir. This best fits with in-package EXEs, standalone tools, and ability to xcopy new plugins.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.GuardAssertHostMixin">
            <summary>
            Asserts that the environment is started and stopped in a guarded context.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.HostInfoHostMixin">
            <summary>
            Injects HostInfo into the component container.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.HostInfoFromSerializedComponents">
            <summary>
            Extracts HostInfo from the SerializedValuesResolver. Applies fallbacks.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.HostInfoFromSerializedComponentsWithRootSuffixFromBinDir">
            <summary>
            Extracts HostInfo from the SerializedValuesResolver, tries to read the RootSuffix from the bindir.
            Standalone applications have no RootSuffix in their serialized HostInfo, and that's the only way to get RootSuffix.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.InitExceptionReporterOnSerializedComponentsHostMixin.ShellLessExceptionReporting__CreateDeadEnd">
            <summary>
            Does not show exceptions to the user.
            Used in Production Mode when we shouldn't be showing the exceptions to the user.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.InitLoggerHostMixin.#ctor">
            <summary>
            Inits just to some logger.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.InitLoggerHostMixin.LogInitialEnvironment">
            <summary>
            Any introductory logging about the current host.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.MakeAdHockProductPackageOnScatteredFilesHostMixin">
            <summary>
            When there's no serialized info to run the build, and we have not created packages to be extracted into the BIN folder (like we do for running tests), tries to make up a mock package for running the app from whatever DLLs can be located in the folder.
            This is a fallback scenario, use <see cref="T:JetBrains.Application.Environment.HostParameters.SerializedComponentsIntoEnvironmentContainerHostMixin" /> or <see cref="T:JetBrains.Application.Environment.HostParameters.CollectProductPackagesInDirectoryFlatHostMixin" /> whenever possible to run off the real packages.
            This scenario is to be used when you can't run the Local Register phase of the build (for example, when debugging the build itself;).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.MakeAdHockProductPackageOnScatteredFilesHostMixin.#ctor(JetBrains.Application.BuildScript.ProductBinariesDirArtifact,System.Predicate{JetBrains.Util.RelativePath})">
            <summary>
            </summary>
            <param name="productBinariesDirArtifact">The dir with scattered DLL and content files. Leave NULL to use the home directory of the currently-executing assembly (assuming others are by its side).</param>
            <param name="λFilter">Allows to run on a subset of the total set of files located in the folder. The default filter limits files to immediate children of the folder only.</param>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.MakeAdHockProductPackageOnScatteredFilesHostMixin.CollectScatteredDllFilesIntoApplicationPackage(JetBrains.Application.BuildScript.ProductBinariesDirArtifact,System.Predicate{JetBrains.Util.RelativePath})">
            <param name="productBinariesDirArtifact">The dir with scattered DLL and content files. Leave NULL to use the home directory of the currently-executing assembly (assuming others are by its side).</param>
            <param name="λFilter">Allows to run on a subset of the total set of files located in the folder. The default filter limits files to immediate children of the folder only.</param>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.MessagePumpMainLoopHostMixin">
            <summary>
            Runs message pump for the main product's message loop.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.SerializedComponentsIntoEnvironmentContainerHostMixin">
            <summary>
            Exposes all serialized components to the runtime.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.StdOutGreetingHostMixin">
            <summary>
            Writes text to StdOut on app startup. Useful for console apps.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.StdOutGreetingHostMixin.#ctor(System.String,JetBrains.Application.Environment.HostParameters.HostInitLevels)">
            <summary>
            Pre-factored text. Use another overload if you got any code which might cause exceptions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.StdOutGreetingHostMixin.#ctor(System.Func{System.String},JetBrains.Application.Environment.HostParameters.HostInitLevels)">
            <summary>
            Defer-calculates the text. This allows for catching any possible exceptions in string building.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.WindowsApplicationHost">
            <summary>
            Base Windows application host init, which includes all of the kinds.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.WindowsApplicationHost.OnPackagesInFlatFolder(JetBrains.Application.Environment.JetHostItems.Engine,System.Lazy{JetBrains.Application.BuildScript.ProductBinariesDirArtifact},System.Reflection.Assembly)">
            <summary>
              <para>Runs on a set of product packages as discovered in the actual Product Binaries Dir, extracted there in a flat manner.</para>
              <para>Applies appropriate caching for per-package components and the common part catalog.</para>
              <para>Starting with wave04, this is expected to be the main way of running the shell.</para>
            </summary>
            <param name="input"></param>
            <param name="productBinariesDirArtifact">The dir with extracted packages. Lazy, to ensure any exceptions in getting it are trapped.</param>
            <param name="minimalPackageSetFilter">
              <para>Filters subplatforms (=packages) whose DLLs are considered for caching and cataloging in this folder.</para>
              <para><c>NULL</c> means take em all.</para>
              <para>A specific value means that only the package which has this DLL and all of its referenced packages (transitively) should be taken.</para>
            </param>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.Default">
            <summary>
            The “Don't care” choice. Also the default value of the enum.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.BeforeDefault">
            <summary>
            A bit earlier than defaults.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.HighPriority">
            <summary>
            High-priority tasks, but with all natives and fallback exception reporting already in charge.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.Native">
            <summary>
            Initializing native stuff in the host, which must happen before major managed subsystems are loaded, like WPF / WinForms.
            Refrain from actions involving loading of large managed subsystems in steps prior to this.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.PumpOutLeftovers">
            <summary>
            Initializes pumping out all of the leftover deferred actions on shutdown.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.FallbackExceptionReporting">
            <summary>
            Installs the fallback exception reporter — a primitive one which makes early-in-startup exceptions known, before the real exception reporter gets installed.
            In interactive GUI hosts this is a simple message box.
            MUST NOT use any WinForms / WPF code, just native stuff. Nor anything else which might affect the <see cref="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.Native" /> step.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.HostParameters.HostInitLevels.AfterDefault">
            <summary>
            A bit later than defaults.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin">
            <summary>
            Allows to add custom components to the host container, at the very top level (fixes into the Env container resolve).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.IHaveEnvironmentComponentsHostMixin.Fill(JetBrains.Application.Components.ComponentContainer,JetBrains.Application.Environment.EnvironmentPartCatalogSet)">
            <summary>
            Called when you're to add components.
            Either call <c>Register</c> for an object, or <c>RegisterResolver</c> for a custom resolver, or you can even add descriptors.
            </summary>
            <param name="container">The container to modify.</param>
            <param name="catalogsetContainer">The catalog set over which the component is being constructed. We can't retrieve it from the catalog itself because it has not been composed yet at this point, though technically it would have been the preferred way.</param>
            // NOTE: this param is a hack, but the best effort to resolve the VS service provider wrappers autodiscovery
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.IHaveEnvironmentZoneHostMixin">
            <summary>
            Determines the environment zone (from the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IEnvironmentZone" /> family) to be used for running the app.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin">
            <summary>
            The complete catalog set, as collected from the products currently known, plus their plugins and any parts introduced later. This is the origin of all the catalogsets in the component containers. It's not filtered yet, even by the environment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.IHaveFullPartCatalogSetHostMixin.GetFullPartCatalogSet(JetBrains.Lifetimes.Lifetime)">
            <summary>
            The complete catalog set, as collected from the products currently known, plus their plugins and any parts introduced later. This is the origin of all the catalogsets in the component containers. It's not filtered yet, even by the environment.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.IJetHostMixin">
            <summary>
            Marks the base requirement for all mixins.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.JetHostParametersCaller.FillHostInfoContainer(JetBrains.Application.Components.ComponentContainer,JetBrains.Application.Environment.EnvironmentPartCatalogSet)">
            <summary>
              <para>Add any additional information on the host here: VS Service Provider, main window, command line, etc.</para>
              <para>Environment components and product components will be chained into this container and will be getting this information.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.HostParameters.JetHostParametersCaller.GetFullPartCatalogSet(JetBrains.Lifetimes.Lifetime)">
            <summary>
            The complete catalog set, as collected from the products currently known, plus their plugins and any parts introduced later. This is the origin of all the catalogsets in the component containers. It's not filtered yet, even by the environment.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.HostParameters.PumpOutLeftoversHostMixin">
            <summary>
            Before final exceptions are logged, makes sure any deferred things are reported.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.IActivate`1">
            <summary>
              <para> Meta-interface defines zones which should be activated for shell container.</para>
              <para> Use with <see cref="T:JetBrains.Application.Environment.ZoneActivatorAttribute" />.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.IActivateBase">
            <summary>
            Common nongeneric interface for <see cref="T:JetBrains.Application.Environment.IActivate`1" />, <see cref="T:JetBrains.Application.Environment.IActivateDynamic`1" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.IActivateDynamic`1">
            <summary>
              <para> Meta-interface defines zones which should be activated for shell container.</para>
              <para> Use with <see cref="T:JetBrains.Application.Environment.ZoneActivatorAttribute" />.</para>
              <para>As compared to <see cref="T:JetBrains.Application.Environment.IActivate`1" />, adds a callback which can decide dynamically on Environment container startup on whether to activate the zone or not.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.IActivateDynamic`1.ActivatorEnabled">
            <summary>
            Support for conditional activation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.IActivatorDependsOn`1">
            <summary>
            A companion interface for <see cref="T:JetBrains.Application.Environment.IActivate`1" />, also used on zone activators marked with <see cref="T:JetBrains.Application.Environment.ZoneActivatorAttribute" />, but optional.
            If applied, means the activator would be turned off if any of the zones mentioned by <see cref="T:JetBrains.Application.Environment.IActivatorDependsOn`1" /> is turned off.
            </summary>
            <remarks>Previously, <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IRequire`1" /> were used in place of this interface, and it were used for two needs: (1) zoing the activator component itself on whether it's visible in the catalog, if it's a environment zone; (2) marking dependent zone for user-disabled features, if a Shell zone. Now these have been separated: a requirement governs zoning of the activator, and this interface does the user feature disable dependencies.</remarks>
        </member>
        <member name="T:JetBrains.Application.Environment.IDeactivate`1">
            <summary>
              <para> Meta-interface defines zones which should be prevented from activation in the shell container.</para>
              <para> Use with <see cref="T:JetBrains.Application.Environment.ZoneActivatorAttribute" />.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.IDeactivateDynamic`1">
            <summary>
              <para> Meta-interface defines zones which should be prevented from activation for shell container.</para>
              <para> Use with <see cref="T:JetBrains.Application.Environment.ZoneActivatorAttribute" />.</para>
              <para>As compared to <see cref="T:JetBrains.Application.Environment.IDeactivate`1" />, adds a callback which can decide dynamically on Environment container startup on whether to activate the zone or not.</para>
            </summary>
            SuppressMessage("ReSharper", "UnusedTypeParameter")]
        </member>
        <member name="T:JetBrains.Application.Environment.IJetHost">
            <summary>
            Represents the environment-specific host that can load our products and make them running.
            For example, there's a VS-host (single per products that share the same shell, ideally one per VS if versions are close), Tests host, etc.
            The host creates the shared environment, into which products can be loaded (by advertising "IApplicationDescriptor" to its known products list).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.IJetHost.Environment">
            <summary>
            The environment, which creates and hosts environment-level components.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.IJetHostEx.EntangleGuardedLifetime(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Threading.ReentrancyGuard,System.Action{JetBrains.Lifetimes.Lifetime})">
            <summary>
              <para>Defines a lifetime in a guarded context which will be terminated in a guarded context.</para>
              <para>Returns a lifetime definition whose termination should be initiated in an unguarded context.</para>
            </summary>
            <param name="lifetimeOuterUnguarded">An outer lifetime. MUST be terminated in an unguarded context.</param>
            <param name="sIdentity">Identifies all of the created lifetimes / guard contexts.</param>
            <param name="guard">The guard to use.</param>
            <param name="FWithGuardedLifetime">Executes guarded. The given lifetime will be terminated guarded.</param>
            <returns>A definition which you should terminated in an unguarded context.</returns>
        </member>
        <member name="M:JetBrains.Application.Environment.IJetHostEx.PumpOutLeftovers">
            <summary>
            Attempts to pump out all of the leftover deferred actions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.IJetHostEx.AggressivePumpAndGcCollect">
            <summary>
            Nobody remembers, but it seems to force all finalizers to be executed and all assertions like EnsureEverTerminated to be reported (see RSRP-490524).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.IJetHostEx.RunHostMessageLoop(JetBrains.Application.Components.IComponentContainer)">
            <summary>
              <para>Runs the standard message loop for interactive hosts.</para>
              <para>When the function exists, the host should shut down.</para>
            </summary>
            <returns>The final verdict which caused the host to stop running. Use it for determining the exit code.</returns>
        </member>
        <member name="T:JetBrains.Application.Environment.IProductCanBeStarted">
            <summary>
            <para>A handler which determines whether the particular product is allowed to be run.</para>
            <para>There are standard handlers for: license check, suspended state, timebomb, etc.</para>
            <para>Of all the registered handlers, they get asked in order of priority until any of the handler gives a negative reply, which yields a negative result and stops polling other handlers. Note that the reply is not a scalar but a live value which can later change. If all of the handlers give a positive reply, the product will be started.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.IProductCanBeStarted.Priority">
            <summary>
            <para>The priority of your handler. See <see cref="T:JetBrains.Application.Environment.ProductCanBeStartedPriorityThresholds"/> for standard values.</para>
            <para>The lower the value, the sooner your handler gets asked.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.IProductCanBeStarted.CreateCanBeStarted(JetBrains.Lifetimes.Lifetime)">
            <summary>
            <para>This method is called on your handler when the poll sequence reaches it (i.e. when all of the higher-priority handlers give an affirmative resolution).</para>
            <para>The <paramref name="lifetime"/> is the duration until polling your handler goes out of scope (i.e. either the whole setup is terminated or one of the higher-priority handlers changes its resolution to something non-affirmative). After the <paramref name="lifetime"/> is terminated, your resolution in the return value will be considered no more. If the poll sequence reaches your handler again, you'll get one more call with a new lifetime.</para>
            <para>The return value is your live verdict which you can change at any time within the <paramref name="lifetime"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetEnvironment">
            <summary>
            The instance of the application environment.
            The host application (VS, standalone exe, etc) creates one environment, then loads the products into it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironment.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.HostParameters.JetHostParametersCaller)">
            <summary>
            Creates the environment and defines its lifetime.
            </summary>
            <param name="lifetime"></param>
            <param name="host">Defines the environment to be created: the set of assemblies with components, the configuration, additional runtime components, stuff to be created before composing the env container, and so on.</param>
        </member>
        <member name="F:JetBrains.Application.Environment.JetEnvironment.ActiveEnvironmentZones">
            <summary>
            Configuration of this environment.
            Defined by the host when the environment is created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.JetEnvironment.Container">
            <summary>
            Gets the environment component container.
            It is fully composed upon leaving the class ctor, and until the lifetime ends.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.JetEnvironment.EnvironmentPartCatalogSet">
            <summary>
            Catalog set for the environment components, as narrowed down from <see cref="F:JetBrains.Application.Environment.JetEnvironment.FullPartCatalogSet" /> by applying the environment configuration filter to the parts. Do not modify.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.JetEnvironment.FullPartCatalogSet">
            <summary>
            The complete catalog set, as collected from the products currently known, plus their plugins and any parts introduced later. This is the origin of all the catalogsets in the component containers. It's not filtered yet, even by the environment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironment.CreateDontRun(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.HostParameters.JetHostParameters)">
            <summary>
            A special method for non-continuous hosts, like the tests host, in which creation and destruction must be carried out on different stacks.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironment.CreateDontRunGuarded(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.HostParameters.JetHostParameters)">
            <summary>
            A special method for non-continuous hosts, like the tests host, in which creation and destruction must be carried out on different stacks.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetEnvironmentAvailableZones">
            <summary>
            Lists the zones which are available in the environment assemblies.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.CreateFromEnvironmentModuleZoneAndStandardConfigs(JetBrains.Application.Environment.FullPartCatalogSet,JetBrains.Application.BuildScript.Application.Zones.ZonePart[])">
            <summary>
              <para>Creates the configuration object on the given host configurations, adding the well-known standard environment configurations, such as CLR version and CPU.</para>
              <para>On this early stage, the </para>
            </summary>
            <param name="catalog">The catalog for fetching configuration definitions.</param>
            <param name="zonesEnvironment">
              <para>Module zone which specifies the configuration against the <see cref="T:JetBrains.Application.BuildScript.Application.Zones.IEnvironmentZone" /> module zone axis.</para>
              <para>This will be combined with autodetected environment configurations from <see cref="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.GetStandardConfigsForCurrentRuntime(JetBrains.Application.Environment.FullPartCatalogSet)" /> to choose the environment components. </para>
              <para>Further configurations for running the Shell will be determined by environment components.</para>
            </param>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.GetAllPossibleStandardConfigs(JetBrains.Application.Catalogs.PartCatalog)">
            <summary>
            Gets a union of standard configurations of all the possible environments.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.GetStandardConfigsForCurrentRuntime(JetBrains.Application.Environment.FullPartCatalogSet)">
            <summary>
            Gets the standard configurations for the current environment, like CLR version and CPU.
            </summary>
            <param name="catalog"></param>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.GetCpuConfig(JetBrains.Application.Environment.FullPartCatalogSet)">
            <summary>
              <para>Gets the configuration of the CPU architecture of the current process (not the OS architecture nor physical CPU).</para>
              <para>Examples: <c>IntelCpu</c>, <c>Amd64Cpu</c>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.GetOsConfig(JetBrains.Application.Environment.FullPartCatalogSet)">
            <summary>
            Gets the configuration of the current OS (WinNT, Linux, etc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.GetClrConfig(JetBrains.Application.Environment.FullPartCatalogSet)">
            <summary>
            Gets the configuration of the current Clr implementation (Framework, Mono, Core).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentAvailableZones.GetRuntimeConfig(JetBrains.Application.Environment.FullPartCatalogSet)">
            <summary>
            Gets the configuration of the current runtime (CLR version).
            </summary>
            <param name="catalogset"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Environment.JetEnvironmentZones.BuildActivatorZones">
            <summary>
            Prepare cached zones info before shell container composition. Call it each time shell container is about to compose so it can recompose with different allowed zones set.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHost">
            <summary>
            API for spawning hosts.
            Start with the <see cref="P:JetBrains.Application.Environment.JetHost.New" /> property and proceed along the host creation chain with ext methods, until you can <see cref="M:JetBrains.Application.Environment.JetHostItems.CreateAndRun(JetBrains.Application.Environment.JetHostItems.Full)" /> with an ext method on the end of the chain.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.JetHost.New">
            <summary>
            Starts the host creation chain.
            Call ext methods to proceed further by the chain.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHostItems">
            <summary>
            Hides from <see cref="T:JetBrains.Application.Environment.JetHost" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetHostItems.CreateAndRun(JetBrains.Application.Environment.JetHostItems.Full)">
            <summary>
            Terminates the host creation chain by running the host and returning the result after it exits.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetHostItems.CustomAdd(JetBrains.Application.Environment.JetHostItems.Full,JetBrains.Application.Environment.HostParameters.IJetHostMixin)">
            <summary>
            Adds one more item to the host parameters (after the mandatory part of the chain is complete).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetHostItems.CustomRemove``1(JetBrains.Application.Environment.JetHostItems.Full)">
            <summary>
            Removes items by their base type from the host parameters (after the mandatory part of the chain is complete).
            Usually, to replace them with new items (see <see cref="M:JetBrains.Application.Environment.JetHostItems.CustomReplace``1(JetBrains.Application.Environment.JetHostItems.Full,JetBrains.Application.Environment.HostParameters.IJetHostMixin)" />).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.JetHostItems.CustomReplace``1(JetBrains.Application.Environment.JetHostItems.Full,JetBrains.Application.Environment.HostParameters.IJetHostMixin)">
            <summary>
            Removes items by their base type from the host parameters and replaces with a new item (after the mandatory part of the chain is complete).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHostItems.Empty">
            <summary>
            An item in the host creation chain.
            Adding more info proceeds to the next step in the chain.
            This is the first empty step.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHostItems.Engine">
            <summary>
            An item in the host creation chain.
            Adding more info proceeds to the next step in the chain.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHostItems.Full">
            <summary>
            An item in the host creation chain.
            Adding more info proceeds to the next step in the chain.
            This is the last full step.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHostItems.HostItems">
            <summary>
            Base class for the host creation chain.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHostItems.Packages">
            <summary>
            An item in the host creation chain.
            Adding more info proceeds to the next step in the chain.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.JetHostItems.ProductInfo">
            <summary>
            An item in the host creation chain.
            Adding more info proceeds to the next step in the chain.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.LicenseCheck.IZoneLicenseChecker">
            <summary>
            Environment-level component that provides list of <see cref="T:JetBrains.Application.BuildScript.Application.Zones.ZonePart"/> it has license for plus zone parts that do not require license and are used from the zones it enables.
            The component is signed with private key corresponding to public key of the zones it enables. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.LicenseCheck.IZoneLicenseChecker.Signatures">
            <summary>
            Fully quilifed type name signed with private key corresponding to zones' public key. Empty if no license-requiring zone is enabled.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.LicenseCheck.ZoneLicenseAttribute">
            <summary>
            Use the attribute to mark payed zone (zone that requires valid license to be activated) with public key. 
            Public keys should be generated using LicenseGenerator tool. 
            Several keys are alowed. The zone is enabled if any of licensed <see cref="T:JetBrains.Application.License2.ILicensedEntity"/> provides corresponding signature.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.LicenseCheck.ZoneSignatureValidator">
            <summary>
            Used to generate/ validate zone signatures
            Generator, zoneKeys.DotSettings etc is stored at \\MSDC\ReSharper\Licensing
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedPriorityThresholds.EnvironmentReady">
            <summary>
            On this level, should check if the env is fully initialized for starting the product (and calling other checkers).
            Eg in VS this is when VS' Shell gets into the non-zombied state.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedPriorityThresholds.UserSuspend">
            <summary>
            On this level, should check for any user-induced deactivations of the product.
            Eg in VS it's when user suspends a product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedPriorityThresholds.Licensing">
            <summary>
            On this level, check for a license.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ProductCanBeStartedResolution">
            <summary>
            The resolution part of the <see cref="T:JetBrains.Application.Environment.ProductCanBeStartedVerdict"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.Affirmative">
            <summary>
            <para>Affirmative resolution: this handler doesn't object running the product.</para>
            <para>Next handlers will be asked if they also don't have any objections.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.NegativeTemporary">
            <summary>
            <para>Negative resolution: this handler prohibits the product from being run.</para>
            <para>This is a veto, i.e. next handlers will not be polled.</para>
            <para>“Temporary” means that the handler is committed to resolve to either affirmative or negative-permanent state somewhen soon. An example is shutting down the product to immediately restart it with another licensing options. A standalone product should not be shutting down with such an active resolution. For a VS-integrated product, this is the same as a permanent negative resolution.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.NegativePermanentGraceful">
            <summary>
            <para>Negative resolution: this handler prohibits the product from being run.</para>
            <para>This is a veto, i.e. next handlers will not be polled.</para>
            <para>“Permanent” means that a standalone product might shut down when it sees such a resolution. A VS-integrated product will just be deactivated.</para>
            <para>“Graceful” means this state is not unexpected. For example, closing the standalone application main window or suspending a VS-integrated product is a graceful shutdown.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.NegativePermanentByError">
            <summary>
            <para>Negative resolution: this handler prohibits the product from being run.</para>
            <para>This is a veto, i.e. next handlers will not be polled.</para>
            <para>“Permanent” means that a standalone product might shut down when it sees such a resolution. A VS-integrated product will just be deactivated.</para>
            <para>“ByError” means this state is reached due to some problem like a failed startup or an invalid product license.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ProductCanBeStartedVerdict">
            <summary>
            The verdict of a single <see cref="T:JetBrains.Application.Environment.IProductCanBeStarted"/> handler.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedVerdict.Resolution">
            <summary>
            The resolution (to make a decision on product).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ProductCanBeStartedVerdict.Comment">
            <summary>
            Comment on the resolution. Optional.
            Highly recommended with non-positive resolutions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdict.Affirmative(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.Affirmative"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdict.NegativeTemporary(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.NegativeTemporary"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdict.NegativePermanentGraceful(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.NegativePermanentGraceful"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdict.NegativePermanentByError(System.String)">
            <summary>
            <see cref="F:JetBrains.Application.Environment.ProductCanBeStartedResolution.NegativePermanentByError"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdictEx.IsAffirmative(JetBrains.Application.Environment.ProductCanBeStartedVerdict)">
            <summary>
            Gets whether the resolution is affirmative. <c>Null</c> is also considered affirmative because it's the <see cref="T:JetBrains.Application.ComposeVerdictWithPriority"/> return value for all-affirmative.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdictEx.SelectShouldStartShell(JetBrains.DataFlow.IProperty{JetBrains.Application.Environment.ProductCanBeStartedVerdict},JetBrains.Lifetimes.Lifetime)">
            <summary>
            Gets whether the product shell should be started.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdictEx.ShouldStartShell(JetBrains.Application.Environment.ProductCanBeStartedVerdict)">
            <summary>
            Gets whether the product shell should be started.
            </summary>
            <remarks><c>Null</c> is also considered affirmative because it's the <see cref="T:JetBrains.Application.ComposeVerdictWithPriority"/> return value for all-affirmative.</remarks>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdictEx.ShouldBeRunningStandaloneApplicationHost(JetBrains.Application.Environment.ProductCanBeStartedVerdict)">
            <summary>
            Gets whether the standalone application host (NOTE: this is not the product shell with components, but the host) should be still running.
            </summary>
            <remarks><c>Null</c> is also considered affirmative because it's the <see cref="T:JetBrains.Application.ComposeVerdictWithPriority"/> return value for all-affirmative.</remarks>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdictEx.IsWithErrors(JetBrains.Application.Environment.ProductCanBeStartedVerdict)">
            <summary>
            Whether the overall application run is considered as failed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ProductCanBeStartedVerdictEx.IsNegativePermanent(JetBrains.Application.Environment.ProductCanBeStartedVerdict)">
            <summary>
            Whether it's one of the permanent negative resolutions.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.PublicStaticIntMainAttribute">
            <summary>
            The core method for running an automated application.
            Its method is called after the Shell is started up, waited upon, and the application exits when the method exits, using its return as the process exit code.
            You can import components as method parameters.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ReportsProductsAllowedToRun">
            <summary>
            For each given product, monitors its <see cref="T:JetBrains.Application.Environment.IProductCanBeStarted" /> validators, and reports to <see cref="T:JetBrains.Application.Environment.RunsProducts" /> when the product can be started.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ReportsProductsAllowedToRun.ProductCanBeStartedVerdict">
            <summary>
            Whether the product Shell is allowed to run right now (Success means it can be started or continue running; Failure means it cannot be started or has to be shut down if already running; Permanent means that a standalone host should also be terminated).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.ReportsProductsAllowedToRun.Init_ComposeProperty(JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.Environment.IProductCanBeStarted},JetBrains.Application.Threading.IThreading)">
            <summary>
            Composes the state of all the <see cref="T:JetBrains.Application.Environment.IProductCanBeStarted" />, by priority.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.RunningProducts">
            <summary>
            When the Shell container is started, allows to get it on the environment level.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.RunsProducts">
            <summary>
            Watches if the product is allowed to run (<see cref="T:JetBrains.Application.Environment.ReportsProductsAllowedToRun" />).
            If yes, starts the Shell container.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.RunsProducts.TimebombedZones">
            <summary>
            Gets the zones which would normally be running in Shell but have been suppressed by timebombing of their package, or dependency package, or because of timebombing of their activator's package.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Environment.RunsProducts.RunProduct(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Environment.JetEnvironment,JetBrains.Application.Environment.JetEnvironmentZones,JetBrains.Application.Environment.RunningProducts,JetBrains.Application.Environment.ZoneUserPreferenceChecker,JetBrains.Application.Environment.ITimebombZoneFilter,JetBrains.Application.Environment.LicenseCheck.ZoneLicenseChecker,JetBrains.Application.Components.IInitializationStrategyProvider,System.Collections.Generic.IEnumerable{JetBrains.Application.IShellComponentContainerExtender},JetBrains.DataFlow.IProperty{System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Application.Zones.ZonePart}},JetBrains.Util.ILogger)">
            <summary>
            Runs the product. The lifetime start and end must be guarded &amp; locked.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.RunsProducts.ProductConfigurations">
            <summary>
            Gives out the configurations the product is running in.
            Published as a product-specific component on the Shell-level.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.RunsPublicStaticIntMain">
            <summary>
            Looks for static methods with <see cref="T:JetBrains.Application.Environment.PublicStaticIntMainAttribute" />.
            If found, executes them and shuts the app down.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ShellPartCatalogSet">
            <summary>
            Gives out the product's main <see cref="T:JetBrains.Application.Catalogs.PartCatalogSet" /> of the running Shell.
            Available for import in Shell.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Environment.ShellPartCatalogSet.Catalog">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.Environment.ShellStateMonitor.ShellState.NO_SHELL">
            <summary>
            Shell is not started or terminated
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ShellStateMonitor.ShellState.STARTING">
            <summary>
            Shell is starting
            </summary>
        </member>
        <member name="F:JetBrains.Application.Environment.ShellStateMonitor.ShellState.STARTED">
            <summary>
            Shell is started
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.TeamCityExceptionReporting.TeamCityExceptionReportService">
            <summary>
            Attaches to the exception reporter, dumps to TC.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.ZoneActivatorAttribute">
            <summary>
            An annotation which must be by convention present on environment-level activator classes implementing <see cref="T:JetBrains.Application.Environment.IActivate`1" /> or <see cref="T:JetBrains.Application.Environment.IActivateDynamic`1" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.CmdLineEnabledZone">
            <summary>
            Force-enabled zone
            </summary>
        </member>
        <member name="T:JetBrains.Application.Environment.CmdLineDisabledZone">
            <summary>
            Force-enabled zone
            </summary>
        </member>
        <member name="T:JetBrains.Application.Application.Env.AssertionModeInitializerRef">
            <summary>
            A module-initializer method in class which inherits module initializer from Core project will force loading Core
            module and invoking module initializer from there.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Launcher">
            <summary>
            Launcher for base app entry points.
            The full standalone app has its own launcher in its project, because it references more stuff.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Launcher.ConsoleMain">
            <summary>
            The console entry point for calling from the native part.
            Expects to have the partial set of components written in resources, like host name and environment zone, while the set of the application packages is collected ad-hoc based on what's found in the application folder.
            </summary>
            <returns>The exit code for the process.</returns>
        </member>
        <member name="M:JetBrains.Application.Env.Launcher.ConsoleMainScattered">
            <summary>
            The console entry point for calling from the native part.
            Expects to have the partial set of components written in resources, like host name and product branding, while the set of the application packages is collected ad-hoc based on what's found in the application folder.
            </summary>
            <returns>The exit code for the process.</returns>
        </member>
        <member name="F:JetBrains.Application.Env.Launcher.ConsoleMainMethod">
            <summary>
            Refer to this if you need to get the <see cref="T:JetBrains.Build.Serialization.AssemblyQualifiedTypeMemberName" /> for the <see cref="M:JetBrains.Application.Env.Launcher.ConsoleMain" /> method of this launcher.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Launcher.ConsoleMainMethodScattered">
            <summary>
            Refer to this if you need to get the <see cref="T:JetBrains.Build.Serialization.AssemblyQualifiedTypeMemberName" /> for the <see cref="M:JetBrains.Application.Env.Launcher.ConsoleMainScattered" /> method of this launcher.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.NativeComponentManagerProxyHostMixin">
            <summary>
            Registers the native component manager on startup of the Windows application.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.NativeComponentManagerProxyHostMixin.myPerProcessComponentManagerProxy">
            <summary>
            All mixins in the same process should share the same native component manager instance, because two cannot be installed at a time.
            This static is no more than per-appdomain of course, but for now that's good enough.
            Ideally, this should be handled on the native side, with the second attempt just returning the already-installed instance. With the current impl, we can only see that there's a native pointer to some instance, but cannot tell if it's ours or a conflicting one, I guess. So keeping the sharing on the managed side within the wave07 time frame.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Host.TeamCity.ITeamCityEnvZone">
            <summary>
            For running a TeamCity Host.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BuildApp.BuildRunnerCoreTasks.MakeBuildRunnerCoreAssemblyLists(JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.BuildScript.InputPackage[],JetBrains.Util.ILogger)">
            <summary>
            Picks the minimal set of the Build Runner Core assemblies from the available subplatform packages and their references.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BuildApp.BuildRunnerCoreTasks.PackBuildRunnerCoreExe(JetBrains.Application.Install.Launcher.CleanLauncherPostCompileArtifact[],JetBrains.Application.BuildScript.BuildApp.Artifacts.BuildRunnerCoreAssemblyLists,JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.BuildScript.BuildVersionSuffix,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,JetBrains.Util.ILogger)">
            <summary>
            Makes a packed executable with the Build Runner Core assemblies inside.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.DevEnv.VsExtensionsHelper">
            <summary>
            Register an extension with Visual Studio.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.VsExtensionManagerRegistryKey">
            <summary>
            VS Extension manager registry key in HKCU under VS root key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.VsExtensionManagerEnabledExtensionsRegistryKey">
            <summary>
            VS Extension manager registry key for registered user extensions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.VsExtensionManagerExtensionTypesRegistryKey">
            <summary>
            VS Extension manager registry key for the types of registered user extensions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.SinceVs11ConfigurationChangedRegistryValuePath">
            <summary>
            A Registry value name under the root VS Registry Hive key in HKCU which has to be touched on VS11 to signal that configuration has to be rebuilt.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.SinceVs11ExtensionsChangedRegistryValuePath">
            <summary>
            A Registry value name under the ExtensionManager key in HKCU which has to be touched on VS11 to signal that configuration has to be rebuilt.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.VsExtensionManagerEnableAdminExtensionsRegistryValuePath">
            <summary>
            A Registry value name under the ExtensionManager key in HKCU which allows per-user extensions to be loaded when VS is started as administrator.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.ConfigPkgDefCacheRegistryKey">
            <summary>
            A registry key under config hive containing PkgDef cache related info.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.ConfigPkgDefCacheTimestampRegistryValuePath">
            <summary>
            A registry value under the %VsHive%_Config\Initialization key containing the timestamp of PkgDef cache.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.ConfigPkgDefExclusionDirectoriesRegistryValuePath">
            <summary>
            A registry value under the %VsHive%_Config\Initialization key containing a list of folders to exclude from PkgDef search.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.TouchVsConfigurationChangedFile(JetBrains.Util.OnError)">
            <summary>
            VS11+. Try to touch the special file which means that configuration has changed, otherwise VS won't re-read its extensions for any updates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.TouchVsConfigurationChangedInRegistry(JetBrains.Util.OnError)">
            <summary>
            VS11+. Reset VS flag which means that configuration has changed, otherwise VS won't re-read its extensions for any updates.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.VsRegHive">
            <summary>
            Registry hives in terms of Visual Studio.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.VsRegHive.HKLM">
            <summary>
            Visual Studio registry HKLM (Config) hive.
            Example: <c>“Software\Microsoft\VisualStudio\16.0_fe2455e3_Config”</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsExtensionsHelper.VsRegHive.HKCU">
            <summary>
            Visual Studio registry HKCU hive.
            Example: <c>“Software\Microsoft\VisualStudio\16.0_fe2455e3”</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.DevEnv.VsHostInfo.GetFullIdentifierName(JetBrains.Util.DevEnv.VsHive,System.String)">
            <summary>
            <see cref="P:JetBrains.Application.BuildScript.Application.HostInfo.FullIdentifierName"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.DevEnv.VsHostInfo.GetExtensionIdentifier(JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>
            Extension identifier (goes to the Identifier field of the Extension, used to identify it eg in VS Ext Man Registry).
            Pattern: <c>$(CompanyName).$(ProductName)</c>.
            Example: <c>JetBrains.ReSharper</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.DevEnv.VsHostInfo.GetExtensionVersionString(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.Application.BuildScript.BuildVersionSuffix)">
            <summary>
            The exact version of the extension, as written into its VSIX manifest.
            Pattern: <c>$(ProductVersionMajor).$(ProductVersionMinor)</c>.
            Example: <c>5.5.20190327</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.DevEnv.VsHostInfo.GetExtensionFullIdentifier(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.Application.BuildScript.BuildVersionSuffix)">
            <summary>
            The full extension identifier includes name and version.
            Example: <c>JetBrains.ReSharperPlatformVs15,9.0.20190327</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.DevEnv.VsRegEditWrapper">
            <summary>
            VsRegEdit.exe is a VS15+ command line tool which performs registry operations on VS registry detours (aka privateregistry.bin).
            </summary>
            <remarks>
            Known issues:
            1) VS 2017 15.2 Release. Does not have Suffix parameter.
            2) VS 2017 15.3 Preview 7. Have Suffix parameter but does not process it correctly (does not include suffix in the registry key).
            3) The Remove value operation always returns code -1, even if it's successful.
            4) Cannot read/write Qword values.
            5) Cannot create registry key.
            </remarks>>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsRegEditWrapper.VsRegEditName">
            <summary>
            The executable is located in the VS bin folder (Commot7\IDE) beside devenv.exe.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsRegEditWrapper.Operation.read">
            <summary>
            Reads the value off the specified key.
            VsRegEdit.exe read PathToVs [Suffix] Hive KeyName ValueName ValueType
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsRegEditWrapper.Operation.set">
            <summary>
            Sets the specified value name to the value type. Use @ as the name to set the default value. Creates the key if it doesn't exist already.
            VsRegEdit.exe set PathToVs [Suffix] Hive KeyName ValueName ValueType Value
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsRegEditWrapper.Operation.remove">
            <summary>
            Removes the value from the key.
            VsRegEdit.exe remove PathToVs [Suffix] Hive KeyName ValueName
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.DevEnv.VsRegEditWrapper.Operation.delete">
            <summary>
            Deletes the specified key.
            VsRegEdit.exe delete PathToVs [Suffix] Hive ParentKeyName KeyName
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntry">
            <summary>
            An entry in the GUID Store.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.Guid">
            <summary>
            GUID value of this entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.IsDefineConstant">
            <summary>
            Whether this GUID is exposed as a #define constant to the involved programming languages (mainly, WiX).
            </summary>
            <remarks>WiX hits the command line length limit if we expose ALL of them, but it actually needs only a few.</remarks>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.Key">
            <summary>
            Key to this entry. Must be unique throughout the dictionary.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKey">
            <summary>
            Key to the GUID in the GUID Store.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntryKey.Name">
            <summary>
            Gets the name of the key.
            This is the only key identity.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.Equals(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKeyConverter">
            <summary>
            Knows how to switch between <see cref="T:JetBrains.Application.Install.Guids.GuidEntryKey"/>s and <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKeys">
            <summary>
            Well-known values for <see cref="T:JetBrains.Application.Install.Guids.GuidEntryKey"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidStore">
            <summary>
            Represents a store of GUIDs keyed by strings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Guids.GuidStore.NamespaceGuid">
            <summary>
            Namespace guid for <see cref="T:JetBrains.Util.Uuid"/>, see <see cref="P:JetBrains.Application.Install.Guids.GuidStore.AutoGuidCategory"/> for details.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidStore.AutoGuidCategory">
            <summary>
            If specified to a non-empty string, turns on fallback behavior for missing GUIDs: those are silently generated with <see cref="T:JetBrains.Util.Uuid"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidStore.Entries">
            <summary>
            A GUID value with its key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidStore.ProposedEntries">
            <summary>
            For GUID values whose keys were missing from the store, new entries are emitted into this collection, so that they could be moved into the main <see cref="P:JetBrains.Application.Install.Guids.GuidStore.Entries"/> collection by the operator.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.GetEntry(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            Throws if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.TryGetEntry(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            <c>Null</c>s if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.TryGetEntryOrPropose(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            If missing, adds a new entry to the <see cref="P:JetBrains.Application.Install.Guids.GuidStore.ProposedEntries"/> collection, and returns an empty (but still non-<c>Null</c>) GUID.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installable.HttpGalleryPackage">
            <summary>
            We know metadata for a certain package on the Web source, will retrieve body on-demand, and metadata is available beforehand.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installable.HttpGalleryPackage.JetBrains#Application#Install#Installable#IGalleryPackage#GetPackageBodyAsync(JetBrains.Lifetimes.OuterLifetime)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.Install.Installable.InstallableHost.VsVersion">
            <summary>
            can't change type of this field for compatibility reasons
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installable.InstallableHost.VsVersionMinor">
            <summary>
            this must be 0 for VS prior to VS 2015
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installable.ItemGalleryPackage">
            <summary>
            When we have a ready local <see cref="T:JetBrains.Util.Storage.Packages.IJetNugetPackage"/> (read directly from installer pack resources for example).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installable.ItemGalleryPackage.JetBrains#Application#Install#Installable#IGalleryPackage#DependencyIds">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Install.Installable.ItemGalleryPackage.GetRuntimeSpecificDependencyIds">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Install.Installable.ItemGalleryPackage.JetBrains#Application#Install#Installable#IGalleryPackage#GetPackageBodyAsync(JetBrains.Lifetimes.OuterLifetime)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Install.Installable.ItemGalleryPackage.JetBrains#Application#Install#Installable#IGalleryPackage#Id">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Install.Installable.ItemGalleryPackage.JetBrains#Application#Install#Installable#IGalleryPackage#Installable">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Install.Installable.ItemGalleryPackage.JetBrains#Application#Install#Installable#IGalleryPackage#Version">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.Install.Installable.PackageDependencies.myZoneToSuccessorsMap">
            <summary>
            All immediate successors in graph
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installable.PackageDependencies.myZoneToPredecessorsMap">
            <summary>
            All immediate predecessors in graph
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installable.PackageDependencies.myZoneToInheritorsMap">
            <summary>
            Immediate successors in zones graph which are derived type (not IReguire)
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installable.PackageMetadataEx.GetNupkgFileName(JetBrains.Application.Install.Installable.PackageMetadata)">
            <summary>
            Keep in sync with <see cref="M:JetBrains.Util.Storage.Packages.NugetHelpers.GetNupkgFileName(NuGet.IPackageName)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationMacroName">
            <summary>
            An enumeration of possible macro names, is not used directly in the XML files, but instead serves as a reference info or string constants from the code.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.PackageCodeBase">
            <summary>
            Location of the Package assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.SystemDir">
            <summary>
            The System directory. Used to locate the mscoree.dll that is the COM Server for us.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.ProductBinariesDir">
            <summary>
            The directory that contains the product binaries.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.DateTime">
            <summary>
            Date and time at the moment the macro is resolved, in an arbitrary format. Use with care, because the date-time might resolve at the installation time on the user machine. The format is not defined. Fits for producing generation numbers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.ProductBinariesDir">
            <summary>
              <para>A directory to which the product is built; contains all of the product binaries.</para>
              <para>Warning: when doing a local install, this is the same as the target InstallDir.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.ReferencesDirectories">
            <summary>
              <para>References directories of the product and its submodules.</para>
              <para>The product references directory is “/Lib” under the product root, and module's references directory is “/Lib” under the module root.</para>
              <para>Deployment code of each module can only use references from its own module and any modules it depends on, transitively; plus, the product references directory.</para>
              <para>The file must be unique by its path relative to the references folder throughout the product. Any conflict results in a failure.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir">
            <summary>
            Binaries installation directory on the remote system (the Bin folder).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.StartMenuPrograms">
            <summary>
            The directory that contains the program groups (the Start menu) for all users or the current user, depending on per-machine/user installation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.DevEnvInstallDir">
            <summary>
            Per-machine: VS installation directory that contains the "devenv.exe" executable file (the Common7\IDE folder).
            Per-user: VS hive root directory in LocalAppData that contains "privateregistry.bin" registry detour file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFile">
            <summary>
            A single satellite file in the installation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.#ctor(JetBrains.Util.Storage.ImmutableFileItem,System.String)">
            <summary>
            An installation of a file whose source name (on the source file system) and target name (on the target file system) are different.
            </summary>
            <param name="source">The source file to be deployed on the target system.</param>
            <param name="sTargetName">Name for this file on the target file system. If omitted, the name of the source file will be used.</param>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFile.Metadata">
            <summary>
            Any additional metadata on the files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFile.SourceFile">
            <summary>
            The source file to be deployed on the target system.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledFile}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledFile)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.Equals(JetBrains.Application.Install.InstallationData.InstalledFile)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFileAccessControl">
            <summary>
            <para>Allows to modify ACLs when installing a file.</para>
            <para>This info is written to <see cref="F:JetBrains.Application.Install.InstallationData.InstalledFile.Metadata"/> field on an <see cref="T:JetBrains.Application.Install.InstallationData.InstalledFile"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFileAccessControl.AccessControl">
            <summary>
            <see cref="F:JetBrains.Application.Install.InstallationData.InstalledFile.Metadata"/> entry key for files that should have ACLs specifically modified upon deployment.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFileAccessControl.AccessControlEntry.IsContinueOnError">
            <summary>
            Proceed with the installation if this ACL fails to set.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFileAccessControl.AccessControlEntry.MinOsVersion">
            <summary>
            Only applies to OS versions of this and newer. <c>Null</c> for no limit.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFileAccessControl.AccessControlEntry.Subject">
            <summary>
            SID or username for which to modify ACLs with this entry.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFileAccessControl.AccessControlEntry.AddPermissions">
            <summary>
            Access rights to assign.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFileAccessControl.SidOrUsername">
            <summary>
            Subject of the entry 
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFileItemBase">
            <summary>
            Base class for all of the files installed to the target system by the Installation Data items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.#ctor(System.String)">
            <summary>
            Sets the name of the file item on the target filesystem.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.TargetName">
            <summary>
            The local name of the file on the target system. If left empty, will be the same as the source name. Must be left empty if the source name matches more than one file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledFileItemBase}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledFileItemBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.Equals(JetBrains.Application.Install.InstallationData.InstalledFileItemBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFolder">
            <summary>
            Folders that contain files that should be installed on the target system.
            In MSI, they create <c>Directory</c>s and <c>Component</c>s.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFolder.Id">
            <summary>
            An ID for this folder entry, from which the component, folder and file IDs in the installation database are derived.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetDir">
            <summary>
            Relative path from the <see cref="F:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot">specified root</see> to the directory on the target system.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot">
            <summary>
            One of the root folders to locate the file on the target system.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFolder.WithFile(JetBrains.Util.Storage.ImmutableFileItem,System.String)">
            <summary>
            Adds a new file of type <see cref="T:JetBrains.Application.Install.InstallationData.InstalledFile" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFolder.WithFiles(System.Collections.Generic.IEnumerable{JetBrains.Util.Storage.ImmutableFileItem})">
            <summary>
            Adds new files of type <see cref="T:JetBrains.Application.Install.InstallationData.InstalledFile" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkcr">
            <summary>
            <c>HKEY_CLASSES_ROOT</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hklm">
            <summary>
            <c>HKEY_LOCAL_MACHINE</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkcu">
            <summary>
            <c>HKEY_CURRENT_USER</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkmu">
            <summary>
            <c>HKEY_LOCAL_MACHINE</c> or <c>HKEY_CURRENT_USER</c>, depending on whether the installation is per-machine or per-user.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase">
            <summary>
            Base class for installer Registry keys and values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,JetBrains.Util.BackSlashSeparatedRelativePath)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue" /> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.Hive">
            <summary>
            The Registry hive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.Key">
            <summary>
            Path to the key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.GetWindowsRegistryRootKey(JetBrains.Application.BuildScript.Install.IsolationOptions)">
            <summary>
            Gets the proper Windows Registry root key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryItemBase}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryKey">
            <summary>
            Registry Keys to install and then REMOVE when uninstalling.
            A registry value does not require that you write its parent key here. Write a key if you'd like to make sure it will be removed by uninstall.
            For that matter, do not add foreign keys (eg Visual Studio ones) into which we're writing our values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,JetBrains.Util.BackSlashSeparatedRelativePath)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue" /> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.CreateKey(JetBrains.Util.BackSlashSeparatedRelativePath)">
            <summary>
            Creates a new Registry Key under the current Registry key.
            </summary>
            <param name="relpath">Relative path of the nested Key.</param>
            <returns>The new registry value.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.CreateValue(System.String,System.Object)">
            <summary>
            Creates a new Registry Value that derives its Hive and Key path from the current Registry key.
            </summary>
            <param name="name">Name of the value.</param>
            <param name="value">Value of the value, must be either a <see cref="T:System.String" /> or an <see cref="T:System.Int32" />.</param>
            <returns>The new registry value.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryKey}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue">
            <summary>
            Represents a value to be written to the Registry. On uninstallation, the value will be deleted. It is not necessary to have a key element for each value, unless you want it to be deleted upon uninstallation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,JetBrains.Util.BackSlashSeparatedRelativePath,System.String,System.Object)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue" /> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
            <param name="name">Name of the value.</param>
            <param name="value">Value of the value, must be either a <see cref="T:System.String" /> or an <see cref="T:System.Int32" />.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.IsPermanent">
            <summary>
            Specifies that the value should be written on registration and left intact on unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Name">
            <summary>
            Name of the value under its key, or an empty string for the default value of the key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Type">
            <summary>
            Type of the value, which determines the type of the Windows Registry value to be created. The Value must be formatted accordingly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Value">
            <summary>
            Value for the value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryValue}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryValue)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType">
            <summary>
            Lists possible types for the Registry values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.Dword">
            <summary>
            An integer DWORD value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.Binary">
            <summary>
            Binary hex-encoded value
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile">
            <summary>
              <para>An advanced installation task which alters the contents of an installed file on the target system.</para>
              <para>It takes a regular installed file as a source, reads its text, applies the transformation, and writes to the new location on the target system.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.Encoding">
            <summary>
            Specifies the file text encoding.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalDir">
            <summary>
            Relative path from the root folder to the folder on the target file system in which the original file for patching the text is residing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalName">
            <summary>
            Local name of the original file for patching the text (under <see cref="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalDir" />).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.OriginalRoot">
            <summary>
            Root folder on the target file system in which the original file for patching the text is residing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.Escaping.EscapeStringLiteralForPkgdef(System.String)">
            <summary>
              <para>Escapes a full string literal (a data name or a data value of type string) for use in pkgdef files.</para>
              <para>Surrounding quotes are not totally required, only if there're spaces, but they won't do harm.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.Escaping.EscapeSubstringForPkgDef(System.String)">
            <summary>
            Does mid-string escaping for use in pkgdef — means this is a part of the string and quotes should not be added to it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledReplaceTextInFile.StandardMacrosForReplaceText">
            <summary>
            Standard macros which could be used in files when replacing their text.
            The string representation of the macro reference is <c>$()</c>-surrounded text representation of the enumeration member name.
            Has various macro versions for different escaping, with trailing backslash or not.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledShellLink">
            <summary>
            Installs a shell link (an .lnk file shortcut).
            Its <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.TargetName" /> and parent folder's <see cref="F:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot" />/<see cref="F:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetDir" /> point to the place where the shell link file will be created (.lnk), while the <see cref="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot" />/<see cref="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetDir" />/<see cref="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetName" /> point to the target the shell link will be referencing.
            The source information on the parent <see cref="T:JetBrains.Application.Install.InstallationData.InstalledFolder" /> is not used for the shell link.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,JetBrains.Util.RelativePath,System.String)">
            <summary>
             Sets the name of the file item on the target filesystem.
            </summary>
            <param name="sShellLinkFileTargetName">
              Name of the shell link file itself on the target filesystem.
            </param>
            <param name="shellLinkTargetRoot">
              Root folder on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
            <param name="shellLinkTargetDir">
              Relative path from the
            <see cref="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">root folder</see>
            on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
            <param name="shellLinkTargetName">
              Name of the file on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetDir">
            <summary>
            Relative path from the <see cref="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">root folder</see> on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetName">
            <summary>
            Name of the file on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">
            <summary>
            Root folder on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.Equals(JetBrains.Application.Install.InstallationData.InstalledShellLink)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.EmptyTransformInstallationData">
            <summary>
            A placeholder build helper to ensure some helpers are always registered for the interface, and resolve succeeds for them.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationData">
            <summary>
            The root element of the product installation data.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationData.Folders">
            <summary>
            Gets the list of folders with files to install.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationData.PostInstallExecutables">
            <summary>
            Local machine executables to run elevated on register and unregister.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationData.RegistryKeys">
            <summary>
            Gets the list of folders with files to install.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationData.RegistryValues">
            <summary>
            Gets the list of folders with files to install.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationData.SharedMsies">
            <summary>
            Msi-es with shared installation strategy.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataBuildSteps.ApplyTransform(JetBrains.Application.Install.InstallationData.InstallationDataOriginal,JetBrains.Application.Install.InstallationData.ITransformInstallationData[],JetBrains.Util.ILogger)">
            <summary>
            After all the installation data is collected as <see cref="T:JetBrains.Application.Install.InstallationData.InstallationDataOriginal" />, applies transformations to it which cannot be implemented by populating the installation data in the regular additive manner. After all the transformation, the <see cref="T:JetBrains.Application.Install.InstallationData.InstallationDataFinal" /> is ready for execution.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationDataFinal">
            <summary>
            Installation data after all the transformations.
            To be used by installation data consumers.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataFinal.Create(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Creates a new final-installation-data by wrapping the given installation data.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataFinal.WithData(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Merges the <paramref name="addon" /> installation data into the host's, and destroys the former.
            All of the collections are guaranteed to be non-Null
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationDataOriginal">
            <summary>
            To be produced out of the original contributions. Used as input for the first transformation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataOriginal.WithData(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Merges the <paramref name="addon" /> installation data into the host's, and destroys the former.
            All of the collections are guaranteed to be non-Null
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationDataOriginalPart">
            <summary>
            Produced by emitting build steps, or collected out of disjoint file/registry artifacts. Will be packed into the single <see cref="T:JetBrains.Application.Install.InstallationData.InstallationDataOriginal" /> for processing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataOriginalPart.#ctor(System.Collections.Immutable.ImmutableArray{JetBrains.Application.Install.InstallationData.InstalledFolder},System.Collections.Immutable.ImmutableArray{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Immutable.ImmutableArray{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.Install.PackagedMsi.SharedMsiArtifact},System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.Install.PostInstallExecutableArtifact})">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationDataTransform">
            <summary>
            Installation data in between the transformations.
            A special type to avoid mixup with the <see cref="T:JetBrains.Application.Install.InstallationData.InstallationDataOriginal" /> or <see cref="T:JetBrains.Application.Install.InstallationData.InstallationDataFinal" /> while within the <see cref="T:JetBrains.Application.Install.InstallationData.ITransformInstallationData" /> pipeline.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataTransform.#ctor(System.Collections.Immutable.ImmutableArray{JetBrains.Application.Install.InstallationData.InstalledFolder},System.Collections.Immutable.ImmutableArray{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Immutable.ImmutableArray{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.Install.PackagedMsi.SharedMsiArtifact},System.Collections.Immutable.ImmutableArray{JetBrains.Application.BuildScript.Install.PostInstallExecutableArtifact})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataTransform.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataTransform.Create(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Creates a new transform-installation-data by wrapping the given installation data.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationDataTransform.WithData(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Merges the <paramref name="addon" /> installation data into the host's, and destroys the former.
            All of the collections are guaranteed to be non-Null
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.ITransformInstallationData">
            <summary>
            After all the installation data is collected as <see cref="T:JetBrains.Application.Install.InstallationData.InstallationDataOriginal" />, applies transformations to it which cannot be implemented by populating the installation data in the regular additive manner. After all the transformation, the <see cref="T:JetBrains.Application.Install.InstallationData.InstallationDataFinal" /> is ready for execution.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.ITransformInstallationData.Priority">
            <summary>
            Executed in ascending order.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.ITransformInstallationData.ApplyTransform(JetBrains.Application.Install.InstallationData.InstallationDataTransform)">
            <summary>
            Applies the transformation by modifying the installation data contents.
            Yield <c>Null</c> if you don't want to modify.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.TransformInstallationData">
            <summary>
            Temporary empty transformer to avoid failures on empty array injections.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallDirInstaller">
            <summary>
            Writes the InstallDir to the Registry. Works for VS shells.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.VsVersion">
            <summary>
            A list of VS versions to install the products.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.SkipVsIntegration">
            <summary>
            Do not install into VS. "Visual Studio integration" checkbox on the main installer page.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.SpecificProductNames">
            <summary>
            Product or set of products chosen by user on product website. This option affects default action on product and its location.
            '*' indicates that all available products should be installed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.SpecificProductNamesToRemove">
            <summary>
            Product or set of products chosen by user on product website. This option affects default action on product and its location.
            '*' indicates that all installed products should be removed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.InstalledProductsToRemove">
            <summary>
            Installed products with default action Remove.
            Used to keep user selection on restart elevated, not for manual use.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.HostsToRemove">
            <summary>
            Full identifiers of hosts to remove silently. This is used in add remove programs menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.HostsToReInstall">
            <summary>
            Full identifiers of hosts to reinstall silently (install extensions scenario)
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.HostsToModify">
            <summary>
            Full identifiers of hosts to modify. SpecificProductNames must contain a list of products to be installed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.HostsToUpdate">
            <summary>
            Full identifiers of hosts to find and apply updates from the gallery...
            Check for updates showing UI, if found shows installer, if not shows up-to-date message.
            '*' indicates that all installed hosts should be checked for update.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.HostsToCheckUpdatesInBackground">
            <summary>
            Full identifiers of hosts to check for updates and notify in tray if available...
            Checks for updates in background and shows tray notification if found. Exits if not.
            '*' indicates that all installed hosts should be checked for update.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.ParticipateInEap">
            <summary>
            When EAP launcher was downloaded or run from EAP product...
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.Hive">
            <summary>
            When we want to define specific predefined hive.
            Special value '*' is used in junction with 'HostsToRemove' when we need to uninstall products from all hives.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.ReSharper9PlusMsi">
            <summary>
            Set to true when called from ReSharper9Plus.msi uninstall 
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.IgnoreExtensions">
            <summary>
            Skip automatic registration of installed extensions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.DisableExtensionVerifier">
            <summary>
            Disable extension verification.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.Silent">
            <summary>
            Run no UI...
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.PerMachine">
            <summary>
            Perform true per-machine installation
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.LogFile">
            <summary>
            Define a custom log file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.LogLevel">
            <summary>
            Logging level for the <see cref="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.LogFile"/>. See <see cref="T:JetBrains.Diagnostics.LoggingLevel"/> for a list of possible values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.Gallery">
            <summary>
            Remote Gallery URL.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.Toolbox">
            <summary>
            Silent "Install", "Update" or "Remove" from the Toolbox.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.FeaturedProducts">
            <summary>
            Show "Featured products" section.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.WebProxy">
            <summary>
            Web proxy settings. See <see cref="T:JetBrains.Application.Install.Installer.WebInstallerWebProxySettingsSerialization"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.ColorTheme">
            <summary>
            Color theme: Dark or Light. If not specified, Dark is used.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.SkipNgenAssemblies">
            <summary>
            Skip Ngen Rider assemblies.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.SkipEtwService">
            <summary>
            Skip ETW service. Do not install, update or remove.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.SkipVsUpdateConfiguration">
            <summary>
            Skip running VS with /Updateconfiguration command line switch after R# install/uninstall.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.LicenseAccepted">
            <summary>
            Set "I have read and accept the license agreement" checkbox.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.InstallerStartupOptions.ChannelId">
            <summary>
            Installer origin source id.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installer.PlatformInstallerConstants">
            <summary>
            Keep in sync with JetBrains.Platform.Installer.Bootstrap.InstallerBootstrapConstants.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.AllProductsInstallerHumanName">
            <summary>
            Human friendly name for all products installers, e.g. "ReSharper Ultimate 2018.1 EAP5 Web Installer"
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.AllProductsInstallerFileNamePart">
            <summary>
            Name part of all products installers file name, e.g. JetBrains.ReSharperUltimate.2020.2.web.exe
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.DefaultProductionCdnUrl">
            <summary>
            Production CDN (RTM and EAP).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.StagingCdnUrl">
            <summary>
            Internal staging CDN. Contains the latest build only (RTM or EAP). See <see cref="M:JetBrains.Application.Install.Installer.PlatformInstallerConstants.IsStagingMode"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.VersionJsonRtmName">
            <summary>
            Contains the semantic version of the latest RTM build, e.g. "111.0.20180201.62931".
            Mind the copy in JetBrains.Platform.Installer.Bootstrap.InstallerBootstrapConstants.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.VersionJsonEapName">
            <summary>
            Contains the semantic version of the latest EAP build, e.g. "111.0.20180124.70542-eap".
            Mind the copy in JetBrains.Platform.Installer.Bootstrap.InstallerBootstrapConstants.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.LatestUpdatesJsonRtmName">
            <summary>
            Contains the information on the latest RTM packages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.LatestUpdatesJsonEapName">
            <summary>
            Contains the information on the latest RTM packages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.LightInstallerRtmName">
            <summary>
            The latest RTM single executable web-installer (no .exe extension).
            Mind the copy in JetBrains.Platform.Installer.Bootstrap.InstallerBootstrapConstants.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.LightInstallerEapName">
            <summary>
            The latest EAP single executable web-installer (no .exe extension).
            Mind the copy in JetBrains.Platform.Installer.Bootstrap.InstallerBootstrapConstants.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.InstallerBootstrapName">
            <summary>
            Installer bootstrapper (located in the product bin folder).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.WebInstallerInBinFolder">
            <summary>
            An empty (not stuffed) installer (located in the product bin folder).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.PlatformInstallerConstants.UpdateGuardRtmName">
            <summary>
            Provide an ability to turn uodate notifications off. Format: {"update-notification-allowed":true}
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Launcher.CleanLauncherPostCompileArtifact">
            <summary>
              <para>The clean (not branded with any product nor stuffed with content, just as built) launcher executables.</para>
              <para>This is the artifact to be used on post-compile stages for the tasks which run on packages.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Launcher.CleanLaunchersPostCompilePackedCacheArtifact">
            <summary>
              <para>Takes <see cref="T:JetBrains.Application.Install.Launcher.CleanLauncherPostCompileArtifact" /> and makes them into a package suitable for caching (as used by <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.ProduceCleanLauncherCompileTimeArtifacts(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnEverything,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProductHomeDirArtifact},JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.ProductBinariesDirArtifact},JetBrains.Application.BuildScript.Solution.SubplatformsInAllInputPackages,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.SkipLocalCompilationArtifact},JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Build.Helpers.Msbuild.IInvokeMsbuild,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor,JetBrains.Util.ILogger)" />).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Launcher.CleanLaunchersPostCompilePackedCacheArtifact.#ctor(JetBrains.Util.Storage.Packages.IJetNugetPackage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Install.Launcher.CleanLaunchersPostCompilePackedCacheArtifact.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Install.Launcher.CleanLauncherTasksPostCompile">
            <summary>
            Manages the Clean Launcher artifacts lifecycle.
            If we have the Core in sources, compiles Clean Launcher and makes it embedded into the Platform Core Shell package.
            If we have the Core in binaries, loads the Clean Launcher from the embedded files.
            This is the post-compile part of the class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Launcher.CleanLauncherTasksPostCompile.PackPostCompileForCachingAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Install.Launcher.CleanLauncherPostCompileArtifact[],JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.BuildScript.Application.Eula.SdkLicenseAgreementArtifact)">
            <summary>
            <see cref="M:JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherTasks.PackCompiledForCachingAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Install.Launcher.CleanLauncherArtifactBase[],JetBrains.Util.Storage.Packages.IJetNugetPackageManager,JetBrains.Application.BuildScript.Application.Eula.SdkLicenseAgreementArtifact)" /> for post-compile artifact.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Launcher.LauncherAssertIsCachedInPackage">
            <summary>
            1) Republishes the Clean Launcher packages to the IPZ as an artifact.
            2) Asserts that a valid package is available for download for Nuget sources. This is necessary to compile locally on cheaper operating systems correctly, and to speed up operations on any OSes. This assertion would prevent merging changes which change the launchers compilation without republishing the package.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Launcher.LauncherAssertIsCachedInPackage.#ctor(JetBrains.Util.Storage.Packages.IJetNugetPackage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Install.Launcher.LauncherAssertIsCachedInPackage.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Install.LocalInstaller">
            <summary>
            Performs local-system installations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.LocalInstall(JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact,JetBrains.Application.Install.LocalInstaller.ResolvedInstallationTargetDirRoot[],JetBrains.Application.Install.LocalInstaller.LocalInstallerRegistryMacro[],JetBrains.Application.Install.InstallationData.InstallationDataFinal)">
            <summary>
            Forces all installation steps required for Local Install to be executed, but does not commit the results.
            The Installer will commit them, if there are no installation errors.
            The Build Application commits them on <see cref="T:JetBrains.Application.BuildScript.Install.LocalInstallCommitPart"/> stages. See <see cref="M:JetBrains.Application.Install.LocalInstaller.BuildAppInstall(JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact,JetBrains.Application.Install.LocalInstaller.ResolvedInstallationTargetDirRoot[],JetBrains.Application.Install.LocalInstaller.LocalInstallerRegistryMacro[],JetBrains.Application.Install.InstallationData.InstallationDataFinal,JetBrains.Util.ILogger)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.BuildAppInstall(JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact,JetBrains.Application.Install.LocalInstaller.ResolvedInstallationTargetDirRoot[],JetBrains.Application.Install.LocalInstaller.LocalInstallerRegistryMacro[],JetBrains.Application.Install.InstallationData.InstallationDataFinal,JetBrains.Util.ILogger)">
            <summary>
            Commits Local Install results when the build script is invoked by the Build Application.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.ValidateOnBuildAppInstall(JetBrains.Application.Build.Validation.PostCompileValidationResult[])">
            <summary>
            Wires up running binary validation on packages when local-install is performed from the Build Application.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.CommitLocalInstall(JetBrains.Application.Install.InstallationData.InstallationDataFinal,System.Collections.Generic.ICollection{JetBrains.Application.Install.LocalInstaller.LocalInstallerRegistryMacro},System.Collections.Generic.ICollection{JetBrains.Application.Install.LocalInstaller.ResolvedInstallationTargetDirRoot},JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Util.ILogger)">
            <summary>
            Commits Local Install results.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.LocalUninstall(JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact,JetBrains.Util.ILogger,JetBrains.Application.Install.LocalInstaller.ResolvedInstallationTargetDirRoot[],JetBrains.Application.Install.LocalInstaller.LocalInstallerRegistryMacro[],JetBrains.Application.Install.InstallationData.InstallationDataFinal)">
            <summary>
            In theory, reverses changes made by <see cref="M:JetBrains.Application.Install.LocalInstaller.CommitLocalInstall(JetBrains.Application.Install.InstallationData.InstallationDataFinal,System.Collections.Generic.ICollection{JetBrains.Application.Install.LocalInstaller.LocalInstallerRegistryMacro},System.Collections.Generic.ICollection{JetBrains.Application.Install.LocalInstaller.ResolvedInstallationTargetDirRoot},JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Util.ILogger)"/>.
            Practically, it's not used, because it cannot work that way.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.InstallCore(JetBrains.Application.Install.InstallationData.InstallationDataFinal,JetBrains.Application.Install.RegistrationStage,System.Collections.Generic.ICollection{JetBrains.Application.Install.LocalInstaller.LocalInstallerRegistryMacro},System.Collections.Generic.ICollection{JetBrains.Application.Install.LocalInstaller.ResolvedInstallationTargetDirRoot},JetBrains.Util.ILogger,JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Application.Install.UninstallableFile[]@)">
            <summary>
            Performs the local installation of the given installation data by writing the Registry keys and copying the files.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.InstallFiles(System.Collections.Generic.IList{JetBrains.Application.Install.InstallationData.InstalledFolder},JetBrains.Application.Install.RegistrationStage,JetBrains.Util.ILogger,System.Func{JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,JetBrains.Util.FileSystemPath},JetBrains.Application.BuildScript.Install.IsolationOptions,System.Collections.Generic.List{JetBrains.Application.Install.UninstallableFile})">
            <summary>
            Copies or deletes the files.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.InstallRegistry(System.Collections.Generic.IReadOnlyList{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Generic.IReadOnlyList{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},JetBrains.Application.Install.RegistrationStage,System.Collections.Generic.IDictionary{System.String,System.String},JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Util.ILogger)">
            <summary>
            Executes the registration/unregistration operations on the Registry keys.
            </summary>
            <param name="regkeys">The Registry to process.</param>
            <param name="regvalues">The Registry to process.</param>
            <param name="registrationStage">Processing type.</param>
            <param name="macros">The macros to substitute when processing the keys.</param>
            <param name="isolation"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.RegisterKey(JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.IDictionary{System.String,System.String},JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Util.ILogger)">
            <summary>
            Writes the key to the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.RegisterValue(JetBrains.Application.Install.InstallationData.InstalledRegistryValue,System.Collections.Generic.IDictionary{System.String,System.String},JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Util.ILogger)">
            <summary>
            Writes the value to the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.UnregisterKey(JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.IDictionary{System.String,System.String},JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Util.ILogger)">
            <summary>
            Deletes the key from the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.UnregisterValue(JetBrains.Application.Install.InstallationData.InstalledRegistryValue,System.Collections.Generic.IDictionary{System.String,System.String},JetBrains.Application.BuildScript.Install.IsolationOptions,JetBrains.Util.ILogger)">
            <summary>
            Deletes the value from the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstallStandaloneLaunchers.EmitInstallTimeLauncherHosts(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostArtifact[],JetBrains.Application.BuildScript.SerializedHostComponentItemArtifact[],JetBrains.Application.Install.Launcher.CleanLauncherPostCompileArtifact[],JetBrains.Application.BuildScript.Install.Launcher.LauncherInstaller.NativeResourceForLauncher[],JetBrains.Util.ILogger,JetBrains.Application.BuildScript.Compile.CodeSigning.IAuthenticodeSigningService,JetBrains.Application.Components.Optional{JetBrains.Application.BuildScript.Install.LocalInstallRootSuffix},JetBrains.Build.Running.IBuildTaskHost,JetBrains.Application.BuildScript.Helpers.BuildStaThreadHelper,JetBrains.Application.BuildScript.PreCompile.ManagedProjectsStuffing.DevKit.BuildChainFlavor)">
            <summary>
            Emits the install-time launcher hosts (as opposed to the compile-time in-package launchers which are done on the source stage).
            Publishes info for their OS integration.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstallStandaloneLaunchers.RetrieveCompileTimeLauncherHostOsIntegrationsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.Solution.AllAssembliesOnPackagesEx,JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
            Compile-time in-package hosts have been produced at the source stage and will be just extracted from their packages, but now their OS integration has to be processed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstallStandaloneLaunchers.MakeLnkAndFileAssocForHost_ChooseLauncher(JetBrains.Application.BuildScript.Install.Launcher.StandaloneLauncherHostOsIntegration,JetBrains.Util.ILogger)">
            <summary>
            Register to the host of the right bitness.
            Prefer the native launcher of the system-best CPU (because it shows splash quickly and checks for all requirements and loads CLR nicely and so on), then MSIL if not found.
            </summary>
            <param name="hosti"></param>
            <param name="logger"></param>
            <returns>NULL on failure.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.ProductContentResourcePackageGallery">
            <summary>
            Installer gallery specifically for Pack EXE distribution. Runs immediately on the memory-mapped EXE file body by reading the Product Content Pack ZIP from the native resources of the executable.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.ProductContentResourcePackageGallery.LoadDeferred(JetBrains.Application.Progress.IProgressIndicator,JetBrains.Util.OnError)">
            <summary>
            Reads the ZIP catalog, reads only manifest of each package (right from the native resource bytes, no mem cloning), and leaves reading the rest to when the package is actually needed.
            NOTE: requires the ZIP Entry streams be seekable, which means they MUST NOT be compressed when packing. Packer looks at the gallery flag to ensure that.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.RegistrationStage">
            <summary>
            Defines the exact stage of the registration process of which the handler is being queried.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.RegistrationStage.Register">
            <summary>
            The assembly is being registered.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.RegistrationStage.Unregister">
            <summary>
            The assembly is being unregistered.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.RiderInstaller.ProductBinaryPackageArtifact">
            <summary>
            Contains a package with binary files for a product.
            The primary purpose is to transport Rider frontend binaries to the dotNet installer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.RiderInstaller.RiderArtifact">
            <summary>
            Used to make legacy Rider nsis-installer.
            Please visit dotnet-teamcity-config.git repository before renaming or changing it. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.ValidateWhenMakingInstallers">
            <summary>
            Wires up post-compile validation to IPZ.
            Makes a file with validation errors list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.WindowsShellIntegrationHelper.UpdateSystemFileAssociation">
            <summary>
            Call this method every time file associations has been changed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.WindowsShellIntegrationHelper.ApplicationRegistration">
            <summary>
            Application Registration.
            See: "https://docs.microsoft.com/en-us/windows/win32/shell/app-registration".
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.WindowsShellIntegrationHelper.FileTypeAssociation">
            <summary>
            File type association.
            See: https://docs.microsoft.com/en-us/windows/win32/shell/fa-file-types
            See: https://docs.microsoft.com/en-us/windows/win32/shell/fa-progids
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.WindowsShellIntegrationHelper.DirectoryAssociation">
            <summary>
            Directory association.
            See: https://stackoverflow.com/questions/4902041/windows-shell-add-item-to-context-menu-when-click-on-blank-part-of-folder
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.About.AboutBoxAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.About.AboutBoxAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.Application.StdApplicationUI.About.ExposeDeploymentPackagingIdentityInAboutBox">
            <summary>
            If a product has been installed with an installer which got the packaging identity, expose it in the About Box.
            </summary>
        </member>
        <member name="T:JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox">
            <summary>
            Additional About Box display.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.ClipboardData">
            <summary>
            Adds data to the text content that will be copied to clipboard.
            Either a single-line string or a set of CRLF-terminated lines.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.About.IPopulateAboutBox.DisplayText">
            <summary>
            Adds a Rich Text Label to the About Box presentation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.StdApplicationUI.IMainWindow">
            <summary>
            Represents the main window of the application.
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.OpensUri.IsInternetConnected">
            <summary>
            The IsInternetConnected function determines whether the current user is connected to the Internet.
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.OpensUri.OpenUri(System.Uri)">
            <summary>
            Opens the specific URI in the default Web browser.
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.OpensUriEx.Open(System.Uri)">
            <summary>
            Opens the specific URI in the default Web browser.
            However, it is recommended to use component <see cref="M:JetBrains.Application.StdApplicationUI.OpensUri.OpenUri(System.Uri)"/>, it is overriden in tests
            </summary>
        </member>
        <member name="T:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar">
            <summary>
            Provides access to the Status Bar of the UI application.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.Indicators">
            <summary>
            Gets the collection of the status bar indicators.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.IsVisible">
            <summary>
            Gets whether the application status bar is currently visible (not turned off).
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.Text">
            <summary>
            Gets or sets the text currently displayed in the status bar.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar.IsEmphasized">
            <summary>
            Gets or sets whether the statusbar text is currently emphasized.
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBarEx.ClearText(JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar)">
            <summary>
            Clears the status bar text.
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBarEx.SetText(JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar,System.String,System.Boolean)">
            <summary>
            Sets the status bar text.
            </summary>
            <param name="thіs"></param>
            <param name="text">Text.</param>
            <param name="isEmphisized">Whether to apply special highlighting to the status bar text to emphasize that it's not a routine message.</param>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.StatusBars.IStatusBarEx.GetCurrentText(JetBrains.Application.StdApplicationUI.StatusBars.IStatusBar,JetBrains.Application.UI.StdApplicationUI.StatusBar.SubclassedStatusBar)">
            <summary>
            If the status bar is subclassing the IDE status bar (like, in Visual Studio), gets the actual text from the IDE and returns it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator">
            <summary>
            Represents the data for an indicator in the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.myContent">
            <summary>
              <see cref="T:JetBrains.Application.UI.Controls.WindowlessControlAutomation" />
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Util.ILogger,System.Double)">
            <param name="lifetime"></param>
            <param name="logger"></param>
            <param name="priority">indicator with highest priority is placed into the rightmost position</param>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.Click">
            <summary>
            Fires when the user clicks a mouse button on the control.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.Content">
            <summary>
              <para>Gets or sets the automation object for the view which manages the painting and layouting of the indicator.</para>
              <para>There must be registered views for both WPF (<code>ViewKind.Wpf</code>) and a Windowless Control (<see cref="F:JetBrains.Application.UI.Automation.ViewKind.WindowlessControl" />) if you want your control to be presented correctly across all supported VS versions.</para>
              <para>If the value is <c>Null</c>, the status bar indicator is hidden and collapsed. You may use this approach for concealing the indicator instead of removing it from the status bar.</para>
              <para>To show a tooltip over your indicator, implement <code>AvalonTooltipManagerComponent.GetJetTooltipEvent</code> or <see cref="T:JetBrains.Application.UI.Tooltips.ITooltipProvider" /> on your view of this content, depending on its type.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.ContextMenu">
            <summary>
            Fires when a context menu should be shown.
            Note: the <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu" /> object is disposable. You must either avoid creating it by not touching the <see cref="T:System.Lazy`1" /> container, or use the value you get from it (either <code>JetPopupMenu.Show(JetBrains.Lifetimes.LifetimeDefinition)</code> the menu, which will then dispose of it correctly, or <see cref="M:System.IDisposable.Dispose" /> of it explicitly).
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.ContextMenuRequested">
            <summary>
            Fire the signal to show context menu on demand
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.Cursor">
            <summary>
            Gets or sets the mouse cursor for the indicator view.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.DoubleClick">
            <summary>
            Fires when the user double-clicks a mouse button on the control.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.IsHot">
            <summary>
            Gets whether the control is currently hot (has mouse over its view).
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.Margin">
            <summary>
            The margin around the "WindowlessControl" content inside the status bar indicator place.
            </summary>
        </member>
        <member name="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.TooltipRequested">
            <summary>
              <para>A simple implementation of a text tool tip on the status bar indicator in the whole.</para>
              <para>This is only triggered if the <see cref="P:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.Content" />'s view does not handle tooltip on itself, in either WPF or Windowless Control.</para>
              <para>Handling of the tooltip on the view might be required if you want to have different tooltips over different indicator areas, or present advanced tooltip content. Handling the tooltip with this method is simpler and also applies advanced layouting for the tooltip so that it didn't cover the indicator.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.StdApplicationUI.StatusBars.JetStatusBarIndicator.ContextMenuEventArgs.ShowMenu(System.Action{JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu})">
            <summary>
            Call this method if you would like to show the menu.
            Your code will be called to fill the menu with items and define their behavior after the menu is initialized and before it's shown.
            The lifetime will be terminated when the menu closes (limited by the indicator lifetime).
            </summary>
        </member>
        <member name="T:JetBrains.Application.StdApplicationUI.StatusBars.StatusBar">
            <summary>
            Default status bar document implementation. Data-only. Both clients and status bar implementations access data in this class.
            </summary>
        </member>
        <member name="T:JetBrains.Application.StdApplicationUI.TaskBar.TaskBarManager">
            <summary>
            Base dummy impl of the task bar manager.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Dispatch.BuildAppDispatch.BuildRequestedFull">
            <summary>
            A fully custom build request.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Dispatch.BuildAppDispatch.BuildRequestedSimple">
            <summary>
            Requests that a build be run, applies all defaults to the parameters, but for the resulting artifact objectives.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Dispatch.BuildAppDispatchActivateLogOnBuild">
            <summary>
            When a build starts running, activates various UI for it (e.g. opens build log view) or generates teamcity logs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Dispatch.BuildAppDispatchTurnSimpleBuildRequestIntoFull">
            <summary>
            Serves simple build requests on app dispatch by wrapping them with a fully-defined request.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Dispatch.BuildAppFullRequest">
            <summary>
            Defines all parameters of the request to run with the build.
            Originally, were the <see cref="T:JetBrains.Build.Running.IBuildRunnerRequest" /> of the engine itself.
            Then, it's the version-independent <see cref="T:JetBrains.Build.Running.BuildRunnerCommandString" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Dispatch.BuildAppSession">
            <summary>
            When a build app runs a session, allows to track its progress.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Dispatch.BuildAppSession.AsyncBuildResult">
            <summary>
            A task which completes when the build is done.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Dispatch.BuildAppSession.LogEntries">
            <summary>
            The logged entries, live list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Dispatch.BuildAppSession.Request">
            <summary>
            The original request for running this build.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.myCurrentlyRunningBootstrapBuildsCount">
            <summary>
            Free-threaded counter of running bootstrap builds. Does not affect manually-runs, but prevents auto-refresher from running
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IThreading,JetBrains.Application.Build.Runner.IInputArtifactStringTable,JetBrains.Application.Build.App.Dispatch.BuildAppDispatch,JetBrains.Application.FileSystemTracker.IFileSystemTracker,JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.CachedBootstrapper">
            <summary>
            Full info on the cached bootstrapper: its files, plus info on how to check if it's up to date and track for changes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.CachedBootstrapper.CacheFileRelToHomeDir">
            <summary>
            Name of the file used by the current build system version for storing the cached compiled bootstrapper.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.CachedBootstrapper.#ctor(System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.ImmutableFileItem},System.Collections.Generic.IReadOnlyCollection{JetBrains.Build.Helpers.Inputs.ITrackableFileItemDescriptions})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.CachedBootstrapper.TryReadFromFileNoFail(JetBrains.Util.FileSystemPath,JetBrains.Util.ILogger)">
            <summary>
            Tries to load from persistent caching, no error if any problems.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.CachedBootstrapper.WriteToFileNoFail(JetBrains.Util.FileSystemPath,JetBrains.Util.ILogger)">
            <summary>
            Tries to save for persistent caching, no error if any problems.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Dispatch.RunBootstrapperBuildForDispatch.CachedBootstrapper.JetBrains#Util#Storage#StructuredStorage#IStructuredStorageSerializable#GetObjectData(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Build.App.Dispatch.BuildAppRunnerBootstrapped.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Build.App.Params.BuildAppStartupArtifactValues">
            <summary>
            Assigns initial startup values for build artifacts.
            This includes artifacts from the command line and predefined values (like <see cref="T:JetBrains.Application.BuildScript.ProductHomeDirArtifact" />).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent">
            <summary>
            Creates the component with <see cref="T:JetBrains.Application.Build.Runner.IInputArtifactStringTable"/> when running the shelled version of the build tool.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.#ctor(JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.InputArtifactStringTableRawStorage,System.Collections.Generic.IEnumerable{JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.IFillInputArtifactStringTableRawStorage})">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.JetBrains#Application#Build#Runner#IInputArtifactStringTable#Artifacts">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.JetBrains#Application#Build#Runner#IInputArtifactStringTable#MapArtifactNameToValue">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.JetBrains#Application#Build#Runner#IInputArtifactStringTable#MapLocalNameToFullNames">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.JetBrains#Application#Build#Runner#IInputArtifactStringTable#TryGetPreferredFullNameByLocalName(JetBrains.Util.StringSlice)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.IFillInputArtifactStringTableRawStorage">
            <summary>
            Components with this interface must all be done before <see cref="T:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent" /> exposes it to general public.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent.InputArtifactStringTableRawStorage">
            <summary>
            To let all stringtable loaders run correctly, this is the separate storage only exposed with <see cref="T:JetBrains.Application.Build.App.Params.InputArtifactStringTableComponent" /> when fully ready.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Params.LocalSettings.SyncInputArtifactStringsFromLocalSettings">
            <summary>
            Syncs the <see cref="T:JetBrains.Application.Build.Runner.InputArtifactStringTable" /> arts with external sources.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Params.SimpleBuildRequest">
            <summary>
            Denotes the skeleton of the build request (the entry point and key params).
            The other parameters are environment-based and will be assigned when translating into the full request and before running the build.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Params.SimpleBuildRequest.DisplayName">
            <summary>
            User-friendly display name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Params.SimpleBuildRequest.MainObjective">
            <summary>
            The main objective of the outermost build. Usually, just one of the predefined entry points which run the nested build for the real objective after all of the preparatory steps.
            See creator methods for examples.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Params.SimpleBuildRequest.Parameters">
            <summary>
            Optional input artifacts. When running standard wrapper objectives, might specify what to run as the binary stage payload of the build.
            With bootstrapped build runner, all parameter instances must be serializable to strings (as <see cref="M:JetBrains.Reflection.ReflectionExtensions.ToInvariantString(System.Object,JetBrains.Util.ILogger)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.SimpleBuildRequest.CreateBinaryStage``1">
            <summary>
            Creates simple request for running a local binary-stage build.
            Locally, this requires running the source-stage to compile and pack the Nuget packages first.
            So the main objective is set to the predefined <see cref="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage" />, and the binary stage objective is passed as the <see cref="T:JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact" /> artifact.
            </summary>
            <typeparam name="TBinaryStageObjective">Objective for the second, binary stage.</typeparam>
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.SimpleBuildRequest.CreateBinaryStage``1(System.Object[])">
            <summary>
            Creates simple request for running a local binary-stage build.
            Locally, this requires running the source-stage to compile and pack the Nuget packages first.
            So the main objective is set to the predefined <see cref="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage" />, and the binary stage objective is passed as the <see cref="T:JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact" /> artifact.
            </summary>
            <typeparam name="TBinaryStageObjective">Objective for the second, binary stage.</typeparam>
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.SimpleBuildRequest.CreateBinaryStage(JetBrains.Build.Serialization.AssemblyQualifiedTypeName)">
            <summary>
            Creates simple request for running a local binary-stage build.
            Locally, this requires running the source-stage to compile and pack the Nuget packages first.
            So the main objective is set to the predefined <see cref="T:JetBrains.Application.BuildScript.EntryPoints.EntryLocalRunBinaryStage" />, and the binary stage objective is passed as the <see cref="T:JetBrains.Application.BuildScript.BinaryStageObjectiveArtifact" /> artifact.
            </summary>
            <param name="aqtnBinaryStageObjective">Objective for the second, binary stage.</param>
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.SimpleBuildRequest.CreateExplicit``1(System.Object[])">
            <summary>
            Creates the simple request for running a build for exactly the objective specified.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.SimpleBuildRequest.CreateExplicit(JetBrains.Build.Serialization.AssemblyQualifiedTypeName,System.Object[])">
            <summary>
            Creates the simple request for running a build for exactly the objective specified.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Params.SimpleBuildRequestFiller">
            <summary>
            Helps with filling the complete <see cref="T:JetBrains.Build.Running.BuildRunnerRequest" /> from the context available to the build runner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Params.SimpleBuildRequestFiller.SetInputArtifactsFromStringTable(JetBrains.Build.Running.EitherBuildRunnerRequest,JetBrains.Application.Build.Runner.IInputArtifactStringTable,System.Collections.Generic.ICollection{System.Object},JetBrains.Util.ILogger)">
            <summary>
            Writes InputArtifactStrings to the request, based on the <see cref="M:JetBrains.Application.Build.App.Params.SimpleBuildRequestFiller.SetInputArtifactsFromStringTable(JetBrains.Build.Running.EitherBuildRunnerRequest,JetBrains.Application.Build.Runner.IInputArtifactStringTable,System.Collections.Generic.ICollection{System.Object},JetBrains.Util.ILogger)" /> and optional custom parameters.
            </summary>
            <param name="request">The full request to get filled.</param>
            <param name="stringtable">Stringtable with globally known artifact values. In the build app, these are settings chosen in GUI or loaded from the app settings file or passed as cmdline parameters.</param>
            <param name="parametersToExclude">These have already been supplied as serialized objects, and should be filtered out from any string representations to avoid duplicates.</param>
            <param name="logger">Logger.</param>
        </member>
        <member name="T:JetBrains.Application.Build.App.ShellBasedBuiltInBuildEngineExtraction">
            <summary>
            A component which can find all Build Engine DLLs. The version which knows of the Shell and can use the part catalog / application packages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.ShellBasedBuiltInBuildEngineExtraction.CollectBuiltInEngineDlls(JetBrains.Application.Environment.ApplicationPackagesLocallyInstalled,JetBrains.Application.Components.Optional{JetBrains.Application.Catalogs.PartCatalog})">
            <summary>
            DLLs required to run the builtin version of the engine.
            </summary>
            <param name="appPackages"></param>
            <param name="catalogset"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog">
            <summary>
            Emits build log messages into TC output.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Build.App.Dispatch.BuildAppDispatch,JetBrains.Application.Build.Runner.IInputArtifactStringTable,JetBrains.Util.ILogger,JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog.Features)">
            <summary>
            Shell ctor, listens for sessions in the build app dispatch.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Build.Runner.IInputArtifactStringTable,JetBrains.Util.ILogger,JetBrains.DataFlow.IListEvents{JetBrains.Build.Running.BuildLogRecord},JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog.Features)">
            <summary>
            Manual ctor, serves the single session. Hidden from the container, use factory method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog.CreateForSingleSession(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Build.Runner.IInputArtifactStringTable,JetBrains.Util.ILogger,JetBrains.DataFlow.IListEvents{JetBrains.Build.Running.BuildLogRecord},JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog.Features)">
            <summary>
            Manual ctor, serves the single session. Hidden from the container, use factory method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.TeamCity.TeamCityBuildLog.InitCommon_ApplyTags(JetBrains.Application.Build.Runner.IInputArtifactStringTable,JetBrains.Util.ILogger)">
            <summary>
            Apply tags to the build (taken from build parameters).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomationInteractivityBase">
            <summary>
            User interactivity for the <see cref="T:JetBrains.Application.Build.App.Ux.BuildAppDispatchAutomation" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Ux.BuildLog.ShowApplicationLog(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Shows the log tool window instance which starts dumping the application log.
            </summary>
            <param name="lifetimeRecording"></param>
            <param name="title"></param>
        </member>
        <member name="M:JetBrains.Application.Build.App.Ux.BuildLog.ShowManualLog(JetBrains.Lifetimes.Lifetime,System.String,System.Boolean)">
            <summary>
            Shows the log tool window without attaching to any log source. Returns the collection which should be populated with log records by the caller.
            </summary>
            <param name="lifetimeRecording"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.LocalInstallAutomation.IsProductBinariesDirExplicitlySpecified">
            <summary>
            Means PBDA is specified as a final value, so the relative hint has no effect.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.LogAutomation.AllRecords">
            <summary>
            Input collection with all the log records.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.LogAutomation.IsShowingRunningItem">
            <summary>
            When <c>True</c>, a fake “Running” item is added to the end.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.LogAutomation.TreeItemsSource">
            <summary>
            The collection as it should be displayed by the tree.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.App.Ux.LogAutomation.AddRecord(JetBrains.Build.Running.BuildLogRecord)">
            <summary>
            Externally adds a record to the log in <see cref="F:JetBrains.Application.Build.App.Ux.LogAutomation.AllRecords" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.SwatchIndicatorAutomation.ColorCode.Indeterminate">
            <summary>
            There is no result yet (e.g. operation has not yet started for this item).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.SwatchIndicatorAutomation.ColorCode.Good">
            <summary>
            The result is OK (so far no warnings or errors).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.SwatchIndicatorAutomation.ColorCode.Warnings">
            <summary>
            There were warnings (but not errors).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.SwatchIndicatorAutomation.ColorCode.Errors">
            <summary>
            There were errors.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.App.Ux.SwatchIndicatorAutomation.ColorCode.Excluded">
            <summary>
            The item is excluded from the run.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.App.Ux.TaskBarBuildProgress">
            <summary>
            Show progress when dispatch reports running a build.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineArtifact">
            <summary>
            Assigns a value to a build artifact before running the build.
            Syntax: <c>name=value</c>
            Name is the build artifact class name, long (with namespace) or short (just local class name, if not ambiguous).
            Value is the string representation for the artifact value, to be coerced to artifact type with <see cref="T:System.ComponentModel.TypeConverter" /> or <see cref="T:System.Windows.Markup.ValueSerializer" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineBuildEngine">
            <summary>
            Specifies path to the build engine binaries. See impl for comments on allowed formats.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineBuildRunnerRequest">
            <summary>
            Fully defines the build runner request, including the build script, engine, and inputs.
            Takes the full path to the file with the <see cref="T:JetBrains.Build.Running.BuildRunnerRequest" /> serialized object, in the current build runner format.
            The format must match exactly, so do not use this to pass build data unless when between the runners of exactly the same version.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineBuildScriptBin">
            <summary>
            Specifies path to the build script binaries. See impl for comments on allowed formats.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineBuildScriptSrc">
            <summary>
            Specifies path to the folder with <c>*.cs</c> build sources.
            If no such parameters are given on the command line, autodetects sources in well-known Platform folders.
            To suppress autodetection without supplying sources, pass a commandline key with an empty value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineOutputsDir">
            <summary>
            Allows to specify the <see cref="F:JetBrains.Build.Running.BuildRunnerCommandString.OutputsDir" /> on the command line.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineOutputsFile">
            <summary>
            Allows to specify the <see cref="F:JetBrains.Build.Running.BuildRunnerCommandString.OutputsFile" /> on the command line.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.CmdLineKeys.CmdLineRunBuild">
            <summary>
            Runs the build for the specified build artifact class name, long (with namespace) or short (just local class name, if not ambiguous).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.License.AddDeploymentPackagingThirdPartyLibrariesInfo">
            <summary>
              When packaging for deployment, adds info on third party libraries used by the products in that packaging.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.License.AddDeploymentPackagingThirdPartyLibrariesInfo.JetBrains#Application#BuildScript#Install#IAddFilesToDeploymentPackagings#AddFilesAsync(JetBrains.Lifetimes.OuterLifetime,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.IHaveJetNugetPackage})">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Build.License.ThirdPartyLibrariesForProduct">
            <summary>
              Raw info on third party libraries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.License.ThirdPartyLibrariesForProduct.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Build.License.ThirdPartyLibrariesTasks">
            <summary>
            Collects info on third party libraries used in products, and their licenses. Does the basic publishing in Wiki format (see Rider uses for its publishings).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.License.ThirdPartyLibrariesTasks.ourKnownOpenSourceBaseLicenses">
            <summary>
              Set of SPDX license identifiers under which JetBrains releases its open source software
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.License.ThirdPartyLibrariesTasks.CollectThirdPartyLibraries_ProductsWithPackages(JetBrains.Lifetimes.Lifetime,JetBrains.Application.BuildScript.InputPackage[],JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
            Get all possibly installable packages, per installable product.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.License.ThirdPartyLibrariesTasks.CollectThirdPartyLibraries_LicenseMetadataForPackages(JetBrains.Lifetimes.Lifetime,System.Tuple{JetBrains.Application.Install.Installable.InstallablePackage,System.Collections.Generic.IReadOnlyCollection{JetBrains.Util.Storage.Packages.JetPackageIdentity}}[],System.Collections.Generic.IReadOnlyDictionary{System.String,JetBrains.Util.Storage.Packages.IJetNugetPackage},System.Collections.Generic.IReadOnlyDictionary{System.String,System.ValueTuple{System.Collections.Generic.List{JetBrains.Application.BuildScript.Compile.LibraryLicenseEntry},JetBrains.Util.Collections.JetBinaryTree.JetRelativePathPrefixTree{JetBrains.Application.BuildScript.Compile.ThirdPartyLicenseInfo}}},JetBrains.Build.Running.IBuildTaskHost,JetBrains.Util.ILogger)">
            <summary>
            Get license-friendly metadata info for packages, including external provided through <see cref="T:JetBrains.Application.BuildScript.Compile.SubplatformThirdPartyLicenseInfo" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.License.ThirdPartyLibrariesTasks.ValidateLicenses(JetBrains.Application.Build.License.ThirdPartyLibrariesForProduct[])">
            <summary>
            Include checking third party licenses consistency when doing validation runs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.NgenTasks.NgenService">
            <summary>
            A stub for the service which emits native images for managed assemblies for a specific runtime. NOTE might throw if it's not the current runtime.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.NgenTasks.NgenService.Identity">
            <summary>
            Identity of the impl, for caching.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.NgenTasks.TeamCityPostCompileNgenResultFile">
            <summary>
            The target artifact for a post-compile TC step which takes all compile packages and makes NGen companion packages for them, and exposes them as the same <see cref="T:JetBrains.Application.BuildScript.EntryPoints.TeamCityTasks.TeamCityCompileResultData" /> so that other post-compile builds which take this one could use them just like other compiled input packages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.NgenTasks.TeamCityPostCompileNgenResultFile.#ctor(JetBrains.Util.Storage.ImmutableFileItem)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Build.NgenTasks.TeamCityPostCompileNgenResultFile.#ctor(JetBrains.Util.Storage.StructuredStorage.IStructuredStorage)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Build.NgenTasks.TeamCityPostCompileNgenTargetRuntime">
            <summary>
            Specifies for which OS to make NGen packages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.Runner.BuildRequestEntryBinaries">
            <summary>
            Handles binary parameters on the build request which can be overridden on the command line.
            There's no autodiscovery — if they're not cmdline-supplied, then they're not set.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRequestEntryBinaries.FilterOutNonBinSstg(System.Collections.Generic.List{JetBrains.Util.Storage.ImmutableFileItem})">
            <summary>
            Filters out files with build engine/script binaries by removing SSTGs which don't hold the right type of data.
            This would have happened later in the build, but saves passing potentially large files back and forth.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.RunCommandLine(System.String,System.Collections.Hashtable,System.String[],System.String[],System.String[],System.Int32)">
            <summary>
            Runs the command-line version of the build, without spawning the full shell.
            </summary>
            <param name="objective">Local name or full name of the build objective artifact.</param>
            <param name="artifactStringValues">Optional artifact string values. Map a local or full name to the string representation.</param>
            <param name="dirsWithBuildScriptSources">Optional directories with build script sources (if there's build script in the source code form). The strings are paths to directories in which to look for build script sources, recursively; paths are either absolute, or relative to the <see cref="T:JetBrains.Application.BuildScript.ProductHomeDirArtifact" />, if given on the commandline.</param>
            <param name="filesWithBuildScriptBinaries">Optional files with build script binaries — assemblies, Nuget packages, or structured storages with these (if there's build script in the binary form). The strings are absolute paths to files.</param>
            <param name="filesWithBuildEngine">Optional files with build engine binaries (if using custom build engine rather than reusing build runner's). The strings are absolute paths to files.</param>
            <returns>Result code, negative for a failure, S_OK if clean, S_FALSE if nearly ok but there were warnings.</returns>
            <param name="nMaxLoggingLevel">Maximum logging level in <see cref="T:JetBrains.Diagnostics.LoggingLevel" /> values. Any higher (= less meaningful) messages will be omitted from output.</param>
            <returns>Result code, negative for a failure, S_OK if clean, S_FALSE if nearly ok but there were warnings.</returns>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.RunCommandLineInterface">
            <summary>
            The command line interface entry point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.RunTeamCity(System.String,System.Collections.Hashtable,System.String[],System.String[],System.String[])">
            <summary>
            Runs the TeamCity version of the build, without spawning the full shell.
            </summary>
            <param name="objective">Local name or full name of the build objective artifact.</param>
            <param name="artifactStringValues">Optional artifact string values. Map a local or full name to the string representation.</param>
            <param name="dirsWithBuildScriptSources">Optional directories with build script sources (if there's build script in the source code form). The strings are paths to directories in which to look for build script sources, recursively; paths are either absolute, or relative to the <see cref="T:JetBrains.Application.BuildScript.ProductHomeDirArtifact" />, if given on the commandline.</param>
            <param name="filesWithBuildScriptBinaries">Optional files with build script binaries — assemblies, Nuget packages, or structured storages with these (if there's build script in the binary form). The strings are absolute paths to files.</param>
            <param name="filesWithBuildEngine">Optional files with build engine binaries (if using custom build engine rather than reusing build runner's). The strings are absolute paths to files.</param>
            <returns>Result code, negative for a failure, S_OK if clean, S_FALSE if nearly ok but there were warnings.</returns>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.FillCommandStringObject(System.String,System.Collections.Hashtable,System.String[],System.String[],System.String[])">
            <summary>
            Converts scattered parameters for powershell input into the command string object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.InitDefaultAppFileLogging">
            <summary>
            Starts logging to the standard logs location. That's not the working output of the logs (which go to stdout/teamcity with all formatting etc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.LogSummaryIntoCommandLine(JetBrains.Diagnostics.LoggingLevel,JetBrains.Build.Running.BuildRunnerSession,System.TimeSpan)">
            <summary>
            Expected to be called when session is not running any more.
            Summarizes the run and prints the first error/warning.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.RunCommandLineInterfaceCore">
            <summary>
            In-catch part of <see cref="M:JetBrains.Application.Build.Runner.BuildRunner.RunCommandLineInterface" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.BuildRunner.EntryTeamCity.#ctor(System.String,System.IntPtr)">
            <summary>
            Runs the TeamCity version of the build, without spawning the full shell.
            </summary>
            <param name="sBuildRunnerCommandString">Build runner command string in the standard format.</param>
            <param name="pdwRetval">The return value of the run: a pointer to a DWORD where it should be written.</param>
            <returns>Result code, negative for a failure, S_OK if clean, S_FALSE if nearly ok but there were warnings.</returns>
        </member>
        <member name="T:JetBrains.Application.Build.Runner.IInputArtifactStringTable">
            <summary>
            Deals with input artifacts, mainly in the build tool UI.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.IInputArtifactStringTable.Artifacts">
            <summary>
            Allows to watch individual artifacts for their live values.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.IInputArtifactStringTable.MapArtifactNameToValue">
            <summary>
            Maps the artifact name to its string value serialization.
            The name is either the local name or the full name of the artifact.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.IInputArtifactStringTable.MapLocalNameToFullNames">
            <summary>
            Caches names in keys of the <see cref="P:JetBrains.Application.Build.Runner.IInputArtifactStringTable.MapArtifactNameToValue" /> by their local name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.IInputArtifactStringTable.TryGetPreferredFullNameByLocalName(JetBrains.Util.StringSlice)">
            <summary>
            If one or more artifacts match this local name, stabily chooses one of the full names.
            </summary>
            <param name="localname"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry`1">
            <summary>
            Typed version of <see cref="T:JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry" />.
            </summary>
            <typeparam name="TArtifact"></typeparam>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry`1.LiveValue">
            <summary>
            The typed value, live.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry">
            <summary>
            An item in <see cref="T:JetBrains.Application.Build.Runner.IInputArtifactStringTable" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry.IsDefined">
            <summary>
            Whether there's a value for this artifact.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry.LiveString">
            <summary>
            The raw string value, live.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.IInputArtifactStringTableEntry.String">
            <summary>
            Gets, sets, or removes a value as a raw string.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.Runner.InputArtifactStringTable">
            <summary>
            Deals with input artifacts, mainly in the build tool UI.
            Base impl.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.Artifacts">
            <summary>
            Allows to watch individual artifacts for their live values.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.MapArtifactNameToValue">
            <summary>
            Maps the artifact name to its string value serialization.
            The name is either the local name or the full name of the artifact.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.MapLocalNameToFullNames">
            <summary>
            Caches names in keys of the <see cref="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.MapArtifactNameToValue" /> by their local name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.InputArtifactStringTable.TryGetPreferredFullNameByLocalName(JetBrains.Util.StringSlice)">
            <summary>
            If one or more artifacts match this local name, stabily chooses one of the full names.
            </summary>
            <param name="localname"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.InputArtifactStringTableEntry`1.LiveValue">
            <summary>
            The typed value, live.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.ArtifactItem.IsDefined">
            <summary>
            Whether there's a value for this artifact.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.ArtifactItem.LiveString">
            <summary>
            The raw string value, live.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Build.Runner.InputArtifactStringTable.ArtifactItem.String">
            <summary>
            Gets, sets, or removes a value as a raw string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.InputArtifactStringTable.EnumArtifactsOnCommandLine(JetBrains.Application.Hosting.ICommandLine,System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            Parses artifacts from the command line.
            Long syntax: command line key named <c>Artifact</c>, its value has the artifact name and value separated with <c>=</c>.
            Short syntax (optional): command line keyless parameter prefixed with <c>&amp;</c> has then the artifact name and value separated with <c>=</c>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.InputArtifactStringTable.FillFromCommandLine(JetBrains.Application.Build.Runner.InputArtifactStringTable,JetBrains.Application.Hosting.ICommandLine,System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            Parses artifacts from the command line.
            Long syntax: command line key named <c>Artifact</c>, its value has the artifact name and value separated with <c>=</c>.
            Short syntax (optional): command line keyless parameter prefixed with <c>&amp;</c> has then the artifact name and value separated with <c>=</c>
            </summary>
            <param name="stringtable"></param>
            <param name="cmdline"></param>
            <param name="isAllowShortSyntax"></param>
            <param name="Logger"></param>
        </member>
        <member name="M:JetBrains.Application.Build.Runner.InputArtifactStringTable.FillFromCommandLine(JetBrains.Build.Running.BuildRunnerRequest,JetBrains.Application.Hosting.ICommandLine,System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            Parses artifacts from the command line.
            Long syntax: command line key named <c>Artifact</c>, its value has the artifact name and value separated with <c>=</c>.
            Short syntax (optional): command line keyless parameter prefixed with <c>&amp;</c> has then the artifact name and value separated with <c>=</c>
            This one bypasses the <see cref="T:JetBrains.Application.Build.Runner.InputArtifactStringTable" /> and fills the <see cref="T:JetBrains.Build.Running.BuildRunnerRequest" /> directly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.Validation.PostCompileValidationResult">
            <summary>
            Synthetic artifact which derives from all the post-compile-stage validation artifacts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.PostCompileValidationResult.Errors">
            <summary>
            The list of validation errors, if any.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.Validation.ValidateComponentSpecificZoning">
            <summary>
              <para>(1) Checks that all components are zone-filter-visible.</para>
              <para>(2) For environment components, checks they are only zoned with env zones.
            An environment component runs within the Environment Container, which only has Environment zones ever enabled. So if an environment component is zoned with a non-environment zone, it would just never run.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Validation.ValidateComponentSpecificZoning.CheckActivatorNotPullingNewEnvZones(JetBrains.Application.Catalogs.PartCatalogType,System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Application.Zones.ZonePart},JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping,System.Collections.Generic.IDictionary{JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Application.BuildScript.Application.Zones.ModuleZoneLevel},System.Collections.Generic.IList{JetBrains.Util.ValidationException},JetBrains.Util.ILogger)">
            <summary>
            An Activator cannot be starting (transitively bringing via <see cref="T:JetBrains.Application.Environment.IActivate`1" />) environment zones with which it isn't zoned already.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Validation.ValidateComponentSpecificZoning.CheckEnvComponentNotZonedByShell(JetBrains.Application.Catalogs.PartCatalogType,System.Collections.Generic.ICollection{JetBrains.Application.BuildScript.Application.Zones.ZonePart},JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping,System.Collections.Generic.IDictionary{JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Application.BuildScript.Application.Zones.ModuleZoneLevel},System.Collections.Generic.IList{JetBrains.Util.ValidationException},JetBrains.Util.ILogger)">
            <summary>
            An environment component cannot be zoned by zones which are not environment zones.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.Validation.ZonesValidationResult">
            <summary>
            The linking point for validating the zones on the packages which have already been built.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Build.Validation.ZonesValidationResult.PackageZoningInvalid">
            <summary>
            Emit for your package if you know that zoning is invalid in your package and want to issue warnings for it instead of errors.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Validation.ZonesValidator.MakeMinimalSet(System.Collections.Generic.IReadOnlyCollection{JetBrains.Application.BuildScript.Application.Zones.ZonePart})">
            <summary>
            Removes zones which are reachable from other zones in the list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Build.Validation.ZonesValidator.ValidateZoneDefinitionZones(JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Metadata.Reader.API.IMetadataTypeInfo,JetBrains.Application.BuildScript.Application.Zones.ZonePart[],JetBrains.Application.BuildScript.Application.Catalogs.PartCatalogZoneMapping,System.Collections.Concurrent.ConcurrentQueue{JetBrains.Application.Build.Validation.ZonesValidator.Error})">
            <summary>
            Zone definition check.
            We're not checking it as a regular type, the exception is that the types mentioned in requirements are OK not to be required at the location where the zone itself is declared.
            But we should ensure that the Module Zone Definition is not zoned by more zones than it requires, otherwise it would not be possible to mark anything with just this zones, the enclosing zones would implicitly be required too — to reference the zone definition interface/class.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.ZonesValidator.Error.InvalidZonesMinimal">
            <summary>
            Missing zones for a missing-error, illegal zones, etc — the minimal list, excludes transitively reachable zones.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.ZonesValidator.Error.InvalidZonesTransitive">
            <summary>
            Missing zones for a missing-error, illegal zones, etc — the full transitively-closed list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.ZonesValidator.Error.ReferencedType">
            <summary>
            Content might be empty if n/a for this error type.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.ZonesValidator.Error.ZoningOriginExplained">
            <summary>
            Explains how the involved zone has been encountered (by which class and namespace zone markers).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.ZonesValidator.ErrorKind.MissingRequirement">
            <summary>
            To use <see cref="F:JetBrains.Application.Build.Validation.ZonesValidator.Error.ReferencedType" />, <code>Error.InvalidZones</code> must also be required.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.ZonesValidator.ErrorKind.IllegalImplicitRequirement">
            <summary>
            In addition to explicit requirements, the type also requires <code>Error.InvalidZones</code>, which is not allowed.
            E.g. a Zone Definition is under a namespace zone marker.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Build.Validation.ZonesValidator.TypeRequirementsValidationContext.VisitedTypeDeclarations">
            <summary>
            Single-threaded for the single visiting hierarchy only.
            </summary>
        </member>
        <member name="T:JetBrains.Application.changes.ChangeEventArgs">
            <summary>
            Represents arguments of change event
            </summary>
        </member>
        <member name="M:JetBrains.Application.changes.ChangeManager.ExecuteAfterChange(System.Action)">
            <summary>
            Executes the specified action after the current change has finished or immediately if there
            is no change currently in progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.changes.ChangeManager.RegisterChangeProvider(JetBrains.Lifetimes.Lifetime,JetBrains.Application.changes.IChangeProvider)">
            <summary>
            Registers change provider in the dispatching scheme.
            </summary>
            <param name="lifetime">Lifetime for which the change provider is registered</param>
            <param name="changeProvider">Provider of changes</param>
        </member>
        <member name="M:JetBrains.Application.changes.ChangeManager.OnProviderChanged(JetBrains.Application.changes.IChangeProvider,System.Object,JetBrains.Application.Progress.ITaskExecutor)">
            <summary>
            Initiates the event dispatching process using the specified provider as a starting point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.changes.ChangeManager.AddDependency(JetBrains.Lifetimes.Lifetime,JetBrains.Application.changes.IChangeProvider,JetBrains.Application.changes.IChangeProvider)">
            <summary>
            Adds dependency between two providers.
            </summary>
            <param name="lifetime">Lifetime for which dependency is added</param>
            <param name="target">Change provider that depends on <see cref="!:source"/></param>
            <param name="source">Change provider that <see cref="!:target"/> depends on</param>
            <remarks>Both providers must have already been registered</remarks>
        </member>
        <member name="M:JetBrains.Application.changes.ChangeManager.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the internal structure into the specified writer.
            </summary>
        </member>
        <member name="E:JetBrains.Application.changes.ChangeManager.Changed">
            <summary>
            The event about changes in the system.
            Does not support lifetimes, see for <see cref="F:JetBrains.Application.changes.ChangeManager.Changed2"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.changes.ChangeManager.Changed2">
            <summary>
            The event about changes in the system.
            Supports lifetimes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.changes.FileSystemChangeType">
            <summary>
            Type of the changed occurred on file system
            <list type="bullet">
              <item><see cref="F:JetBrains.Application.changes.FileSystemChangeType.ADDED"/> means file or folder has been added</item>
              <item><see cref="F:JetBrains.Application.changes.FileSystemChangeType.DELETED"/> means file or folder has been removed</item>
              <item><see cref="F:JetBrains.Application.changes.FileSystemChangeType.CHANGED"/> means file's or folder's content or attribute has been modified</item>
              <item><see cref="F:JetBrains.Application.changes.FileSystemChangeType.SUBTREE_CHANGED"/> means something is changed in the subtree. This change type is used when <see cref="F:JetBrains.Util.FileSystemEventType.WatcherEventsBufferOverflow"/> is caught.
              Note, there will be no nested changes when this event type is used</item>
              <item><see cref="F:JetBrains.Application.changes.FileSystemChangeType.RENAMED"/> means file or folder has been renamed</item>
              <item><see cref="F:JetBrains.Application.changes.FileSystemChangeType.UNKNOWN"/> default value. Should not be used in real cases</item>
            </list>
            </summary>
        </member>
        <member name="T:JetBrains.Application.changes.Pattern">
            <summary>
            Defines set of file names that match the specified regular expression
            </summary>
        </member>
        <member name="T:JetBrains.Application.Changes.ModificationStamp">
            <summary>
            Represents a sequential modification stamp to be used on the Content Model entities, such as documents and project files.
            As those are two independent hierarchies, has to be declared in some common point (hence, Shell).
            Project files intentionally use document modification stamps for their stamping, so those are essentially the same entity.
            </summary>
            <param name="Value">Opaque raw value. Treated as a black box.</param>
        </member>
        <member name="M:JetBrains.Application.Changes.ModificationStamp.#ctor(System.Int32)">
            <summary>
            Represents a sequential modification stamp to be used on the Content Model entities, such as documents and project files.
            As those are two independent hierarchies, has to be declared in some common point (hence, Shell).
            Project files intentionally use document modification stamps for their stamping, so those are essentially the same entity.
            </summary>
            <param name="Value">Opaque raw value. Treated as a black box.</param>
        </member>
        <member name="P:JetBrains.Application.Changes.ModificationStamp.Value">
            <summary>Opaque raw value. Treated as a black box.</summary>
        </member>
        <member name="M:JetBrains.Application.Changes.ModificationStamp.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Changes.ModificationStamp.System#IComparable{JetBrains#Application#Changes#ModificationStamp}#CompareTo(JetBrains.Application.Changes.ModificationStamp)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.CodeWithMe.CodeWithMeClientManagerEx.BroadcastAllClients(JetBrains.Application.CodeWithMe.ICodeWithMeClientManager,System.Action)">
            <summary>
            Runs an action for every connected <see cref="T:JetBrains.Rd.ClientId"/>
            </summary>
            <param name="manager"></param>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.Application.CodeWithMe.CodeWithMeClientManagerEx.CurrentClientLifetime(JetBrains.Application.CodeWithMe.ICodeWithMeClientManager)">
            <summary>
            Returns a lifetime which is being terminated when the client has gone
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.CommandProcessing.ICommandProcessor">
            <summary>
            Command processor that performs undoable actions.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.IsExecutingCommand">
            <summary>
            Gets whether the command processor is executing at least one command.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentCommand">
            <summary>
            The outermost command of the command processor. Opening nested commands does not affect this property.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.Lifetimes.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.CommandProcessing.ICommandProcessor.ProlongCurrentCommand(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Makes sure current command is not completed until the <see cref="!:prolongationLifetime"/> is terminated
            </summary>
            <param name="prolongationLifetime">Prolongation period lifetime</param>
            <param name="prolongationReason">Prolongation reason for logging purposes</param>
        </member>
        <member name="F:JetBrains.Application.CommandProcessing.StandaloneCommandProcessor.myCurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.Lifetimes.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.StandaloneCommandProcessor.JetBrains#Application#CommandProcessing#ICommandProcessor#CurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.Lifetimes.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.InternetSettings">
            <summary>
            A settings node under <see cref="T:JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings"/>. Root for internet-related settings.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.WebProxySettings">
            <summary>
            Web proxy settings. Use <see cref="T:JetBrains.Application.Communication.WebProxySettingsReader"/> to create a .NET-API-compatible proxy object.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.ShellWebProxySettingsReader">
            <summary>
            Web proxy settings. Use <see cref="T:JetBrains.Application.Communication.WebProxySettingsReader"/> to create a .NET-API-compatible proxy object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Communication.WebProxySettingsReader.GetWebProxy">
            <summary>
            Gets the .NET-API-compatible proxy settings.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ComposeVerdictWithPriority">
            <summary>
            Has a list of tellers ordered by priority. Polls them for a verdict (live) until one of them returns a negative value. Determines whether all of the tellers have a positive verdict, or which is the one and only negative verdict.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ComposeVerdictWithPriority.Create``1(JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.CollectionEvents{JetBrains.Application.ComposeVerdictWithPriority.VerdictTeller{``0}})">
            <summary>
            Takes a list of tellers ordered by priority. Polls them for a verdict (live) until one of them returns a negative value. Determines whether all of the tellers have a positive verdict, or which is the one and only negative verdict.
            Returns a property which is either <c>Null</c> when there're no tellers with a negative verdict, or contains the one and only negative verdict (remaining tellers are not polled when a negative verdict is encountered).
            </summary>
        </member>
        <member name="M:JetBrains.Application.ComposeVerdictWithPriority.UpdateActiveTellers``1(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.List{JetBrains.Application.ComposeVerdictWithPriority.ActiveTeller{``0}},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Apply invariants to the active state of the tellers, then update the property.
            </summary>
            <param name="lifetimeComponent"></param>
            <param name="tellers"></param>
            <param name="propComposite"></param>
        </member>
        <member name="T:JetBrains.Application.IShellComponentContainerExtender">
            <summary>
            Extender for the Shell component container
            </summary>
        </member>
        <member name="T:JetBrains.Application.ShellFeaturePartsContainer">
            <summary>
            Container for getting ALL (not only leaf) applicable components
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.GlobalSettingsTable">
            <summary>
            Contains global settings of objects that do not have components to store settings in
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.ISaveSettings">
            <summary>
            An interface for a component that has some settings and they should be saved whenever all of the application settings are being saved.
            // TODO: rework when we have a mature settings model.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ISaveSettings.LoadSettings">
            <summary>
            <para>Tells the component container to reload the settings from the persistent media, deserialize them from the bag, and apply them to the components.</para>
            <para>If a particular component has not been initialized yet, it will be called for <code>IXmlExternalizable.ReadFromXml</code> / <see cref="M:JetBrains.Application.Configuration.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)"/> before its <code>IComponent.Init</code>. Otherwise, those xml-related methods will be called on it for the second and so on time.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ISaveSettings.SaveSettings">
            <summary>
            <para>Tells the component container that it's about time to query the components of their settings, serialize them to the bag, and write that to the persistent media.</para>
            <para>You must make sure this method is called on component containers in the end of the session. The component container will never save settings on its own.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlConfigurable">
            <summary>
            The interface which is used to mark components as requiring initialization from configuration file which ships with the product.
            Used for components which have complex initial configuration which is better to keep in external files rather than in code.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)">
            <summary>
            Called on the component by the component container before its <code>IComponent.Init</code>
            and <code>IXmlExternalizable.ReadFromXml</code> to load the XML Configuration from the resource
            in the component implementation assembly, the name of the resource specified in the
            <see cref="T:JetBrains.Application.Configuration.XmlConfigurableAttribute"/> on the component implementation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlReadable.ReadFromXml(System.Xml.XmlElement)">
            <summary>
            <para>This method is called on the component to populate it with default or loaded settings, unless the component implements <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> and returns <c>True</c> from its handler.</para>
            <para>The element is taken from the settings file, if available.</para>
            <para>If not, and there are settings files from the older versions, and the component does not implement <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/>, this method is called with the old settings.</para>
            <para>Otherwise, this method is called with an empty element or a <c>Null</c> value.</para>
            <para>For the first time, this method is called right before component's init.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlWritable.WriteToXml(System.Xml.XmlElement)">
            <summary>
            Called when the component should serialize its settings into the XML presentation, for saving into the settings file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlRegistrable">
            <summary>
            Interface for classes that support registration in Windows Registry
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlUpgradable">
            <summary>
            If a previous User Settings version is found, and the component implements this interface, it's called with this interface instead of the regular Externalizable.
            Otherwise, the old settings will be passed into the regular interface.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.IXmlUpgradable.LegacyTagNames">
            <summary>
            Element names for the component under which it used to be known in the old settings files.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)">
            <summary>
            <para>Called with component's settings taken from the older version of the settings file, for each of the <see cref="P:JetBrains.Application.Configuration.IXmlUpgradable.LegacyTagNames"/> (even if some of the handlers return <c>True</c>).</para>
            <para><code>IXmlExternalizable.ReadFromXml</code> will not be called if any of the calls returns <c>True</c>.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element">An XML element with component settings, taken from the settings file.</param>
            <param name="version">Version of the product that supposedly produced the legacy settings file we're upgrading from, or an empty <see cref="T:System.Version"/> instance if those are not known.</param>
            <returns>Whether the component has upgraded. Its normal <code>IXmlExternalizable.ReadFromXml</code> will not be called if that is the case.</returns>
        </member>
        <member name="T:JetBrains.Application.Configuration.SettingsComponentBase">
            <summary>
            A component container with XML serialization capabilities for the component settings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlSettingsBag">
            <summary>
            This stores the settings after they're read from the storage and before they're loaded by the components, and before they're written back to the storage. 
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myVersionUpgradingFrom">
            <summary>
            Whenever an older version of the settings file is found to be upgraded, set to the version of the product that supposedly produced that file.
            Otherwise, <c>Null</c>, which means that the upgrade should not be called.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlDocumentSettings">
            <summary>
            A dummy XML document for creating XML elements for component settings. When settings are deserialized, set to their XML document.
            It's not important which XmlDoc to use, we'd just like to minimize their number.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.OnLoadSettingsXmlBag(System.Action{System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope})">
            <summary>
            <para>Invoked by the base implementation when it's time to load the XML Settings Bag from the permanent storage. </para>
            <para>This logic (like, choosing the file) must be implemented by the inheritor. The inheritor might look for legacy settings files from previous versions if the normal settings file is missing and set <see cref="M:JetBrains.Application.Configuration.SettingsComponentBase.ShouldUpgradeSettings(System.Version)"/> to use them with <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> components.</para>
            <para>Call <see paramref="funcDeserializeXmlBag"/> to submit the XML representation of the settings for a particular scope (see <see cref="M:JetBrains.Application.Configuration.SettingsComponentBase.DeserializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)"/> for details).</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsComponentBase.ValidXmlExternalizationScopes">
            <summary>
            Override this property to provide a list of scopes that are valid for components in this container.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentReadFromXmlBag_TrySettingsElement(JetBrains.Application.Configuration.IXmlReadable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            There were no upgrade, but there's a valid settings element, and it will be applied.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentReadFromXmlBag_TryUpgrade(JetBrains.Application.Configuration.IXmlReadable,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            If in upgrade mode, see for upgrade data for this component.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.DeserializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Reads from an XML document and stores into the XML Bag.
            Collects the entries for the <see cref="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlSettingsBag"/> map from the <paramref name="document"/>.
            The scope is given by <paramref name="scope"/>, and the name comes from the XML tag names.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.LoadSettings(JetBrains.Application.Configuration.IXmlReadable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Overrides the base init-component to perform XML-related ops.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.LoadSettingsWithXmlExternalizationUtil(System.Object,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Uses <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml(System.Xml.XmlElement,System.Object)"/> and <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteToXml(System.Xml.XmlElement,System.Object)"/> as the default implementation of "IXmlExternalizable" over <paramref name="target"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.Init">
            <returns>True if loaded anything, false otherwise </returns>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.BoolProperties">
            <summary>
            Gets the boolean properties.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.IntProperties">
            <summary>
            Gets the integer properties.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.StringProperties">
            <summary>
            Gets the string properties.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1">
            <summary>
            Represent the properties collection.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Item(System.String)">
            <summary>
            Gets a property by its name.
            Creates a new one if missing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Item(System.String,`0)">
            <summary>
            Gets a property by its name.
            Creates a new one if missing.
            The second parameter is the default value for the case the property does not yet exist.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Add(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Contains(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.CopyTo(JetBrains.DataFlow.IProperty{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Remove(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.System#Collections#Generic#IEnumerable{JetBrains#DataFlow#IProperty{TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,JetBrains#DataFlow#IProperty{TValue}}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetWorkspaceDocument">
            <summary>
            Tries to load the XML Document for <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> (either from current version location, or any of the legacy dirs for an upgrade).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument_CurrentVersion">
            <summary>
            Looks for just the current version. Also saves initial content and timestamp to check for overwrites.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument_LegacyVersion">
            <summary>
            Settings from prev versions for upgrade. Initial-content/timestamp not saved in this branch.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument">
            <summary>
            Tries to load the XML Document for <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> (either from current version location, or any of the legacy dirs for an upgrade).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.ShellSettingsComponent.PropGetLegacySettingsFiles">
            <summary>
            A property that IApplicationDescriptors could put into their <code>IApplicationDescriptor.Bag</code>s to look for older-version settings in non-standard folders when there are no up-to-date-version settings found and we would like to upgrade from an older version.
            The strings are file path names.
            The versions are versions of the product to which the settings supposedly belong.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.WorkspaceSettingsTable">
            <summary>
            Contains global settings of objects that do not have components to store settings in
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlConfigurableAttribute">
            <summary>
            Allows to mark a type as XML Configurable. 
            Call to <see cref="M:JetBrains.Application.Configuration.XmlConfigurableHelper.InitializeComponent_XmlConfigurable(JetBrains.Application.Configuration.IXmlConfigurable)"/> to configure.  
            <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> is used to fill instance with data.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlConfigurableAttribute.#ctor(System.String)">
            <param name="configurationResourceName">
            Name of the embedded resource in either the component's assembly or the product's <code>IApplicationDescriptor.ConfigurationAssembly</code> that contains the XML to be passed into the component's <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> before its <code>IComponent.Init</code>.
            </param>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlConfigurableAttribute.ConfigurationResourceName">
            <summary>
            Name of the embedded resource in either the component's assembly or the product's <code>IApplicationDescriptor.ConfigurationAssembly</code> that contains the XML to be passed into the component's <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> before its <code>IComponent.Init</code>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlConfigurableHelper.InitializeComponent_XmlConfigurable(JetBrains.Application.Configuration.IXmlConfigurable)">
            <summary>
            For an XML-configurable component, loads its config and applies to the component.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizableAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a class that should be serialized to XML.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue">
            <summary>
            <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
            <para>The possible values are:</para>
            <para>• <c>Null</c>,.which means the default value for the <see cref="T:System.Type"/> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
            <para>• Some value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it.</para>
            <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter"/> is used for reading the value.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.SettingName">
            <summary>
            Use this property to specify settings name used in the xml, if different from the property (field) name.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.UseXmlSerializer">
            <summary>
            Gets or sets whether the XML Serializer should be used for serializing the value of this field.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizationScope">
            <summary>
            Defines the scopes for the externalizable components.
            The define the sets of isolated components that are serialized to separate storages.
            You may use one of the base values, or introduce your own ones as integers, as the string representations are never used.
            The scopes are normally not persisted, because they define a settings storage on serialization and are defined by the storage on deserialization.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Any">
            <summary>
            Don't return from components.
            Means that, when filtering, all the scopes should be allowed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Local">
            <summary>
            Locally-stored settings of a project or a solution.
            They're not intended to be shared in the team or added to the SCC.
            Typically, they're persisted in a “.resharper.user” file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Shared">
            <summary>
            Team-shared settings of a project or a solution.
            They're intended to be added to the SCC.
            Typically, they're persisted in a “.resharper” file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings">
            <summary>
            User settings of the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.WorkspaceSettings">
            <summary>
            Workspace settings of the product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizationUtil">
            <summary>
            Utility class to externalize values of fields and properties of given instance via reflection.
            Helpful for implementing <see cref="T:JetBrains.Application.Configuration.IXmlReadable"/> and <see cref="T:JetBrains.Application.Configuration.IXmlWritable"/> interface.
            Values of all fields and properties marked with <see cref="T:JetBrains.Application.Configuration.XmlExternalizableAttribute"/> are saved/restored.
            The following value types are supported: <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>s, <see cref="T:System.DateTime"/>s and one-dimensional arrays of the above types (as well as arrays of arrays).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlIsNullAttrName">
            <summary>
            Controls the element nullity in the new serialization behavior.
            New behavior: elements with non-empty content are not-null values, and IsNull attribute must be present on elements with empty content to tell apart Null and empty string serialization (or empty arrays).
            Old behavior: if the IsNull attr is missing on an empty-content element, a self-closed tag is considered Null, and an opening+closing pair is considered an empty string.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlExternalizableElementName">
            <summary>
            Name of the root element of the settings we write.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlStreamElementName">
            <summary>
            Name of the <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})"/> / <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})"/> root element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ApplyDefaults(System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ApplyDefaults(System.Object,System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamElementsFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            Called on each top-level element under the stream root element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.GetExternalizableMembers(System.Object)">
            <summary>
            Gets the members supported for XML Externalization.
            That is, fields or properties with the <see cref="T:JetBrains.Application.Configuration.XmlExternalizableAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlReader,System.Type)">
            <summary>
            Reads a value from the reader, returns either that value of type <paramref name="type"/>, or <c>Null</c>.
            </summary>
            <param name="reader">XML Reader positioned at the element whose value should be parsed.</param>
            <param name="type">Expected value type.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlElement,System.Type)">
            <summary>
            Reads the value, returns it if available, or <see cref="F:System.Convert.DBNull"/> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_ValueXmlSerializer(System.Xml.XmlReader,JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Value deserialization for the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.UseXmlSerializer"/> case.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.UserValue">
            <summary>
            The value read from the member, or the value to be written to the member. Temporary storage. Not operated by this class, read and written by external consumers.
            Initially, <see cref="F:System.Convert.DBNull"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberType">
            <summary>
            Gets the type of the member values.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberValue(System.Object)">
            <summary>
            Retrieves a value of the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberValueRaw">
            <summary>
            Retrieves a value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.HasDefaultValue">
            <summary>
            Gets whether there's a default value specified for the member in its <see cref="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Attribute"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.ParseDefaultValue">
            <summary>
            Analyses and parses the default value, as given by the <see cref="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Attribute"/>-><see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.SetMemberValue(System.Object,System.Object)">
            <summary>
            Assigns a value to the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.SetMemberValueRaw(System.Object)">
            <summary>
            Sets the value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.CompareTo(JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Equals(JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:JetBrains.Application.DataContext.ApplicationDataConstants.ScreenPoint">
            <summary>
            A point, in screen coordinates.
            Available if the context has been created from a screen point: <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateAtScreenPoint(JetBrains.Lifetimes.Lifetime,JetBrains.Util.Media.JetPhysicalPoint,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})"/> (or if published by some data provider).
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.ApplicationDataConstants.CurrentSelectionContext">
            <summary>
            <para>Presence of this data constant in the data context means that you would like to refine the context to all the possibly known details of the current selection, like current document, file, text control, caret position in the text control, selected text, and so on.</para>
            <para>All of the data rules providing context info should be doing this in inference from this constant instead of supplying the data out of nothing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.ApplicationDataConstants.ApplicationContext">
            <summary>
            <para>Presence of this data constant in the data context means that you would like to refine the context to the current global state of the application, which is more or less permanent and does not depend on selected window/document etc. Global features not bound to selection (like Memory Usage Indicator for instance) might be using this context for their actions and settings binding. In VS-based products, this normally includes the solution object, because a solution defines the VS context (and you must switch the state with an explicit Open/Close Solution Action to alter this context), but does not include projects because the current project changes with selection. In DotTrace with one-process-per-snapshot, this might be the snapshot.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.ApplicationDataConstants.ComponentContainerForFactoring">
            <summary>
            Gets the component container which is best for factoring object belonging to this context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataConstant`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataContext">
            <summary>
            <para>The Action Manager's implementation of IDataContext.</para>
            <para>If you'd like to create your own data context, use one of the <see cref="T:JetBrains.Application.DataContext.DataContexts"/> methods (import <see cref="T:JetBrains.Application.DataContext.DataContexts"/>). With it, you can add any rules or constants on your own, and create the data context on a specific control or point, or without any local context (the default global context).</para>
            <para>In the rare case when you need entirely your own datacontext without standard data rules, implement <see cref="T:JetBrains.Application.DataContext.IDataContext"/> directly.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.myDataConstantsInUse_Constant">
            <summary>
            Recursion prevention.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.DataContextValidator,JetBrains.Application.Threading.IShellLocks,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule},System.Collections.Concurrent.ConcurrentDictionary{JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.DataContexts.DataRuleStorageRecord[]})">
            <summary>
            <para>Creates the data context.</para>
            <para>If you'd like to create your own data context, use one of the <see cref="T:JetBrains.Application.DataContext.DataContexts"/> methods (import <see cref="T:JetBrains.Application.DataContext.DataContexts"/>). With it, you can add any rules or constants on your own, and create the data context on a specific control or point, or without any local context (the default global context).</para>
            <para>From all the rules lists (plain and pre-sorted), rules are picked first by priority, then (within the same priority, which is usually the case because nearly all the rules have the default priority) — first from the plain list in order of appearance, then from the sorted list. The precedence of the plain list comes from the fact that it's usually the context-specific one (from focused control or moused control etc), while the pre-sorted list is the global list of the Action Manager.</para>
            </summary>
            <param name="lifetime">Limiting lifetime.</param>
            <param name="validator">Validates values returned for data constant</param>
            <param name="datarulesPlain">Optional. The plain list of data rules for the context.</param>
            <param name="datarulesSorted">Optional. As Action Manager has a large persistent list of data rules, they're given in a way that they're pre-tossed by constant and pre-sorted by priority for each constant.</param>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.ThreadIfAffined">
            <summary>
            Thread affinity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.myDebugInstanceId">
            <summary>
            For diagnostyx.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.CachedValues_ToDictionarySlow">
            <summary>
            For exception diag only, might be as slow as you'd like.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.Evaluator.myDebugInstanceId">
            <summary>
            For diagnostyx.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.Evaluator.IsEmpty">
            <summary>
            Gets if there're no rules at all in this datacontext.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.Evaluator.#ctor(System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule},System.Collections.Concurrent.ConcurrentDictionary{JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.DataContexts.DataRuleStorageRecord[]},System.String)">
            <summary>
            From all the rules lists (plain and pre-sorted), rules are picked first by priority, then (within the same priority, which is usually the case because nearly all the rules have the default priority) — first from the plain list in order of appearance, then from the sorted list. The precedence of the plain list comes from the fact that it's usually the context-specific one (from focused control or moused control etc), while the pre-sorted list is the global list of the Action Manager.
            </summary>
            <param name="datarulesPlain">Optional. The plain list of data rules for the context.</param>
            <param name="datarulesSorted">Optional. As Action Manager has a large persistent list of data rules, they're given in a way that they're pre-tossed by constant and pre-sorted by priority for each constant.</param>
            <param name="debugInstanceId"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.Evaluator.TryEvaluateDataRules(JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.IDataContext,JetBrains.Application.DataContext.DataContextValidator)">
            <summary>
            Tries to get the constant value by evaluating all of the data rules in both lists.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContexts.myDataRulesSorted">
            <summary>
            Stores registered rules, already in order for application.
            Threading: writes should be protected with <see cref="F:JetBrains.Application.DataContext.DataContexts.myDataRulesSortedWriterLock"/> to ensure consistency (see usage for comments), reads are free.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule``1(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Registers a data rule that will apply to data contexts created by this object.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="lifetime"></param>
            <param name="name">Required for debugging data constant values inference. Allows to track the rule supplying the questionable constant value.</param>
            <param name="constant">The rule knows how to produce this constant out of some other constants or the environment.</param>
            <param name="FRule"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule(JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.IDataRule)">
            <summary>
            Registers a data rule that will apply to data contexts created by this object.
            </summary>
            <param name="lifetime"></param>
            <param name="rule"></param>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContexts.myDataRuleGeneration">
            <summary>
            Tracks generation for each new added rule, imposes first come first serve order for rules of the same priority, allows for binsearching the rules upon removal.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnActiveControl(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions in the control that currently has user input focus.
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnSelection(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Gets the data context for executing the actions based on the given data rules.</para>
            <para>Note that the focused control is not used for collecting data rules in this overload, but application-wide selection context (like VS selected hierarchy item as current project file, text control, document, etc) still contributes to the context.</para>
            <para>Registered data rules are also enabled with this context.</para>
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnApplicationWideState(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Gets the data context for the current application-wide state.</para>
            <para>Note that the focused control is not used for collecting data rules in this overload, and application-wide selection context is not used either(like VS selected hierarchy item as current project file, text control, document, etc). Only application-wide state like currently opened solution takes effect.</para>
            <para>Registered data rules are also enabled with this context.</para>
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateWithDataRules(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Gets the data context for executing the actions based on the given data rules.</para>
            <para>Note that no selection/application context is used for collecting data rules in this overload. Only transformation data rules should be applied.</para>
            <para>This method is different from creating a <see cref="T:JetBrains.Application.DataContext.DataContext"/> explicitly on these providers because <see cref="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule``1(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">registered data rules</see> are added to the data rules pool (with a lower priority than your manually-supplied list).</para>
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateWithoutDataRules(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions based on the given data rules.
            Note that the focused control is not used for collecting data rules in this overload.
            The registered data rules are not taking part in this data context.
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateAtScreenPoint(JetBrains.Lifetimes.Lifetime,JetBrains.Util.Media.JetPhysicalPoint,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions in the given screen location.
            Basically, this is <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateOnControl(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.UIAutomation.ControlWrapper,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">the context for the UI control</see> at the given screen location.
            </summary>
            <param name="lifetime"></param>
            <param name="ptScreen">Point, in screen coordinates.</param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnControl(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.UIAutomation.ControlWrapper,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing actions within the given control.
            </summary>
            <param name="lifetime"></param>
            <param name="controlWrapper">The control of either kind.</param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CloneWithAdditionalDataRules(JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.IDataContext,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Clones the existing data context and extends it with additional given data rules.    
            The registered data rules are not taking part in this data context.
            </summary>
            <param name="lifetime"></param>
            <param name="dataContext">Original data context</param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="P:JetBrains.Application.DataContext.DataContexts.FindDataRules">
            <summary>
            Exposes the aggregator of registered data rule finders.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.DataContexts.Empty">
            <summary>
            A data context that knows no data constants at all.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataContexts.DataRuleStorageRecord">
            <summary>
            Helps with binsearching registered rules, ordering them first by priority then by order of appearance within the same priority.
            Helps with locating the specific rule upon removal with binsearch, as this ordering is unique.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.ExportFindDataRulesAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/> impls.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.ExportFindDataRulesAttribute.Priority">
            <summary>
            The higher the priority, the sooner the finder is asked (and can promote its own result in precedence of the others).
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.FindDataRules">
            <summary>
            Takes <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/>, prioritizes, and runs queries on them.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataConstant">
            <summary>
            Identifies a piece of data that could be requested from an <see cref="T:JetBrains.Application.DataContext.IDataContext"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataConstant.Id">
            <summary>
            Gets the unique ID of this data constant instance.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataConstant.Type">
            <summary>
            Gets the type of the constant. Somewhen soon enough this is likely to become the identity of the constant.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataContext">
            <summary>
            The context, passed to Action.
            Must be used immediately ONLY, within the same <see cref="T:JetBrains.Threading.ReentrancyGuard"/> execution session.
            If you're deferring the execution, extract these parameters and store in your own structures.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataContext.State">
            <summary>
            State of the context. Used to assert its validity.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataContext.IsEmpty">
            <summary>
            Quick check if the context is empty and never returns any value
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContext.GetData``1(JetBrains.Application.DataContext.DataConstant{``0})">
            <summary>
            Returns cached (or evaluates and store) value for the specified <see cref="!:dataConstant"/>
            </summary>
            <typeparam name="T">Type of return value</typeparam>
            <param name="dataConstant">Data constant in question</param>
            <returns>Value associated with the <see cref="!:dataConstant"/></returns>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContext.Prolongate(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Allows the context to be executed on a different thread
            </summary>
            <param name="lifetime">Context's lifetime</param>
            <returns>New data context based on current</returns>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyBag(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.DataContext.IDataConstant[])">
            <summary>
            Creates a new property bag with a snapshot of this data context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.GetRawData(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.DataContext.IDataConstant)">
            <summary>
            Creates a new property bag with a snapshot of this data context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyId(JetBrains.Application.DataContext.IDataConstant)">
            <summary>
            Creates a property ID identified by a data constant.
            We convert it to a generic <see cref="T:JetBrains.Application.DataContext.DataConstant`1"/> type, and then instantiate <see cref="T:JetBrains.Application.DataContext.DataConstantPropertyId`1"/> for the same <c>T</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyId``1(JetBrains.Application.DataContext.DataConstant{``0})">
            <summary>
            Creates a property ID identified by a data constant.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataRuleProvider">
            <summary>
            The Windows Forms specific way of providing ui-context-specific <see cref="T:JetBrains.Application.DataContext.IDataRule"/>s on UI controls.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataRule">
            <summary>
            A data rule that is the internal mechanism of the default <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager"/>'s implementation of <see cref="T:JetBrains.Application.DataContext.IDataContext"/> for evaluating values of constants. When a constant is requested from the data context, it's evaluated transitively by a chain of rules where the first rule in the chain uses no inputs and just tells the value (e.g. current text control from the environment), and other rules transform it to get the desired data constant out of it (e.g. document from the current text control).
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.Name">
            <summary>
            Semantic name of the rule. Crucial for debugging data constants inference.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.OutputType">
            <summary>
            The output type of the rule.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.Priority">
            <summary>
            <para>The rule priority. The lower the priority, the earlier the rule gets chance to contribute. Evaluation stops after some rule yields a valid value.</para>
            <para>The order of execution for rules of the same priority is undefined in most cases. However, as rules are collected from UI context by bubbling out of the active our mouse-hit control, rules of the control closer to the bubbling origin would be preferred.</para>
            <para>See <see cref="T:JetBrains.Application.DataContext.DataRulePriorityClasses"/> for typical values. As you create a rule with <see cref="T:JetBrains.Application.DataContext.DataRule`1"/> class or one of the helper methods, it gets the default priority of <see cref="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Default"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Attempts to evaluate the data rule.
            </summary>
            <param name="context">The data context from which the data rule could optionally get any other constants to calculate the rule result upon.</param>
            <returns>
            <para>Returns the value if it could be calculated. The possible return values are:</para>
            <para>(1) A valid value, if the rule was evaluated successfully. No rules would be further evaluated. The value must be of type specified by <see cref="P:JetBrains.Application.DataContext.IDataRule.OutputType"/>.</para>
            <para>(2) A <c>Null</c> value if this rule has insufficient information for evaluation, such as a "text control selection from text control" when no text control could be taken from data context. The remaining rules will be evaluated in this case.</para>
            <para>(3) The <see cref="F:System.Reflection.Missing.Value">VT_ERROR/DISP_E_PARAMNOTFOUND</see> value, which means that the rule knows and understands this context and usually can produce a result, but right now (with current user selection etc) cannot yield a value. In this case rules with larger priority values will not be processed, and <c>Null</c> will be returned from the data context for this constant, unless some of the remaining rules of the same priority provides a value. Evaluation of the remaining rules of the same priority is not prevented because their relative order is not well defined.</para>
            </returns>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRule`1">
            <summary>
            The default data rule implementation with default priority.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},`0)">
            <summary>
            Creates a constant data rule (no evaluation involved).
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            <para>Creates a data rule that evaluates a function, possibly requesting other constants from the data context transitively.</para>
            <para>Out of the <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> return type variations supports <c>Null</c> and a meaningful value. For the usually-available-but-now-missing value, see another overload.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,System.Tuple{`0,System.Boolean}})">
            <summary>
            <para>Creates a data rule that evaluates a function, possibly requesting other constants from the data context transitively.</para>
            <para>Unlike the other overload, supports all of the <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> return type variations.
            The boolean in the tuple means whether the value would usually be available in this context. Your function could return the following tuple combinations:</para>
            <para>(1) {meaningful-value, True}: evaluation succeeded.</para>
            <para>(2) {Null, True}: evaluation recognized the context and usually would return smth, but right now there is no value available. See <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> for further details.</para>
            <para>(3) {Null, False}: evaluation has no idea as of what to return. See <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> for further details.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRule`1.DesperateDataRule">
            <summary>
            The last-chance data rule to be called only even no other data rules for this constant could yield a result.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRule`1.AssertionDataRule">
            <summary>
            The data rule to be called before all the others. For example, to assert the main thread.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRules">
            <summary>
            Helper class for creating lists of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Starts a new list of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.String,JetBrains.Application.DataContext.DataConstant{``0},``0)">
            <summary>
            Starts a new list of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.Collections.Generic.IList{JetBrains.Application.DataContext.IDataRule},System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Adds another rule to the rules list. Modifies the original list. Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.Collections.Generic.IList{JetBrains.Application.DataContext.IDataRule},System.String,JetBrains.Application.DataContext.DataConstant{``0},``0)">
            <summary>
            Adds another rule to the rules list. Modifies the original list. Fluent.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRulePriorityClasses">
            <summary>
            Sample priority classes for data rules.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Assert">
            <summary>
            The highest priority. Used for assertion data rules that should be executed before all the others.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Default">
            <summary>
            Default priority. Most of data rules be at this level.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Ambient">
            <summary>
            Ambient data rules taking context from the environment. For example, Visual Studio selected hierarchy item is turned into a project model element. Would not be called if any of the product rules are able to provide a value for the constant.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Desperate">
            <summary>
            Last-chance data rules providing an arguably useful value in case it couldn't be inferred from normal rules or host environment. For example, if there are no declared elements available, use the project model element to expose it as a "declared path" to make it searchable etc.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientSelectionDataRule`1">
            <summary>
            <para>Overrides the data rule priority to make it a last-chance-fallback to getting the current selection of the application environment (eg VS).</para>
            <para>This rule is only active when a Data Context with current selection is requested (<see cref="F:JetBrains.Application.DataContext.ApplicationDataConstants.CurrentSelectionContext"/>) is present in the data context.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientSelectionDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientSelectionMainThreadDataRule`1">
            <summary>
            <para>Overrides the data rule priority to make it a last-chance-fallback to getting the current selection of the application environment (eg VS).</para>
            <para>Is deactivated on background threads. Use this when calling into VS APIs which are primary-thread-only.</para>
            <para>This rule is only active when a Data Context with current selection is requested (<see cref="F:JetBrains.Application.DataContext.ApplicationDataConstants.CurrentSelectionContext"/>) is present in the data context.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientSelectionMainThreadDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},JetBrains.Application.Threading.IThreading,System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="mainthread">Identifies the main thread to which this rule affines.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientApplicationDataRule`1">
            <summary>
            <para>Overrides the data rule priority to make it a last-chance-fallback to getting the non-selection-dependent state of the application environment (eg VS). See <see cref="F:JetBrains.Application.DataContext.ApplicationDataConstants.ApplicationContext"/> for details.</para>
            <para>This rule is only active when a Data Context with current selection is requested (<see cref="F:JetBrains.Application.DataContext.ApplicationDataConstants.ApplicationContext"/>) is present in the data context.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientApplicationDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientApplicationOrSelectionDataRule`1">
            <summary>
            <para>Operates as a combination of <see cref="T:JetBrains.Application.DataContext.AmbientApplicationDataRule`1"/> and <see cref="T:JetBrains.Application.DataContext.AmbientSelectionDataRule`1"/>, which means that this rule is active when either selection or ambient information is requested (any of the <see cref="F:JetBrains.Application.DataContext.ApplicationDataConstants.ApplicationContext"/> or <see cref="F:JetBrains.Application.DataContext.ApplicationDataConstants.CurrentSelectionContext"/> constants is present). See documentation on the above mentioned rule kinds for details.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.AmbientApplicationOrSelectionDataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to application environment (eg VS).
            </summary>
            <param name="name">Rule name for rules inference problems diagnostics.</param>
            <param name="dataconstant">Output data constant of the rule.</param>
            <param name="FTryEvaluate">Rule function.</param>
        </member>
        <member name="T:JetBrains.Application.DataContext.IFindDataRules">
            <summary>
            An entity to look for an <see cref="T:JetBrains.Application.DataContext.IDataRuleProvider"/> based on the current cursor position or current UI control.
            </summary>
            <seealso cref="T:JetBrains.Application.DataContext.ExportFindDataRulesAttribute"/>.
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindActiveDataRules">
            <summary>
            Gets the data provider for the control that currently has user input focus.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindDataRulesAtPoint(JetBrains.Util.Media.JetPhysicalPoint)">
            <summary>
            Gets the data provider for the control that is located at the given screen point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindDataRulesInControl(JetBrains.Application.UI.UIAutomation.ControlWrapper)">
            <summary>
            Gets the data provider for the given control.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Deploy.DeployItemFlags.Overwrite">
            <summary>
              Override existed file on CDN
            </summary>
        </member>
        <member name="F:JetBrains.Application.Deploy.DeployItemFlags.Unzip">
            <summary>
              Unzip file during pushing on CDN, apply only for .zip files
            </summary>
        </member>
        <member name="T:JetBrains.Application.Deploy.DeployScript">
            <summary>
              Note: DON'T FORGET TO UPDATE <code>Publisher.DeployAccessArtifact</code> AFTER
              CHANGES HERE!!!
            </summary>
        </member>
        <member name="F:JetBrains.Application.Diagnostics.FocusMonitorAutomation.FocusMonitorViewName">
            <summary>
            This name should be applied to the focus monitor view to allow filtering it away from the focus tracking results.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Diagnostics.FocusMonitorAutomation.LogEntryBase">
            <summary>
            Base log entry object of the viewer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Diagnostics.FocusMonitorAutomation.FakeLogEntry">
            <summary>
            Log entry faked by the viewer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Diagnostics.FocusMonitorAutomation.FocusInFocusMonitorLogEntry">
            <summary>
            Log entry which replaces focus reports inside the focus monitor UI.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Diagnostics.FocusMonitorAutomation.RealLogEntry">
            <summary>
            Log entry based on a real report from focus tracker.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DiskCleanup.CleanupPolicy">
            <summary>
            If a path points to a folder whether to remove the folder itself or leave it but remove all nested files and folders
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.Path">
            <summary>
            File or folder location
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.CleanupPolicy">
            <summary>
            How to clean
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.CreationTimeUtc">
            <summary>
            Creation time of the file or folder
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.LastAccessTimeUtc">
            <summary>
            The most recent access time of all the files within <see cref="P:JetBrains.Application.DiskCleanup.CleanupInfo.Path"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.LastWriteTimeUtc">
            <summary>
            The most recent write time of all the files within <see cref="P:JetBrains.Application.DiskCleanup.CleanupInfo.Path"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.EvaluationTime">
            <summary>
            How much time did it take to evaluate
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.Size">
            <summary>
            Total size in bytes
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.CleanupInfo.Errors">
            <summary>
            Errors encountered if any
            </summary>
        </member>
        <member name="F:JetBrains.Application.DiskCleanup.PathCleanupEntry.Description">
            <summary>
            Name of the entry. I.e. caches folder
            </summary>
        </member>
        <member name="F:JetBrains.Application.DiskCleanup.PathCleanupEntry.ClearAfterTimeout">
            <summary>
            How old should be the files (the most recent file's last access time within folder) to get the path cleaned
            </summary>
        </member>
        <member name="T:JetBrains.Application.DiskCleanup.IAutomaticDiskCleanup">
            <summary>
            Shell component that performs automatic disk cleanup when enabled.
            Enabled means that both <see cref="P:JetBrains.Application.DiskCleanup.IAutomaticDiskCleanup.IsAllowed"/> and <see cref="F:JetBrains.Application.DiskCleanup.DiskCleanupSettingsKey.IsAutomaticCleanupAllowed"/> are set to true.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DiskCleanup.IAutomaticDiskCleanup.IsAllowed">
            <summary>
            Whether automatic cleanup is allowed by the program.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DiskCleanup.IDiskCleanup">
            <summary>
            Shell-level component that performs disk cleanup of specified folders
            </summary>
        </member>
        <member name="M:JetBrains.Application.DiskCleanup.IDiskCleanup.CollectPathsToCleanAsync(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Asynchronously collects data about files and folders matching specified pattern. 
            </summary>
            <param name="lifetime">Cancellation token</param>
            <param name="pathPattern">Path pattern as in msbuild with environment variables. I.e. %temp%\JetBrains\**\*.log </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.DiskCleanup.IDiskCleanup.PerformCleanup(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IList{JetBrains.Util.Pair{System.String,System.TimeSpan}})">
            <summary>
            Performs cleanup of specified path patterns when files and folders are older than specified timespan.
            </summary>
            <param name="lifetime">Cancellation token</param>
            <param name="pathPatterns">Path patterns with their age to clear</param>
            <returns>Dictionary of paths processed with size and exceptions if they happened</returns>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ExceptionReportComponentBase">
            <summary>
              When Shell is running, takes over Exception Reporting to provide smart behavior: show popup exception notifier, store exceptions, submit the whole list.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ExceptionReporting">
            <summary>
              Central class of the Exception Reporting subsystem.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionReporting.TaskExecutor">
            <summary>
              Gets the task executor passed to nested <see cref="M:JetBrains.Application.ExceptionReport.ExceptionReporting.SetStrategy(JetBrains.Application.ExceptionReport.IExceptionReportStrategy)">strategies</see> to handle the exceptions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.myDispatcher">
            <summary>
              Identifies the owning thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.#ctor(JetBrains.Application.ExceptionReport.IExceptionReportService,JetBrains.Application.Progress.ITaskExecutor,System.Collections.Generic.IEnumerable{JetBrains.Application.ExceptionReport.IExceptionReportDataProvider},JetBrains.Application.ExceptionReport.ExceptionManager,System.Nullable{JetBrains.Lifetimes.Lifetime},JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Application.ExceptionReport.IExceptionReportStrategy,System.Boolean)">
            <summary>
              Main constructor
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.IsRelevantException(System.Exception)">
            <summary>
              Looks for our company/product names in the stack trace.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.AttachToLogger">
            <summary>
              Starts listening logger events with this exception reporter. Previously listening exception reporters are stacked beneath and deactivated until this method is reverted by disposing of its return value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.myReportersStack">
            <summary>
              Free-threaded, lock-free reads, copy-on-write. Stacks reporters, the last one is active.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.AddReporter(JetBrains.Application.ExceptionReport.ExceptionReporting)">
            <summary>
              Starts listening logger events with this exception reporter. Previously listening exception reporters are stacked beneath and deactivated until this method is reverted by disposing of its return value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.OnException(System.Object,JetBrains.DataFlow.EventArgs{System.Exception})">
            <summary>
              Exception occurred. Dispatch to reporter on top of stack. Might be empty, as we would never remove exception listener.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionStorageLocator.StoresExceptions">
            <summary>
            Returns true if this storage is meant to store exceptions. Otherwise returns false.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionStorageLocator.GetStorageLocation">
            <summary>
            Returns the path to the exception storage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider">
            <summary>
            Components exporting this interface are called to add data to the exception when an exception is about to be reported.
            Use <see cref="M:JetBrains.Util.ExceptionEx.AddDataUnsafe``1(``0,System.String,System.Object)"/> (NOTE: it's important to use this overload as the others are non-functional in Production mode!) on the <see cref="T:System.Exception"/> object of the data you're given to add exception data to the exception object.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.IsModeReportExceptionsComponent.IsModeReportExceptionsCore">
            <summary>
            Exception reporting value in the Platform Core.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.IsModeReportExceptionsComponent.IsShowingExceptionsToUser">
            <summary>
              Central property for deciding whether to show any exceptions to the user. Sometimes we'd like to suppress exception notifications at all (eg for trade show demos), in these cases this flag goes low.
            The composite value of whether to report exceptions, this takes into account both the build config and current shell internal mode.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ISolutionLeakDataProvider">
            <summary>
            Components exporting this interface are called to add data to the LeakedSolutionException exception.
            </summary>
            <remarks>
            Unlike <see cref="T:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider"/> (which is called when the exception is reported), 
            this provider is called at the moment when a solution is about to be closed.
            The exception will be thrown later or won't be thrown at all.
            </remarks>
            <remarks>
            This interface is declared here to be accessible from any asseblies (e.g. IntegrationTestsServer.Server).
            </remarks>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.MemoryLeakException">
            <summary>
            Generic memory leak exception.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.PersistableExceptionData.DataFromMatchedExceptions">
            <summary>
              Stores data from previous exceptions that matched this one
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.PersistableExceptionData.HeaderText">
            <summary>
              Additional text in the header, just before the full stack traces of the exception. Might contain environmental info, build description, etc. Most of the technical data must be added to the exception data itself, with <see
               cref="M:JetBrains.Util.ExceptionEx.AddData``1(``0,System.String,System.Func{System.Object})" /> inside your implementation of <see
               cref="M:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(System.Exception)" /> . It will appear in the detailed stack traces among the data field of the outermost exception. If you'd like your data get into the header text, call <see
               cref="M:JetBrains.Application.ExceptionReport.PersistableExceptionData.AddExternalDataLine(System.Exception,System.String)" /> inside your implementation of <see
               cref="M:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(System.Exception)" /> . Use sparingly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.PersistableExceptionData.AddExternalDataLine(System.Exception,System.String)">
            <summary>
              Adds to the <see cref="P:JetBrains.Application.ExceptionReport.PersistableExceptionData.HeaderText" /> .
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.BuildDescriptionExceptionReportDataProvider">
            <summary>
            Product configurations (includes env, CLR, edition, internal mode, etc).
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.SccRevisionExceptionReportDataProviderEnv">
            <summary>
            Exposes the SCC revision of the codebase off which the host package was built.
            Lists packages which contain the activated env zones.
            </summary>
            <remarks>The About Box has detailed info on all packages' revisions.</remarks>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.SccRevisionExceptionReportDataProviderShell">
            <summary>
            Exposes the SCC revision of the codebase off which the host package was built.
            Lists home packages of subproducts. As a Shell component, only activates in Shell.
            </summary>
            <remarks>The About Box has detailed info on all packages' revisions.</remarks>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.StoringExceptionReportService">
            <summary>
            Stores all of the reported exceptions (with either reporting method) without showing them to the user.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Extensions.DataFlowEx">
            <summary>
            DataFlow extension methods that require a Shell.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.AssertUiThreadFiring``1(JetBrains.DataFlow.ISignal{``0},JetBrains.Application.Threading.IThreading)">
            <summary>
            Prevents any property modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.AssertUiThreadModifications``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.Application.Threading.IThreading)">
            <summary>
            Prevents any collection modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.AssertUiThreadModifications``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Application.Threading.IThreading)">
            <summary>
            Prevents any property modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.BeginSetGuarded``1(JetBrains.DataFlow.IProperty{``0},``0,JetBrains.Application.Threading.IThreading,System.Object)">
            <summary>
            Assigns a new value to the property under a <see cref="T:JetBrains.Threading.ReentrancyGuard"/> on the primary thread, asynchronously.
            The <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> logic is not used, the asynchronous <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> is always called instead, even if allowed to <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> in the moment. This guarantees that the property value assignments will always be serialized (eg a later <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> will not be overwritten when a previous <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> gets to run).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.Application.Threading.IThreading)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.Lifetimes.Lifetime,JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IThreading)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Lifetimes.Lifetime,JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Signal{``0},JetBrains.Application.Threading.IThreading)">
            <summary>
            Ensures that the signal is fired in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded(JetBrains.DataFlow.SimpleSignal,JetBrains.Application.Threading.IThreading)">
            <summary>
            Ensures that the signal is fired in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.CollectionEvents{``0},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the collection is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsureGuarded``2(JetBrains.DataFlow.DictionaryEvents{``0,``1},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the collection is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.EnsurePrimaryThread``1(JetBrains.DataFlow.Property{``0},JetBrains.Application.Threading.IThreading)">
            <summary>
            Ensures that the property is modified (and the events are fired) on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher"/> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.FlowIntoGuarded_NoReplay``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.ReentrancyGuard,System.Object,System.Boolean)">
            <summary>
            <para>Establishes a data flow between two properties. The assignment to the target property only happens in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:guard">specified thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Not suitable for high-throughput property changes, as it schedulles a new guarded execution for each change. Use <see cref="M:JetBrains.DataFlow.IPropertyEx.FlowIntoViaGroupingEvent``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.GroupingEvent,System.Boolean,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)" /> in such cases.</para>
            </summary>
            <remarks>Supports the <see cref="P:JetBrains.Threading.JetDispatcher.IsAsyncBehaviorProhibited" /> mode.</remarks>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.FlowIntoGuarded_NoReplay``1(JetBrains.DataFlow.ISignal{``0},JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.ISignal{``0},JetBrains.Threading.ReentrancyGuard,System.Object)">
            <summary>
            <para>Establishes a data flow between two signals. The firing of the target signal only happens in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:guard">specified thread</see>.</para>
            <para>Not suitable for high-throughput property changes, as it schedulles a new guarded execution for each change. Use a <see cref="T:JetBrains.Threading.GroupingEvent"/> in such scenarios.</para>
            </summary>
            <remarks>Supports the <see cref="P:JetBrains.Threading.JetDispatcher.IsAsyncBehaviorProhibited" /> mode.</remarks>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.FlowIntoGuarded_Replay``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``0},System.Object,System.Boolean,JetBrains.Util.Concurrency.UnguardedCallbackMerger,JetBrains.Application.Threading.IThreading)">
            <summary>
            <para>Establishes a data flow between two collections. The changes to the target collection only happen in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput changes, as it schedulles a new guarded execution for each change.</para>
            <para>Uses the given callback merger for guarding the changes.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Extensions.DataFlowEx.FlowIntoGuarded_Replay``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``0},System.Object,System.Boolean,JetBrains.Application.Threading.IThreading)">
            <summary>
            <para>Establishes a data flow between two collections. The changes to the target collection only happen in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput changes, as it schedulles a new guarded execution for each change.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Extensions.DataFlowEx.FlowIntoCollectionAction`1">
            <summary>
            Helper for <see cref="!:DataFlowEx.FlowIntoGuarded_Replay&lt;TValue&gt;(JetBrains.DataFlow.ICollectionEvents&lt;TValue&gt;,JetBrains.DataFlow.ICollectionEvents&lt;TValue&gt;,object,bool)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Extensions.DataJson">
            <summary>
            Fetches data about product releases from
            - web: https://data.services.jetbrains.com/products
            - local file for testing purposes:  %localappdata%\JetBrains\Shared\vAny\data.json
            </summary>
        </member>
        <member name="T:JetBrains.Application.FileSystemTracker.DockerInfo">
            <summary>
            See https://github.com/aspnet/DataProtection/blob/master/src/Microsoft.AspNetCore.DataProtection/Internal/DockerUtils.cs for the implementation details.
            Copyright (c) .NET Foundation. All rights reserved.
            Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
            </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.DockerInfoEx.IsDockerMountRoot(JetBrains.Util.FileSystemPath,JetBrains.Application.FileSystemTracker.DockerInfo)">
            <summary>
            Checks whether specified path is a root path in a docker
            </summary>
            <param name="path">Path to check</param>
            <param name="dockerInfo">Docker info</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.DockerInfoEx.IsIsDocker(JetBrains.Util.FileSystemPath,JetBrains.Application.FileSystemTracker.DockerInfo)">
            <summary>
            Checks whether specified path is in a docker container
            </summary>
            <param name="path">Path to check</param>
            <param name="dockerInfo">Docker info</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.FileSystemTracker.FileSystemScanner">
            <summary>
            Helper class for scanning a directory for files matching a pattern
            </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.FileSystemTrackerImpl.RegisterPrioritySink(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Application.changes.FileSystemChange},JetBrains.Application.FileSystemTracker.HandlingPriority)">
            <summary>
            Register the handler to get the update synchronously as fast as possible according to the priority.
            </summary>
        </member>
        <member name="F:JetBrains.Application.FileSystemTracker.HandlingPriority.Existence">
            <summary>
            For file existence caches, i.e. AssemblyExistsService
            </summary>
        </member>
        <member name="F:JetBrains.Application.FileSystemTracker.HandlingPriority.Caching">
            <summary>
            For file information caches
            </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.AdviseFileChanges(JetBrains.Lifetimes.Lifetime,JetBrains.Util.VirtualFileSystemPath,System.Action{JetBrains.Application.changes.FileSystemChangeDelta})">
            <summary>
             Listens for changes in <paramref name="path" /> and executes <paramref name="onChangeAction" /> on it
             (on FileSystemTrackerCommit thread in async mode and on main thread in sync mode).
             Delta argument of <paramref name="onChangeAction"/> receives only changes related to <paramref name="path"/>
             Note, if <see cref="F:JetBrains.Application.changes.FileSystemChangeType.SUBTREE_CHANGED"/> happens in containing folder the change will be received
             </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.AdviseDirectoryChanges(JetBrains.Lifetimes.Lifetime,JetBrains.Util.VirtualFileSystemPath,System.Boolean,System.Action{JetBrains.Application.changes.FileSystemChangeDelta})">
            <summary>
             Listens for changes in <paramref name="path" /> and executes <paramref name="onChangeAction" /> on it
             (on FileSystemTrackerCommit thread in async mode and on main thread in sync mode)
             Delta argument of <paramref name="onChangeAction"/> receives only changes related to <paramref name="path"/>
             Note, if <see cref="F:JetBrains.Application.changes.FileSystemChangeType.SUBTREE_CHANGED"/> happens in containing folder the change will be received
             </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.CommitChanges(JetBrains.Util.VirtualFileSystemPath[])">
            <summary>
             Queues immediate file system changes commit on separate thread (async mode) or fires Changed event on main thread (sync mode).
             </summary>
        </member>
        <member name="P:JetBrains.Application.FileSystemTracker.IFileSystemTracker.AutoCommitEnabled">
            <summary>
            Whether file system changes are allowd to commit automaticall when detected.
            Obsolete. Use <see cref="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.SuppressAutoCommit(JetBrains.Lifetimes.Lifetime,System.Object)"/> instead.
            </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.IgnoreChangesInFolder(JetBrains.Lifetimes.Lifetime,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Forbids changes in folder to be propagated to the system. 
            Necessary for caches folder that may be located inside project.
            </summary>
            <param name="lifetime">Period of time when folder should not be listened to</param>
            <param name="folderPath">Path to the folder</param>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.DoNotListenToTheWholeFolder(JetBrains.Lifetimes.Lifetime,JetBrains.Util.VirtualFileSystemPath,System.String)">
            <summary>
            Prevents file system watcher merge to listen changes in the whole folder. I.e. for temp folder or drive root.
            </summary>
            <param name="lifetime">Period of time when folder should not be listened to</param>
            <param name="folderPath">Path to the folder</param>
            <param name="ignoreReason">Reason not to listen to the specific folder</param>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.IsFolderAllowedToBeListenedTo(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Checks whether the specified folder is allowed to be listened to. <see cref="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.DoNotListenToTheWholeFolder(JetBrains.Lifetimes.Lifetime,JetBrains.Util.VirtualFileSystemPath,System.String)"/>
            </summary>
            <param name="folderPath">Path to the folder</param>
            <returns>True if the folder is allowed to be listened to</returns>
        </member>
        <member name="P:JetBrains.Application.FileSystemTracker.IFileSystemTracker.Changed">
            <summary>
             Fires on file system change from OS in separate guarded thread (async mode) or in main thread (sync mode).
             </summary>
        </member>
        <member name="M:JetBrains.Application.FileSystemTracker.IFileSystemTracker.RegisterPrioritySink(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Application.changes.FileSystemChange},JetBrains.Application.FileSystemTracker.HandlingPriority)">
            <summary>
            Register the handler to get the update synchronously as fast as possible according to the priority.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.API_Reference">
            <summary>
            “API Reference” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AccessToDisposedClosure">
            <summary>
            “Code Inspection: Access to disposed closure” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AccessToForEachVariableInClosure">
            <summary>
            “Code Inspection: Access to foreach variable in closure” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AccessToModifiedClosure">
            <summary>
            “Code Inspection: Access to modified captured variable” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AccessToStaticMemberViaDerivedType">
            <summary>
            “Code Inspection: Access to a static member of a type via a derived type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Accessing_Decompiled_Files">
            <summary>
            “Access decompiled files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Actions_List">
            <summary>
            “Action indicators and action list” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Alternative_Way_of_Working_with_Memory">
            <summary>
            “Alternative Way of Working with Memory” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analysis_Overview_Page">
            <summary>
            “Analysis Overview” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analysis_Subject">
            <summary>
            “Events” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyze_Memory_Allocation">
            <summary>
            “Analyze Memory Allocation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_Async_Calls">
            <summary>
            “Analyzing Async Calls” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_Changesets_Builds_Tests">
            <summary>
            “Analyzing Server Changesets, Builds, and Tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_Concurrency_Profiling_Results_Timeline_">
            <summary>
            “Analyze Timeline Profiling Results” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_GC_Roots">
            <summary>
            “Analyze GC Roots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_Includes">
            <summary>
            “Analysis of Includes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_Results">
            <summary>
            “Analyze Profiling Results” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_an_Instance">
            <summary>
            “Analyze Instances” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Analyzing_an_Object_Set">
            <summary>
            “Analyze Object Sets” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Angular_Support">
            <summary>
            “Angular 2 HTML Templates Support” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AnnotationRedundancyAtValueType">
            <summary>
            “Code Inspection: Nullable attribute usage with declaration having value or void type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Architecture__Project_Dependencies_Exploration">
            <summary>
            “Explore project dependency diagram” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Argument_Style">
            <summary>
            “Code Syntax Style: Named/Positional Arguments” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArgumentsStyleAnonymousFunction">
            <summary>
            “Code Inspection: Use preferred argument style for anonymous functions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArgumentsStyleLiteral">
            <summary>
            “Code Inspection: Use preferred argument style for literal values” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArgumentsStyleNamedExpression">
            <summary>
            “Code Inspection: Use preferred argument style for named expressions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArgumentsStyleOther">
            <summary>
            “Code Inspection: Use preferred argument style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArgumentsStyleStringLiteral">
            <summary>
            “Code Inspection: Use preferred argument style for string literal values” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeAccessorOwnerBody">
            <summary>
            “Code Inspection: Use preferred body style (convert to property, indexer or event with preferred body style)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeAttributes">
            <summary>
            “Code Inspection: Join or separate attributes in section” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeConstructorOrDestructorBody">
            <summary>
            “Code Inspection: Use preferred body style (convert to constructor or destructor with preferred body style)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeLocalFunctionBody">
            <summary>
            “Code Inspection: Use preferred body style (convert to local function with preferred body style)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeMethodOrOperatorBody">
            <summary>
            “Code Inspection: Use preferred body style (convert to method or operator with preferred body style)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeMissingParentheses">
            <summary>
            “Code Inspection: Add parentheses to avoid non-obvious precedence” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeModifiersOrder">
            <summary>
            “Code Inspection: Adjust modifiers declaration order” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeRedundantParentheses">
            <summary>
            “Code Inspection: Remove redundant parentheses” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeStaticMemberQualifier">
            <summary>
            “Code Inspection: Add/remove qualifier for static members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeThisQualifier">
            <summary>
            “Code Inspection: Add/remove 'this.' qualifier” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeTrailingCommaInMultilineLists">
            <summary>
            “Code Inspection: Use preferred style for trailing comma before new line in multiline lists” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeTrailingCommaInSinglelineLists">
            <summary>
            “Code Inspection: Use preferred style for trailing comma when last element is not followed by a new line” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeTypeMemberModifiers">
            <summary>
            “Code Inspection: Use explicit or implicit modifier definition for type members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeTypeModifiers">
            <summary>
            “Code Inspection: Use explicit or implicit modifier definition for types” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ArrangeVarKeywordsInDecontructingDeclaration">
            <summary>
            “Code Inspection: Join or separate 'var' in deconstruction declarations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Arranging_Member_Qualifiers">
            <summary>
            “Code Syntax Style: Optional Member Qualifiers” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Arranging_Parentheses">
            <summary>
            “Code Syntax Style: Optional Parentheses” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Asp_DeadCode">
            <summary>
            “Code Inspection: ASP.NET dead code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Assemblies_from_Global_Assembly_Cache">
            <summary>
            “Open assemblies from Global Assembly Cache” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AssertTraffic_Attribute">
            <summary>
            “Simple Scenarios. AssertTraffic Attribute” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AssignNullToNotNullAttribute">
            <summary>
            “Code Inspection: Possible 'null' assignment to entity with '[NotNull]' attribute” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AssignmentInConditionalExpression">
            <summary>
            “Code Inspection: Assignment in conditional expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Attributes_Style">
            <summary>
            “Code Syntax Style: Multiple Attributes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Auto_Completing_Code">
            <summary>
            “Code completion (IntelliSense)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AutoPropertyCanBeMadeGetOnly_Global">
            <summary>
            “Code Inspection: Auto-property can be made get-only (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.AutoPropertyCanBeMadeGetOnly_Local">
            <summary>
            “Code Inspection: Auto-property can be made get-only (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Automatically_import_namespaces">
            <summary>
            “Automatically import namespaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Back_Traces">
            <summary>
            “Back Traces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadAttributeBracketsSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around attributes)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadAttributeSpaces">
            <summary>
            “Code Inspection: BadAttributeSpaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadBracesLineBreaks">
            <summary>
            “Code Inspection: Incorrect line breaks (around braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadBracesSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadChildStatementIndent">
            <summary>
            “Code Inspection: Incorrect indent (around child statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadColonSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around colon)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadCommaSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around comma)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadControlBracesIndent">
            <summary>
            “Code Inspection: Incorrect indent (around statement braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadControlBracesLineBreaks">
            <summary>
            “Code Inspection: BadControlBracesLineBreaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadDeclarationBracesIndent">
            <summary>
            “Code Inspection: Incorrect indent (around declaration braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadDeclarationBracesLineBreaks">
            <summary>
            “Code Inspection: BadDeclarationBracesLineBreaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadEmptyBracesLineBreaks">
            <summary>
            “Code Inspection: Incorrect line breaks (around empty braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadExpressionBracesIndent">
            <summary>
            “Code Inspection: Incorrect indent (around expression braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadExpressionBracesLineBreaks">
            <summary>
            “Code Inspection: BadExpressionBracesLineBreaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadGenericBracketsSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around generic brackets)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadIndent">
            <summary>
            “Code Inspection: Incorrect indent (line indent should not be changed relative to the previous line)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadLinqLineBreaks">
            <summary>
            “Code Inspection: Incorrect line breaks (around LINQ queries)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadListLineBreaks">
            <summary>
            “Code Inspection: BadListLineBreaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadMemberAccessSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around member access symbols)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadNamespaceBracesIndent">
            <summary>
            “Code Inspection: Incorrect indent (around namespace braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadParensLineBreaks">
            <summary>
            “Code Inspection: Incorrect line breaks (around parenthesis)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadParensSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around parenthesis)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadPreprocessorIndent">
            <summary>
            “Code Inspection: Incorrect indent (around preprocessor directive)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadSemicolonSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around semicolon)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadSpacesAfterKeyword">
            <summary>
            “Code Inspection: Incorrect spacing (between keyword and parenthesis)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadSquareBracketsSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around square brackets within a statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadSwitchBracesIndent">
            <summary>
            “Code Inspection: Incorrect indent (around switch statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadSwitchIndent">
            <summary>
            “Code Inspection: BadSwitchIndent” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BadSymbolSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (around operator symbols)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Basic_Concepts">
            <summary>
            “Basic Concepts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Basic_Operations_with_Issues">
            <summary>
            “Basic_Operations_with_Issues” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Basic_Operations_with_Snapshots">
            <summary>
            “Work with Snapshots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Bodies_of_Function_Members">
            <summary>
            “Code Syntax Style: Bodies of Type Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Braces_for_Single_Line_Statements">
            <summary>
            “Code Syntax Style: Braces for Single Nested Statements” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Building_Solution">
            <summary>
            “Build solution” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BuiltInTypeReferenceStyle">
            <summary>
            “Code Inspection: Replace built-in type reference with a CLR type name or a keyword” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.BuiltInTypeReferenceStyleForMemberAccess">
            <summary>
            “Code Inspection: Replace built-in type reference with a CLR type name or a keyword in static member access expressions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Built_In_Type_Naming">
            <summary>
            “Code Syntax Style: Built-In Type References” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CLR_Activity">
            <summary>
            “Garbage Collection” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CPP_CLI_Support">
            <summary>
            “C++/CLI Support” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CSharpWarnings_CS0108_CS0114">
            <summary>
            “Code Inspection: Keyword 'new' is required” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CSharpWarnings_CS0252_CS0253">
            <summary>
            “Code Inspection: Possible unintended reference comparison” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CSharpWarnings_CS0660_CS0661">
            <summary>
            “Code Inspection: Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CSharpWarnings_CS1584_CS1711_CS1572_CS1581_CS1580">
            <summary>
            “Code Inspection: Cannot resolve reference in XML comment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Call_Stack">
            <summary>
            “Call Stack” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Call_Tree">
            <summary>
            “Call Tree” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CanBeReplacedWithTryCastAndCheckForNull">
            <summary>
            “Code Inspection: Type check and casts can be replaced with try cast” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CannotApplyEqualityOperatorToType">
            <summary>
            “Code Inspection: Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CheckNamespace">
            <summary>
            “Code Inspection: Namespace does not correspond to file location” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Checking_Memory_Traffic">
            <summary>
            “Checking Memory Traffic” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Checking_for_Objects">
            <summary>
            “Checking for Objects” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Clang_Tidy_Integration">
            <summary>
            “Clang-Tidy Integration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ClassNeverInstantiated_Global">
            <summary>
            “Code Inspection: Class is never instantiated (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CleanupCode">
            <summary>
            “CleanupCode Command-Line Tool” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CoVariantArrayConversion">
            <summary>
            “Code Inspection: Co-variant array conversion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Annotations_in_Source_Code">
            <summary>
            “Annotations in source code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Call_Tracking">
            <summary>
            “Call tracking” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Code_Annotations">
            <summary>
            “Use annotations to refine code inspection” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Code_Inspections">
            <summary>
            “Code inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Configuring_Warnings">
            <summary>
            “Configure code inspection settings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Examples_of_Quick_Fixes">
            <summary>
            “Examples of quick-fixes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__External_Annotations">
            <summary>
            “External annotations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Fix_in_Scope">
            <summary>
            “Fix in scope” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Index">
            <summary>
            “Code analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Inspect_This">
            <summary>
            “Inspect This” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Investigations">
            <summary>
            “Code exploration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Project_Hierarchy">
            <summary>
            “Explore project hierarchy” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Quick_Fixes">
            <summary>
            “Quick-fixes for code issues” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Solution_Wide_Analysis">
            <summary>
            “Solution-wide analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Solution_Wide_Analysis__Solution_Wide_Code_Inspections">
            <summary>
            “Solution-wide code inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Status_Indicator">
            <summary>
            “Marker bar and status indicator” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__String_Formatting_Methods">
            <summary>
            “Code analysis and helpers for string literals” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Value_Analysis">
            <summary>
            “Value and nullability analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis__Value_Tracking">
            <summary>
            “Value tracking” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis_in_CPP">
            <summary>
            “Code Inspection and Quick-Fixes in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis_in_HTML">
            <summary>
            “Code Inspection and Quick-Fixes in HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis_in_VB_NET">
            <summary>
            “Code inspection and quick-fixes in Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis_in_XAML">
            <summary>
            “Code Inspection and Quick-Fixes in XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Analysis_in_XML">
            <summary>
            “Code Inspection and Quick-Fixes in XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Cleanup__Index">
            <summary>
            “Code cleanup” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Cleanup__Usage_Scenarios__Reformatting_XML">
            <summary>
            “Reformat XML Doc comments” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Coverage_during_Manual_Testing">
            <summary>
            “Coverage Analysis of Applications” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Formatting_Style">
            <summary>
            “Format code with spaces, tabs, and line breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation_Deconstructors">
            <summary>
            “Generate Deconstructors” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation_Dispose_Pattern">
            <summary>
            “Generate Dispose Pattern” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation_Relational_Comparer">
            <summary>
            “Generate Relational Comparer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation_Relational_Members">
            <summary>
            “Generate Relational Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Delegating_Members">
            <summary>
            “Generate Delegating Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Equality_Members">
            <summary>
            “Generate Equality Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Formatting_Members">
            <summary>
            “Generate Formatting Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Generating_Code_from_Usage">
            <summary>
            “Generate code from usage” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Generating_Equality_Comparer">
            <summary>
            “Generate Equality Comparer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Implementing_Overriding_Methods">
            <summary>
            “Generate Missing/Overriding Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Index">
            <summary>
            “Code generation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Partial_Methods">
            <summary>
            “Generate Partial Methods” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Properties">
            <summary>
            “Generate Properties” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation__Type_Constructors">
            <summary>
            “Generate Type Constructors” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation_in_CPP">
            <summary>
            “Code Generation in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation_in_TypeScript">
            <summary>
            “Code Generation in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Generation_in_VB_NET">
            <summary>
            “Code generation in Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Inspection__Creating_Custom_Inspections_and_QuickFixes">
            <summary>
            “Create custom code inspections and quick-fixes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Outlining">
            <summary>
            “Code outlining” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Presentation_Options">
            <summary>
            “Presentation options for compiled code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance">
            <summary>
            “Code style and cleanup” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_ASP_NET">
            <summary>
            “Code Style Assistance in ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_CPP">
            <summary>
            “Code Style Assistance in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_CSS">
            <summary>
            “Code Style Assistance in CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_HTML">
            <summary>
            “Code Style Assistance in HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_JavaScript">
            <summary>
            “Code Style Assistance in JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_TypeScript">
            <summary>
            “Code Style Assistance in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_VB">
            <summary>
            “Code style assistance in Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_XAML">
            <summary>
            “Code Style Assistance in XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Style_Assistance_in_XML">
            <summary>
            “Code Style Assistance in XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Syntax_Style">
            <summary>
            “Syntax styles” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Templates_in_ASP_NET">
            <summary>
            “Code Templates in ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Templates_in_CPP">
            <summary>
            “Code Templates in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Templates_in_HTML">
            <summary>
            “Code Templates in HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Templates_in_TypeScript">
            <summary>
            “Code Templates in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Templates_in_VB">
            <summary>
            “Code templates in Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Code_Viewer">
            <summary>
            “Code viewer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_Code_Completion_Auto">
            <summary>
            “Automatic completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_Typing_Assistance">
            <summary>
            “Typing assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Code_Completion__Double">
            <summary>
            “Double Completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Code_Completion__Generative">
            <summary>
            “Generative completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Code_Completion__Smart">
            <summary>
            “Smart completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Code_Completion__Symbol">
            <summary>
            “Basic completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Code_Completion__Type_Name">
            <summary>
            “Import Symbol Completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Color_Assistance">
            <summary>
            “Color assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Comment_Uncomment_Code">
            <summary>
            “Comment and uncomment code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Complete_Statement">
            <summary>
            “Complete Statement” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Context_Actions">
            <summary>
            “Context actions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Duplicate_Line_Block">
            <summary>
            “Duplicate line or selection” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Extend_Shrink_Selection">
            <summary>
            “Extend/shrink selection” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__INotifyPropertyChanged_Support">
            <summary>
            “INotifyPropertyChanged Support” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Importing_Namespaces">
            <summary>
            “Import missing namespaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Index">
            <summary>
            “Coding assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Matching_Delimiters">
            <summary>
            “Highlight matching delimiters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Moving_Code_Elements">
            <summary>
            “Rearrange code elements” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Multiple_Entries_Clipboard">
            <summary>
            “Paste Items from Clipboard History” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Naming_Style">
            <summary>
            “Naming style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Parameter_Info">
            <summary>
            “Parameter Information” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Quick_Documentation">
            <summary>
            “Quick Documentation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Surrounding_with_Region">
            <summary>
            “Add and remove #region blocks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance__Syntax_Highlighting">
            <summary>
            “Syntax highlighting” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_for_Localization">
            <summary>
            “Coding assistance for localization” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_ASP_NET">
            <summary>
            “Coding Assistance in ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_CPP">
            <summary>
            “Coding Assistance in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_CSS">
            <summary>
            “Coding Assistance in CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_HTML">
            <summary>
            “Coding Assistance in HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_JavaScript">
            <summary>
            “Coding Assistance in JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_TypeScript">
            <summary>
            “Coding Assistance in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_VB_NET">
            <summary>
            “Coding assistance in Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_XAML">
            <summary>
            “Coding Assistance in XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coding_Assistance_in_XML">
            <summary>
            “Coding Assistance in XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CoercedEqualsUsing">
            <summary>
            “Code Inspection: Using of coerced equality” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CollectionNeverQueried_Global">
            <summary>
            “Code Inspection: Collection's content is never queried (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CollectionNeverQueried_Local">
            <summary>
            “Code Inspection: Collection's content is never queried (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CollectionNeverUpdated_Global">
            <summary>
            “Code Inspection: Collection is never updated (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CollectionNeverUpdated_Local">
            <summary>
            “Code Inspection: Collection is never updated (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Collection_Access_Analysis">
            <summary>
            “Collection access analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CommentTypo">
            <summary>
            “Code Inspection: Typo in comment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CompareNonConstrainedGenericWithNull">
            <summary>
            “Code Inspection: Possible comparison of value type with 'null'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CompareOfFloatsByEqualityOperator">
            <summary>
            “Code Inspection: Equality comparison of floating point numbers” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Comparing_Snapshots">
            <summary>
            “Compare Snapshots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Comparing_Snapshots0">
            <summary>
            “Comparing Snapshots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Comparison_View">
            <summary>
            “Comparison View” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Concurrency_Profiling_Timeline_">
            <summary>
            “Timeline Profiling” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConditionIsAlwaysTrueOrFalse">
            <summary>
            “Code Inspection: Expression is always 'true' or always 'false'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConditionalTernaryEqualBranch">
            <summary>
            “Code Inspection: Ternary expression has identical true and false branches” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConfigureAwait_Analysis">
            <summary>
            “ConfigureAwait analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_Caches_Location">
            <summary>
            “Configure caches” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_Code_Viewer">
            <summary>
            “Configure code viewer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_Keyboard_Shortcuts">
            <summary>
            “Configure keyboard shortcuts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_Path_to_Source_Files">
            <summary>
            “Configure Path to Source Files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_Project_Specific_Properties">
            <summary>
            “Configure project-specific properties” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_Syntax_Highlighting">
            <summary>
            “Configure fonts and colors” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring__Index">
            <summary>
            “Configure ReSharper” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_dotMemory_Unit">
            <summary>
            “Configuring dotMemory Unit” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Configuring_the_List_of_System_Modules">
            <summary>
            “Configuring the List of System Modules” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConstantNullCoalescingCondition">
            <summary>
            “Code Inspection: '??' condition is known to be null or not null” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConstructorInitializerLoop">
            <summary>
            “Code Inspection: Possible cyclic constructor call” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Continuous_Testing">
            <summary>
            “Continuous Testing” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ContractAnnotationNotParsed">
            <summary>
            “Code Inspection: Problem in contract annotation definition” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Contract_Annotations">
            <summary>
            “Contract annotations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Controlling_Profiling_Process">
            <summary>
            “Control Profiling Session” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertClosureToMethodGroup">
            <summary>
            “Code Inspection: Convert lambda expression to method group” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertConditionalTernaryToNullCoalescing">
            <summary>
            “Code Inspection: '?:' expression can be re-written as '??' expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertIfStatementToConditionalTernaryExpression">
            <summary>
            “Code Inspection: 'if' statement can be re-written as '?:' expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertIfStatementToNullCoalescingExpression">
            <summary>
            “Code Inspection: 'if' statement can be re-written as '??' expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertIfStatementToReturnStatement">
            <summary>
            “Code Inspection: 'if-return' statement can be re-written as 'return' statement” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertIfToOrExpression">
            <summary>
            “Code Inspection: Convert 'if' to '||'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertNullableToShortForm">
            <summary>
            “Code Inspection: Convert Nullable of T to 'T?'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertToAutoProperty">
            <summary>
            “Code Inspection: Convert property to auto-property” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertToLambdaExpression">
            <summary>
            “Code Inspection: Convert to lambda expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertToLambdaExpressionWhenPossible">
            <summary>
            “Code Inspection: Convert to lambda expression (when possible)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ConvertToLocalFunction">
            <summary>
            “Code Inspection: Convert delegate variable to local function” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Cookbook">
            <summary>
            “ReSharper Cookbook” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Copying_Symbol_Information_to_Clipboard">
            <summary>
            “Copy code reference to clipboard” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Coverage_Results_Filters">
            <summary>
            “Coverage results filters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.CppRedundantAccessSpecifier">
            <summary>
            “Code Inspection: Access specifier does not change accessibility level” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Create_a_Decorator">
            <summary>
            “Create a decorator” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Creating_Reusable_Queries">
            <summary>
            “Creating Reusable Queries” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Creating_a_File_Template">
            <summary>
            “Create a file template” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Creating_a_Live_Template">
            <summary>
            “Create a live/surround template” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Creation_Stack_Trace">
            <summary>
            “Group by Creation Stack Trace” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Creation_Stack_Trace_instance">
            <summary>
            “Creation Stack Trace” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Cross_Workspace_Comparison_View">
            <summary>
            “Cross-Workspace Comparison View” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Deal_with_a_lot_of_entries_in_resource_files">
            <summary>
            “Deal with a lot of entries in resource files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Dealing_with_Different_Language_Versions">
            <summary>
            “Deal with Different Language Versions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Debug_Output">
            <summary>
            “Debug Output” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Debugging_Assistance">
            <summary>
            “Debugging assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Debugging_Assistance_in_CPP">
            <summary>
            “Debugging Assistance in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Debugging_Covering_Tests">
            <summary>
            “Debug Covering Tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Debugging_Without_Source_Code">
            <summary>
            “Debug modules that have no debug information (PDB)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Default_Value_Expressions_Style">
            <summary>
            “Code Syntax Style: Default Value Expressions ('default' vs 'default(T)')” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Design_time_Inspection">
            <summary>
            “Detect code issues in design time” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Detect_code_issues_in_a_build_using_ReSharper_and_TeamCity">
            <summary>
            “Detect code issues in a build using ReSharper and TeamCity” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Detect_possible_NullReferenceExceptions">
            <summary>
            “Detect possible NullReferenceExceptions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Domain_specific_ReSharper_tutorials">
            <summary>
            “Domain-specific ReSharper tutorials” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.DoubleNegationOperator">
            <summary>
            “Code Inspection: Double negation operator” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.DuplicateResource">
            <summary>
            “Code Inspection: Duplicate resource name” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Dynamic_Program_Analysis">
            <summary>
            “Dynamic_Program_Analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CPP_CppBlankLinesPageScheme">
            <summary>
            “C++ - Blank Lines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CPP_CppBracesPageScheme">
            <summary>
            “C++ - Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CPP_CppIndentStylePageSchema">
            <summary>
            “C++ - Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CPP_CppOtherPageScheme">
            <summary>
            “C++ - Indentation and Alignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CPP_CppSpacesPageScheme">
            <summary>
            “C++ - Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CPP_CppWrappingPageScheme">
            <summary>
            “C++ - Line breaks and Wrapping” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSHARP_BlankLinesPageScheme">
            <summary>
            “C# - Blank Lines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSHARP_BracesPageSchema">
            <summary>
            “C# - Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSHARP_CSharpCodeStylePageImplSchema">
            <summary>
            “C# - CodeStyle” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSHARP_CSharpIndentStylePageSchema">
            <summary>
            “C# - Tabs, Indents, Alignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSHARP_LineBreaksPageSchema">
            <summary>
            “C# - Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSHARP_OthersPageSchema">
            <summary>
            “C# - Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSHARP_SpacesPageSchema">
            <summary>
            “C# - Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSS_CodeLayoutPageSchema">
            <summary>
            “Css - Code Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSS_CssIndentStylePageSchema">
            <summary>
            “Css - Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSS_LineBreaksPageSchema">
            <summary>
            “Css - Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_CSS_SpacesPageSchema">
            <summary>
            “Css - Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_Generalized">
            <summary>
            “Generalized EditorConfig properties” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_HTML_HtmlCodeStylePageSchema">
            <summary>
            “HTML - Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_HTML_HtmlCodeStylePageStyleSchema">
            <summary>
            “HTML - CodeStyle” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_Index">
            <summary>
            “Index of EditorConfig properties” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_JAVA_SCRIPT_BracesPageSchema">
            <summary>
            “JavaScript - Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_JAVA_SCRIPT_JavaScriptCodeStyleSchema">
            <summary>
            “JavaScript - CodeStyle” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_JAVA_SCRIPT_JavaScriptIndentStylePageSchema">
            <summary>
            “JavaScript - Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_JAVA_SCRIPT_JavaScriptOthersPageSchema">
            <summary>
            “JavaScript - Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_JAVA_SCRIPT_LineBreaksPageSchema">
            <summary>
            “JavaScript - Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_JAVA_SCRIPT_SpacesPageSchema">
            <summary>
            “JavaScript - Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_Properties">
            <summary>
            “EditorConfig properties” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_Protobuf_ProtobufFormattingPageSchema">
            <summary>
            “Protobuf - Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_Razor_CSharp_RazorCodeStylePageImplSchema">
            <summary>
            “Razor CSharp - CodeStyle” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_TYPE_SCRIPT_TsBracesPageScheme">
            <summary>
            “TypeScript - Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_TYPE_SCRIPT_TsLineBreaksPageSchema">
            <summary>
            “TypeScript - Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_TYPE_SCRIPT_TsSpacesPageSchema">
            <summary>
            “TypeScript - Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_TYPE_SCRIPT_TypeScriptOthersPageSchema">
            <summary>
            “TypeScript - Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_VBASIC_BlankLinesPageSchema">
            <summary>
            “VB.NET - Blank Lines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_VBASIC_LineBreaksPageSchema">
            <summary>
            “VB.NET - Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_VBASIC_OthersPageSchema">
            <summary>
            “VB.NET - Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_VBASIC_SpacesPageSchema">
            <summary>
            “VB.NET - Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_VBASIC_VBCodeStylePageImplSchema">
            <summary>
            “VB.NET - CodeStyle” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_VBASIC_VBIndentStylePageSchema">
            <summary>
            “VB.NET - Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_XMLDOC_XmlDocCodeStylePageSchema">
            <summary>
            “XMLDOC - Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EditorConfig_XML_XmlCodeStylePageSchema">
            <summary>
            “XML - Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EmptyConstructor">
            <summary>
            “Code Inspection: Empty constructor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EmptyDestructor">
            <summary>
            “Code Inspection: EmptyDestructor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EmptyEmbeddedStatement">
            <summary>
            “Code Inspection: Empty control statement body” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EmptyForStatement">
            <summary>
            “Code Inspection: Empty 'for' loop is redundant” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EmptyGeneralCatchClause">
            <summary>
            “Code Inspection: Empty general catch clause” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EmptyNamespace">
            <summary>
            “Code Inspection: Empty namespace declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EmptyStatement">
            <summary>
            “Code Inspection: Empty statement is redundant” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceDoWhileStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'do-while' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceFixedStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'fixed' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceForStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'for' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceForeachStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'foreach' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceIfStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'if' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceLockStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'lock' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceUsingStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'using' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnforceWhileStatementBraces">
            <summary>
            “Code Inspection: Use preferred braces style (enforce braces in 'while' statement)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Enforcing_Code_Formatting_Rules">
            <summary>
            “Manage and apply formatting rules” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.EnumUnderlyingTypeIsInt">
            <summary>
            “Code Inspection: Underlying type of enum is 'int'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Establish_automated_NET_code_review">
            <summary>
            “Establish automated code review” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Events_Window">
            <summary>
            “Events” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Examples">
            <summary>
            “How To” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exceptions">
            <summary>
            “Exceptions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Excluding_Nodes_from_Coverage_Snapshot">
            <summary>
            “Exclude Nodes from Coverage Snapshot” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Executing_Analyzing_Tests">
            <summary>
            “Execute tests and analyze results” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exploring_Assemblies">
            <summary>
            “Explore and decompile assemblies” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exploring_Assembly_Dependency_Diagram">
            <summary>
            “Explore assembly dependency diagram” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exploring_Assembly_Metadata">
            <summary>
            “Explore assembly and portable PDB Metadata” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exploring_Folders">
            <summary>
            “Find assemblies in folders” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exploring_Loaded_Assemblies">
            <summary>
            “Explore assemblies from current processes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exploring_PDB_Contents">
            <summary>
            “Explore PDB contents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exploring_Type_Dependency_Graph">
            <summary>
            “Explore type dependency diagram” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Exporting_Assembly_to_Project">
            <summary>
            “Export assembly to project” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Feedback_Center">
            <summary>
            “Feedback Center dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.FieldCanBeMadeReadOnly_Global">
            <summary>
            “Code Inspection: Field can be made readonly (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.FieldCanBeMadeReadOnly_Local">
            <summary>
            “Code Inspection: Field can be made readonly (Private Accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.File_Header_Style">
            <summary>
            “File header style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.File_I_O">
            <summary>
            “File Operations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.File_and_Type_Layout">
            <summary>
            “Rearrange members with file and type layout patterns” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Filtering">
            <summary>
            “Filtering” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Filtering_by_Solution">
            <summary>
            “Filtering Server Changes by Solution” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Filters">
            <summary>
            “Filters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Find_dead_code">
            <summary>
            “Find dead .NET code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Finding_Code_Dependent_on_Modules">
            <summary>
            “Find code dependent on referenced modules” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Finding_Code_Issues">
            <summary>
            “Find code issues with code inspection” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Finding_Exploring_and_Installing_NuGet_Packages">
            <summary>
            “Find, explore, and install NuGet packages” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Finding_Usages_of_External_Symbols">
            <summary>
            “Find referenced code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.First_Look_at_the_dotMemory_s_User_Interface">
            <summary>
            “First Look at the User Interface” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.First_Steps">
            <summary>
            “First steps with ReSharper” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Fix_inconsistent_namespace_naming">
            <summary>
            “Fix inconsistent namespace naming” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Fixing_Issues_Found_by_DPA">
            <summary>
            “Fixing_Issues_Found_by_DPA” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Folding_Calls">
            <summary>
            “Folding Calls” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ForCanBeConvertedToForeach">
            <summary>
            “Code Inspection: For-loop can be converted into foreach-loop” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Forecasting_Performance_Timeline">
            <summary>
            “Forecasting Performance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.FunctionNeverReturns">
            <summary>
            “Code Inspection: Function never returns” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.GCSuppressFinalizeForTypeWithoutDestructor">
            <summary>
            “Code Inspection: 'GC.SuppressFinalize' is invoked for type without destructor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Generating_Code_with_Completion">
            <summary>
            “Generate code with code completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Generating_Null_Checking_Routines">
            <summary>
            “Generate null-checking routines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Generating_PDB_Files">
            <summary>
            “Generate PDB files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Generating_Type_Members">
            <summary>
            “Generate type members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Generations">
            <summary>
            “Group by Generations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Get_Started">
            <summary>
            “Get Started” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Get_Started_with_Performance_Viewer">
            <summary>
            “Get Started with Performance Profiling” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Get_Started_with_Timeline_Profiling__Basic_">
            <summary>
            “Get Started with Timeline Profiling” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Get_Started_with_Timeline_Viewer">
            <summary>
            “Find the Cause of a UI Freeze” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Get_assistance_in_migrating_to_new_CSharp_features">
            <summary>
            “Get assistance in migrating to new C# features” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Getting_Started">
            <summary>
            “Getting started and tutorials” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Getting_Started_with_dotCover">
            <summary>
            “Get Started” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Getting_Started_with_dotMemory">
            <summary>
            “Get Started with dotMemory” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.HTTP_Requests">
            <summary>
            “Incoming HTTP Requests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Heap_Fragmentation">
            <summary>
            “Heap Fragmentation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Home_Window">
            <summary>
            “Home Window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.How_To_dotCover">
            <summary>
            “How To” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.How_to_Find_a_Memory_Leak">
            <summary>
            “Find a Memory Leak” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.How_to_Optimize_Memory_Traffic">
            <summary>
            “Optimize Memory Traffic” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.IL_Viewer">
            <summary>
            “IL Viewer window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Icicles">
            <summary>
            “Call Tree (Icicle Chart)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.IdentifierTypo">
            <summary>
            “Code Inspection: Typo in identifier” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Ignore_Parts_of_Code">
            <summary>
            “Ignore parts of the code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ImplicitlyCapturedClosure">
            <summary>
            “Code Inspection: Implicitly captured closure” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Importing_Process_Dumps">
            <summary>
            “Analyze Process Dumps” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ImpureMethodCallOnReadonlyValueField">
            <summary>
            “Code Inspection: Impure method is called for readonly field of value type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Incoming_References">
            <summary>
            “Incoming References” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.InconsistentNaming">
            <summary>
            “Code Inspection: Inconsistent Naming” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.InconsistentlySynchronizedField">
            <summary>
            “Code Inspection: Inconsistent synchronization on field” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.IncorrectBlankLinesNearBraces">
            <summary>
            “Code Inspection: Incorrect blank lines (blank lines are redundant elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Indentation_Style">
            <summary>
            “Indentation style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Inlay_hints_in_CPP">
            <summary>
            “Inlay Hints in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Inline_Parameter_Name_Hints">
            <summary>
            “Inlay hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Inline_refactorings">
            <summary>
            “Inline refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.InspectCode">
            <summary>
            “InspectCode Command-Line Tool” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Inspect_the_Whole_Solution_for_Naming_Style_Compliance">
            <summary>
            “Inspect the whole solution for naming style compliance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Inspecting_Code_in_Specific_Scope">
            <summary>
            “Find code issues in specific scope” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Inspections">
            <summary>
            “Automatic Inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Installation_Guide">
            <summary>
            “Installation Guide” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Instances">
            <summary>
            “Group by Instances” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Interval_Filters">
            <summary>
            “Interval Filters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.IntroduceOptionalParameters_Local">
            <summary>
            “Code Inspection: Introduce optional parameters (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Introduction">
            <summary>
            “Introduction” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Introduction__Conventions">
            <summary>
            “How to use this help” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Introduction__Feature_Map">
            <summary>
            “ReSharper features in different languages” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Introduction__Index">
            <summary>
            “Introduction” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Introduction__Network_Activity">
            <summary>
            “ReSharper's network activity” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Introduction__Troubleshooting">
            <summary>
            “Troubleshooting” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Introduction__Whats_New">
            <summary>
            “What's new in ReSharper” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.InvertIf">
            <summary>
            “Code Inspection: Invert 'if' statement to reduce nesting” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.InvocationIsSkipped">
            <summary>
            “Code Inspection: Method invocation is skipped” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.IsExpressionAlwaysTrue">
            <summary>
            “Code Inspection: The given expression of 'is' operator is always of the provided type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.JIT_Compilation">
            <summary>
            “JIT Compilation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.JoinDeclarationAndInitializer">
            <summary>
            “Code Inspection: Join local variable declaration and assignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.JoinNullCheckWithUsage">
            <summary>
            “Code Inspection: Join null check with assignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Joining_Lines">
            <summary>
            “Join Lines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Key_Retention_Paths">
            <summary>
            “Key Retention Paths” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Language_Independent_Context_Actions">
            <summary>
            “Language-independent context actions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Language_Injections">
            <summary>
            “Language injections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Languages_CPP">
            <summary>
            “ReSharper by Language: C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Languages_CSharp">
            <summary>
            “ReSharper by Language: C#” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Languages_VB_NET">
            <summary>
            “ReSharper by Language: Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Languages_XAML">
            <summary>
            “ReSharper by Language: XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Languages_and_Frameworks">
            <summary>
            “ReSharper by language” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.LocalFunctionCanBeMadeStatic">
            <summary>
            “Code Inspection: Local function can be made static” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.LocalVariableHidesMember">
            <summary>
            “Code Inspection: Local variable hides member” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.LocalizableElement">
            <summary>
            “Code Inspection: Element is localizable” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Localization_Inspection">
            <summary>
            “Localization inspections and quick-fixes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.LoopCanBeConvertedToQuery">
            <summary>
            “Code Inspection: Loop can be converted into LINQ-expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.LoopVariableIsNeverChangedInsideLoop">
            <summary>
            “Code Inspection: Loop control variable is never changed inside loop” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Main_Set_of_Refactorings">
            <summary>
            “Main set of refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Maintain_Code_Quality_of_Unit_Tests">
            <summary>
            “Maintain code quality of unit tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Making_AutoProperties_GetOnly">
            <summary>
            “Make auto-properties get-only” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Making_Field_Readonly">
            <summary>
            “Make fields readonly” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Managing_Assemblies">
            <summary>
            “Manage assembly lists” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Managing_Color_Themes">
            <summary>
            “Change icon sets” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Managing_Extensions">
            <summary>
            “Manage extensions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MarkupAttributeTypo">
            <summary>
            “Code Inspection: Typo in markup attribute value” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MarkupTextTypo">
            <summary>
            “Code Inspection: Typo in markup text” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Matching_Coverage_Snapshot_with_Project_Structure">
            <summary>
            “Match Coverage Snapshot with Project Structure” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberCanBeMadeStatic_Global">
            <summary>
            “Code Inspection: Member can be made static(shared) (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberCanBeMadeStatic_Local">
            <summary>
            “Code Inspection: Member can be made static (shared) (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberCanBePrivate_Global">
            <summary>
            “Code Inspection: Member can be made private (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberCanBePrivate_Local">
            <summary>
            “Code Inspection: Member can be made private (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberCanBeProtected_Global">
            <summary>
            “Code Inspection: Member can be made protected (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberCanBeProtected_Local">
            <summary>
            “Code Inspection: Member can be made protected (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberHidesStaticFromOuterClass">
            <summary>
            “Code Inspection: Member hides static member from outer class” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MemberInitializerValueIgnored">
            <summary>
            “Code Inspection: Member initialized value ignored” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Memory_Allocation">
            <summary>
            “.NET Memory Allocations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MergeCastWithTypeCheck">
            <summary>
            “Code Inspection: Type check and casts can be merged” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MergeConditionalExpression">
            <summary>
            “Code Inspection: Merge conditional ?: expression into conditional access” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Help.ReSharperHelpIds.MergeSequentialChecks" -->
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Merging_Coverage_Snapshots">
            <summary>
            “Merge Coverage Snapshots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MissingBlankLines">
            <summary>
            “Code Inspection: Incorrect blank lines (blank lines are missing elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MissingIndent">
            <summary>
            “Code Inspection: Incorrect indent (line should be indented or outdented)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MissingLinebreak">
            <summary>
            “Code Inspection: Incorrect line breaks (line break is missing elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MissingSpace">
            <summary>
            “Code Inspection: Incorrect spacing (space is missing elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Modifiers_Style">
            <summary>
            “Code Syntax Style: Modifiers” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Monitoring_Memory_with_dotMemory_Unit">
            <summary>
            “Monitor memory with dotMemory Unit” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Mono_Applications">
            <summary>
            “Mono Applications” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MoreSpecificForeachVariableTypeAvailable">
            <summary>
            “Code Inspection: Iteration variable can be declared with a more specific type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Move_Refactorings">
            <summary>
            “Move refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Move_classes_into_separate_files_in_one_go">
            <summary>
            “Move classes into separate files in one go” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MultipleNullableAttributesUsage">
            <summary>
            “Code Inspection: Multiple nullable attributes usage” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MultipleSpaces">
            <summary>
            “Code Inspection: Incorrect spacing (multiple spaces are prohibited)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MultipleStatementsOnOneLine">
            <summary>
            “Code Inspection: Incorrect line breaks (multiple statements on one line)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.MultipleTypeMembersOnOneLine">
            <summary>
            “Code Inspection: Incorrect line breaks (multiple type members on one line)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Mvc_ViewNotResolved">
            <summary>
            “Code Inspection: MVC (unknown view)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NET_Core_Applications">
            <summary>
            “.NET Core Applications” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NET_Memory_Management_Concepts">
            <summary>
            “.NET Memory Management Concepts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_AsyncMethodMustBeTask" -->
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_AttributeProducesTooManyTests">
            <summary>
            “Code Inspection: NUnit. Specified attribute values produce too many tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_IncorrectArgumentType">
            <summary>
            “Code Inspection: NUnit. Incompatible argument type or incorrect argument value” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_IncorrectExpectedResultType">
            <summary>
            “Code Inspection: Incompatible expected result type or incorrect value” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_IncorrectRangeBounds">
            <summary>
            “Code Inspection: NUnit. Incorrect range bounds. 'to' must be greater than or equal to 'from'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_MethodWithParametersAndTestAttribute">
            <summary>
            “Code Inspection: NUnit. Parameters without provided values in test method” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_MissingArgumentsInTestCaseAttribute">
            <summary>
            “Code Inspection: NUnit. Missing arguments in TestCase attribute” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_NoValuesProvided">
            <summary>
            “Code Inspection: NUnit. No values provided in the attributes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_NonPublicMethodWithTestAttribute">
            <summary>
            “Code Inspection: NUnit. Non-public test method” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_ParameterTypeIsNotCompatibleWithAttribute">
            <summary>
            “Code Inspection: NUnit. Specified values are not compatible with the test parameter type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_RangeAttributeBoundsAreOutOfRange">
            <summary>
            “Code Inspection: NUnit. Values in range do not fit the type of the test parameter” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_RangeStepSignMismatch">
            <summary>
            “Code Inspection: NUnit. Mismatch of the range step sign” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_RangeStepValueMustNotBeZero">
            <summary>
            “Code Inspection: NUnit. Range 'step' parameter value must be non-zero” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_RangeToValueIsNotReachable">
            <summary>
            “Code Inspection: NUnit. The maximum range value is not reachable with the step value” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_RedundantArgumentInTestCaseAttribute">
            <summary>
            “Code Inspection: NUnit. Redundant argument in TestCase attribute” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_RedundantArgumentInsteadOfExpectedResult">
            <summary>
            “Code Inspection: NUnit. Redundant argument instead of ExpectedResult” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_RedundantExpectedResultInTestCaseAttribute">
            <summary>
            “Code Inspection: NUnit. Redundant expected result” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_TestCaseAttributeRequiresExpectedResult">
            <summary>
            “Code Inspection: NUnit. Missing expected result” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_TestCaseResultPropertyDuplicatesExpectedResult">
            <summary>
            “Code Inspection: NUnit. Test case Result property duplicates ExpectedResult” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_TestCaseResultPropertyIsObsolete">
            <summary>
            “Code Inspection: NUnit. Test case Result property is obsolete” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_TestCaseSourceCannotBeResolved">
            <summary>
            “Code Inspection: NUnit. Cannot resolve symbol in [TestCaseSource] argument” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_TestCaseSourceMustBeFieldPropertyMethod">
            <summary>
            “Code Inspection: NUnit. Test case source must be field, property, or method” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_TestCaseSourceMustBeStatic">
            <summary>
            “Code Inspection: NUnit. Test case source must be static” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NUnit_TestCaseSourceShouldImplementIEnumerable">
            <summary>
            “Code Inspection: NUnit. Expected non-abstract class implementing IEnumerable” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Namespace_Imports_Style">
            <summary>
            “Code Syntax Style: Namespace Imports” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Narrowing_DPA_Scope">
            <summary>
            “Narrowing_DPA_Scope” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Native_Memory_Allocation">
            <summary>
            “Unreleased Native Allocations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigate_To_Consuming_APIs">
            <summary>
            “Navigate To Consuming APIs” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigate_To_Exposing_APIs">
            <summary>
            “Navigate To Exposing APIs” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigating_from_Source_View_to_Visual_Studio">
            <summary>
            “Navigate from Source View to Visual Studio” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigating_to_Action">
            <summary>
            “Find actions and options” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigating_to_String_LIterals">
            <summary>
            “Go to String” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_Go_To_Metadata_Token">
            <summary>
            “Go To Metadata Token” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search_Go_to_Text">
            <summary>
            “Go to Text” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search_Navigating_Breakpoints">
            <summary>
            “Navigate breakpoints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search_Structural_Navigation">
            <summary>
            “Structural navigation with Tab and Shift+Tab” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Bookmarks">
            <summary>
            “Bookmarks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__CamelHumps">
            <summary>
            “CamelHumps” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Context_Dependent_Navigation">
            <summary>
            “Navigate current context” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Finding_Usages">
            <summary>
            “Find Usages” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Finding_Usages__Finding_Usages_Advanced">
            <summary>
            “Find Usages of Related Entities” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Finding_Usages__Finding_Usages_of_a_Symbol">
            <summary>
            “Find Usages of Symbols” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Finding_Usages__Highlighting_Usages_in_File">
            <summary>
            “Highlight Usages in File” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Finding_Usages__Optimizing_References">
            <summary>
            “Analyze and optimize project references” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Finding_Usages__Viewing_Filtering_and_Grouping_Results">
            <summary>
            “Analyze search results” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Base">
            <summary>
            “Go to Base Symbols” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Declaration">
            <summary>
            “Go to Declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_File">
            <summary>
            “Go To File” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_File_Member">
            <summary>
            “Go to File Member” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Implementation">
            <summary>
            “Go to Implementation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Inheritor">
            <summary>
            “Go to Derived Symbols” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Symbol">
            <summary>
            “Go to Symbol” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Type">
            <summary>
            “Search Everywhere/Go to Type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Type_Declaration">
            <summary>
            “Go to Type of Symbol” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Go_to_Usage">
            <summary>
            “Go to Usages of Symbol” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Highlighting_Current_Line">
            <summary>
            “Highlight current line” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Index">
            <summary>
            “Navigate and search” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here">
            <summary>
            “Navigate To” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Assembly_Explorer">
            <summary>
            “Navigate To Assembly Explorer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Conflicting_Declarations">
            <summary>
            “Navigate To Conflicting Declarations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Control_Flow_Target">
            <summary>
            “Navigate To Control Flow Target” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Decompiled_Code">
            <summary>
            “Navigate To Decompiled Sources” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Extension_Methods">
            <summary>
            “Navigate To Extension Methods” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__External_Source_File">
            <summary>
            “Navigate To Sources from Symbol Files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Function_Exits">
            <summary>
            “Navigate To Function Exits” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Generic_Substitutions">
            <summary>
            “Navigate To Generic Substitutions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Implementing_Members">
            <summary>
            “Navigate To Implementing Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Member_Overloads">
            <summary>
            “Navigate To Member Overloads” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Metadata_Sources">
            <summary>
            “Navigate To Metadata View” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Object_Browser">
            <summary>
            “Navigate To Object Browser” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Overriding_Members">
            <summary>
            “Navigate To Overriding Members” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Parameter_Declaration">
            <summary>
            “Navigate To Parameter Declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Test_Explorer">
            <summary>
            “Navigate To Test Explorer and Tests Sessions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigate_from_Here__Todo_Explorer">
            <summary>
            “Navigate To To-do Explorer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigating_Between_To_do_Items">
            <summary>
            “To-do lists” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigating_to_Exception">
            <summary>
            “Navigate from stack trace to exception” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigating_to_External_Sources">
            <summary>
            “Navigate compiled code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigating_to_Recent_Locations">
            <summary>
            “Navigate recent locations and changes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Navigation_from_Symbols">
            <summary>
            “Navigate from symbols” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Peek_Definition">
            <summary>
            “View and edit related code in Peek Definition view” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Search">
            <summary>
            “Search by name” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Structural_Search_and_Replace">
            <summary>
            “Structural Search and Replace” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search__Viewing_Type_Hierarchy">
            <summary>
            “Explore type hierarchy” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search_in_HTML">
            <summary>
            “Navigation and Search in HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search_in_VB_NET">
            <summary>
            “Navigation and search in Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search_in_XAML">
            <summary>
            “Navigation and Search in XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_and_Search_in_XML">
            <summary>
            “Navigation and Search in XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_in_CPP">
            <summary>
            “Navigation and Search in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Navigation_to_Covering_Tests">
            <summary>
            “Navigate to Covering Tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NegativeEqualityExpression">
            <summary>
            “Code Inspection: Simplify negative equality expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NonReadonlyMemberInGetHashCode">
            <summary>
            “Code Inspection: Non-readonly type member referenced in 'GetHashCode()'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NotAccessedField_Local">
            <summary>
            “Code Inspection: Non-accessed field (Private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NotDeclaredInParentCulture">
            <summary>
            “Code Inspection: Resource is not declared in base culture” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NotNullMemberIsNotInitialized">
            <summary>
            “Code Inspection: Member with '[NotNull]' attribute is not initialized at constructor exit” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NotOverriddenInSpecificCulture">
            <summary>
            “Code Inspection: Resource is not overridden in specific culture” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NotResolvedInText">
            <summary>
            “Code Inspection: Cannot resolve symbol in text argument” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.NuGet_Browser">
            <summary>
            “NuGet Browser window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Object_Creation_Style">
            <summary>
            “Code Syntax Style: Object Creation ('new()' vs 'new T()')” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Opening_Assemblies_from_NuGet_Packages">
            <summary>
            “Open assemblies from NuGet packages” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Opening_Assembly_Files">
            <summary>
            “Open and close assemblies” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Optimize_App_Performance_and_Memory_Traffic">
            <summary>
            “Optimize App Performance and Memory Traffic” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Options_Code_Cleanup_General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Options_Source_Browsing">
            <summary>
            “Source Browsing” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Other_Profiling_Scenarios">
            <summary>
            “How To” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.OutdentIsOffPrevLevel">
            <summary>
            “Code Inspection: Incorrect indent (line indent should be restored to the previous level)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Outgoing_References">
            <summary>
            “Outgoing References” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.OverriddenWithSameValue">
            <summary>
            “Code Inspection: Resource is overridden with identical value” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ParameterHidesMember">
            <summary>
            “Code Inspection: Parameter hides member” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Help.ReSharperHelpIds.ParameterTypeCanBeEnumerable_Global" -->
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ParameterTypeCanBeEnumerable_Local">
            <summary>
            “Code Inspection: Parameter type can be IEnumerable of T” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PartialMethodParameterNameMismatch">
            <summary>
            “Code Inspection: Parameter name differs in partial method declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PartialMethodWithSinglePart">
            <summary>
            “Code Inspection: Redundant 'partial' modifier on method declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PartialTypeWithSinglePart">
            <summary>
            “Code Inspection: Redundant 'partial' modifier on type declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PatternAlwaysOfType">
            <summary>
            “Code Inspection: The source expression is always of pattern's type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Performance_Profiling">
            <summary>
            “Performance Profiling” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Performance_Profiling__Profiling_Using_the_Command_Line">
            <summary>
            “Use dotTrace Command-Line Profiler” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Personal_Build">
            <summary>
            “Personal Build, Remote Run, Pre-tested Commit” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Plain_List">
            <summary>
            “Methods and Subsystems” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PolymorphicFieldLikeEventInvocation">
            <summary>
            “Code Inspection: Invocation of polymorphic field-like event” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleAssignmentToReadonlyField">
            <summary>
            “Code Inspection: Assignment to a property of a readonly field can be useless” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleInfiniteInheritance">
            <summary>
            “Code Inspection: Possible infinite inheritance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleInvalidCastExceptionInForeachLoop">
            <summary>
            “Code Inspection: Possible 'System.InvalidCastException' in foreach loop” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleInvalidOperationException">
            <summary>
            “Code Inspection: Possible 'System.InvalidOperationException'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleMultipleEnumeration">
            <summary>
            “Code Inspection: Possible multiple enumeration of IEnumerable” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleMultipleWriteAccessInDoubleCheckLocking">
            <summary>
            “Code Inspection: Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleNullReferenceException">
            <summary>
            “Code Inspection: Possible 'System.NullReferenceException'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleUnintendedQueryableAsEnumerable">
            <summary>
            “Code Inspection: IQueryable is possibly unintentionally used as IEnumerable” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossibleUnintendedReferenceComparison">
            <summary>
            “Code Inspection: Possible unintended reference comparison” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PossiblyMistakenUseOfInterpolatedStringInsert">
            <summary>
            “Code Inspection: Possibly unintended string interpolation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Postfix_Templates">
            <summary>
            “Postfix templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PrivateFieldCanBeConvertedToLocalVariable">
            <summary>
            “Code Inspection: Private field can be converted to local variable” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Process_Overview">
            <summary>
            “Process Overview” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile__NET_Core_Application">
            <summary>
            “Profile .NET Core Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_ASP_Web_Site">
            <summary>
            “Profile Web Application on IIS Server” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Mono_Application">
            <summary>
            “Profile Mono Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_NET_Process">
            <summary>
            “Profile .NET Process” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Native_Application">
            <summary>
            “Profile Native Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Running_Process">
            <summary>
            “Profile Running Process” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Standalone_Application">
            <summary>
            “Profile Standalone Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Static_Method">
            <summary>
            “Profile Static Method” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Unity_Application">
            <summary>
            “Profile Unity Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_WCF_Service">
            <summary>
            “Profile WCF Service” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Web_Application_on_IIS_Express">
            <summary>
            “Profile Web Application in IIS Express” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_WinRT_Application">
            <summary>
            “Profile WinRT Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profile_Windows_Service">
            <summary>
            “Profile Windows Service” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiler_Options">
            <summary>
            “Configure Profiling Session” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Advanced_Profiling_Using_dotTrace_API">
            <summary>
            “Control Profiling Session with API” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Choosing_the_Right_Profiling_Mode">
            <summary>
            “Profiling Types” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__IIS">
            <summary>
            “Web Applications Using IIS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__IIS_Express">
            <summary>
            “Web Applications Using IIS Express” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Launching_and_Controlling_the_Profiling_Process">
            <summary>
            “Control Profiling Session” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Profiling_Unit_Tests">
            <summary>
            “Profile Unit Tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Setting_the_Right_Meter_Kind">
            <summary>
            “Time Measurement Methods” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Standalone_Applications">
            <summary>
            “Standalone Applications” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Starting_a_Profiling_Session">
            <summary>
            “Run dotTrace” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Transparent_Integration">
            <summary>
            “Integrate Third-Party Tools with ReSharper” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__WCF_Service_Libraries">
            <summary>
            “WCF Services” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Windows_Services">
            <summary>
            “Windows Services” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__Windows_Store_Applications">
            <summary>
            “WinRT Applications” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__XBAP">
            <summary>
            “Profile XBAP Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Guidelines__dotNET_Process">
            <summary>
            “.NET Processes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Profiling_Process">
            <summary>
            “Run Profiling” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Project_Level_Assistance">
            <summary>
            “Project-level assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Project_Level_Refactorings">
            <summary>
            “Project-level refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Providing_Feedback">
            <summary>
            “Share your feedback” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.PublicConstructorInAbstractClass">
            <summary>
            “Code Inspection: Make constructor in abstract class protected” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Quick_Start">
            <summary>
            “Quick-start tips” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Quickly_create_a_type">
            <summary>
            “Quickly create a type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Quickly_internationalize_a_NET_application">
            <summary>
            “Quickly internationalize a .NET application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Quickly_introduce_using_statements_and_try_catch_blocks">
            <summary>
            “Quickly introduce using statements and try...catch blocks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_CPP_quick_tips">
            <summary>
            “ReSharper C++ Quick Tips” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_Command_Line_Tools">
            <summary>
            “ReSharper command line tools” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language_JSON">
            <summary>
            “ReSharper by Language JSON” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language_Protobuf">
            <summary>
            “ReSharper by Language: Google Protocol Buffers (Protobuf)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__CSS">
            <summary>
            “ReSharper by Language: CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__CSS__Code_Analysis_and_Coding_Assistance">
            <summary>
            “Code Inspection and Quick-Fixes in CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__CSS__Navigation">
            <summary>
            “Navigation and Search in CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__CSS__Refactorings">
            <summary>
            “Refactorings for CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__CSS__Templates">
            <summary>
            “Code Templates in CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__HTML">
            <summary>
            “ReSharper by Language: HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__JavaScript">
            <summary>
            “ReSharper by Language: JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__JavaScript__Code_Analysis_and_Coding_Assistance">
            <summary>
            “Code Inspection and Quick-Fixes in JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__JavaScript__Navigation">
            <summary>
            “Navigation and Search in JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__JavaScript__Refactorings">
            <summary>
            “Refactorings for JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__JavaScript__Templates">
            <summary>
            “Code Templates in JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__JavaScript__Unit_Testing">
            <summary>
            “Unit Testing Assistance in JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__MSBuild">
            <summary>
            “ReSharper by Language: MSBuild” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__TypeScript">
            <summary>
            “ReSharper by Language: TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__TypeScript__Code_Analysis_and_Coding_Assistance">
            <summary>
            “Code Inspection and Quick-Fixes in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__TypeScript__Navigation">
            <summary>
            “Navigation and Search in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__TypeScript__Refactorings">
            <summary>
            “Refactorings for TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_by_Language__XML">
            <summary>
            “ReSharper by Language: XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_for_Universal_Apps">
            <summary>
            “ReSharper for Universal Apps and Windows Phone” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_for_VSTO">
            <summary>
            “ReSharper for VSTO” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReSharper_for_data_access">
            <summary>
            “ReSharper for Data Access” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReadAccessInDoubleCheckLocking">
            <summary>
            “Code Inspection: Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reduce_Algorithm_Complexity_and_Promote_Modularity">
            <summary>
            “Reduce algorithm complexity and promote modularity” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantAbstractModifier">
            <summary>
            “Code Inspection: Redundant 'abstract' modifier” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantArgumentDefaultValue">
            <summary>
            “Code Inspection: Redundant argument with default value” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantAssignment">
            <summary>
            “Code Inspection: Assignment is not used” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantAttributeParentheses">
            <summary>
            “Code Inspection: Parentheses are redundant if attribute has no arguments” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantBlankLines">
            <summary>
            “Code Inspection: Incorrect blank lines (blank lines are redundant elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantCaseLabel">
            <summary>
            “Code Inspection: Redundant 'case' label” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantCast">
            <summary>
            “Code Inspection: Redundant cast” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantCatchClause">
            <summary>
            “Code Inspection: Redundant catch clause” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantConfigureAwait">
            <summary>
            “Code Inspection: Redundant 'ConfigureAwait(true)'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantDefaultMemberInitializer">
            <summary>
            “Code Inspection: Redundant member initializer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantDelegateCreation">
            <summary>
            “Code Inspection: Explicit delegate creation expression is redundant” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantEmptySwitchSection">
            <summary>
            “Code Inspection: Redundant empty switch section” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantExplicitArrayCreation">
            <summary>
            “Code Inspection: Redundant explicit type in array creation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantExplicitArraySize">
            <summary>
            “Code Inspection: Redundant explicit array size specification in array creation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantExtendsListEntry">
            <summary>
            “Code Inspection: Redundant class or interface specification in base types list” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantFixedPointerDeclaration">
            <summary>
            “Code Inspection: Redundant fixed pointer declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantIfElseBlock">
            <summary>
            “Code Inspection: Redundant 'else' keyword” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantJumpStatement">
            <summary>
            “Code Inspection: Redundant control flow jump statement” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantLambdaParameterType">
            <summary>
            “Code Inspection: Redundant lambda parameter explicit type specification” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantLambdaSignatureParentheses">
            <summary>
            “Code Inspection: Redundant lambda signature parentheses” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantLinebreak">
            <summary>
            “Code Inspection: Incorrect line breaks (line break is redundant elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantLogicalConditionalExpressionOperand">
            <summary>
            “Code Inspection: Redundant operand in logical condition expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantNameQualifier">
            <summary>
            “Code Inspection: Redundant name qualifier” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantOverriddenMember">
            <summary>
            “Code Inspection: Redundant member override” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantSpace">
            <summary>
            “Code Inspection: Incorrect spacing (space is redundant elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantStringFormatCall">
            <summary>
            “Code Inspection: Redundant string.Format() call” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantStringType">
            <summary>
            “Code Inspection: Redundant string type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantTypeSpecificationInDefaultExpression">
            <summary>
            “Code Inspection: Redundant type specification in default expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RedundantUsingDirective">
            <summary>
            “Code Inspection: Redundant using directive” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactor_This">
            <summary>
            “Refactor This” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings_Invert_Boolean">
            <summary>
            “Invert Boolean refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings_Make_Partial">
            <summary>
            “Extract Members to Partial refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings_Transform_Parameters">
            <summary>
            “Transform Parameters refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Adjust_Namespaces">
            <summary>
            “Adjust Namespaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Change_Signature">
            <summary>
            “Change Signature refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Abstract_Class_to_Interface">
            <summary>
            “Convert Abstract Class to Interface refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Anonymous_to_Named_Type">
            <summary>
            “Convert Anonymous to Named Type refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Extension_Method_to_Plain_Static">
            <summary>
            “Convert Extension Method to Plain Static refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Indexer_to_Method">
            <summary>
            “Convert Indexer to Method refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Interface_to_Abstract_Class">
            <summary>
            “Convert Interface to Abstract Class refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Method_to_Indexer">
            <summary>
            “Convert Method to Indexer refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Method_to_Property">
            <summary>
            “Convert Method to Property refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Property_to_Auto_Property">
            <summary>
            “Convert Property to Auto-Property refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Property_to_Method">
            <summary>
            “Convert Property to Method(s) refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Convert_Static_to_Extension_Method">
            <summary>
            “Convert Static to Extension Method refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Copy_Type">
            <summary>
            “Copy Type refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Encapsulate_Field">
            <summary>
            “Encapsulate Field refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Extract_Class">
            <summary>
            “Extract Class refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Extract_Interface">
            <summary>
            “Extract Interface refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Extract_Method">
            <summary>
            “Extract Method refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Extract_Superclass">
            <summary>
            “Extract Superclass refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Index">
            <summary>
            “Refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Inline_Class">
            <summary>
            “Inline Class refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Inline_Field">
            <summary>
            “Inline Field refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Inline_Method">
            <summary>
            “Inline Method refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Inline_Parameter">
            <summary>
            “Inline Parameter refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Inline_Variable">
            <summary>
            “Inline Variable refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Inplace_Refactorings">
            <summary>
            “Inplace refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Introduce_Field">
            <summary>
            “Introduce Field refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Introduce_Parameter">
            <summary>
            “Introduce Parameter refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Introduce_Variable">
            <summary>
            “Introduce Variable refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Introduce_Variable_for_Substring">
            <summary>
            “Introduce Variable for Substring refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Make_Method_Non_Static">
            <summary>
            “Make Method Non-Static refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Make_Method_Static">
            <summary>
            “Make Method/Property Static refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Move_Types_into_Matching_Files">
            <summary>
            “Move Types into Matching Files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Move__Instance_Method_to_Another_Type">
            <summary>
            “Move Instance Method refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Move__Type_to_Another_File">
            <summary>
            “Move Type to Another File refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Move__Type_to_Another_Namespace">
            <summary>
            “Move Type to Another Namespace refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Move__Type_to_Another_Type">
            <summary>
            “Move to Another Type refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Move__Type_to_Folder">
            <summary>
            “Move to Folder refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Move__Type_to_Outer_Scope">
            <summary>
            “Move Type to Outer Scope refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Pull_Members_Up">
            <summary>
            “Pull Members Up refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Push_Members_Down">
            <summary>
            “Push Members Down refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Remove_Unused_References">
            <summary>
            “Remove Unused References” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Rename">
            <summary>
            “Rename refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Replace_Constructor_with_Factory_Method">
            <summary>
            “Replace Constructor with Factory Method refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Resolving_Conflicts_in_Refactorings">
            <summary>
            “Resolve conflicts in refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Safe_Delete">
            <summary>
            “Safe Delete refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings__Use_Base_Type_Where_Possible">
            <summary>
            “Use Base Type Where Possible refactoring” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings_for_CPP">
            <summary>
            “Refactorings for C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings_for_HTML">
            <summary>
            “Refactorings for HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings_in_VB_NET">
            <summary>
            “Refactorings for Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Refactorings_in_XAML">
            <summary>
            “Refactorings for XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference">
            <summary>
            “Reference” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Code_Inspection_Index">
            <summary>
            “Code inspection index” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Comparing_Snapshots">
            <summary>
            “Comparing Snapshots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Compatibility_with_Visual_Studio">
            <summary>
            “Compatibility with Visual Studio” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Home_Window_Dialog_Boxes">
            <summary>
            “Dialogs” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Code_Editing_Language_Injections">
            <summary>
            “Language Injections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Code_Editing_Third_Party_Code">
            <summary>
            “Third-Party Code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Languages_CPP_Formatting_Style_Blank_Lines">
            <summary>
            “Blank Lines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Languages_JSON_Context_Actions">
            <summary>
            “Context actions for JSON” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Languages_JSON_Inspections">
            <summary>
            “Inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Languages_JSON_Schema_Catalogs">
            <summary>
            “JSON Schema Catalogs” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Languages_JSON_Typing_Assistance">
            <summary>
            “Typing Assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Languages_JSON_Value_Helpers">
            <summary>
            “JSON Value Helpers” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Languages_TypeScript_Generated_Code">
            <summary>
            “Generated Code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Protobuf_Formatting_Style">
            <summary>
            “Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_TeamCity_General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_TeamCity_Source_Control_Perforce">
            <summary>
            “Perforce” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_TeamCity_Source_Control_Subversion">
            <summary>
            “Subversion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_TeamCity_Source_Control_TFS">
            <summary>
            “Team Foundation Server” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Build_General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Build_Heuristics">
            <summary>
            “Heuristics” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Build_NuGet">
            <summary>
            “NuGet Restorer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Build_Presentation">
            <summary>
            “Presentation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Debugger">
            <summary>
            “Editor Integration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Debugger_CPP">
            <summary>
            “C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Unit_Testing_CPP_Tests">
            <summary>
            “C++ Tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_Tools_Unit_Testing_xUnit">
            <summary>
            “xUnit.net” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_dotCover_Filtering">
            <summary>
            “Filtering” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Options_dotTrace_Profiles">
            <summary>
            “Profiles” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Performance_Viewer">
            <summary>
            “Performance Viewer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_TeamCity_Failed_Tests">
            <summary>
            “Failed Tests window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_TeamCity_Local_Changes">
            <summary>
            “Local Changes window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_TeamCity_My_Changes">
            <summary>
            “My Changes window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Timeline_Viewer">
            <summary>
            “Timeline Viewer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Timeline_Viewer_Keyboard_Shortcuts">
            <summary>
            “Keyboard Shortcuts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Timeline_Viewer_Legend">
            <summary>
            “Icons” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Timeline_Viewer_in_Visual_Studio_Keyboard_Shortcuts">
            <summary>
            “Keyboard Shortcuts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Timeline_Viewer_in_Visual_Studio_Legend">
            <summary>
            “Legend” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Timeline_Viewer_in_Visual_Studio_Options_General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Windows_Build_Results">
            <summary>
            “Build Results window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Windows_File_Format_Information">
            <summary>
            “File Formatting Info window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Help.ReSharperHelpIds.Reference_Windows_ReSharper_Build" -->
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Action_Bar">
            <summary>
            “Action bar” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Add_Edit_Highlighting_Pattern">
            <summary>
            “Add/Edit/Search with Highlighting Pattern dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Architecture_View">
            <summary>
            “Architecture view” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Assembly_Explorer">
            <summary>
            “Assembly Explorer window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Choose_Macro">
            <summary>
            “Choose Macro dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Choose_Template">
            <summary>
            “Choose Template dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Annotation_Attributes">
            <summary>
            “Code annotation attributes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Cleanup">
            <summary>
            “Code Cleanup dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_ASPX">
            <summary>
            “Code Inspections in ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_ASXX">
            <summary>
            “Code Inspections in HttpHandler or WebService” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_CPP">
            <summary>
            “Code Inspections in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_CSHARP">
            <summary>
            “Code Inspections in C#” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_CSS">
            <summary>
            “Code Inspections in CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_HTML">
            <summary>
            “Code Inspections in HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_JAVA_SCRIPT">
            <summary>
            “Code Inspections in JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_MSBUILD_BUILD_SCRIPT">
            <summary>
            “Code Inspections in MSBuild” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_NANT_BUILD_SCRIPT">
            <summary>
            “Code Inspections in NAnt” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_REGULAR_EXPRESSION">
            <summary>
            “Code Inspections in Regular expressions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_RESX">
            <summary>
            “Code Inspections in Resource files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_Razor">
            <summary>
            “Code Inspections in Razor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_RouteTemplate">
            <summary>
            “Code Inspections in Route templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_TYPE_SCRIPT">
            <summary>
            “Code Inspections in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_Unreal_Engine">
            <summary>
            “Code Inspections in Unreal Engine” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_VBASIC">
            <summary>
            “Code Inspections in VB.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_Web_Config">
            <summary>
            “Code Inspections in Web.config” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_XAML">
            <summary>
            “Code Inspections in XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Inspections_XML">
            <summary>
            “Code Inspections in XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Code_Style">
            <summary>
            “Syntax Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Completion_Filters">
            <summary>
            “Completion Filters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Context_Actions">
            <summary>
            “Context actions reference” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Coverage_Results_Browser">
            <summary>
            “Coverage Results Browser window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Create_Pattern">
            <summary>
            “Create/Edit Pattern dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes">
            <summary>
            “ReSharper dialogs” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Add_Edit_Line_by_line_Filter">
            <summary>
            “Add/Edit Line-by-line Filter” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Add_Formatting_for_Function">
            <summary>
            “Add/Edit Formatting” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Adjust_Time">
            <summary>
            “Adjust Time” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Bookmarks">
            <summary>
            “Bookmarks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Edit_Symbol_Search_Policy">
            <summary>
            “Edit Symbol Search Policy” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options">
            <summary>
            “Options” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__Decompiler">
            <summary>
            “Decompiler” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__Filters">
            <summary>
            “Folding” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__Folder_Substitutions">
            <summary>
            “Folder Substitutions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__Source_Preview">
            <summary>
            “Source Preview” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__Subsystems">
            <summary>
            “Subsystems” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__Symbol_server_integration">
            <summary>
            “Symbol Server Integration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__System_Module_Folding">
            <summary>
            “System Module Folding” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Options__View">
            <summary>
            “View” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Properties">
            <summary>
            “Properties” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Dialog_Boxes__Subsystem_Definition">
            <summary>
            “Subsystem Definition” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Export_Data">
            <summary>
            “Export Data dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Extension_Manager">
            <summary>
            “Extension Manager dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Go_to_Line">
            <summary>
            “Go to Line dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Hot_Spot_Session">
            <summary>
            “Hot spot session” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Keyboard_Shortcuts">
            <summary>
            “Default keyboard shortcut schemes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Legend_of_Performance_Profiling_Views">
            <summary>
            “Icons” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__License_Information">
            <summary>
            “License Information dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Navigation_Log">
            <summary>
            “Pdb Access Log window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Open_from_GAC">
            <summary>
            “Open from GAC dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options">
            <summary>
            “Options” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options_Decompiler">
            <summary>
            “Decompiler” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options_Symbol_Server">
            <summary>
            “Symbol Server” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options_Visual_Studio_Commands">
            <summary>
            “Visual Studio Commands” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Code_Inspection__Code_Annotations">
            <summary>
            “Code Annotations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Code_Inspection__Custom_Patterns">
            <summary>
            “Custom Patterns” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Code_Inspection__Generated_Code">
            <summary>
            “Generated Code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Code_Inspection__Ignored_Code">
            <summary>
            “Ignored Code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Code_Inspection__Inspection_Severity">
            <summary>
            “Inspection Severity” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Code_Inspection__Settings">
            <summary>
            “Settings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Code_Inspection__Settings_Auto_Import">
            <summary>
            “Auto Import” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Completing_Characters">
            <summary>
            “Completing Characters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Editor">
            <summary>
            “Editor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Editor__Editor_Appearance">
            <summary>
            “Editor Appearance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Editor__Editor_Behavior">
            <summary>
            “Editor Behavior” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Extension_Manager">
            <summary>
            “Extension Manager” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Feedback">
            <summary>
            “Product Feedback” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__IntelliSense__Autopopup">
            <summary>
            “Autopopup” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__IntelliSense__Completion_Appearance">
            <summary>
            “Completion Appearance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__IntelliSense__Completion_Behavior">
            <summary>
            “Completion Behavior” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__IntelliSense__General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__IntelliSense__Parameter_Info">
            <summary>
            “Parameter Info” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Keyboard">
            <summary>
            “Shortcuts Scheme” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Languages" -->
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Parameter_Name_Hints">
            <summary>
            “Inlay Hints. General Settings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Performance_Guide">
            <summary>
            “Performance Guide” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Postfix_Templates">
            <summary>
            “Postfix Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Search_and_Navigation">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Tabs">
            <summary>
            “Tabs” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Updates">
            <summary>
            “Updates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Visual_Studio_Integration">
            <summary>
            “Visual Studio Features” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Web_Proxy_Settings">
            <summary>
            “Web Proxy Settings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__General_Formatter_Style">
            <summary>
            “General Formatter Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__ASP_NET__Context_Actions">
            <summary>
            “Context actions for ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__ASP_NET__Other">
            <summary>
            “Code Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__ASP_NET__Web_Naming_Style">
            <summary>
            “Naming Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Build_Scripts__Context_Actions">
            <summary>
            “Context actions for Build Scripts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Clang_Tidy">
            <summary>
            “Clang-Tidy” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Code_Completion">
            <summary>
            “Code Completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Code_Generation">
            <summary>
            “Code Generation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Code_Style">
            <summary>
            “Syntax Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Context_Actions">
            <summary>
            “Context actions for C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Formatting_Style_Tabs_and_Indents">
            <summary>
            “Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Formatting_Style__Braces_Layout">
            <summary>
            “Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Formatting_Style__Indentation_and_Alignment">
            <summary>
            “Indentation and Alignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Formatting_Style__Spaces">
            <summary>
            “Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Formatting_Style__Wrapping_and_Aligning">
            <summary>
            “Line Breaks and Wrapping” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Inspections">
            <summary>
            “Inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Naming_Style">
            <summary>
            “Naming Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Order_of_Includes">
            <summary>
            “Order of #includes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Performance">
            <summary>
            “Performance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CPP__Unreal_Engine">
            <summary>
            “Unreal Engine” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSS__Context_Actions">
            <summary>
            “Context actions for CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSS__Formatting_Style_Tabs_and_Indents">
            <summary>
            “Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSS__Formatting_Style__Code_Layout">
            <summary>
            “Code Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSS__Formatting_Style__Line_Breaks">
            <summary>
            “Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSS__Formatting_Style__Spaces">
            <summary>
            “Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSS__Inspections">
            <summary>
            “Inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__CSharp_Naming_Style">
            <summary>
            “Naming Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Context_Actions">
            <summary>
            “Context actions for C#” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Formatting_Style_Tabs_and_Indents">
            <summary>
            “Tabs, Indents, Alignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Formatting_Style__Blank_Lines">
            <summary>
            “Blank Lines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Formatting_Style__Braces_Layout">
            <summary>
            “Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Formatting_Style__Line_Breaks_and_Wrapping">
            <summary>
            “Line Breaks and Wrapping” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Formatting_Style__Other">
            <summary>
            “Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Formatting_Style__Spaces">
            <summary>
            “Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Localization">
            <summary>
            “Localization” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Namespace_Imports">
            <summary>
            “Namespace Imports” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Null_Checking">
            <summary>
            “Null Checking” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__CSharp__Type_Members_Layout">
            <summary>
            “File Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Common__Code_Style_Sharing">
            <summary>
            “Code Style Sharing” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Common__Context_Actions">
            <summary>
            “Context Actions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Common__File_Header_Text">
            <summary>
            “File Header Text” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Common__Generated_Members">
            <summary>
            “Members Generation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__HTML__Code_Style">
            <summary>
            “Syntax Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__HTML__Context_Actions">
            <summary>
            “Context actions for HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__HTML__Formatting_Style">
            <summary>
            “Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__HTML__Other">
            <summary>
            “JavaScript and Frameworks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Code_Style">
            <summary>
            “Syntax Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Context_Actions">
            <summary>
            “Context actions for JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Formatting_Style_Tabs_and_Indents">
            <summary>
            “Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Formatting_Style__Braces_Layout">
            <summary>
            “Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Formatting_Style__Line_Breaks">
            <summary>
            “Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Formatting_Style__Other">
            <summary>
            “Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Formatting_Style__Spaces">
            <summary>
            “Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Inspections_Analysis">
            <summary>
            “Inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__JavaScript__Naming_Style">
            <summary>
            “Naming Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Razor__Code_Style">
            <summary>
            “Code Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Razor__Context_Actions">
            <summary>
            “Context actions for Razor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript_Naming_Style">
            <summary>
            “Naming Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Code_Style">
            <summary>
            “Syntax Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Context_Actions">
            <summary>
            “Context actions for TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Formatting_Braces_Layout">
            <summary>
            “Braces Layout” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Formatting_Line_Breaks">
            <summary>
            “Line Breaks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Formatting_Other">
            <summary>
            “Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Formatting_Spaces">
            <summary>
            “Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Formatting_Style_Tabs_and_Indents">
            <summary>
            “Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__TypeScript__Inspections">
            <summary>
            “Inspections” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Code_Style">
            <summary>
            “Syntax Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Context_Actions">
            <summary>
            “Context actions for Visual Basic .NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Formatting_Style_Tabs_and_Indents">
            <summary>
            “Tabs and Indents” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Blank_Lines">
            <summary>
            “Blank Lines” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Line_Breaks_and_Wrapping">
            <summary>
            “Line Breaks and Wrapping” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Other">
            <summary>
            “Other” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Formatting_Style__Spaces">
            <summary>
            “Spaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__Namespace_Imports">
            <summary>
            “Namespace Imports” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__Visual_Basic__NET__VB_Naming_Style">
            <summary>
            “Naming Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__XAML__Context_Actions">
            <summary>
            “Context actions for XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__XAML__Editor">
            <summary>
            “Editor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__XAML__Xaml_Naming_Style">
            <summary>
            “Naming Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__XML__Context_Actions">
            <summary>
            “Context actions for XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__XML__Editor">
            <summary>
            “Editor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Languages__XML__Formatting_Style">
            <summary>
            “Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Code_Cleanup">
            <summary>
            “Profiles” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__External_Sources">
            <summary>
            “External Sources” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Localization">
            <summary>
            “Localization” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__NodeJS">
            <summary>
            “Node.JS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Stack_Trace_Explorer_Options">
            <summary>
            “Stack Trace Explorer Options” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__To_Do_Items">
            <summary>
            “To-do Explorer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Unit_Testing__General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Unit_Testing__MSTest">
            <summary>
            “MSTest” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Unit_Testing__NUnit">
            <summary>
            “NUnit” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Unit_Testing__QUnit">
            <summary>
            “JavaScript Tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Unit_Testing__Test_Runner">
            <summary>
            “Test Runner” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Unit_Testing__VSTest">
            <summary>
            “VSTest” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Web_Linters_ESLint">
            <summary>
            “ESLint” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Web_Linters_JSLint">
            <summary>
            “JSLint” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Tools__Web_Linters_TSLint">
            <summary>
            “TSLint” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__XML_Doc_Comments_Formatting_Style">
            <summary>
            “Formatting Style” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__dotCover">
            <summary>
            “dotCover” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__dotCover__Continuous_Testing">
            <summary>
            “Continuous Testing” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__dotCover__General">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Performance_Viewer__Keyboard_Shortcuts">
            <summary>
            “Keyboard Shortcuts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Process_Explorer">
            <summary>
            “Process Explorer window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Project_PDB_Generation">
            <summary>
            “Project/PDB Generation Status window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Properties">
            <summary>
            “Properties window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Quick_Find">
            <summary>
            “Quick Find window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Search_Properties">
            <summary>
            “Search Properties dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Settings_Layers">
            <summary>
            “Settings Layers dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Symbol_Icons">
            <summary>
            “Symbol icons schemes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Template_Editor">
            <summary>
            “Template Editor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer">
            <summary>
            “Templates Explorer window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates">
            <summary>
            “Predefined File Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_ASP_NET__CSHARP_">
            <summary>
            “Predefined File Templates for ASP.NET (C#)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_ASP_NET__VB_">
            <summary>
            “Predefined File Templates for ASP.NET (VB)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_CPP">
            <summary>
            “Predefined File Templates for C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_CSHARP">
            <summary>
            “Predefined File Templates for C#” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_Razor__CSHARP_">
            <summary>
            “Predefined File Templates for Razor (C#)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_TypeScript">
            <summary>
            “Predefined File Templates for TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_VB_NET">
            <summary>
            “Predefined File Templates for VB.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__File_Templates_XAML">
            <summary>
            “Predefined File Templates for XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates">
            <summary>
            “Predefined Live Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_ASP_NET">
            <summary>
            “Predefined Live Templates for ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_Angular_2_HTML">
            <summary>
            “Predefined Live Templates for Angular 2 HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_CPP">
            <summary>
            “Predefined Live Templates for C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_CSHARP">
            <summary>
            “Predefined Live Templates for C#” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_CSS">
            <summary>
            “Predefined Live Templates for CSS” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_Global">
            <summary>
            “Predefined Live Templates for Global Usage” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_HTML">
            <summary>
            “Predefined Live Templates for HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_HTML_Like">
            <summary>
            “Predefined Live Templates for HTML-Like” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_JavaScript">
            <summary>
            “Predefined Live Templates for JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_Razor">
            <summary>
            “Predefined Live Templates for Razor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_Resx">
            <summary>
            “Predefined Live Templates for Resx” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_TypeScript">
            <summary>
            “Predefined Live Templates for TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_VB_NET">
            <summary>
            “Predefined Live Templates for VB.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Live_Templates_XML">
            <summary>
            “Predefined Live Templates for XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates">
            <summary>
            “Predefined Surround Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_ASP_NET_CSHARP_">
            <summary>
            “Predefined Surround Templates for ASP.NET(C#)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_ASP_NET_VB_NET_">
            <summary>
            “Predefined Surround Templates for ASP.NET(VB.NET)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_ASP_NET">
            <summary>
            “Predefined Surround Templates for ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_Angular_2_HTML">
            <summary>
            “Predefined Surround Templates for Angular 2 HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_CPP">
            <summary>
            “Predefined Surround Templates for C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_CSHARP">
            <summary>
            “Predefined Surround Templates for C#” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_HTML">
            <summary>
            “Predefined Surround Templates for HTML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_HTML_Like">
            <summary>
            “Predefined Surround Templates for HTML-Like” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_JavaScript">
            <summary>
            “Predefined Surround Templates for JavaScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_Razor">
            <summary>
            “Predefined Surround Templates for Razor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_TypeScript">
            <summary>
            “Predefined Surround Templates for TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_VB_NET">
            <summary>
            “Predefined Surround Templates for VB.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates_Explorer__Surround_Templates_XML">
            <summary>
            “Predefined Surround Templates for XML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Templates__Predefined">
            <summary>
            “Predefined templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Text_Editor_Features">
            <summary>
            “ReSharper controls in text editor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__VS_Options_Page">
            <summary>
            “Product page in Visual Studio Options” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Validate_Regular_Expression">
            <summary>
            “Validate Regular Expression dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Views_Legend">
            <summary>
            “Icons” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows">
            <summary>
            “ReSharper tool windows” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Analyze_References">
            <summary>
            “Analyze References window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Errors_in_Solution">
            <summary>
            “Errors/Warnings in Solution window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__File_Structure_Window">
            <summary>
            “File Structure window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Find_Results_Window">
            <summary>
            “Find Results window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Inspection_Results">
            <summary>
            “Inspection Results window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Stack_Trace_Explorer">
            <summary>
            “Stack Trace Explorer window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__To_do_Explorer">
            <summary>
            “To-do Explorer window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Type_Hierarchy_Window">
            <summary>
            “Hierarchy window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Unit_Test_Explorer">
            <summary>
            “Unit Test Explorer window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Windows__Unit_Test_Sessions">
            <summary>
            “Unit Test Sessions window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__dotMemory_Keyboard_Shortcuts">
            <summary>
            “Keyboard Shortcuts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__dotMemory_Options">
            <summary>
            “Settings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference_dotMemory_Options_General">
            <summary>
            “dotMemory Options in Visual Studio” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Regular_Expressions_Assistance">
            <summary>
            “Regular expressions assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Remotely_Cover_a_Web_Application">
            <summary>
            “Analyze Coverage of Web Apps with Console Runner” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RemoveRedundantBraces">
            <summary>
            “Code Inspection: Use preferred braces style (remove redundant braces)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Removing_Code_Redundancies">
            <summary>
            “Remove code redundancies” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reorder_code_without_the_copypaste_fuss">
            <summary>
            “Reorder code without the copy-paste fuss” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReplaceWithSingleAssignment_False">
            <summary>
            “Code Inspection: Replace with single assignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReplaceWithSingleAssignment_True">
            <summary>
            “Code Inspection: Replace with single assignment” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReplaceWithStringIsNullOrEmpty">
            <summary>
            “Code Inspection: Use 'String.IsNullOrEmpty'” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.RequiredBaseTypesIsNotInherited">
            <summary>
            “Code Inspection: Base type is required” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Requirements_and_Compatibilities">
            <summary>
            “Compatibilities” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__Index">
            <summary>
            “Localization assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__LocalizationManager">
            <summary>
            “Localization Manager” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__Navigation">
            <summary>
            “Navigate resources” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__Navigation__Find_Usages">
            <summary>
            “Find usages of resources” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__Navigation__Navigation_between_Code_and_Resx_Files">
            <summary>
            “Navigation between code and Resx files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__Navigation__Navigation_between_Cultures">
            <summary>
            “Navigation between cultures” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__Navigation__Navigation_within_Rex_Files">
            <summary>
            “Navigation within Resx files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Resources__Refactorings">
            <summary>
            “Localization refactorings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Retained_by">
            <summary>
            “Group by Dominators” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Help.ReSharperHelpIds.ReturnTypeCanBeEnumerable_Global" -->
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Help.ReSharperHelpIds.ReturnTypeCanBeEnumerable_Local" -->
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ReturnValueOfPureMethodIsNotUsed">
            <summary>
            “Code Inspection: Return value of pure method is not used” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Review_dependencies_between_projects">
            <summary>
            “Review dependencies between projects” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Run_Configurations">
            <summary>
            “Run configurations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Run_Profiling">
            <summary>
            “Run Profiling” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Running">
            <summary>
            “Running” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Running_Applications_under_dotCover_Control">
            <summary>
            “Record Application Coverage” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Running_Coverage_Analysis_from_the_Command_LIne">
            <summary>
            “Coverage Analysis from the Command Line” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Running_dotMemory">
            <summary>
            “Run dotMemory” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Runtime_Coverage_Filters">
            <summary>
            “Runtime coverage filters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SQL_Client">
            <summary>
            “SQL Queries” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Saving_and_Loading_Coverage_Snapshot">
            <summary>
            “Save and Open Coverage Snapshot” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SealedMemberInSealedClass">
            <summary>
            “Code Inspection: Sealed member in sealed class” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Selecting_Containing_Declarations">
            <summary>
            “Select containing declarations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SeparateControlTransferStatement">
            <summary>
            “Code Inspection: Separate control transfer statement with blank line” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_DPA">
            <summary>
            “General” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CPP_Aggregate_Initialization">
            <summary>
            “C++ Aggregate Initialization Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CPP_Other">
            <summary>
            “C++ Other Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CPP_Parameter_Name_Hints">
            <summary>
            “C++ Parameter Name Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CPP_Type_Conversion_Hints">
            <summary>
            “C++ Type Conversion Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CPP_Type_Name_Hints">
            <summary>
            “C++ Type Name Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CS_Other">
            <summary>
            “C# Other Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CS_Parameter_Name_Hints">
            <summary>
            “C# Parameter Name Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CS_Type_Conversion_Hints">
            <summary>
            “C# Type Conversion Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_CS_Type_Name_Hints">
            <summary>
            “C# Type Name Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_VB_Other">
            <summary>
            “VB.NET Other Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_VB_Parameter_Name_Hints">
            <summary>
            “VB.NET Parameter Name Hints” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_Inlay_Hints_XAML">
            <summary>
            “XAML” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Settings_ReSpeller">
            <summary>
            “ReSpeller” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Sharing_Configuration_Options">
            <summary>
            “Manage and share ReSharper settings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Shortest_Path">
            <summary>
            “Group by Shortest Paths” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Shortest_Paths_to_Roots">
            <summary>
            “Shortest Paths to Roots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Similar_Retention">
            <summary>
            “Group by Similar Retention” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SimplifyConditionalTernaryExpression">
            <summary>
            “Code Inspection: Simplify conditional ternary expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Simplify_Object_Creation">
            <summary>
            “Simplify object creation” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Smart_Paste">
            <summary>
            “Smart Paste” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Snapshot_View">
            <summary>
            “Inspections View” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Sort_out_a_mess_of_possible_method_signatures">
            <summary>
            “Sort out a mess of possible method signatures when you call it” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Source_Templates">
            <summary>
            “Source templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Source_View">
            <summary>
            “Source View” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Source_View_and_Line_by_Line_Profiling">
            <summary>
            “Source View and Line-by-Line Profiling” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SpecifyACultureInStringConversionExplicitly">
            <summary>
            “Code Inspection: Specify string culture explicitly” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SpecifyStringComparison">
            <summary>
            “Code Inspection: Specify string comparison explicitly” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Specifying_License_Information">
            <summary>
            “Specify license information” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Speed_up_Creation_of_Unit_Tests">
            <summary>
            “Speed up creation of unit tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Speeding_Up_ReSharper">
            <summary>
            “Speed up ReSharper (and Visual Studio)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Spell_Checking">
            <summary>
            “Spellchecking with ReSpeller” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Splitting_Lines_with_String_Literals">
            <summary>
            “Split lines containing string literals” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Starting_Local_Profiling_Session">
            <summary>
            “Start Profiling Session” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Starting_Local_Profiling_Session_VS">
            <summary>
            “%LocalSessionVs%” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Starting_Manual_Test_Session">
            <summary>
            “Start Coverage Analysis for Startup Project” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Starting_Manual_Test_Session_for_External_Applications">
            <summary>
            “Start Coverage Analysis for External Applications” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Starting_Profiling_Process">
            <summary>
            “Start Profiling Session” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StaticMemberInGenericType">
            <summary>
            “Code Inspection: Static member in generic type” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringCompareIsCultureSpecific_1">
            <summary>
            “Code Inspection: String.Compare is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringCompareIsCultureSpecific_2">
            <summary>
            “Code Inspection: String.Compare is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringCompareIsCultureSpecific_3">
            <summary>
            “Code Inspection: String.Compare is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringCompareIsCultureSpecific_4">
            <summary>
            “Code Inspection: String.Compare is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringCompareIsCultureSpecific_5">
            <summary>
            “Code Inspection: String.Compare is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringCompareIsCultureSpecific_6">
            <summary>
            “Code Inspection: String.Compare is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringCompareToIsCultureSpecific">
            <summary>
            “Code Inspection: String.CompareTo is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringEndsWithIsCultureSpecific">
            <summary>
            “Code Inspection: String.EndsWith is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringIndexOfIsCultureSpecific_1">
            <summary>
            “Code Inspection: String.IndexOf is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringIndexOfIsCultureSpecific_2">
            <summary>
            “Code Inspection: String.IndexOf is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringIndexOfIsCultureSpecific_3">
            <summary>
            “Code Inspection: String.IndexOf is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringLastIndexOfIsCultureSpecific_1">
            <summary>
            “Code Inspection: String.LastIndexOf is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringLastIndexOfIsCultureSpecific_2">
            <summary>
            “Code Inspection: String.LastIndexOf is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringLastIndexOfIsCultureSpecific_3">
            <summary>
            “Code Inspection: String.LastIndexOf is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringLiteralTypo">
            <summary>
            “Code Inspection: Typo in string literal” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StringStartsWithIsCultureSpecific">
            <summary>
            “Code Inspection: String.StartsWith is culture-specific” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Adding_Annotations">
            <summary>
            “Add Annotations” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Back_Traces">
            <summary>
            “Back Traces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Bookmarks">
            <summary>
            “Bookmarks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Call_Tree">
            <summary>
            “Call Tree” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Color_Coding_Functions">
            <summary>
            “Color-Code Functions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Comparing_Profiling_Data">
            <summary>
            “Compare Profiling Data” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Configuring_Path_to_Source_Files">
            <summary>
            “Configure Path to Source Files” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Creating_and_Applying_Filters">
            <summary>
            “Apply Filters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Different_Ways_of_Presenting_Snapshot_Data">
            <summary>
            “Choose the Right View for Snapshot Data” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Finding_Application_Bottlenecks">
            <summary>
            “Find Performance Bottlenecks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Finding_Out_Frequency_of_Function_Calls">
            <summary>
            “Measure Calls Frequency” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Folding_Calls_with_Small_Impact">
            <summary>
            “Fold Calls with a Small Impact” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Folding_Filtered_Calls">
            <summary>
            “Fold Filtered Calls” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Folding_Recursive_Calls">
            <summary>
            “Fold Recursive Calls” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Formatting_Functions">
            <summary>
            “Format Functions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Hiding_Functions_that_Consume_Zero_Time">
            <summary>
            “Hide Functions with Zero Time” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Hot_Spots">
            <summary>
            “Hot Spots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Identifying_and_Narrowing_an_Area_of_Interest">
            <summary>
            “Identify Area of Interest” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Index">
            <summary>
            “Analyze Performance Profiling Results” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Labeling_and_Formatting">
            <summary>
            “Label and Format Functions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Navigating_Between_Function_Calls">
            <summary>
            “Navigate Between Function Calls” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Navigating_to_Visual_Studio">
            <summary>
            “Navigate from dotTrace Source Preview to Visual Studio” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Navigation_and_Search">
            <summary>
            “Navigation and Search” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Opening_in_a_New_Tab">
            <summary>
            “Open a Function or a Class in a New Tab” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Overview">
            <summary>
            “Overview” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Performance_Forecasting">
            <summary>
            “Forecast Performance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Plain_List">
            <summary>
            “Plain List” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Previewing_Source_Code">
            <summary>
            “Preview Source Code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Searching_for_Functions">
            <summary>
            “Search for Functions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Sharing_Snapshot_Data">
            <summary>
            “Share Snapshot Data” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Studying_Function_Timings">
            <summary>
            “Study Function Timings” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Subsystems">
            <summary>
            “Simplify Analysis with Subsystems” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Studying_Profiling_Results__Threads_Tree">
            <summary>
            “Threads Tree” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.StyleCop_Styles">
            <summary>
            “Use StyleCop styles” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Subsystems">
            <summary>
            “Subsystems” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SuggestDiscardDeclarationVarStyle">
            <summary>
            “Code Inspection: Use preferred style for discard declaration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SuggestVarOrType_BuiltInTypes">
            <summary>
            “Code Inspection: Use preferred 'var' style (for built-in types)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SuggestVarOrType_DeconstructionDeclarations">
            <summary>
            “Code Inspection: Use preferred 'var' style (in deconstruction declarations)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SuggestVarOrType_Elsewhere">
            <summary>
            “Code Inspection: Use preferred 'var' style (elsewhere)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SuggestVarOrType_SimpleTypes">
            <summary>
            “Code Inspection: Use preferred 'var' style (when type is simple)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Supported_Unit_Testing_Frameworks">
            <summary>
            “Supported Frameworks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault">
            <summary>
            “Code Inspection: Some values of the enum are not processed inside switch expression and are handled via exception in default arm” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SwitchStatementHandlesSomeKnownEnumValuesWithDefault">
            <summary>
            “Code Inspection: Some values of the enum are not processed inside switch statement and are handled via default section” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SwitchStatementMissingSomeEnumCasesNoDefault">
            <summary>
            “Code Inspection: Some values of the enum are not processed inside switch statement” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.SymbolFromNotCopiedLocallyReferenceUsedWarning">
            <summary>
            “Code Inspection: Symbol from module that might be missing at runtime” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.TabsAndSpacesMismatch">
            <summary>
            “Code Inspection: Incorrect indent (tabs/spaces mismatch)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.TabsAreDisallowed">
            <summary>
            “Code Inspection: Usage of tabulation character for indentation is prohibited” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.TabsOutsideIndent">
            <summary>
            “Code Inspection: Incorrect spacing (tabs are prohibited here)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Tasks_dotTrace">
            <summary>
            “Tasks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.TeamCity_Getting_Started">
            <summary>
            “Getting Started” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Template_Macros">
            <summary>
            “List of Template Macros” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Applying_Templates">
            <summary>
            “Apply templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Applying_Templates__Creating_Files_from_Templates">
            <summary>
            “Create files from templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Applying_Templates__Creating_Source_Code_Using_Live_Templates">
            <summary>
            “Create source code using live templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Applying_Templates__Surrounding_Code_Fragments_with_Templates">
            <summary>
            “Surround code fragments with templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Creating_and_Editing_Templates">
            <summary>
            “Create and edit templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Creating_and_Editing_Templates__Creating_a_Live_Template_from_Source_Code">
            <summary>
            “Create a Live/Surround Template from Source Code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Creating_and_Editing_Templates__Declaring_Variables">
            <summary>
            “Declare template parameters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Creating_and_Editing_Templates__Editing_a_Template">
            <summary>
            “Edit templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Creating_and_Editing_Templates__Multifile">
            <summary>
            “Create Multi-File Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Index">
            <summary>
            “Code templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Managing_Templates">
            <summary>
            “Manage Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Managing_Templates__Importing_and_Exporting_Templates">
            <summary>
            “Import and Export Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Managing_Templates__Organizing_Templates">
            <summary>
            “Organize Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Managing_Templates__Sharing_Templates">
            <summary>
            “Share Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Template_Basics__Applicability_and_Storage_of_Templates">
            <summary>
            “Storage of Templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Template_Basics__Template_Macros">
            <summary>
            “Template macros” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Template_Basics__Template_Types">
            <summary>
            “Types of templates” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Template_Basics__Template_Variables">
            <summary>
            “Template parameters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Templates__Template_Scopes">
            <summary>
            “Template scopes” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Test_Categories">
            <summary>
            “Test categories” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Third_Party_Software_TeamCityAddin">
            <summary>
            “Third-Party Software Used in TeamCity Add-in” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Third_Party_Software_dotMemoryUnit">
            <summary>
            “Third-Party Software Used in dotMemory Unit Framework” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ThreadStaticAtInstanceField">
            <summary>
            “Code Inspection: [ThreadStatic] doesn't work with instance fields” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ThreadStaticFieldHasInitializer">
            <summary>
            “Code Inspection: Thread static field has initializer” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Thread_State">
            <summary>
            “Thread State” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Threads_Diagram">
            <summary>
            “Threads Diagram” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Time">
            <summary>
            “Not Selected” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Timeline_Diagram">
            <summary>
            “Timeline Window” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Timeline_Viewer_Concepts">
            <summary>
            “Timeline Viewer Concepts” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Timeline_Viewer_in_Visual_Studio">
            <summary>
            “Timeline Viewer in Visual Studio” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.TooWideLocalVariableScope">
            <summary>
            “Code Inspection: Local variable has too wide declaration scope” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Traffic_Class">
            <summary>
            “Complex Scenarios. Traffic Class” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Trailing_Commas_Style">
            <summary>
            “Code Syntax Style: Trailing Commas” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.TryCastAlwaysSucceeds">
            <summary>
            “Code Inspection: Safe cast expression always succeeds, consider direct cast instead” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Turning_On_Off_Collecting_of_Allocation_Data">
            <summary>
            “Turning On Collecting of Allocation Data” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Type_List">
            <summary>
            “Group by Types” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Typical_Profiling_Workflow">
            <summary>
            “Typical Profiling Workflow” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UI_Freeze">
            <summary>
            “UI Freeze” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Examples">
            <summary>
            “Examples” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Test_Coverage">
            <summary>
            “Unit Test Coverage” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Testing__Analyzing_Code_Coverage_with_dotCover">
            <summary>
            “Analyze Code Coverage with dotCover” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Testing__Index">
            <summary>
            “Unit testing assistance” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Testing__Profiling_Unit_Tests">
            <summary>
            “Profile Unit Tests with dotTrace” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Testing_in_CPP">
            <summary>
            “Unit Testing Assistance in C++” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Testing_in_Document">
            <summary>
            “Working with unit tests in current document” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Testing_in_Solution">
            <summary>
            “Working with unit tests in project or solution” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unit_Testing_in_TypeScript">
            <summary>
            “Unit Testing Assistance in TypeScript” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnnecessaryWhitespace">
            <summary>
            “Code Inspection: Unnecessary whitespace at the end of line” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unreal_Engine__Before_You_Start">
            <summary>
            “Before you start” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unreal_Engine__Code_Analysis">
            <summary>
            “Code analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unreal_Engine__HLSL_Shaders">
            <summary>
            “Shader development with HLSL” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unreal_Engine__Naming_Convention">
            <summary>
            “Unreal Engine naming convention” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unreal_Engine__Performance">
            <summary>
            “Performance tips” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unreal_Engine__RPC">
            <summary>
            “Remote Procedure Calls” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Unreal_Engine__Reflection_Specifiers">
            <summary>
            “Reflection specifiers” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnsupportedRequiredBaseType">
            <summary>
            “Code Inspection: BaseTypeRequired attribute supports only classes and interfaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnusedLocalFunction">
            <summary>
            “Code Inspection: Local function never used” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnusedMember_Global">
            <summary>
            “Code Inspection: Type member is never used (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnusedMember_Local">
            <summary>
            “Code Inspection: Type member is never used (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnusedParameterInPartialMethod">
            <summary>
            “Code Inspection: Unused parameter in partial method” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnusedType_Global">
            <summary>
            “Code Inspection: Type is never used (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnusedType_Local">
            <summary>
            “Code Inspection: Type is never used (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UnusedVariable">
            <summary>
            “Code Inspection: Unused local variable” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UseCollectionCountProperty">
            <summary>
            “Code Inspection: Use collection’s count property” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UseConfigureAwaitFalse">
            <summary>
            “Code Inspection: Missing '.ConfigureAwait(false)' in library code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UseMethodAny_0">
            <summary>
            “Code Inspection: Use method Any()” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UseNameofExpression">
            <summary>
            “Code Inspection: Use 'nameof' expression to reference name” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UseNullPropagation">
            <summary>
            “Code Inspection: Replace if statement with null-propagating code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UseObjectOrCollectionInitializer">
            <summary>
            “Code Inspection: Use object or collection initializer when possible” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UsePatternMatching">
            <summary>
            “Code Inspection: Convert 'as' expression type check and the following null check into pattern matching” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.UseStringInterpolation">
            <summary>
            “Code Inspection: Use string interpolation expression” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_Auto_Properties">
            <summary>
            “Use auto-properties” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_Clang_Format">
            <summary>
            “Using Clang-Format” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_EditorConfig">
            <summary>
            “Use EditorConfig” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_Filters_in_Code_Completion">
            <summary>
            “Using Filters in Code Completion” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_Unit_Test_Sessions">
            <summary>
            “Unit test sessions” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_dotMemory_Unit_Standalone_Runner">
            <summary>
            “Using dotMemory Unit Standalone Launcher” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_product_as_a_Symbol_Server">
            <summary>
            “Use dotPeek as a symbol server” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Using_var_Keyword_in_Declarations">
            <summary>
            “Code Syntax Style: Implicit/Explicit Typing ('var' Keyword)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.VBWarnings_BC42105_BC42106_BC42107">
            <summary>
            “Code Inspection: Function doesn't return a value on all code paths” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.VBWarnings_BC42353_BC42354_BC42355">
            <summary>
            “Code Inspection: Function doesn't return a value on all code paths” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Validating_Code_with_Web_Linters">
            <summary>
            “Validate Code with Web Linters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.ValueParameterNotUsed">
            <summary>
            “Code Inspection: 'value' parameter is not used” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.View_NET_Framework_source_code">
            <summary>
            “View .NET Framework source code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Viewing_Compiler_Generated_Code">
            <summary>
            “View compiler-generated code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Viewing_Coverage_of_Particular_Unit_Test_Item">
            <summary>
            “View Coverage of Unit Tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Viewing_Intermediate_Language">
            <summary>
            “View Intermediate Language (IL)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Viewing_Metadata_Tokens">
            <summary>
            “View metadata tokens” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Viewing_References_Hierarchy">
            <summary>
            “Explore hierarchy of references” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.VirtualMemberCallInConstructor">
            <summary>
            “Code Inspection: Virtual member call in constructor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.VirtualMemberNeverOverridden_Global">
            <summary>
            “Code Inspection: Virtual(overridable) member is never overridden (non-private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.VirtualMemberNeverOverridden_Local">
            <summary>
            “Code Inspection: Virtual(overridable) member is never overridden (private accessibility)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Visual_Dependency_Analysis">
            <summary>
            “Visual dependency analysis” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Visualizing_Code_Coverage">
            <summary>
            “Visualize Code Coverage” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Waiting">
            <summary>
            “Waiting” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Web_Development__ASP_NET_MVC">
            <summary>
            “ASP.NET MVC-Specific Features” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Web_Development__Code_Analysis_and_Coding_Assistance">
            <summary>
            “Code Inspection and Quick-Fixes in ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Web_Development__Code_Generation_and_Templates">
            <summary>
            “Code Generation in ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Web_Development__Index">
            <summary>
            “ReSharper by Language: ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Web_Development__Navigation">
            <summary>
            “Navigation and Search in ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Web_Development__Refactorings">
            <summary>
            “Refactorings for ASP.NET” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.What_is_Coverage_Snapshot">
            <summary>
            “What is Coverage Snapshot?” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.What_s_New_in_dotMemory">
            <summary>
            “What's New in dotMemory” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Whats_New">
            <summary>
            “What's New in dotCover” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Whats_New_in_dotPeek">
            <summary>
            “What's new in dotPeek” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Work_with_Continuous_Testing">
            <summary>
            “Use Continuous Testing” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_Code">
            <summary>
            “Study the the code” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_Memory">
            <summary>
            “Working with Memory” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_Object_Sets">
            <summary>
            “Working with Object Sets” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_Traffic">
            <summary>
            “Working with Traffic” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_Unreal_Engine">
            <summary>
            “Working with Unreal Engine projects” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_Unsupported_Unit_Testing_Frameworks">
            <summary>
            “Working with Unsupported Unit Testing Frameworks” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_Workspaces">
            <summary>
            “Work with Workspaces” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Working_with_dotMemory_Command_Line_Profiler">
            <summary>
            “Use dotMemory Command-Line Profiler” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.WrongIndentSize">
            <summary>
            “Code Inspection: Incorrect indent (incorrect indent size)” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Xunit_XunitTestWithConsoleOutput">
            <summary>
            “Code Inspection: Console output in Xunit tests” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover_Controller">
            <summary>
            “Coverage Controller dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover_Coverage_Configuration">
            <summary>
            “Coverage Configuration dialog” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover_Introduction">
            <summary>
            “Introduction” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover_Searching_Coverage_Tree">
            <summary>
            “Search Coverage Tree” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Analyzing_Test_Coverage">
            <summary>
            “Work with Coverage Results” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Basic_Concepts">
            <summary>
            “Basic Terms” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Color_Scheme">
            <summary>
            “Editor” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Console_Runner_Commands">
            <summary>
            “Console Runner Commands” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Console_Runner_Configuration">
            <summary>
            “Console Runner Configuration” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Coverage_Analysis_on_Third_Party_Server">
            <summary>
            “Set up Coverage on a Third-Party CI Server” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Detecting_Hot_Spots">
            <summary>
            “Detect Hot Spots” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Exporting_Coverage_Results">
            <summary>
            “Export Coverage Results” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Locating_Code_Items_in_Coverage_Tree">
            <summary>
            “Locate Code Items in Coverage Tree” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Server_Test_Coverage">
            <summary>
            “Analyze Coverage on a Server” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Setting_up_Coverage_Analysis_JetBrains_TeamCity">
            <summary>
            “Set up Coverage on JetBrains TeamCity” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotCover__Setting_up_Coverage_Filters">
            <summary>
            “Set up coverage filters” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotMemory_Call_Tree">
            <summary>
            “Call Tree” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotMemory_Dialog_Boxes">
            <summary>
            “dotMemory Dialogs” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotMemory_Profiler_Options">
            <summary>
            “Configure Profiling Session” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotPeek_Getting_Started">
            <summary>
            “Get started” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotPeek_Introduction">
            <summary>
            “Introduction” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dotTrace_Whats_New">
            <summary>
            “What's New in dotTrace” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.dupFinder">
            <summary>
            “dupFinder Command-Line Tool” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.product_Standalone_Application">
            <summary>
            “dotCover Standalone Application” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Help.ReSharperHelpIds.Reference__Options__Environment__Disk_Cleanup">
            <summary>
            “Disk Cleanup” help topic ID. Use with <see cref="!:UIApplicationShell.ShowProductHelp"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Hosting.CommandLineAdapter">
            <summary>
             Adapts ICommandLine to be used with <see cref="T:JetBrains.Util.CommandLineMapper.ICommandLineMapper`1">ICommandLineMapper</see>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Hosting.CommandLineParameter">
            <summary>
            One parsed parameter of the command line.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Hosting.CommandLineParameter.Key">
            <summary>
            The key to the command line parameter. <c>Null</c> or <c>""</c> on a non-keyed parameter.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Hosting.CommandLineParameter.Value">
            <summary>
            The command line parameter value. <c>Null</c> or <c>""</c> on a command line key without a value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Hosting.CommandLineSwitchAttribute">
            <summary>
            Defines a command-line switch that will be known to the shell and registered with the hosting app, as needed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Hosting.CommandLineSwitchAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Defines a command-line switch that will be known to the shell and registered with the hosting app, as needed.
            </summary>
            <param name="name">The name of the command line switch, without the prefix.</param>
            <param name="parametersCount">The number of parameters of the command line switch.</param>
            <param name="description">Description of command line switch</param>
        </member>
        <member name="P:JetBrains.Application.Hosting.CommandLineSwitchAttribute.Name">
            <summary>
            Gets the name of the command line switch, without the prefix.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Hosting.CommandLineSwitchAttribute.ParametersCount">
            <summary>
            Gets the number of parameters of the command line switch.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Hosting.CommandLineSwitchAttribute.Description">
            <summary>
            Description of command line switch
            </summary>
        </member>
        <member name="M:JetBrains.Application.Hosting.HostCommandLine.#ctor(JetBrains.Util.FileSystemPath,System.String[],System.String)">
            <summary>
            Parsing rules:
            Keyed parameters start with “/” or “-”. Non-keyed parameters don't have this prefix and wholy go to the value.
            The keyed parameter is of the “key=value” or “key:value” form, where value might be omitted with or without the separator.
            All parameters afer "--" are non-keyed.
            "/" support is limited to Windows-only
            <code>( ( '/'|'-' 'key' ['='|':' ['value'] ] ) | ( 'value' ) )*</code> 
            </summary>    
            <param name="startupDirectory">The startup directory which is required for treating relative paths in command line args.</param>
            <param name="args">Parsed command line arguments. The args[0] is a first argument not an executable path.</param>    
            <param name="rawCommandLine">
            Raw command line. It's required if <see cref="M:JetBrains.Application.Hosting.ICommandLineEx.GetNonKeyedTail(JetBrains.Application.Hosting.ICommandLine,System.Int32)">GetNonKeyedTail</see> feature is used, otherwise it might be null. 
            Raw command line starts with full executable path.
            </param>
        </member>
        <member name="P:JetBrains.Application.Hosting.HostCommandLine.Keys">
            <summary>
            Array of defined keys: /Key[=Value]
            </summary> 
        </member>
        <member name="P:JetBrains.Application.Hosting.HostCommandLine.NonKeyedParameters">
            <summary>
            Strings, that does not start with '/'.
            </summary> 
        </member>
        <member name="M:JetBrains.Application.Hosting.HostCommandLine.GetCommandLineParameterText(JetBrains.Application.Hosting.CommandLineParameter,System.String,System.Boolean)">
            <summary>
            Forms the complete standalone host command line parameter presentation.
            </summary>
            <param name="parameter">Command line argument name and value (either optional, but not both at a time).</param>
            <param name="sProductName">Product name (prefixes the arg).</param>
            <param name="isOmittingDefaultProductName">If this is the default product of the standalone host, its name can be omitted in the host command line (non-product-name-prefixed keys are attributed to the default product of the host, if there's one on that host).</param>
        </member>
        <member name="M:JetBrains.Application.Hosting.HostCommandLine.GetCommandLineText(System.Collections.Generic.IEnumerable{JetBrains.Application.Hosting.CommandLineParameter},System.String,System.Boolean)">
            <summary>
            Forms the standalone host command line containing multiple parameters.
            </summary>
            <param name="parameters">Each parameter will be presented with <see cref="M:JetBrains.Application.Hosting.HostCommandLine.GetCommandLineParameterText(JetBrains.Application.Hosting.CommandLineParameter,System.String,System.Boolean)"/>, see there for details.</param>
            <param name="sProductName">Product name (prefixes the arg).</param>
            <param name="isOmittingDefaultProductName">If this is the default product of the standalone host, its name can be omitted in the host command line (non-product-name-prefixed keys are attributed to the default product of the host, if there's one on that host).</param>
        </member>
        <member name="M:JetBrains.Application.Hosting.HostCommandLine.CreateFromCurrentEnvironment(System.String[])">
            <summary>
            Gets everything from the current process environment.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:JetBrains.Application.Hosting.ICommandLine.Keys">
            <summary>
            Array of defined keys: “/Key[=Value]”.
            </summary> 
        </member>
        <member name="P:JetBrains.Application.Hosting.ICommandLine.NonKeyedParameters">
            <summary>
            Strings that do not start with “/” and do not belong to the previous string with a “/”.
            </summary> 
        </member>
        <member name="P:JetBrains.Application.Hosting.ICommandLine.Parameters">
            <summary>
            <para>Gets all of the command line parameters, <see cref="P:JetBrains.Application.Hosting.ICommandLine.Keys"/> and <see cref="P:JetBrains.Application.Hosting.ICommandLine.NonKeyedParameters"/> together, in order of appearance.</para>
            <para>If a standalone application implements the singleton mode, command line parameters from attempted new instances get added to this list of the original instance.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Hosting.ICommandLine.StartupDirectory">
            <summary>
            The startup directory of the application. Can be used to restore full paths from relative paths passed to the command line parameters.
            // TODO: handle the case when sending cmdline keys to the second instance of the application.
            </summary>
            <remarks>
            You should not be using <see cref="M:JetBrains.Util.FileSystemUtil.GetCurrentDirectory"/> (or even worse <see cref="!:Environment.CurrentDirectory"/> for that task because the current directory of the process might change at runtime (e.g. by open-file-dialog), and the command line arguments should always be interpreted against the current directory at the time the process were started.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Hosting.ICommandLineEx.GetNonKeyedTail(JetBrains.Application.Hosting.ICommandLine,System.Int32)">
            <summary>
            Returns command line tail starting from given non-keyed parameter.
            </summary>    
            <remarks>
            Command line tail used when we need to bypass part of original command line to sub-process.
            </remarks>
            <param name="commandLine"></param>
            <param name="startNonKeyedParamIndex"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Hosting.IHostCommandLine">
            <summary>
            Command line of the host, which includes both product-shared keys and all keys that belong to each product.
            In VS, created over the VS command line object. In standalone, created over a string array.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Hosting.IHostCommandLine.IsProductDecorationRequiredOnKeys">
            <summary>
            See doc on <see cref="M:JetBrains.Application.Hosting.IHostCommandLine.MakeFullCommandLineKeyName(System.String)" />. <c>True</c> in VS, <c>False</c> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Hosting.IHostCommandLine.MakeFullCommandLineKeyName(System.String)">
            <summary>
              <para>Gets the string to be passed on the command line to this host so that the product-specific command lines would get <paramref name="sKeyWithProductDecoration" /> for parsing.</para>
              <para>For calling from <see cref="T:JetBrains.Application.Hosting.IProductCommandLine" />s to serve their <see cref="M:JetBrains.Application.Hosting.IProductCommandLine.MakeFullCommandLineKeyName(System.String)" /> requests.</para>
              <para>For example, let's consider a non-default Visual Studio hive with root suffix “<c>Exp</c>”, a key with short name of “<c>SelfDestruction</c>”, for the product named “<c>Kalabash</c>”. This method is given the product-decorated “<c>Kalabash.SelfDestruction</c>” key name (formed from the short name by some <see cref="T:JetBrains.Application.Hosting.IProductCommandLine" />), and yields the full ready-for-VS-command-line “<c>Kalabash.SelfDestruction.Exp</c>” key name.</para>
              <para>In non-VS or VS default hive, returns the original string. If the product is also the default product of the host (not applicable to VS), the resulting full name will just be the short key name.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Hosting.IHostCommandLineEx.IsKeyDefinedInAnyProduct(JetBrains.Application.Hosting.IHostCommandLine,System.String,System.Boolean)">
            <summary>
            Checks if the key is defined in any product loaded in this host.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Hosting.IProductCommandLine">
            <summary>
            Command line of the product. Usually created over the host command line, whose keys are then stripped of the prefix identifying the product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Hosting.IProductCommandLine.KeyPrefix">
            <summary>
            Gets the prefix of the command line keys in the host command line.
            To parse the whole host command line into the command lines for each of the products, they're filtered by the prefix (usually, <c>"ProductName."</c>), and the prefix is removed from keys.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Hosting.IProductCommandLine.IsKeyPrefixOptional">
            <summary>
            If there's a default product in the host, its command line keys could optionally be specified without the <see cref="P:JetBrains.Application.Hosting.IProductCommandLine.KeyPrefix"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Hosting.IProductCommandLine.MakeFullCommandLineKeyName(System.String)">
            <summary>
            <para>Gets the string to be passed on the command line to this host so that the command line of this product would have the key named <paramref name="sShortKeyName"/> defined.</para>
            <para>If this product is not the default product of the host, the product name will be added to the short key name (to distinguish between keys addressed to different products). The environment (for example, Visual Studio non-default hive) might also add decorations to the key name.</para>
            <para>For example, let's consider a key with short name of “<c>SelfDestruction</c>” that belongs to the product named “<c>Kalabash</c>”, currently running in a non-default Visual Studio hive with root suffix “<c>Exp</c>”. This method is given the short key name “<c>Kalabash</c>”, and yields the full ready-for-VS-command-line “<c>Kalabash.SelfDestruction.Exp</c>” key name.</para>
            <para>In non-VS or VS default hive, there is no root suffix. If the product is also the default product of the host (not applicable to VS), the resulting full name will just be the short key name.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Hosting.ProductCommandLine">
            <summary>
            Implements the command line of the product over a host command line.
            Selects those keys that have the prefix of a specific product (or no prefix at all, for host-default product).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Hosting.ProductCommandLine.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Hosting.IHostCommandLine,System.String,System.Boolean)">
            <summary>
            Init.
            </summary>
            <param name="lifetime"> </param>
            <param name="cmdlHost">Host command line to filter and strip key names.</param>
            <param name="sProductPrefix">Prefix of the product (dot not included). Keys with this prefix (followed by a dot) are attributed to the current product and given out. Case-sensitivity flags of the command line request also applies to the prefix.</param>
            <param name="isKeyPrefixOptional">If the host has a default product, then keys without prefix are also attributed to that product. An example is a standalone application (eg DotTrace).</param>
        </member>
        <member name="T:JetBrains.Application.Hosting.RawCommandLineAdapter">
            <summary>
            Adapts ICommandLine to be used with <see cref="T:JetBrains.Util.CommandLineMapper.ICommandLineMapper`1">ICommandLineMapper</see>. 
            Additionally implements <see cref="T:JetBrains.Util.CommandLineMapper.ISupportRawCommandLine">ISupportRawCommandLine</see>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.Animation.RotatedIconId">
            <summary>
            Simple rotation animation on the icon image.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.Animation.RotatedIconIdOwner">
            <summary>
            Dummy class to yield the underlying static image of a <see cref="T:JetBrains.Application.Icons.Animation.RotatedIconId" /> for usages which do not support animation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.Animation.RotatedIconIdOwner.JetBrains#Application#Icons#IIconIdOwner2#TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ColorIcons.ColorIconIdOwner">
            <summary>
            Dynamically-generated per-RGB-color icons.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ColorIcons.ColorIconIdOwner.JetBrains#Application#Icons#IIconIdOwner2#TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ColorIcons.ColorIconIdOwner.ColorIconIdOwnerPrecalculatedTi">
            <summary>
            Color shape: paint the color swatch as a rectangle with rounded corners, like with Avalon (<c>new RectangleGeometry(bouns, rx, ry)</c>).
            That's four straight lines and four arcs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsAttribute">
            <summary>
            Marks Compiled Icon Cs Classes (<see cref="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass" />). This makes the full set of compiled icons discoverable, and also allows applying zoning to them.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass">
            <summary>
              <para>Base class for all C#-only compiled icon classes (which does not involve compiling or loading XAML/BAML). Can be used in generic constraints.</para>
              <para>Derived classes must be marked with <see cref="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsAttribute" /> attribute.</para>
              <para>Must have a public static readonly field of type <see cref="T:JetBrains.UI.Icons.IconId" /> called <c>Id</c> representing the Themed Icon ID of this icon class.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass.GetThemeImages">
            <summary>
              <para>Gets the available theme images of this icon. This API is the backend for <see cref="M:JetBrains.Application.Icons.IIconIdOwner.TryGetImage(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)" />. Also provides for enumeration and discovery.</para>
              <para>The theme images must be listed in descending priority order. If no exact match for team aspect is found, the first theme image will be used by default.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId">
            <summary>
            Identifier of an icon which was statically defined in C# code and precompiled into the product DLLs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.myIconClassCatalogType">
            <summary>
            The part catalog type, if it's been initially given. If NULL, then <see cref="F:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.myIconClassRuntimeType" /> must be non-NULL.
            This allows to defer binding runtime types and loading assemblies when we've just been enumerating type-identified icons and storing their IDs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.myIconClassRuntimeType">
            <summary>
            The runtime type, if it's been initially given, or has already been bound from a catalog type. If NULL, then <see cref="F:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.myIconClassCatalogType" /> must be non-NULL.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.#ctor(JetBrains.Application.Catalogs.PartCatalogType)">
            <summary>
            Creates an icon ID from the compiled type, in part catalog form.
            </summary>
            <param name="typeofIconClass"></param>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.#ctor(System.Type)">
            <summary>
            Creates an icon ID from the compiled type, in runtime type form.
            </summary>
            <param name="typeofIconClass"></param>
        </member>
        <member name="P:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.FullName">
            <summary>
            Gets the full (unique) name of the icon.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.SimpleName">
            <summary>
            Gets the simple (short) name of the icon.
            Unless the icon pack is specifically marked for isolation, this would be globally unique as well.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.BindToIconClassRuntimeType">
            <summary>
            Gets the type of the <see cref="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass" /> which identifies this precompiled icon.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.TryGetIconClassCatalogType">
            <summary>
            Gets the Icon Class type as a Part Catalog Type if it's been specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.TryGetIconClassRuntimeType">
            <summary>
            Gets the Icon Class type as a Runtime Type if it's been known initially or has already been bound from the catalog type (see <see cref="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId.BindToIconClassRuntimeType" />).
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner">
            <summary>
            Owns identifiers of icons which were statically defined in C# code and precompiled into the product DLLs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner.TryGetImageCore(JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Util.OnError)">
            <summary>
            The core implementation. Loads the actual image from the icon.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner.JetBrains#Application#Icons#IIconIdOwner2#TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner.LoadImageDelegate">
            <summary>
            Loads the theme icon image.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner.ThemedIconThemeImage">
            <summary>
            A helper type for the interface between <see cref="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass" /> and <see cref="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner" />. Describes one of the available images in the set.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner.ThemedIconThemeImage.DefaultThemeAspectValue">
            <summary>
            If the icon has just one image and no themes, assume this aspect value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner.ThemedIconThemeImage.LoadImage">
            <summary>
            Loads the image for this theme. Throws on errors.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsIdOwner.ThemedIconThemeImage.ThemeAspectValue">
            <summary>
            Gets the value of the theme aspect of this image.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIconsCs.IsIconNamesInPrivateSpaceAttribute">
            <summary>
            Marks Compiled Icon classes (e.g. <see cref="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsClass" />, <see cref="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconClass" />) which declare a compiled icon that the name of this icon should be considered private per-icon-pack and not be validated to be unique thru all the runtime.
            This means <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconPackFlags.IsIconNamesInPrivateSpace" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner">
            <summary>
            Owns identifiers of icons which were statically defined in resources and precompiled into the product DLLs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.myHashAllNamesCaseInsensitive">
            <summary>
            <c>JET_MODE_ASSERT</c>-only cache.
            Maps icon name (in lower case) to a pair of the original name case and its owning icon pack.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.myHashAllNamesCaseSensitive">
            <summary>
            <c>JET_MODE_ASSERT</c>-only cache.
            Maps icon name (in original case) to its owning icon pack.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.myMapIconPacks">
            <summary>
            Icon packs.
            Modification under main thread guard, copy-on-write, free-threaded access.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.AssertUniqueNames(System.String,System.Object[])">
            <summary>
            Check that all icon names are unique across the product. In assertion mode only.
            </summary>
            <param name="lifetime"></param>
            <param name="iconPackResName"> </param>
            <param name="names"></param>
            <param name="logger"> </param>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.myDummyIconSlot">
            <summary>
            Assign to the icon slot for which there's no info, to avoid subsequent exceptions on calls to the icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.myThemeDrawings">
            <summary>
            An array (cells agree to <see cref="F:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.myIconNames" />) of icon data. Each cell is a list of themed drawings.
            Lazy-loaded (free-threaded manner).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.EnsureLoaded">
            <summary>
            Loads the pack data from resources and into the field. Does this free-threaded, might be loading in parallel on several threads.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.ReadFromAvalonComponent(System.Uri,System.Object[])">
            <summary>
            Loads the Avalon resource with BAML serialization of the <see cref="T:System.Windows.ResourceDictionary" />, then calls <see cref="M:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.ReadFromDictionary(System.Windows.ResourceDictionary,System.Object[])" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.ReadFromDictionary(System.Windows.ResourceDictionary,System.Object[])">
            <summary>
            Reads the serialized format, as emitted by the build task.
            </summary>
            <param name="dictionary"></param>
            <param name="expectedids">If the exact set and order of the IDs is known, validates that the loaded set is the same.</param>
            <returns></returns>
            <remarks>
              <para>On the format.</para>
              <para>Each dictionary entry is a <see cref="T:System.Windows.Media.Drawing" /> of some icon for some theme.</para>
              <para>It has two attributes, <see cref="F:System.Windows.Automation.AutomationProperties.NameProperty" /> attached property is the icon ID, and the <see cref="F:System.Windows.Automation.AutomationProperties.ItemTypeProperty" /> attached property is the theme of this icon image.</para>
              <para>The dictionary keys on entries have no meaning, but define the sorting order. In that order, images are sorted lexicographically, first by icon ID, then by theme. This way, you're guaranteed to read all images of the same icon in a row.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner.IconPack.ThemeDrawing">
            <summary>
            Per icon per theme drawing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ComposedIcons.CompositeIconIdOwner">
            <summary>
            Composes an icon out of images of other icons.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconId">
            <summary>
            An icon with effects applied to its image.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconId.#ctor(JetBrains.UI.Icons.IconId,System.Double,System.Nullable{JetBrains.Util.Media.JetRgbaColor},System.Double)">
            <summary>
            Creates an icon with an effect.
            </summary>
            <param name="baseicon">The base icon whose image should be transformed with an effect.</param>
            <param name="alpha">Optional. Transparency effect, in the <c>[0..1]</c> range, where <c>1</c> means no transparency effect is applied.</param>
            <param name="colorMonochrome">Optional. Turns the icon into a monochrome image, with given color as the tint. <see cref="P:System.Windows.Media.Colors.Transparent"/> to have no tint (grayscale monochrome), <c>Null</c> to have no monochrome effect.</param>
            <param name="fBlurRadius">A non-zero value denotes the blur radius to be applied to the icon.</param>
        </member>
        <member name="F:JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconId.Alpha">
            <summary>
            Optional. Transparency effect, in the <c>[0..1]</c> range, where <c>1</c> means no transparency effect is applied.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconId.BlurRadius">
            <summary>
            A non-zero value denotes the blur radius to be applied to the icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconId.MonochromeColor">
            <summary>
            Optional. Turns the icon into a monochrome image, with given color as the tint. <see cref="P:System.Windows.Media.Colors.Transparent"/> to have no tint (grayscale monochrome), <c>Null</c> to have no monochrome effect.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.EffectsOnIcons.EffectOnIconIdOwner">
            <summary>
            Implements applying effects to icons.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.IIconIdOwner">
            <summary>
              <para>An object which maintains some kind of <see cref="T:JetBrains.UI.Icons.IconId" />s and can yield actual images for that type of icons.</para>
              <para><see cref="T:JetBrains.Application.Icons.IIconIdOwner" /> was designed when Avalon <see cref="T:System.Windows.Media.ImageSource" />s were primary icon image media, and <see cref="T:JetBrains.Application.Icons.IIconIdOwner2" /> produces the new primary image type, <see cref="T:JetBrains.Util.Icons.TiImage" />, which is cross-platform and can convert into Avalon / GDI+ / SVG. <see cref="T:JetBrains.Application.Icons.IIconIdOwner2" /> should be implemented by all new icon owners and older ones should be upgraded so that they supported cross-platform execution.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.IIconIdOwner.IconIdType">
            <summary>
            Type of the <see cref="T:JetBrains.UI.Icons.IconId" />-inherited class served by this Icon ID Owner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IIconIdOwner.TryGetImage(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)">
            <summary>
              <para>Gets the icon image for the given theme. Called by <see cref="T:JetBrains.Application.Icons.IThemedIconManager" />.</para>
              <para>Notes to impelmentors.</para>
              <para>You should return some image for each theme given. If you don't understand the theme, return the default image. Some themes might be composed or derived from others, use images for base themes in this case.</para>
              <para>You don't have to do caching on what you return, even if you're running some calculations to produce the themed image. You will be called only once for the current theme (unless theme is changed to another and back), and the result (together with rasterization, if needed) will be cached by <see cref="T:JetBrains.Application.Icons.IThemedIconManager" />. The cache might be dropped by expiration, but it's considered to be OK to calculate the icon image anew in such a case.</para>
              <para>If your icon id owner implements <see cref="T:JetBrains.Application.Icons.IIconIdOwner2" />, then <see cref="T:JetBrains.Application.Icons.IThemedIconManager" /> would prefer to ask for a <see cref="T:JetBrains.Util.Icons.TiImage" /> and render an Avalon <see cref="T:System.Windows.Media.ImageSource" /> out of that, to make sure it matches the provided <see cref="T:JetBrains.Util.Icons.TiImage" />.</para>
            </summary>
            <param name="iconid">Identifier of the icon whose image is to be retrieved. This ID must be of type specified in <see cref="P:JetBrains.Application.Icons.IIconIdOwner.IconIdType" />. It is an error if an identifier of another type is passed here.</param>
            <param name="theme">Theme (see for details on combining and deriving).</param>
            <param name="themedIconManagerPerThemeCache">Allows querying for other icon images if needed to compose the icon for an ID.</param>
            <param name="onerror">How the image retrieval errors could be reported.</param>
            <returns>The image for this theme, or fallback image for base/default theme if not available. <c>NULL</c> means an error obtaining the icon, or that there is no icon available for this specific ID (icon manager would report an error and use the <see cref="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon">placeholder icon</see> in that case).</returns>
        </member>
        <member name="T:JetBrains.Application.Icons.IIconIdOwner2">
            <inheritdoc cref="T:JetBrains.Application.Icons.IIconIdOwner" />
        </member>
        <member name="M:JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)">
            <inheritdoc cref="M:JetBrains.Application.Icons.IIconIdOwner.TryGetImage(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)" />
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.Importers.CsFileTilsIconPackGroup">
            <summary>
            A <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup" /> when loaded from a C# sources file in the solution.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.Importers.CsFileTilsIconPackGroup.UpdateGroupXmlns(JetBrains.Application.Icons.ImportExport.Importers.CsFileTilsIconPackGroup.Loaded,JetBrains.Util.ILogger)">
            <summary>
            To use the icons from XAML, adds an xmlns definition which allows to have type references which do not contain assembly names.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.Importers.DiskFolderTilsIconPackGroup">
            <summary>
            When importing a set of scattered files from a folder.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.Importers.DiskFolderTilsIconPackGroup.#ctor(JetBrains.Util.FileSystemPath,System.Collections.Immutable.ImmutableArray{JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack},System.Collections.Immutable.ImmutableArray{JetBrains.Build.Running.BuildLogRecord})">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.Importers.FilesInDirectoryLive">
            <summary>
            Live watch on bodies of files in a dir, by mask, recursively.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.Importers.FilesInDirectoryLive.ExtensionsToInclude">
            <summary>
            Input: which extensions to look for, empty means all.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.Importers.FilesInDirectoryLive.FoundFiles">
            <summary>
            Output. A map of paths into file bodies.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.Importers.FilesInDirectoryLive.IsNoRecursion">
            <summary>
            Input. Turns off recursion optionally.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.Importers.FilesInDirectoryLive.WatchedDirectory">
            <summary>
            Input: the directory to watch for files. NULL turns off.
            Actually, we support the corner case when a single file is given in here.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.Importers.IconViewerOnDiskFolder">
            <summary>
            <c>IconViewerImportProcess</c> was v1, this is v2 based on common <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.Importers.IconViewerOnDiskFolder.AllDiscoveredIcons">
            <summary>
            Output. Ready rows for binding into the viewer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.Importers.IconViewerOnDiskFolder.WatchedDirectoryForImport">
            <summary>
            Input: the directory to watch for files.
            Actually, we support the corner case when a single file is given in here.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.Importers.ImportIconsFromCurrentShell">
            <summary>
            All of the icons which have been compiled into the current set of packages.
            In two formats: <see cref="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconId" /> and <see cref="T:JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.Importers.ImportIconsFromCurrentShell.LoadCompiledV1(JetBrains.Application.Catalogs.PartCatalog,System.Collections.Immutable.ImmutableArray{JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup}.Builder,JetBrains.Application.Icons.ThemedIconManager.IconIdOwnersMap,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Util.ILogger)">
            <summary>
            CompiledThemedIcon, original revision, via assembly attributes
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.Importers.ImportIconsFromCurrentShell.LoadCompiledV2Cs(JetBrains.Application.Catalogs.PartCatalog,System.Collections.Immutable.ImmutableArray{JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup}.Builder)">
            <summary>
            CompiledThemedIconCs, C#-only revision, via compiled item classes which must be marked with attributes
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure.IconPackGroups">
            <summary>
            Groups with packs. Sorted by unique identity.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure.Equals(JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon">
            <summary>
            An icon in a <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure" />, has multiple theme images for different themes, corresponds to a single <see cref="T:JetBrains.UI.Icons.IconId" /> in code. Icons are grouped in packs, <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon.IconId">
            <summary>
            Unique between icons in the pack. Icons sorted by it ordinally.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon.ThemeImages">
            <summary>
            Icon's theme images, sorted by a unique theme aspect value. At least one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon.CompareTo(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconEx.TryGetImage(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon,JetBrains.Application.UI.Icons.IconTheme)">
            <summary>
            Mimics the <see cref="M:JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)" />. That's why it's <c>Try–</c>, even though not-null.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconEx.TryGetImageExactMatch(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon,JetBrains.Application.UI.Icons.IconTheme)">
            <summary>
            Mimics the <see cref="M:JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)" />, but does not return a fallback theme, yields NULL if there is no exact match.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconEx.TryGetImageExactMatch(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon,JetBrains.Application.UI.Icons.IconThemeAspect)">
            <summary>
            Mimics the <see cref="M:JetBrains.Application.Icons.IIconIdOwner2.TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)" />, but does not return a fallback theme, yields NULL if there is no exact match.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack">
            <summary>
            A pack of <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon" /> icons (of <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure" />). Corresponds to a C# file and the outer class around icons when in C# solution.
            Packs are held together (or one by one) in groups, <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack.Name">
            <summary>
            Icon pack name. Must be unique in the icon packs group. Packs in the group must be sorted by it ordinally.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack.CompareTo(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup">
            <summary>
            A group of <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack" /> icon packs (of <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure" />): from one C# file if from sources, from one assembly, etc. Retains necessary structure for writing back after modifications.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup.GroupIdentity">
            <summary>
            Identity of this group. Must be unique among all the groups in the load structure. Groups must be sorted by it ordinally.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup.CompareTo(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup.Equals(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon">
            <summary>
            A wrapper for <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIcon" />, plus its context (the parent <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPackGroup" /> and <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsIconPack" />).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon.CompareTo(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon.Equals(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsThemeImage">
            <summary>
            One theme image in a <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure" /> icon (of <see cref="T:JetBrains.Application.Icons.ImportExport.LoadStructure.ThemedIconsLoadStructure" />). An icon has multiple theme images for different themes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsThemeImage.ThemeHint">
            <summary>
            Hint for the icon theme of this image. Aspects of an icon theme would be matched against this hint at runtime.
            Unique on the icon.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsThemeImage.CompareTo(JetBrains.Application.Icons.ImportExport.LoadStructure.TilsThemeImage)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.LoadStructure.TilsThemeImage.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser">
            <summary>
            Parses the themed-icons-supported subset of the SVG format into the themed icons image.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.BrushFailedToParse">
            <summary>
            A fallback brush returned when we fail to parse the fill resource. Not transparent to avoid losing the object shape and make smth visible still.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.GetBrushFromResource(System.String,JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext,System.Collections.Generic.IList{JetBrains.Util.Icons.TiSegment},System.Collections.Generic.IList{JetBrains.Util.Icons.TiSegment},JetBrains.Util.Media.JetMatrix,JetBrains.Util.OnError)">
            <summary>
            Gets the brush from a resource defined earlier in the parse context. See <see cref="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.GetFill(System.Collections.Generic.IDictionary{System.String,JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Property},JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext,System.Collections.Generic.IList{JetBrains.Util.Icons.TiSegment},System.Collections.Generic.IList{JetBrains.Util.Icons.TiSegment},JetBrains.Util.Media.JetMatrix,JetBrains.Util.OnError)" /> for params doc.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.MakeTiPathForShape(System.Xml.Linq.XElement,System.Collections.Immutable.ImmutableArray{JetBrains.Util.Icons.TiSegment},System.Collections.Generic.IDictionary{System.String,JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Property},JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext,JetBrains.Util.OnError)">
            <summary>
            Handles common shape properties, when segments are already obtained by the means of the shape-specific parser.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.GetFill(System.Collections.Generic.IDictionary{System.String,JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Property},JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext,System.Collections.Generic.IList{JetBrains.Util.Icons.TiSegment},System.Collections.Generic.IList{JetBrains.Util.Icons.TiSegment},JetBrains.Util.Media.JetMatrix,JetBrains.Util.OnError)">
            <summary>
            Makes the fill for a path (which is a list of segments).
            </summary>
            <param name="props">Combined properties from XML properties on the element and style setters from the style property on the element.</param>
            <param name="ctx">The parse context, to read pre-declared fill resources (seems the only way to declare gradients).</param>
            <param name="tiSegmentsNoShapeTransform"><see cref="!:tiSegmentsWithShapeTransform" /></param>
            <param name="tiSegmentsWithShapeTransform">The path segments being painted. As Ti gradients are stored in object coord space, any gradients declared in world coord space must be transformed, and the path bbox gives the transform. If a shape has a transform, these are assumed to be already transformed to it.</param>
            <param name="transformSegmentsInWorldCoords">If the shape itself has a transform, the gradient appears as if applied before the object is transformed (even if in world coordinates). Ti stores the object transform pre-applied: there's no transform, but the path points are written transformed. So this is required to calculate the gradient coords in the transformed object space as if it's being applied to the object before the transform.</param>
            <param name="onerror"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ReadShapeTransformProperty(System.Collections.Generic.IDictionary{System.String,JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Property},JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext,JetBrains.Util.OnError)">
            <summary>
            If the shape has a transform prop/style, reads and parses its value.
            Otherwise (or if failed), returns the identity transform.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ToAttributeString(JetBrains.Util.Icons.Emitters.SvgFile.Attribute)">
            <summary>
            Gets attr as a string.
            Handles two issues:
            1) SVG might have hyphens, C# cannot have them — translate from underscores.
            2) Enum member ToString is slow when called often.
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.WithShapeFillRule(System.Collections.Immutable.ImmutableArray{JetBrains.Util.Icons.TiSegment},System.Collections.Generic.IDictionary{System.String,JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Property},JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext,JetBrains.Util.OnError)">
            <summary>
            Reads the fill rule from the shape; returns the updated segments.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.GetNumberFlags.NotExpectingPixels">
            <summary>
            Values are NOT in pixels by default, so cannot drop the suffix.
            Negative to match the legacy default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.GetNumberFlags.PercentIntoFraction">
            <summary>
            Values are fractions, so percent are OK.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.CalculatedValue">
            <summary>
            The value, taking unit scaling into account (like, percent is /100). Zero if not defined or problems parsing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.CalculatedValueOrNull">
            <summary>
            The value, taking unit scaling into account (like, percent is /100). NULL if not defined or problems parsing.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.Factor">
            <summary>
            Factor from unit conversion (percent into value).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.Origin">
            <summary>
            Where it comes from. Can create this from a UNLL property, because many of the stuff is optional.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.OriginalDoubleValue">
            <summary>
            Just as parsed (after stripping units). NULL if not defined or not parsed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.RawValue">
            <summary>
            Prop value AS IS, if got prop.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.Units">
            <summary>
            Units detected and stripped from value, <see cref="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.EUnits.Bare" /> means there were just a number and no units.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.FromProperty(JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Property,JetBrains.Util.OnError)">
            <summary>
            Should not throw, creates even from a NULL property (no error), reports on parse errors.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.GetNumberOrNull(JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.GetNumberFlags,JetBrains.Util.OnError)">
            <summary>
            Asserts on expected units, all parsing errors get into the parsing-time <see cref="T:JetBrains.Util.OnError" /> and not into this one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.GetNumberOrZero(JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.GetNumberFlags,JetBrains.Util.OnError)">
            <summary>
            Asserts on expected units, all parsing errors get into the parsing-time <see cref="T:JetBrains.Util.OnError" /> and not into this one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.NumberResult.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext.AdjustTransform(JetBrains.Util.Media.JetMatrix)">
            <summary>
            Takes a transform of some item in the context, augments it with transforms accumulated in the context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.ParseContext.TryGetResource(System.String,System.Nullable{JetBrains.Util.Icons.Emitters.SvgFile.Element},JetBrains.Util.OnError)">
            <summary>
            Looks up a resource in this or parent contexts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Resource.ChildElements">
            <summary>
            Child elements.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Resource.Element">
            <summary>
            Resource element type.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.SvgThemedIconsTransferFormatParser.Resource.Properties">
            <summary>
            Properties of the resource.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter">
            <summary>
            Emits declaration of the Themed Icons in the V4 format (CompiledThemedIconCs).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.TyperefThemedIconExtension">
            <summary>
            As we cannot reference the <c>ThemedIconExtension</c> type in this project, keeps its FQN.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.IconTypeofsClass(System.Collections.Generic.IList{JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.IconWithImages},JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.GeneratedNames,JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconPackFlags)">
            <summary>
            <see cref="P:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.GeneratedNames.IconTypeofsClass" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.XmlDocRemarks(System.Xml.XmlWriter,JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.GeneratedNames,System.String)">
            <summary>
            Emits the common remarks section included as help in all accessors.
            </summary>
            <param name="writer"></param>
            <param name="generatedNames"></param>
            <param name="sSampleIconId"></param>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.XmlDocRemarks(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            Emits the common remarks section included as help in all accessors.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.XmlnsDefinition(JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.GeneratedNames)">
            <summary>
            To use the icons from XAML, adds an xmlns definition which allows to have type references which do not contain assembly names.
            </summary>
            <param name="generatedNames"></param>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.GeneratedNames.GeneratedName.#ctor(System.String,System.String,System.String,JetBrains.Application.UI.Icons.Emitters.NameNormalizer)">
            <summary>
            </summary>
            <param name="sNamespace"></param>
            <param name="sOwnerName"></param>
            <param name="sNameSuffix"></param>
            <param name="nameNormalizer">NULL if names have already been normalized on prev steps, or the normalizer to do it on-the-fly.</param>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.IconImage">
            <summary>
            One themed image of the imported icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.IconImage.ThemeHint">
            <summary>
            Gets the hint for theme selection of this image.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.IconWithImages">
            <summary>
            All images for an icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.IconWithImages.IconId">
            <summary>
            The icon ID, normalized.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.IconWithImages.ThemeImages">
            <summary>
            Available images for theme aspects.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsEmitter.Members.Id">
            <summary>
            Gets the name of the Icon Identifier Field in the Icon Identifier Class.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator">
            <summary>
            Validates that the converted <see cref="T:JetBrains.Util.Icons.TiImage" /> renders as good as the original image.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator.Parameters.IsAlwaysDumpingRenderingSamples">
            <summary>
            Even if there were no failures, saves sample rendering for all images to the <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator.Parameters.OutputDumps" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator.Parameters.OutputDumps">
            <summary>
            If rendering fails, the reference and test images get here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator.Parameters.Renderers">
            <summary>
            Lists the allowed renderers and sets up thresholds for them.
            Initially, enables all renderers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator.Parameters.TiImage">
            <summary>
            The image whose rendering we are checking.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator.RendererValidation.MedianCellRadius">
            <summary>
            “Radius” of the cell for calculating the median when comparing two images: the diffing image (after applying the threshold) is processed with the median filter, and the median cell width/height would be radius+1+raduis around each pixel. 0 means no median filter.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsCsValidator.RendererValidation.Threshold">
            <summary>
            Threshold for checking alpha and luminosity, in the [0…1] range.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsImport">
            <summary>
            Can read the import formats of the themed icons imagery, which also includes the previous generation of the themed icons work files, as well as new exports from the graphical software.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DefaultThemeAspectValue">
            <summary>
            If the icon has just one image and no themes, assume this aspect value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.CollectLegacyInputs(JetBrains.Application.BuildScript.Solution.AllAssembliesOnSources)">
            <summary>
            Read legacy input items from project files.
            </summary>
            <param name="allassSrc"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DetectXamlFormatV3Sw(JetBrains.Util.FileSystemPath)">
            <summary>
            For a XAML file, detects its sub-format as a themed icons input file.
            Currently detects <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.XamlV3" /> and <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.XamlSw" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.GetCompiledIconCsStaticOutputFile(JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DiskFolderIconPackInput)">
            <summary>
            The new icons generator produces a static source file to be included with the source control under this name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.GetCompiledIconGeneratedOutputFile(JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DiskFolderIconPackInput,System.String)">
            <summary>
            The legacy icons generator task would produce generated (non-source-controlled) files under these names.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.TossDiskFolderInputItems(JetBrains.Application.Icons.ImportExport.ThemedIconsImport.LegacyProjectInputItems,JetBrains.Util.ILogger)">
            <summary>
            Makes a single list of all items and tosses them by folders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.ConvertAllIcons(JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconPackInput,JetBrains.Util.ILogger)">
            <summary>
            Loads input files, parses&amp;converts, accumulates in the runtime format.
            </summary>
            <param name="folder"> </param>
            <param name="logger"> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.ConvertAllIcons_CommonItemMetadata(System.Collections.Generic.IDictionary{System.String,System.String},JetBrains.Application.Icons.ImportExport.ThemedIconsImport.BooleanMetadataValue@,JetBrains.Application.Icons.ImportExport.ThemedIconsImport.BooleanMetadataValue@)">
            <summary>
            Handles reading item metadata which is common for items of all the formats.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.ConvertAllIcons_XamlV3(JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconFileInput,System.String,JetBrains.Util.ILogger)">
            <summary>
            Extracts item metadata before calling into
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.GetNamespace(JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DiskFolderIconPackInput,System.String)">
            <summary>
            Gets the namespace into which the source code classes should be emitted. Is the root namespace of the project, plus relative path to the target folder.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.BooleanMetadataValue">
            <summary>
            Value of a boolean metadata collected from task items.
            Assuming False is the default, to get the actual value: coerce this integer to a boolean and invert it (that's how the integer values of this enum are laid out).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.BooleanMetadataValue.SetToTrue">
            <summary>
            True value of metadata.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.BooleanMetadataValue.SetToFalse">
            <summary>
            False value of metadata.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.BooleanMetadataValue.NotSet">
            <summary>
            There's no explicitly assigned metadata value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.BooleanMetadataValue.NoItemsYet">
            <summary>
            Haven't yet seen any items.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DiskFolderIconPackInput">
            <summary>
            An icons pack input which is based on a disk folder, as for importing from the legacy csproj files to migrate from the older format.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DiskFolderIconPackInput.IconsDirInProject">
            <summary>
            Folder with icons, relatively to the project directory.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.DiskFolderIconPackInput.ProjectDir">
            <summary>
            Directory of the owning project which is the emit target.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconFileInput.Metadata">
            <summary>
            Legacy metadata in case the item were included in a .proj file and has associated metadata (e.g. for theme colors and so on).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.XamlV2">
            <summary>
            A pack of icon images, two images per icon, IDs are in dictionary keys.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.XamlV3">
            <summary>
            A pack of icon images in XAML format.
            Theme names and number of theme images (as well as additional options) are specified in MSBuild metadata.
            The root element is <see cref="T:System.Windows.ResourceDictionary" />.
            Resource entries are <see cref="T:System.Windows.Media.DrawingBrush" />es, the <c>Key</c> is the IconID. Theme images are all within the single drawing brush image, auto-splitted based on the column definitions.
            Might optionally have the background element which defines the bounds of the icons, to be removed from the final image.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.PngV1">
            <summary>
            Scattered per-theme images, IDs are in file names, theme name is optionally given in the file name in square brackets.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.XamlSw">
            <summary>
            Scattered per-theme images in the Mike Swanson XAML export format.
            The Icon ID is the file name, the theme name is optionally optionally given in the file name in square brackets.
            The icon image is composed of <see cref="T:System.Windows.FrameworkElement" />s (like, <see cref="T:System.Windows.Shapes.Path" />) on a <see cref="T:System.Windows.Controls.Canvas" />, optionally wrapped in a <see cref="T:System.Windows.Controls.Viewbox" />.
            Might optionally have the background element which defines the bounds of the icons, to be removed from the final image, identified by the presence of the <c>#</c> character in the file name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.Svg">
            <summary>
            Scattered per-theme images in the SVG export format. Only a primitive subset of the SVG format is supported.
            The Icon ID is the file name, the theme name is optionally optionally given in the file name in square brackets.
            The icon image is composed of <see cref="T:System.Windows.FrameworkElement" />s (like, <see cref="T:System.Windows.Shapes.Path" />) on a <see cref="T:System.Windows.Controls.Canvas" />, optionally wrapped in a <see cref="T:System.Windows.Controls.Viewbox" />.
            Might optionally have the background element which defines the bounds of the icons, to be removed from the final image, identified by the presence of the <c>#</c> character in the file name.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconInputTaskItem">
            <summary>
            Collect items from all input collections, annotating with their format.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconInputTaskItem.GetLogicalFullPath">
            <summary>
            Gets the full path of the item from its logical point of view in the project.
            I.e. if the item were linked into the project from some other physical location — gets its linkage path under the project rather than the path to the linked physical file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconInputTaskItem.GetPhysicalFullPath">
            <summary>
            Path to the icon input file on disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconPackInput.Identifier">
            <summary>
            The ID of the folder, and of the pack of the items it represents. Gets into the class/file names.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.ScatteredIconFileName">
            <summary>
            The structured file name info for a scattered icon, where theme name and additional options are included within the file name. Applies to formats such as <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.PngV1" /> and <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.XamlSw" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.ScatteredIconFileName.ThemeBracketChars">
            <summary>
            Chars recognized as brackets around the theme name on an icon theme image scattered file name.
            The square brackets is the original option, but others had to be added because square brackets are considered as special characters in certain places.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.UnnormalizedNameIconThemeImage">
            <summary>
            An image for some theme aspect of some icon, known by an unnormalized ID yet.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.UnnormalizedNameIconThemeImage.RawIconId">
            <summary>
            The raw icon ID, as in XAML dictionary, before normalization.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.XamlV3Metadata.ThemeColumns">
            <summary>
              <para>Semicolon-separated list. Must have at least one items.</para>
              <para>Defines how many per-theme images there are in the single icon resource (aligned horizontally), and to which theme aspects they should be assigned.</para>
              <para>To split out the images, the leftmost set of transitively overlapping elements is taken as the first column, then the second one, and so on. To ensure image size is detected correctly and icons with disjoint elements within the single image are not broken apart, add a background placeholder element and specify <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.XamlV3Metadata.RemoveBackgroundElement" />.</para>
              <para>Example:</para>
              <code>Color</code>
              <para>Means that each resource in the XAML dictionary is exactly one icon image (all of the image elements go to the single icon image), and it's assigned to the “Color” theme.</para>
              <hr />
              <code>Gray;Color</code>
              <para>Means that each resource holds a image that combines two images for the icon. One on the left edge is for the “Gray” theme and the other on the right edge is for the “Color” theme.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.XamlV3Metadata.RemoveBackgroundElement">
            <summary>
            Boolean.
            After theme images for the icon are extracted from the resource, defines whether the back-most image element should be removed from the final image. Such an element is required to determine icon size (if icon image does not occupy the whole icon allowed space), and to help with splitting icon images belonging to different themes, because overlapping elements are transitively collected as the single theme image, and if the image has disjoint elements in it it might not be detected correctly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser">
            <summary>
            Deals with parsing the XAML transfer format in which the icons arrive from AI export, as a Resource Dictionary of drawings, with several theme images in the same srawing, arranged in columns.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser.CanvasToDrawing(System.Windows.Controls.Canvas,System.Windows.Media.Transform,JetBrains.Util.OnError)">
            <summary>
            Converts a WPF <see cref="T:System.Windows.Controls.Canvas" />, which is a high-level drawing comprised of <see cref="T:System.Windows.FrameworkElement" />s, to the raw <see cref="T:System.Windows.Media.Drawing" /> of the same resulting image.
            Constrained to a subset required to support the <see cref="F:JetBrains.Application.Icons.ImportExport.ThemedIconsImport.IconImageFormat.XamlSw" /> format.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser.StripBackgroundPlaceholder(System.Windows.Media.DrawingGroup,System.String,System.String,System.Windows.Media.DrawingGroup,System.String,System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            Strip the background placeholder from the drawing, inplace (modifies the child list of the drawing object).
            The background placeholder is backmost (=first) and must cover the whole area.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser.ConsumeNextImageByExpandingMask(System.Collections.Generic.List{System.Windows.Media.Drawing},System.String,System.String,System.String,System.Boolean,System.Windows.Media.DrawingGroup,JetBrains.Util.ILogger)">
            <summary>
              <para>Takes the leftmost drawing and expands the mask to cover all of the overlapping drawings (transitively) within the given drawing group.</para>
              <para>Optionally, expects a shape at the background giving the total size of the drawing.</para>
            </summary>
            <returns>Returns what could be extracted, or the dummy rectangle.</returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser.StripBackgroundPlaceholder_FindProtrudingChildren(System.Windows.Media.DrawingGroup,System.Windows.Media.Geometry,System.Func{System.Windows.Media.Drawing,System.Boolean})">
            <summary>
            Looks for a child which does not fall within the given bounds. Recurses into drawing groups to find the exact child.
            </summary>
            <returns>Only leaf children (drawing groups are recursed into, but not listed — unless all children are OK, but the DrawingGroup is grouping them in such an unfortunate way that they get protruding as a result of the grouping). Each pair's key is the leaf child, and value is the index path to it (top-down).</returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser.StripClipMask(System.Windows.Media.DrawingGroup,JetBrains.Util.ILogger,System.String,System.String)">
            <summary>
            Strip off the clip mask because usually such a mask is an import/export artifact.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser.IconXamlDrawingImageData">
            <summary>
            A XAML drawing for the item, as parsed from the source XAML file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ImportExport.XamlThemedIconsTransferFormatParser.IconXamlDrawingImageData.RawIconId">
            <summary>
            The raw icon ID, as in XAML dictionary, before normalization.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.IThemedIconManager">
            <summary>
            <para>Collects and dispatches icon images throughout the application.</para>
            <para>Applies theming to icons to support different application styles.</para>
            <para>Generally, you should not be getting icons from it directly. Look for strongly-typed accessors auto-generated in the assembly which loads the icons.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme">
            <summary>
            Gets the current theme selected for icons, and notifies of changes.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.IThemedIconManager.Icons">
            <summary>
            <para>Gets the icon image in vector or raster form for use with GDI+ WinForms or WPF UI.</para>
            <para>You should be operating on <see cref="T:JetBrains.UI.Icons.IconId"/> objects for as long as possible, and only render an icon to the actual theme image when you have to present it. This is the main method for getting the actual theme image for an icon, either for the current theme or changing live with the theme.</para>
            </summary>
            <remarks>
            <para>For performance reasons, getting an icon does not validate that an icon ID is valid and an image for it exists until you actually try getting some imagery.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManager.GetRawApi">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerEx.GetIcon``1(JetBrains.Application.Icons.IThemedIconManager)">
            <summary>
            <para>An alternative to <see cref="P:JetBrains.Application.Icons.IThemedIconManager.Icons"/>.</para>
            <para>Gets an icon by its class identifier rather than object identifier. This way code completion works a bit better because the generic type is guessed through the base type constraint.</para>
            </summary>
            <typeparam name="TIconClass"></typeparam>
            <param name="thіs"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Icons.IThemedIconManagerPerThemeCache">
            <summary>
            Core of the <see cref="T:JetBrains.Application.Icons.IThemedIconManager" /> which calls for icon image creation and caches the results for the current theme.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerPerThemeCache.GetIconGdipBitmap(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Gets the Avalon image source (via <see cref="M:JetBrains.Application.Icons.IThemedIconManagerPerThemeCache.GetIconImageSource(JetBrains.UI.Icons.IconId)" />), converts into a GDIP bitmap, and caches the result. Logs an exception (first time only) and returns a fallback image on failure.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerPerThemeCache.GetIconImageSource(JetBrains.UI.Icons.IconId)">
            <summary>
            Gets the Avalon image source for the icon and caches the result. Logs an exception (first time only) and returns a fallback image on failure.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerPerThemeCache.GetIconTiImage(JetBrains.UI.Icons.IconId)">
            <summary>
            Gets the TiImage for the icon and caches the result. Logs an exception (first time only) and returns a fallback image on failure.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerPerThemeCache.TryGetIconImageSource(JetBrains.UI.Icons.IconId)">
            <summary>
            Tries to get the Avalon image for the icon. Does not log exceptions on failures, returns <c>Null</c> instead of a fallback value. The result is cached only if successful.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerPerThemeCache.TryGetIconTiImage(JetBrains.UI.Icons.IconId)">
            <summary>
            Tries to get the TiImage for the icon. Does not log exceptions on failures, returns <c>Null</c> instead of a fallback value. The result is cached only if successful.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.IThemedIconManagerRawApi">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconGdipBitmap(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconGdipBitmapLive(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconImageSource(JetBrains.UI.Icons.IconId)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconImageSourceLive(JetBrains.UI.Icons.IconId)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconTiImage(JetBrains.UI.Icons.IconId)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.GetIconTiImageLive(JetBrains.UI.Icons.IconId)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.TryGetIconImageSource(JetBrains.UI.Icons.IconId)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.IThemedIconManagerRawApi.TryGetIconTiImage(JetBrains.UI.Icons.IconId)">
            <summary>
            Api methods for use as backend by <see cref="T:JetBrains.Application.Icons.ThemedIconLoader" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIcon">
            <summary>
            Allows to create ad-hoc temporary icons for use with themed-icons-aware infrastructure which are only available at runtime and have not been compiled into the code.
            Icons are theming-aware and allow to supply multiple images for different theme aspects.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIcon.CompareTo(JetBrains.UI.Icons.IconId)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIcon.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIcon.ThemeImage.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIconOwner">
            <summary>
            Just serves images out of <see cref="T:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIcon" /> for the <see cref="T:JetBrains.Application.Icons.IThemedIconManager" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIconOwner.JetBrains#Application#Icons#IIconIdOwner#IconIdType">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIconOwner.JetBrains#Application#Icons#IIconIdOwner#TryGetImage(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Icons.RuntimeTiIcons.RuntimeTiIconOwner.JetBrains#Application#Icons#IIconIdOwner2#TryGetImage2(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.IconTheme,JetBrains.Application.Icons.IThemedIconManagerPerThemeCache,JetBrains.Util.OnError)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Icons.Settings.IconsForIconThemeSelectionSampleUi">
            <summary>
            UI assembly theme-sample icons.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.Settings.ThemedIconSettings">
            <summary>
            Settings for the <see cref="T:JetBrains.Application.Icons.IThemedIconManager"/> and Themed Icons subsystem.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.Settings.ThemedIconSettingsLoader">
            <summary>
            Loads and publishes as the theme aspect the generic icon theme settings.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ThemedIconLoader">
            <summary>
            Represents a single strongly-typed icon accessor along with the component instance that is required to render the icon image.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.CurrentGdipBitmap">
            <summary>
            This method does not specify the desired image resolution, so it should not be used. No valid image is retrned by the current implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.CurrentGdipBitmap96">
            <summary>
              <para>Gets the icon GDI+ raster image for use in WinForms UI.</para>
              <para>This image only fits the current theme. You should watch <see cref="P:JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme" /> changes and request a new image, or use <see cref="P:JetBrains.Application.Icons.ThemedIconLoader.LiveGdipBitmap96" />.</para>
              <para>The icon is rasterized with device-independent 96dpi for this method. In screen UI, you should better use <see cref="P:JetBrains.Application.Icons.ThemedIconLoader.CurrentGdipBitmapScreenDpi" /> for higher-resolution icons.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.CurrentGdipBitmapScreenDpi">
            <summary>
              <para>Gets the icon GDI+ raster image for use in WinForms UI.</para>
              <para>This image only fits the current theme. You should watch <see cref="P:JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme" /> changes and request a new image, or use <see cref="P:JetBrains.Application.Icons.ThemedIconLoader.LiveGdipBitmap96" />.</para>
              <para>The icon is rasterized with DPI resolution of the current display device. This is preferrable for use in screen UI.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.CurrentImageSource">
            <summary>
              <para>Gets the icon image for use in WPF UI.</para>
              <para>Note that this might be either a vector image or a raster bitmap.</para>
              <para>This image only fits the current theme. You should watch <see cref="P:JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme" /> changes and request a new image, or use <see cref="P:JetBrains.Application.Icons.ThemedIconLoader.LiveImageSource" />.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.CurrentTiImage">
            <summary>
              <para>Gets the icon image for use in WPF UI.</para>
              <para>Note that this might be either a vector image or a raster bitmap.</para>
              <para>This image only fits the current theme. You should watch <see cref="P:JetBrains.Application.Icons.IThemedIconManager.CurrentIconTheme" /> changes and request a new image, or use <see cref="P:JetBrains.Application.Icons.ThemedIconLoader.LiveImageSource" />.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconLoader.IconId">
            <summary>
            Icon identifier.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.LiveGdipBitmap">
            <summary>
            Don't use. For private use of DotCover only.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.LiveGdipBitmap96">
            <summary>
              <para>Gets the icon GDI+ raster image for use in WinForms UI.</para>
              <para>This property tracks the active theme and updates the image source upon theme change.</para>
              <para>The icon is rasterized with device-independent 96dpi for this method. In screen UI, you should better use <see cref="P:JetBrains.Application.Icons.ThemedIconLoader.CurrentGdipBitmapScreenDpi" /> for higher-resolution icons.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a property with a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.LiveGdipBitmapScreenDpi">
            <summary>
              <para>Gets the icon GDI+ raster image for use in WinForms UI.</para>
              <para>This property tracks the active theme and updates the image source upon theme change.</para>
              <para>The icon is rasterized with DPI resolution of the current display device. This is preferrable for use in screen UI.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a property with a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.LiveImageSource">
            <summary>
              <para>Gets the live icon image for use in WPF UI.</para>
              <para>Note that this might be either a vector image or a raster bitmap.</para>
              <para>This property tracks the active theme and updates the image source upon theme change.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a property with a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconLoader.LiveTiImage">
            <summary>
              <para>Gets the live icon image in the original cross-platform Themed Icon Image format.</para>
              <para>Note that this might be either a vector image or a raster bitmap.</para>
              <para>This property tracks the active theme and updates the image source upon theme change.</para>
            </summary>
            <remarks>
              <para>If the icon with such an ID is not registered with the system, an exception is logged and a property with a placeholder image of the standard 16x16 size is returned, and execution continues.</para>
            </remarks>
            <returns>The icon (of its natural size), or the standard 16x16 image if the icon is not registered.</returns>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconLoader.ThemedIconManager">
            <summary>
            Gets the icon manager which governs the presentation of this icon.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ThemedIconManager">
            <summary>
            <para>Collects and dispatches icon images throughout the application.</para>
            <para>Applies theming to icons to support different application styles.</para>
            <para>Generally, you should not be getting icons from it directly. Look for strongly-typed accessors auto-generated in the assembly which loads the icons.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ThemedIconManager.IconIdOwnersMap">
            <summary>
            Collects and caches Icon Moniker Owners. 
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManager.IconIdOwnersMap.Create(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Icons.IIconIdOwner[])">
            <summary>
            Creates an instance on an explicit iconowners set.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManager.IconIdOwnersMap.TryGetOwner(JetBrains.UI.Icons.IconId,JetBrains.Util.OnError)">
            <summary>
            Owner lookup by icon id type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ThemedIconManagerIcons">
            <summary>
            <see cref="P:JetBrains.Application.Icons.IThemedIconManager.Icons"/> type.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Icons.ThemedIconManagerIcons.Item(JetBrains.UI.Icons.IconId)">
            <summary>
            <para>Gets the icon image in vector or raster form for use with GDI+ WinForms or WPF UI.</para>
            <para>You should be operating on <see cref="T:JetBrains.UI.Icons.IconId"/> objects for as long as possible, and only render an icon to the actual theme image when you have to present it. This is the main method for getting the actual theme image for an icon, either for the current theme or changing live with the theme.</para>
            </summary>
            <remarks>
            <para>For performance reasons, getting an icon does not validate that an icon ID is valid and an image for it exists until you actually try getting some imagery.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.Icons.ThemedIconManagerLiveImages">
            <summary>
            Caches properties with live images (which follow theme changes).
            Purposes: (1) no explicit lifetiming or strong references so that this stuff could be addressed from WPF; (2) reuse of existing property instance.
            Maps: strong ref to icon id => weak ref to property. Properties should be gone when they're not needed anymore, but should be held while they're of any use. If icon IDs are transient monikers, they might get wasted before their icon goes off scope, or then recreated => should not drop the entry when IconID is not explicitly used if the property is still there.
            Properties are not bound explicitly to avoid strongreferences. Instead, they're all bulk-updated when theme changes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myMapIdToGdipBitmap96">
            <summary>
            Caches props, see class doc for details.
            Access must be protected with <see cref="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myLock" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myMapIdToGdipBitmapScreenDpi">
            <summary>
            Caches props, see class doc for details.
            Access must be protected with <see cref="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myLock" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myMapIdToImageSource">
            <summary>
            Caches props, see class doc for details.
            Access must be protected with <see cref="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myLock" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myMapIdToTiImage">
            <summary>
            Caches props, see class doc for details.
            Access must be protected with <see cref="F:JetBrains.Application.Icons.ThemedIconManagerLiveImages.myLock" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManagerLiveImages.GetLiveGdipBitmap(JetBrains.UI.Icons.IconId,JetBrains.Application.UI.Icons.RasterizationResolution)">
            <summary>
            Gets the still-existing property, or creates a new one and does not hold a strong reference to it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManagerLiveImages.GetLiveImageSource(JetBrains.UI.Icons.IconId)">
            <summary>
            Gets the still-existing property, or creates a new one and does not hold a strong reference to it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManagerLiveImages.GetLiveTiImage(JetBrains.UI.Icons.IconId)">
            <summary>
            Gets the still-existing property, or creates a new one and does not hold a strong reference to it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache">
            <summary>
            <see cref="T:JetBrains.Application.Icons.ThemedIconManager" />'s data for the current theme, caching images after they're first accessed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.myCache">
            <summary>
              <para>Cache what <see cref="T:JetBrains.Application.Icons.IIconIdOwner" /> has returned, to let it not be thinking about caching, plus some of the products.</para>
              <para>Dictionary threading: thread-safe data structure.</para>
              <para>Data threading: all dispensable; fields can be filled independently and re-calculated freely.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.TryCreateImageForIconCore(JetBrains.UI.Icons.IconId,System.Boolean,JetBrains.Util.OnError,JetBrains.Util.Icons.TiImage@,System.Windows.Media.ImageSource@)">
            <summary>
            Calls the Icon ID Owner for retrieving the image from it. Should be cached by caller if successful.
            Because some owners return Ti as native format and some Avalon, this function always returns the native format for caching, and the other format only if requested by caller. Caller should cache all that's been returned.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.AvalonImage">
            <summary>
            <c>NULL</c> until calculated; never <c>NULL</c> after that. When cache is dropped, the whole object gets forgotten, and the field does not get NULLed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.GdipBitmap96">
            <summary>
            <c>NULL</c> until calculated; never <c>NULL</c> after that. When cache is dropped, the whole object gets forgotten, and the field does not get NULLed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.GdipBitmapScreen">
            <summary>
            <c>NULL</c> until calculated; never <c>NULL</c> after that. When cache is dropped, the whole object gets forgotten, and the field does not get NULLed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.PendingExceptions">
            <summary>
            If the recent calculation were a no-error one ("TryGet"), but resulted in a value which is going to be cached, and there were errors calculating such a value => store the error until we ask for the value with an error-allowing ("Get") function, and report the error in there.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.TiImage">
            <summary>
            <c>NULL</c> until calculated; never <c>NULL</c> after that. When cache is dropped, the whole object gets forgotten, and the field does not get NULLed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.TouchStamp">
            <summary>
            Last time this icon was asked for, in <see cref="M:JetBrains.Interop.WinApi.Kernel32Dll.GetTickCount" /> units, for cleaning the cache.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.OnErrorRecordPendingExceptions">
            <summary>
            When producing an image for this icon and reporting the errors is not allowed (with TryGet- methods family which should not err), records the exceptions which might indicate failures in loading icons so that to report them later.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Icons.ThemedIconManagerPerThemeCache.CachedIconInfo.ReportExceptionIfPending(JetBrains.Util.OnError)">
            <summary>
            When asking for this icon with error reporting allowed, yield any pending messages which were recorded while asking with error reporting not allowed (with no-fail TryGet methods).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Infra.AssemblyInfoDatabase.myAssemblyNameAndIdMap">
            <remarks>For AssemblyLocation.Location</remarks>
        </member>
        <member name="F:JetBrains.Application.Infra.AssemblyInfoDatabase.myBundleAssemblyNameAndIdMap">
            <remarks>For (BundleFileEntryLocation.BundleLocation, BundleFileEntryLocation.FileEntryIndex)</remarks>
        </member>
        <member name="F:JetBrains.Application.Infra.AssemblyInfoDatabase.myTargetFrameworkIdMap">
            <remarks>For AssemblyLocation.Location</remarks>
        </member>
        <member name="F:JetBrains.Application.Infra.AssemblyInfoDatabase.myBundleTargetFrameworkIdMap">
            <remarks>For (BundleFileEntryLocation.BundleLocation, BundleFileEntryLocation.FileEntryIndex)</remarks>
        </member>
        <member name="F:JetBrains.Application.Infra.AssemblyInfoDatabase.myReferencedNamesMap">
            <remarks>For AssemblyLocation.Location</remarks>
        </member>
        <member name="F:JetBrains.Application.Infra.AssemblyInfoDatabase.myBundleReferencedNamesMap">
            <remarks>For (BundleFileEntryLocation.BundleLocation, BundleFileEntryLocation.FileEntryIndex)</remarks>
        </member>
        <member name="M:JetBrains.Application.Infra.AssemblyInfoDatabase.IsBlessedAssembly(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            blessed means that this assembly will not be deleted, changed, etc. For instance - .net framework assemblies
            </summary>
            <param name="fileSystemPath"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge">
            <summary>
            Service interface to allow AssemblyInfoDatabase communicate with installed platforms
            </summary>
        </member>
        <member name="M:JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge.GetAssemblyTargetFrameworkId(JetBrains.Metadata.Reader.API.IAssemblyLocation)">
            <summary>
            Tries to calculate target framework for the assembly location. Checks if the specified assembly
              located in platform or nuget folders with known target framework id
            </summary>
        </member>
        <member name="M:JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge.IsBlessedAssembly(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Blessed Assembly - this assembly will not be deleted, changed, etc. in the file system.
            For instance - .net framework assemblies
            </summary>
        </member>
        <member name="P:JetBrains.Application.Infra.IAssemblyInfoDatabaseBridge.Invalidated">
            <summary>
            Fires everytime platforms are going to be recalculated
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.ComImport.INativeHookHandler">
            <summary>
            This interface is implemeted in JetNativeHooks.dll.
            Do not modify it unless NativeHooks.IDL is changed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.ComImport.IWindowMessageSink">
            <summary>
            This interface is used in JetNativeHooks.dll.
            Must be synchronized with NativeHooks.IDL.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.ComImport.NativeHookHandler">
            <summary>
            Coclass for DLLs implementing the hook handler.
            </summary>
            <remarks>
            This object is exposed in JetNativeHooks.dll.
            Do not modify it unless NativeHooks.IDL is changed.
            </remarks>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.DummyWindowsHookManager">
            <summary>
            Dummy <see cref="T:JetBrains.Application.Interop.NativeHook.IWindowsHookManager"/> implementation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.HookedMessageSelector">
            <summary>
            The per-window collection of all the available messages.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedMessageSelector.All">
            <summary>
            Gets a virtual message that corresponds to all the messages received by the window specified.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedMessageSelector.Item(JetBrains.Interop.WinApi.WindowsMessages)">
            <summary>
            Gets a particluar message on a particular window.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedMessageSelector.Window">
            <summary>
            Gets the window whose messages are being accessed via this collection.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.HookedWindow">
            <summary>
            A reference to a window to be hooked.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindow.Messages">
            <summary>
            Gets the collection of messages available for this window.
            To subscribe to or unsubscribe from an event, pick the message you're interested in from this collection.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindow.Owner">
            <summary>
            The hooking manager.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindow.Handle">
            <summary>
            A handle to the current window.
            <c>Null</c> means “all the windows of the process”.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage">
            <summary>
            A particular message of a particular window that could be subscribed to.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage.Owner">
            <summary>
            Gets the owning hooker.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage.Code">
            <summary>
            Gets the WINAPI code of this message.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage.Window">
            <summary>
            Gets the window whose message this is.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage.Advise(JetBrains.Lifetimes.Lifetime,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises an event that fires after the message described by the <see cref="P:JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage.Code"/> is processed by the <see cref="P:JetBrains.Application.Interop.NativeHook.HookedWindowAndMessage.Window"/>.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="isDeferredProcessingAllowed">Not implemented yet.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.HookedWindowSelector">
            <summary>
            A selector of a window to be hooked.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindowSelector.All">
            <summary>
            Gets a virtual window that captures the messages for all the windows in the process.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindowSelector.Item(System.IntPtr)">
            <summary>
            Gets a window from the collection by its handle.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindowSelector.Item(System.Windows.Forms.IWin32Window)">
            <summary>
            Gets a window from the collection.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.HookedWindowSelector.Item(System.Void*)">
            <summary>
            Gets a window from the collection by its handle.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.HookEventArgs">
            <summary>
            Event arguments for the <see cref="T:JetBrains.Application.Interop.NativeHook.WindowsHook"/> notification.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.HookEventArgs.GetCwpRetStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.CWPRETSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.HookEventArgs.GetCwpStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.CWPSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.HookEventArgs.GetMouseHookStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.MOUSEHOOKSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.HookEventArgs.GetMsgStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.MSG"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.HookEventArgs.GetMsLlHookStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.MSLLHOOKSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.IHookedMessageSelector">
            <summary>
            The per-window selector of all the available messages.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedMessageSelector.All">
            <summary>
            Gets a virtual message that corresponds to all the messages received by the window specified.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedMessageSelector.Item(JetBrains.Interop.WinApi.WindowsMessages)">
            <summary>
            Gets a particluar message on a particular window.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.IHookedWindow">
            <summary>
            A reference to a window to be hooked.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedWindow.Messages">
            <summary>
            Gets a selector of messages available for the window.
            To subscribe to or unsubscribe from an event, pick the message you're interested in from this collection.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage">
            <summary>
            A particular message of a particular window that could be subscribed to.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage.Code">
            <summary>
            Gets the WINAPI code of the message.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage.Window">
            <summary>
            Gets the window whose message this is.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage.Advise(JetBrains.Lifetimes.Lifetime,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises an event that fires after the message described by the <see cref="P:JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage.Code"/> is processed by the <see cref="P:JetBrains.Application.Interop.NativeHook.IHookedWindowAndMessage.Window"/>.
            </summary>
            <param name="lifetime">A hook lifetime.</param>
            <param name="isDeferredProcessingAllowed">Allows to notify the handler outside the hook callback function. Executing managed .NET code over the hook function might be undesired at times.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.IHookedWindowSelector">
            <summary>
            A selector of a window to be hooked.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedWindowSelector.All">
            <summary>
            Gets a virtual window that captures the messages for all the windows in the thread.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedWindowSelector.Item(System.Windows.Forms.IWin32Window)">
            <summary>
            Gets a window.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedWindowSelector.Item(System.IntPtr)">
            <summary>
            Gets a window by its handle.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IHookedWindowSelector.Item(System.Void*)">
            <summary>
            Gets a window by its handle.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.IWindowsHookManager">
            <summary>
            Provides a set of methods to hook Windows messages in the current thread and notify the listeners of them.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.Windows">
            <summary>
            A selector of the window and message to be hooked.
            </summary>
            <remarks>Usage:
             IWindowsHookManager hookman;
             hookman.Windows.All.Messages.All.Advise(lifetime, false, action);
             hookman.Windows.All.Messages[WM_msg].Advise(lifetime, false, action);
             hookman.Windows[wnd].Messages.All.Advise(lifetime, false, action);
             hookman.Windows[wnd].Messages[WM_msg].Advise(lifetime, false, action);
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowMessage(JetBrains.Lifetimes.Lifetime,System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises specific or all Windows messages to specific or all windows in the current thread.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="window">Handle to the window, or <c>Null</c> for all the windows.</param>
            <param name="message">Windows message to listen to, or <c>0</c> for all the messages.</param>
            <param name="isDeferredProcessingAllowed">Is not implemented yet.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowClassMessage(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Interop.WinApi.WindowsMessages,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises specific or all Windows messages to all windows of a given window class in the current thread.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="className">Window class name to be advised.</param>
            <param name="message">Windows message to listen to, or <c>0</c> for all the messages.</param>
            <param name="isDeferredProcessingAllowed">Is not implemented yet.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseInputMessage(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises all keyboard and mouse messages in the current thread.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseApplicationActiveStateChange(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Advises application active state changes.
            </summary>
            <param name="lifetime">Lifetime</param>
            <returns>A boolean property that reflects the current application active state.</returns>
            <remarks>The behavior of the hook when focus goes to a window of another thread depends on implementation. 
            <para>The old managed implemetation is able to track the main thread only and reports application deactivation when the main thread loses the focus.</para>
            <para>The new unmanaged implementation monitors all threads of the process and reports deactivation when focus goes to another application.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowScreenCoordinatesChange(JetBrains.Lifetimes.Lifetime,System.IntPtr)">
            <summary>
            Advises screen coordinates changes of the specified window.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="window">Handle to the window to watch.</param>
            <returns>A property that reflects current window screen coordinates.
            <para>The hook does not control whether the window is alive or not. If the window is destroyed the property keeps its last value.</para>
            <para>When the lifetime is terminated, the property is set to an empty Rect.</para>
            </returns>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowRootParentChange(JetBrains.Lifetimes.Lifetime,System.IntPtr)">
            <summary>
            Advises root parent window changes of the specified window.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="window">Handle to the window to watch.</param>
            <returns>A property that reflects the current root parent window of the watched window.
            <para>When the window gets invalid (destroyed) or the lifetime is terminated, the property gets the <c>IntPtr.Zero</c> value.</para>
            </returns>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.StartMouseWheelRedirectingToHoveredWindow(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Fixes mouse wheel behavior so that the mouse wheel scrolls the hovered window instead of the fucused one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseForegroundIdle(JetBrains.Lifetimes.Lifetime,System.Action)">
            <summary>
            Advises that the foreground thread is about to become idle.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="action">Action to be invoked.</param>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager">
            <summary>
            Hooks to all the windows messages in the main thread and notifies the listeners of them.
            </summary>
            <remarks>
            We have to listen to both WH_CALLWNDPROCRET and WH_GETMESSAGE hooks because they return nonintersecting subsets of messages.
            </remarks>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.myCwpRetHook">
            <summary>
            The object that winds up the WH_CALLWNDPROCRET Windows hook.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.myGetMsgHook">
            <summary>
            The object that winds up the WH_GETMESSAGE Windows hook.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.Dispatcher">
            <summary>
            Identifies the owning thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.myHookEntries">
            <summary>
            The quick-lookup map of windows &amp; messages to handlers.
            <c>Null</c> window handle and <c>0</c> message are wildcards.
            Maps: HWND -> (MSG -> (entry)).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.myClassHandlers">
            <summary>
            Maps: Window class -> Message -> Handler
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.myForegroundIdleHook">
            <summary>
            The object that winds up the WH_FOREGROUNDIDLE Windows hook.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.RemoveAll(System.Object)">
            <summary>
            Removes all the event subscriptions by the <paramref name="owner"/> object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.AdviseWindowMessageInternal(JetBrains.Lifetimes.Lifetime,System.Void*,JetBrains.Interop.WinApi.WindowsMessages,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Internal implemetation of <see cref="M:JetBrains.Application.Interop.NativeHook.IWindowsHookManager.AdviseWindowMessage(JetBrains.Lifetimes.Lifetime,System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})"/> method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.AddRemoveMessageHandler(System.Void*,JetBrains.Interop.WinApi.WindowsMessages,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs},System.Delegate,System.Boolean,JetBrains.Collections.Viewable.AddRemove)">
            <summary>
            Implements adding/removing the message handler to the map, possibly, with its children.
            </summary>
            <param name="window">Handle to the window, or <c>Null</c> for all the windows.</param>
            <param name="message">Message to listen to, or <c>0</c> for all the messages.</param>
            <param name="action">The handler to be invoked.</param>
            <param name="handlerOriginal">The external handler that will be used to unsubscribe from this event.</param>
            <param name="includeparents">Whether to listen to parent windows also, illegal if <paramref name="window"/> is <c>Null</c>.</param>
            <param name="addremove">Whether to add or remove.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.AddRemoveHookEntry(JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry,JetBrains.Collections.Viewable.AddRemove)">
            <summary>
            The raw adder-remover of the <paramref name="entry"/> to the <see cref="F:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.myHookEntries"/> map.
            </summary>
            <param name="entry">The entry to add/remove, specifies all the keys of the map and the value.</param>
            <param name="addremove">Whether to add or remove.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.AddRemoveClassMessageHandler(System.String,JetBrains.Interop.WinApi.WindowsMessages,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs},JetBrains.Collections.Viewable.AddRemove)">
            <summary>
            Adds/removes window class message handlers to/from map.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.EnumAllEntries">
            <summary>
            Gets the all-entries enumerator.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.HookUnhook">
            <summary>
            Either hooks or unhooks the underlying WinAPI hook, depending on whether there are any clients in the map.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.HookUnhookForegroundIdle">
            <summary>
            Either hooks or unhooks the WH_FOREGROUNDIDLE hook, depending on whether there are any clients.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.OnHookedMessage(System.Object,JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs)">
            <summary>
            The hook has caught some message, call the listeners.
            Should return <c>True</c> so that the chained callers would succeed in processing the message.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.RemoveAll">
            <summary>
            Removes all the hooks.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry">
            <summary>
            An entrty in the hooks list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.#ctor(System.IntPtr,System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs},System.Delegate)">
            <summary>
            Inits all the fields of the instance, see corresponding attributes for comments.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.Handler">
            <summary>
            Handler to be invoked on capture.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.Message">
            <summary>
            Code of the message to capture.
            <c>0</c> is a wildcard.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.OriginalHandler">
            <summary>
            Gets the handler that the external user passed in when subscribing to the event.
            Needed to look up all the events from a particular user in case it bulk-unsubscribes.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.OriginalTarget">
            <summary>
            The original window, as specified by the client when subscribing, a child of <see cref="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.Target"/>. Not listened by this hook entry.
            It's rather a mark that the hook entry has been added in order to listen all the parents of the <see cref="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.OriginalTarget"/> window.
            Needed to remove all of such entries when unsubscribing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.Target">
            <summary>
            The target window that should be spied in response to this hook entry.
            <c>Null</c> is a wildcard.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.WindowsMessageHookEntry.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.JetBrains#Application#Interop#NativeHook#IWindowsHookManager#Windows">
            <summary>
            A selector of the window and message to be hooked.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.JetBrains#Application#Interop#NativeHook#IWindowsHookManager#AdviseWindowMessage(JetBrains.Lifetimes.Lifetime,System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            NOTE: isDeferredProcessingAllowed ignored by this implementation
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.JetBrains#Application#Interop#NativeHook#IWindowsHookManager#AdviseWindowClassMessage(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Interop.WinApi.WindowsMessages,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            NOTE: isDeferredProcessingAllowed ignored by this implementation
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.ManagedWindowsHookManager.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.NativeWindowsHookManager">
            <summary>
            Wraps <see cref="T:JetBrains.Application.Interop.NativeHook.ComImport.INativeHookHandler"/>'s direct hooking features into the <see cref="T:JetBrains.Application.Interop.NativeHook.IWindowsHookManager"/> interface.
            </summary>
            
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.NativeWindowsHookManager.myNativeHooks">
            <summary>
            Native Windows hook implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.NativeWindowsHookManager.Dispatcher">
            <summary>
            Identifies the owning thread.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.NativeWindowsHookManager.JetBrains#Application#Interop#NativeHook#IWindowsHookManager#Windows">
            <summary>
            A selector of the window and message to be hooked.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.WindowsHook">
            <summary>
            Implements hooking to local and global windows messages by the means of <see cref="M:JetBrains.Interop.WinApi.User32Dll.SetWindowsHookExW(System.Int32,JetBrains.Interop.WinApi.Functions.HOOKPROC,System.Void*,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsHook.myHookEventHandler">
            <summary>
            External handler for the hook events.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsHook.myHookHandle">
            <summary>
            Handle to the hook, assigned by <see cref="M:JetBrains.Interop.WinApi.User32Dll.SetWindowsHookExW(System.Int32,JetBrains.Interop.WinApi.Functions.HOOKPROC,System.Void*,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsHook.myHookType">
            <summary>
            Hook code.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHook.#ctor(JetBrains.Interop.WinApi.Constants.HookType,JetBrains.Application.Interop.NativeHook.WindowsHook.HookEventHandler)">
            <summary>
            Hooks the given event-handler to the messages specified by the code.
            </summary>
            <param name="code">Code for the messages to hook.</param>
            <param name="handler">External event handler.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHook.#ctor(JetBrains.Interop.WinApi.Constants.HookType,JetBrains.Application.Interop.NativeHook.WindowsHook.HookEventHandler,JetBrains.Interop.WinApi.Functions.HOOKPROC)">
            <summary>
            An internal constructor.
            </summary>
            <param name="code">Code for the messages to hook.</param>
            <param name="handler">External event handler, <c>Null</c> for none.</param>
            <param name="callback">Internal WinAPI hook handler, <c>Null</c> to use the stock one that notifies the <paramref name="handler"/>.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHook.IsGlobalHook(JetBrains.Interop.WinApi.Constants.HookType)">
            <summary>
            Determines whether the hook is a global scope only hook and needs a HINSTANCE specified etc when hooking.
            All the other hooks could be set either as a global or a per-thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHook.Release">
            <summary>
            Uninstall the hook.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.WindowsHook.HookEventHandler">
            <summary>
            event-like delegate for the external hook event handlers.
            </summary>
            <returns>Whether to call next handlers in the chain (<c>True</c>), or drop the request at this point (<c>False</c>).</returns>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.WindowsHookManager">
            <summary>
            Manages the windows hooks. Creates a native implementation wherever possible, or substitutes with a managed one when native not available.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsHookManager.NativeHooksDllName">
            <summary>
            Native Windows hook DLL name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsHookManager.myInstance">
            <summary>
            Instance (could be native or managed).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.WindowsHookManager.Instance">
            <summary>
            Gets the current instance of a WindowsHookManager.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.WindowsHookManager.Windows">
            <summary>
            A selector of the window and message to be hooked.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.AdviseWindowMessage(JetBrains.Lifetimes.Lifetime,System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises specific or all Windows messages to specific or all windows in the current thread.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="window">Handle to the window, or <c>Null</c> for all the windows.</param>
            <param name="message">Windows message to listen to, or <c>0</c> for all the messages.</param>
            <param name="isDeferredProcessingAllowed">Is not implemented yet.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.AdviseWindowClassMessage(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Interop.WinApi.WindowsMessages,System.Boolean,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises specific or all Windows messages to all windows of a given window class in the current thread.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="className">Window class name to be advised.</param>
            <param name="message">Windows message to listen to, or <c>0</c> for all the messages.</param>
            <param name="isDeferredProcessingAllowed">Is not implemented yet.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.AdviseInputMessage(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs})">
            <summary>
            Advises all keyboard and mouse messages in the current thread.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="action">Message handler to be invoked.</param>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.AdviseApplicationActiveStateChange(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Advises application active state changes.
            </summary>
            <param name="lifetime">Lifetime</param>
            <returns>A boolean property that reflects the current application active state.</returns>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.AdviseWindowScreenCoordinatesChange(JetBrains.Lifetimes.Lifetime,System.IntPtr)">
            <summary>
            Advises screen coordinates changes of the specified window.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="window">Handle to the window to watch.</param>
            <returns>A property that reflects current window screen coordinates.</returns>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.AdviseWindowRootParentChange(JetBrains.Lifetimes.Lifetime,System.IntPtr)">
            <summary>
            Advises root parent window changes of the specified window.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="window">Handle to the window to watch.</param>
            <returns>A property that reflects the current root parent window of the watched window.</returns>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.StartMouseWheelRedirectingToHoveredWindow(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Fixes mouse wheel behavior so that the mouse wheel scrolls the hovered window instead of the fucused one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Interop.NativeHook.WindowsHookManager.AdviseForegroundIdle(JetBrains.Lifetimes.Lifetime,System.Action)">
            <summary>
            Advises that the foreground thread is about to become idle.
            </summary>
            <param name="lifetime">Lifetime.</param>
            <param name="action">Event handler to be invoked.</param>
        </member>
        <member name="T:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs">
            <summary>
            Arguments for the <see cref="T:JetBrains.Application.Interop.NativeHook.IWindowsHookManager"/>-emitted messages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.WindowsHook">
            <summary>
            Gets the windows message hooks manager you're subscribed to.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.HWnd">
            <summary>
            Gets the handle to the window that is receiving the message.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.WindowHandle">
            <summary>
            Gets the safe handle to the window that is receiving the message.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.Message">
            <summary>
            Gets the message ID.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.WParam">
            <summary>
            Gets the "WORD" parameter.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.LParam">
            <summary>
            Gets the "LONG" parameter.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.LResult">
            <summary>
            Gets or sets the message result.
            Applicable to the WH_CALLWNDPROCRET hook only. For other hook types always IntPtr.Zero.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Interop.NativeHook.WindowsMessageEventArgs.Location">
            <summary>
            The cursor position, in screen coordinates, when the message was posted.
            WH_GETMESSAGE hook returns this value, for other hook types we get it using GetCursorInfo().
            </summary>
        </member>
        <member name="T:JetBrains.Application.JetBrainsShared.JetBrainsSharedStorage">
            <summary>
            Provides file system and registry access to data shared between JetBrains products.
            Registry root is HKCU\Software\JetBrains\Platform section. <br />
            File system root %appdata%\Roaming\JetBrains
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.ConsentOptions.IConsentOption">
            <summary>
            An option a user may accept or decline
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOption.consentId">
            <summary>
            Id of the option. Used in exchange with server 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOption.version">
            <summary>
            Version of the option. Its text etc. may vary in time
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOption.printableName">
            <summary>
            Presentable consent option title
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOption.text">
            <summary>
            Text the users accepts or declines. May include html a tags. 
            I.e. <a href="https://www.jetbrains.com/company/privacy.html">JetBrains Privacy Policy</a>  
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOption.accepted">
            <summary>
            Default consent state or the last known state if AcceptedTime is true
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOption.acceptanceTime">
            <summary>
            Milliseconds since 1/1/1970 when user most recent time made his mind 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOption.deleted">
            <summary>
            Whether the option is removed on server
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.ConsentOptions.IConsentOptions">
            <summary>
            All known consent options and their opertaions
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOptions.ConsentOptions">
            <summary>
            All not removed constent options. Value may be null until initialized
            </summary>     
        </member>
        <member name="M:JetBrains.Application.License2.ConsentOptions.IConsentOptions.GetConsensetOptionAcceptedState(JetBrains.Application.License2.ConsentOptions.IConsentOption)">
            <summary>
            Checks whether consent option accepted
            </summary>
            <param name="consentOption">The option in question</param>
            <returns>Consent option <see cref="T:JetBrains.Application.License2.ConsentOptions.AcceptedState"/></returns>
        </member>
        <member name="M:JetBrains.Application.License2.ConsentOptions.IConsentOptions.SetConsentOptions(System.Collections.Generic.IEnumerable{JetBrains.Util.Pair{JetBrains.Application.License2.ConsentOptions.IConsentOption,System.Boolean}},JetBrains.Application.License2.ConsentOptions.ConsetOptionsChangeSource)">
            <summary>
            Sets consent option values according to user's choice
            </summary>
            <param name="consentOptionValues">Pairs of consensent options with their accepted state</param>
            <param name="changeSource">Server, user or API</param>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOptions.ConsentOptionsNeedToBeShownToUser">
            <summary>
            Fired when something changed in consent options so the user needs make his mind about them
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.ConsentOptions.IConsentOptions.OnConsentOptionsRecieved(System.String)">
            <summary>
            Processes consent option changes received from server
            </summary>
            <param name="json">Response string</param>
        </member>
        <member name="P:JetBrains.Application.License2.ConsentOptions.IConsentOptions.ConsentOptionValuesChanged">
            <summary>
            Fired when user accepted or rejected any options. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.Evaluation.EvaluationLicenseViewSubmodel.TrialMode">
            <summary>
            For testing purposes. Normally it is regulated by <see cref="F:JetBrains.Application.BuildScript.GlobalDefines.IsEap"/>
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.Evaluation.EvaluationTracker">
            <summary>
            Use <see cref="P:JetBrains.Application.License2.Evaluation.EvaluationTracker.EntityUsedSignal"/> to report license entity usage on current date. 
            The signal is safe to be called numerous time during the same date.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.Evaluation.IEvaluationInfo.SetUsed(System.Boolean)">
            <summary>
            Sets today as last used date and unpdates <see cref="P:JetBrains.Application.License2.Evaluation.IEvaluationInfo.ActuallyUsedDays"/>. Returns true if anything changed. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.IDocumentsThatRequireUserConsent.DocumentsNeedToBeAccepted">
            <summary>
            Document that need to be accepted in order to continue work with the product
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.IDocumentsThatRequireUserConsent.GetAllDocuments">
            <summary>
            Enumerates all known documents
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.IDocumentsThatRequireUserConsent.GetDocumentState(JetBrains.Application.License2.IDocumentThatRequiresUserConsent)">
            <summary>
            Returns document state
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.IDocumentsThatRequireUserConsent.SetDocumentState(JetBrains.Application.License2.IDocumentThatRequiresUserConsent,JetBrains.Application.License2.DocumentState)">
            <summary>
            Sets document state. If <see cref="!:state"/> is not <see cref="F:JetBrains.Application.License2.DocumentState.ACCEPTED"/> the <see cref="!:document"/> will appear in <see cref="P:JetBrains.Application.License2.IDocumentsThatRequireUserConsent.DocumentsNeedToBeAccepted"/>
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.IDocumentThatRequiresUserConsent">
            <summary>
            The dicument that requires user consent to allow the product running
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.IDocumentThatRequiresUserConsent.PresentableName">
            <summary>
            Display name of the document
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.IDocumentThatRequiresUserConsent.Version">
            <summary>
            Version of the document
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.IDocumentThatRequiresUserConsent.HtmlText">
            <summary>
            Document text in HTML
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.IDocumentThatRequiresUserConsent.TechnicalName">
            <summary>
            Name passed to <see cref="T:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest"/>
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.IDocumentThatRequiresUserConsentProvider">
            <summary>
            Provider of the documents that require user consent. Environment or Shell Component.  
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseDialogShowArgs.ReasonToShow">
            <summary>
            Why dialog will be shown
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseDialogShowArgs.Model">
            <summary>
            Licensing view model
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseDialogShowArgs.DocumentsThatRequireUserConsent">
            <summary>
            Documents that need to be accepted. I.e. privacy policy, EULA etc.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseDialogShowArgs.ConsentOptions">
            <summary>
            Consent options
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicense2CheckComponent.AllowedEntities">
            <summary>
            Collection of entities licensed at the moment
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.ILicense2CheckComponent.ShowLicenseDialog(System.String)">
            <summary>
            Shows license dialog using handlers registered with <see cref="M:JetBrains.Application.License2.License2CheckComponent.RegisterShowLicenseDialogHandler(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Application.License2.LicenseDialogShowArgs,System.Boolean},System.Func{JetBrains.Application.License2.LicenseViewModel,System.Boolean})"/>
            </summary>
            <param name="reason">why the dialog is shown</param>
        </member>
        <member name="M:JetBrains.Application.License2.ILicense2CheckComponent.RegisterShowLicenseDialogHandler(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Application.License2.LicenseDialogShowArgs,System.Boolean},System.Func{JetBrains.Application.License2.LicenseViewModel,System.Boolean})">
            <summary>
            Register handler that will be called to show license dialog. 
            Normal reasons to show:
              1. when shell is started and there're changes in all/ allowed entities list comparing to previous product start
              2. allowed entities list is about to change when license goes off and similar
              3. user's request to show license information
            </summary>
            <param name="lifetime">Handler lifetime</param>
            <param name="handler">Callback to show dialog</param>
            <param name="forceShowDialog">Callback to decide whether license dialog is to be shown in spite of there is no change to the previous start</param>
        </member>
        <member name="P:JetBrains.Application.License2.ILicense2CheckComponent.LicenseViewModelSaved">
            <summary>
            Fired after license view model is persisted. 
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.ILicense2CheckComponent.WithLicenseViewModel(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Application.License2.LicenseViewModel})">
            <summary>
            Access current view model. Normally, the action is called synchronously, but the behaviour may change
            </summary>
            <param name="lifetime">Lifetime while the action still makes sense to execute</param>
            <param name="action">Action to be executed over the <see cref="T:JetBrains.Application.License2.LicenseViewModel"/></param>
        </member>
        <member name="M:JetBrains.Application.License2.ILicense2CheckComponent.GetValidLicensePresentation">
            <summary>
            Returns information about licensed entities
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.ILicense2CheckComponent.GetAllowedEntitiesLicenseCheckInfo">
            <summary>
            Returns license check info for all licensed entities.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseData.IsFirstRun">
            <summary>
            True if there's npot previous data
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseData.LastRunAllEntities">
            <summary>
            Environment specific: List of entities subject to license check last time the product is started in given environment.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseData.LastRunEnabledEntities">
            <summary>
            Environment specific: List of entities that passed license check last time it was performed in given environment
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseCheckResult.AllowedEntities">
            <summary>
            Collection of entities the check for which is successful
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseCheckResult.ResultChanged">
            <summary>
            Fired when result is changed, but AllowedEntities may remain intact. 
            I.e. one more checker allowed entity that is allowed already
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.ILicenseCheckResult.TryGetInfo(JetBrains.Application.License2.ILicensedEntity)">
            <summary>
            License check info if applicable
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.ILicensedEntity">
            <summary>
            ILicensedEntity is an entity that represents a product if we use former terminology. The entity describes all the way it can be licensed and the zones it enables if properly licensed.
            If the product is free its <see cref="T:JetBrains.Application.License2.ILicensedEntity"/> should have the following property values 
            * <see cref="P:JetBrains.Application.License2.ILicensedEntity.Evaluation"/> is null 
            * <see cref="P:JetBrains.Application.License2.ILicensedEntity.UserLicense"/> is null 
            * <see cref="P:JetBrains.Application.License2.ILicensedEntity.LicenseServer"/> is empty
            * <see cref="P:JetBrains.Application.License2.ILicensedEntity.JetBrainsAccount"/> is empty
            If license to ReSharper Ultimate suits to the product make sure:
            * <see cref="P:JetBrains.Application.License2.ILicensedEntity.UserLicense"/>.<see cref="P:JetBrains.Application.License2.ISupportsUserLicense.UserLicenseCheckers"/> contains value <see cref="M:JetBrains.Application.License2.UserLicenseChecker.CreateForReSharperUltimate"/>
            * <see cref="P:JetBrains.Application.License2.ILicensedEntity.LicenseServer"/> contains value <see cref="M:JetBrains.Application.License2.LicenseServer.SupportsLicenseServer.CreateForReSharperUltimate"/>
            * <see cref="P:JetBrains.Application.License2.ILicensedEntity.JetBrainsAccount"/> contains value <see cref="M:JetBrains.Application.License2.SupportsJetBrainsAccount.CreateForReSharperUltimate"/>
            Zones marked with <see cref="T:JetBrains.Application.Environment.LicenseCheck.ZoneLicenseAttribute"/> must be allowed by any of <see cref="T:JetBrains.Application.License2.ILicensedEntity"/> running.
            The zones allowed are determined by <see cref="P:JetBrains.Application.Environment.LicenseCheck.IZoneLicenseChecker.Signatures"/> property. <see cref="M:JetBrains.Application.Environment.LicenseCheck.ZoneSignatureValidator.Encode(System.String,System.String,System.String)"/> or <see cref="M:JetBrains.Application.Environment.LicenseCheck.ZoneSignatureValidator.Encode``1(JetBrains.Application.Settings.ISettingsStore,System.Type[])"/> can be used to generate signature.
            If ReSharper is run in internal mode one may use action ReSharper | Internal | Zones | Copy Zone Signature to Clipboard as follows:
            * add zones public keys to <see cref="T:JetBrains.Application.Environment.LicenseCheck.ZoneLicenseCheckSettings"/>. Sample settings file may be found at \\msdc\resharper\Licensing\zoneKeys.DotSettings
            * in the .ctor create local variable of desired zone type (i.e. IUnitTestingZone z;)
            * put caret over zone type and execute action. The signature will be copied to clipboard. 
            Mark your licensed entity with <see cref="T:JetBrains.Application.License2.LicensedEntityIconsAttribute"/> to provide icons
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicensedEntity.TechnicalName">
            <summary>
            Name of the entity used to store entity-related data. Should not be changed between product versions unless product differs
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicensedEntity.PresentableName">
            <summary>
            Name of the entity used in presentations
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicensedEntity.EntityVersion">
            <summary>
            Version of the entity. Since the entity more or less corresponds the product it is the product version
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicensedEntity.EntityMarketingVersionString">
            <summary>
            Marketing Version of the entity. Corresponds to marketing version of a product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicensedEntity.ProductCode">
            <summary>
            Product code corresponding to the products consisting of the only license entity  
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.ISupportsEvaluation">
            <summary>
            Implement the interface by the <see cref="T:JetBrains.Application.License2.ILicensedEntity"/> if the entity supports free evaluation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsEvaluation.ProductGuid">
            <summary>
            Guid (with braces), that is used to store Date marker
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsEvaluation.FreeTrialPeriod">
            <summary>
            Number of days, free trial period lasts
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsEvaluation.FeedbackRequestPeriod">
            <summary>
            Number of free trial days, after which feedback is requested.
            Negative value means feedback is never requested.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsEvaluation.LeftDaysNotification">
            <summary>
            Identifies, when to start informing user that, his free trial
            period ends up 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsEvaluation.Mode">
            <summary>
            Identifies the way the entity considered used. 
            If the value is <see cref="F:JetBrains.Application.License2.EvaluationUsageMode.IMPLICITE_USAGE"/> every day corresponding <see cref="T:JetBrains.Application.License2.ILicensedEntity"/> is running will be count automatically.
            If <see cref="F:JetBrains.Application.License2.EvaluationUsageMode.EXPLICITE_USAGE"/> is used fire <see cref="P:JetBrains.Application.License2.Evaluation.EvaluationTracker.EntityUsedSignal"/> every time the entity is used. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsEvaluation.OptInSubscriptions">
            <summary>
            Opt-in subscriptions ids and their text to pass to <see cref="T:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest"/>
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.EvaluationUsageMode.IMPLICITE_USAGE">
            <summary>
            Every time the licensed entity is enabled it is considered used
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.EvaluationUsageMode.IMPLICITE_USAGE_EVERY_CALENDAR_DAY">
            <summary>
            Every time the licensed entity is enabled it is considered used for each day since last check 
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.EvaluationUsageMode.EXPLICITE_USAGE">
            <summary>
            The licensed entity is considered used if and only if the <see cref="P:JetBrains.Application.License2.Evaluation.EvaluationTracker.EntityUsedSignal"/> signal is fired. 
            Normally, the signal is fired from corresponsing actions
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsLicensesWithSubscription.ProductBuiltDateUsedForSubscriptionCheck">
            <summary>
            When checking subscription license we need to verify product creation time against subscription period. 
            If we just use <code>IApplicationDescriptor.BuiltOn</code> there might be situation when version X.0 is eligible to use because issued within subscription period,
            but bugfix X.0.1 is issued when the period is over. To handle this the property is set to the date of X.0 release.
            Normally, TeamCity build parameter TC_DateTimeForSubscriptionCheck is used (<see cref="F:JetBrains.Application.Defines.DateTimeForSubscriptionCheck"/>).
            If subscription is not available one may return <see cref="F:System.DateTime.MaxValue"/>
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.ISupportsUserLicense">
            <summary>
            Implement the interface by the <see cref="T:JetBrains.Application.License2.ILicensedEntity"/> if the entity supports user licenses if form of user name/ license key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.ISupportsUserLicense.GetLicenseAgreement(JetBrains.Application.License.LicenseType)">
            <summary>
            License agreement in rich text. NULL if no license agreement is necessary to show when license is entered
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsUserLicense.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.ISupportsLicenseServer">
            <summary>
            Implement the interface by the <see cref="T:JetBrains.Application.License2.ILicensedEntity"/> if the entity supports obtaining tickets from locally installed license server.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsLicenseServer.ProductFamily">
            <summary>
            JetBrains license server supports ProductFamily as guid without braces !!!
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsLicenseServer.LicenseServerVersion">
            <summary>
            Version to request from license server. Normally it equals to product major version * 1000  (<see cref="F:JetBrains.Application.Defines.NumLicenseAppVersion"/>)
            If the product supports subscription only use version equal to buildDate.Year*10000 + buildDate.Month*100 + buildDate.Day.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsLicenseServer.LicenseServerEdition">
            <summary>
            Edition to request from license server. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsLicenseServer.SendBuildDateAsVersionToOldServers">
            <summary>
            Return true if your product had subscription previously. In the case <see cref="P:JetBrains.Application.License2.ISupportsLicensesWithSubscription.ProductBuiltDateUsedForSubscriptionCheck"/> will be used to issue ticket 
            in case of old license server.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsLicenseServer.UrlToShowWhenLicenseServerIsBlacklisted">
            <summary>
            Url to show the user who uses pirated blacklisted license server.
            See MKT-6044
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsJetBrainsAccount.ProductName">
            <summary>
            Product name used for presentation
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsJetBrainsAccount.ProductCode">
            <summary>
            Product code to be requested from JetBrains license server
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsJetBrainsAccount.ProductEdition">
            <summary>
            Product edition to be requested from JetBrains license server
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ISupportsJetBrainsAccount.ProductVersion">
            <summary>
            Version to request from JetBrains license server. Normally it equals to product major version * 1000  (<see cref="F:JetBrains.Application.Defines.NumLicenseAppVersion"/>)
            If the product supports subscription only use version equal to buildDate.Year*10000 + buildDate.Month*100 + buildDate.Day.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseViewSubmodel.IsOn">
            <summary>
            Used to turn on/ off
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseViewSubmodel.AllModel">
            <summary>
            The compound model. Set when it is initialized
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.ILicenseViewSubmodel.LicenseData">
            <summary>
            License data to store
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.UserLicenseChecker.CreateFor(System.String,System.String,System.Int32,System.DateTime,System.Func{JetBrains.Application.License.LicenseData,JetBrains.Application.License.LicenseCheckResult})">
            <summary>
            Default checker by product version and subscription
            </summary>
            <param name="publicKey">Product's public key</param>
            <param name="version">Product version in the form of (major*1000+minor*100). Normally, just major is used. Minor is used if and only if it is payed, which is not expected to happen under normal circumstances.</param>
            <param name="dateTimeForSubscriptionCheck">Date of the release build which is used for subscription check. Use <see cref="F:System.DateTime.MaxValue"/> if no subscription available.</param>
            <param name="additionalCheck">Additional check if necessary.</param>
            <returns>Default checker by product version and subscription</returns>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.IsPrimary">
            <summary>
            Helper property used to distinguish current data from old
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.Account">
            <summary>
            JetBrains account used last time
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.UserId">
            <summary>
            User id corresponding to the account
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.Details">
            <summary>
            Account info if exists (Name, Last Name etc)
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.UsedAssetIds">
            <summary>
            Asset ids used 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.EncodedAssetDatas">
            <summary>
            Encoded data about all the assets available to the account
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.NextCheckTime">
            <summary>
            Time of the next check
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.JBAccount.IJBAccountInfo.ValidationDeadline">
            <summary>
            Time until which assets must be validate
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.JBAccount.JBAccountInfo.Sqeeze(JetBrains.Application.License2.NewLicenses.UserLicenseService)">
            <summary>
            Removes corrupt/ duplicated asset data
            </summary>
            <param name="userLicenseService"></param>
            <returns>Squeezed data or null if nothing to squeeze</returns>
        </member>
        <member name="T:JetBrains.Application.License2.JBAccount.JBAccountInfoPersister">
            <summary>
            Loads JetBrains account access information from registry corresponding to <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> 
            (HKEY_CURRENT_USER\Software\JetBrains\Shared\vAny\JBAccount)
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.JBAccount.JBAccountSettingsPersister">
            <summary>
            Loads JetBrains account access information from registry corresponding to <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> 
            (HKEY_CURRENT_USER\Software\JetBrains\Shared\vAny\JBAccountSettings)
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.JBAccount.JBAcountLicenseViewSubmodel.LogIn(System.String,System.String,System.String)">
            <summary>
            Logging in with user name and password Or userId instead
            </summary>
            <param name="jbAccount">JetBrains account name</param>
            <param name="password">password</param>
            <param name="userId">userId. Used for testing purposes</param>
        </member>
        <member name="M:JetBrains.Application.License2.JBAccount.JBAcountLicenseViewSubmodel.TryValidateAssetData(JetBrains.Application.License2.LicenseServerSupport.JBAccount.IAssetData,System.Collections.Generic.IDictionary{JetBrains.Util.Pair{System.String,JetBrains.Application.License2.ISupportsJetBrainsAccount},JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseResponse})">
            <summary>
            Validates asset data. 
            </summary>
            <param name="data">AssetData to validate</param>
            <returns>True if validation should continue. False on network error.</returns>
        </member>
        <member name="M:JetBrains.Application.License2.JBAccount.JBAcountLicenseViewSubmodel.AdjustNextCheckTime(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Next check time is last time returned from server, but if no data returned use random time between 1 and 2 hours
            </summary>
            <param name="nextCheckTimes">Next check times returned from server</param>
            <returns>Next check time adjusted</returns>
        </member>
        <member name="T:JetBrains.Application.License2.JBAccount.JetBrainsSharedJBAccrountInfo">
            <summary>
            Login name and user id for JetBrains account access shared with Idea/ Toolbox
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.JBAccount.JetBrainsSharedJBAccrountInfoPersister">
            <summary>
            Loads JetBrains account access information shared with Idea/ Toolbox
            (HKEY_CURRENT_USER/Software/JavaSoft/Prefs/JetBrains.JetProfile.UserId)
            (HKEY_CURRENT_USER/Software/JavaSoft/Prefs/JetBrains.JetProfile.UserLogin)
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.License2CheckComponent.ShowLicenseDialog(System.String)">
            <summary>
            Shows license dialog using handlers registered with <see cref="M:JetBrains.Application.License2.License2CheckComponent.RegisterShowLicenseDialogHandler(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Application.License2.LicenseDialogShowArgs,System.Boolean},System.Func{JetBrains.Application.License2.LicenseViewModel,System.Boolean})"/>
            </summary>
            <param name="reason">why the dialog is shown</param>
        </member>
        <member name="M:JetBrains.Application.License2.LicenseCheckInfoEx.TryApplyWarning``1(JetBrains.Application.License2.LicenseCheckInfo{``0},System.String)">
            <summary>
            Modifies successful license check info with warning received from license server 
            </summary>
            <param name="info">License check info to update</param>
            <param name="warning">Warning message or null</param>
            <typeparam name="T">License check info type</typeparam>
            <returns>Updated license check info or the one passed</returns>
        </member>
        <member name="M:JetBrains.Application.License2.LicenseCheckInfoEx.TryApplyError``1(JetBrains.Application.License2.LicenseCheckInfo{``0},System.String)">
            <summary>
            Modifies not failed license check info with error received from license server
            </summary>
            <param name="info">License check info to update</param>
            <param name="error">Error message or null</param>
            <typeparam name="T">License check info type</typeparam>
            <returns>Updated license check info or the one passed</returns>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.AbstractObtainTicketRequest`1.Version">
            <summary>
            Old license server version. In case of subscription must be year*10000 + month*100 + day.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.AbstractObtainTicketRequest`1.VersionNumber">
            <summary>
            New license server data. VersionNumber = major * 1000
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.AbstractObtainTicketRequest`1.BuildDate">
            <summary>
            New license server data. Release date for subscription check in the form of year*10000 + month*100 + day
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.LicenseServerSupport.AbstractObtainTicketRequest`1.#ctor(System.Int32,System.DateTime,System.Boolean,System.String)">
            <summary>
            Helper constructor.
            </summary>
            <param name="version">Product version to send (Normally, major * 1000)</param>
            <param name="buildDate">Release build date to check subscription (y*10000 + m*100 + d)</param>
            <param name="sendBuildDateAsVersionToOldServers">Old license server compatibility. True if there was a subscription previously)</param>
            <param name="authorizationHeader">Optional string to be added to authorization header</param>
        </member>
        <member name="M:JetBrains.Application.License2.LicenseServerSupport.AbstractObtainTicketRequest`1.#ctor(System.Int64,System.String,System.String,System.String,System.Int32,System.DateTime,System.Boolean,System.String)">
            <summary>
            Helper constructor.
            </summary>
            <param name="salt"></param>
            <param name="machineId"></param>
            <param name="hostName"></param>
            <param name="userName"></param>
            <param name="version">Product version to send (Normally, major * 1000)</param>
            <param name="buildDate">Release build date to check subscription (y*10000 + m*100 + d)</param>
            <param name="sendBuildDateAsVersionToOldServers">Old license server compatibility. True if there was a subscription previously)</param>
            <param name="authorizationHeader">Optional string to be added to authorization header</param>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.ResponseCode.SERVER_INTERNAL_ERROR">
            <summary>
            Server error. Should be treated as <see cref="F:JetBrains.Application.License2.LicenseServerSupport.ResponseCode.NETWORK_ERROR"/> plus maybe extra notifications
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.AbstractResponse.Action">
            <summary>
            Action requested to execute by server (see RSRP-460838)
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataRequest.ProductCode">
            <summary>
            Product code is required by API but never used
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataRequest.LicenseID">
            <summary>
            Comma-separated LicenseIDs of enetered licenses
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataRequest.Uid">
            <summary>
            JBA userId if in JBA mode
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataRequest.CrlVersion">
            <summary>
            Last known CRL version
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.GenericDataRequest.BlVersion">
            <summary>
            Last known black list version
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.ProductCode">
            <summary>
            Product code is required by API but never used
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.FileName">
            <summary>
            Name of the document to ask
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.ExistingVersion">
            <summary>
            Last known version
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.LicenseID">
            <summary>
            Comma-separated LicenseIDs of enetered licenses
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.Uid">
            <summary>
            JBA userId if in JBA mode
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.ConsentOptions">
            <summary>
            Consent options in the format of: consentId1:version1:accepted1;consentId2:version2:accepted2;...
              consentId - consent option id (e.g. mkt.newsletter.webinar)
              version - current consent version (e.g. 1.5)
              accepted - parameter showing if a user has given a certain consent (0 - true, 1 - false)
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.BuildDate">
            <summary>
            Product build date in the format of YYYYMMdd
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementRequest.Eap">
            <summary>
            Whether it is EAP build or RTM
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementResponse.DocumentHtml">
            <summary>
            HTML text of the document requested. Null or empty when no new document available
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementResponse.FileName">
            <summary>
            New document name. I.e. privacyPolicy -> eula
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.Agreements.ObtainAgreementResponse.ConsentOptions">
            <summary>
            Consent option changes if any.  
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.ClientUtil.UserAgent">
            <summary>
            UserAgent to pass to <see cref="T:System.Net.HttpWebRequest"/> to identify us later
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.IntranetLicenseServerResponse.AuthorizationUrl">
            <summary>
            When <see cref="T:JetBrains.Application.License2.LicenseServerSupport.ResponseCode"/> is <see cref="F:JetBrains.Application.License2.LicenseServerSupport.ResponseCode.ERROR"/> and both urls are not empty it means that OAuth is required
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.ProductCode">
            <summary>
            Product code is required by API but never used
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.OldLicenseKey">
            <summary>
            Old format license key (we do not need user name to lookup in database)
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.FirstName">
            <summary>
            Assignee's first name. Ignored if <see cref="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.OldLicenseKey"/> is personal
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.LastName">
            <summary>
            Assignee's last name. Ignored if <see cref="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.OldLicenseKey"/> is personal
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.Email">
            <summary>
            Assignee's email. Ignored if <see cref="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyRequest.OldLicenseKey"/> is personal
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ExchangeKeyResponse.NewLicenseKey">
            <summary>
            New license key if exchange is applicable
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseServerSupport.JBAccount.IJetBrainsLicenseServerAccess.ProductCode">
            <summary>
             ProductCode for ObtainAgreementRequest and maybe something else.
            Calculated base on <see cref="P:JetBrains.Application.License2.ILicensedEntity.ProductCode"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseServerSupport.JBAccount.IJetBrainsLicenseServerAccess.ProfileUri">
            <summary>
            Null means not available
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseServerSupport.JBAccount.IJetBrainsLicenseServerAccess.OAuthSettings">
            <summary>
            Describes OAuth URIs, supported providers etc.
            Null means OAuth is not supported
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.LicenseServerSupport.JBAccount.JBAccountDetails">
            <summary>
            Details of the JetBrains account obtained from JWT token or accountInfo endpoint as described in https://jetbrains.team/p/bad-public-docs/documents/License-Server/a/IDE-OAuth-Authorization-Flow
            {
              "full_name": "John Doe",
              "jba_login": "john",
              "email" : "john@doe.com",
              "userpic_url" : "http://example.com/image"
              "account_id" : 12345,
               "user_id" : "qwerty",
            }
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseRequest.UserId">
            <summary>
            User id obtained by JetBrains account credential check.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseRequest.ProductCode">
            <summary>
            Product code as stated in products.json on a server
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseRequest.Edition">
            <summary>
            Not used actually
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseRequest.Version">
            <summary>
            Product version requested as major*1000+minor*100
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseRequest.BuildDate">
            <summary>
            Release date for subscription check in the form of year*10000 + month*100 + day
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseResponse.ValidationPeriod">
            <summary>
            Milliseconds to revalidate the license
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainLicenseResponse.ValidationDeadlinePeriod">
            <summary>
            Period in milliseconds to perform successful validation. If the period expires validation considered failed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest.UserId">
            <summary>
            User id obtained by JetBrains account credential check.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest.ProductCode">
            <summary>
            Product code for which trial license is requested
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest.Edition">
            <summary>
            Not used actually
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest.Version">
            <summary>
            Product version requested as major*1000+minor*100
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest.BuildDate">
            <summary>
            Release date for subscription check in the form of year*10000 + month*100 + day
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ObtainTrialRequest.CheckedOptions">
            <summary>
            Options to receive tips etc. Comma-separated option ids with value
            See https://docs.google.com/document/d/1OAMSstNVTpnyHtF7YQv-tupJ-Kty9oU8br2INf6gGqs/edit?ts=60bf4fcc#heading=h.7ax1c9cqhswr
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyRequest.ProductCode">
            <summary>
            Product code is required by API but never used
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyRequest.LicenseKey">
            <summary>
            License Key entered by user. Licensee name is not necessary.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyRequest.LicenseHash">
            <summary>
            License hash for new keys. Used to check if regeneration is necessary.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyRequest.Version">
            <summary>
            Product version requested as major*1000+minor*100
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyRequest.BuildDate">
            <summary>
            Release date for subscription check in the form of year*10000 + month*100 + day
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyResponse.ValidationPeriod">
            <summary>
            Seconds to revalidate the license
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateKeyResponse.NewLicenseKey">
            <summary>
            New license key if changed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest.UserId">
            <summary>
            User id obtained by JetBrains account credential check.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest.AssetId">
            <summary>
            Asset id to be validated
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest.ProductCode">
            <summary>
            Product code as stated in products.json on a server
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest.Edition">
            <summary>
            Not used actually
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest.Version">
            <summary>
            Product version requested as major*1000+minor*100
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest.BuildDate">
            <summary>
            Release date for subscription check in the form of year*10000 + month*100 + day
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseRequest.licenseHash">
            <summary>
            Hash of the license included in AssetData
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseResponse.ValidationPeriod">
            <summary>
            Milliseconds to revalidate the license
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseResponse.ValidationDeadlinePeriod">
            <summary>
            Period in milliseconds to perform successful validation. If the period expires validation considered failed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.License2.LicenseServerSupport.JBAccount.ValidateLicenseResponse.NewEncodedAsset">
            <summary>
            New license key corresponding to the asset
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.LicenseServer.RegistryLicenseServerInfoPersister">
            <summary>
            Loads license server info from registry corresponding to <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> 
            (HKEY_CURRENT_USER\Software\JetBrains\Shared\vAny\LicenseServer)
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.LicenseServer.RegistryLicenseServerSettingsPersister">
            <summary>
            Loads license server info from registry corresponding to <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> 
            (HKEY_CURRENT_USER\Software\JetBrains\Shared\vAny\LicenseServerSettings)
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseViewModel.Name">
            <summary>
            Name of the model. Used to distinguish between current/ temporary etc.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseViewModel.OriginalLicenseData">
            <summary>
            License data used when model is created.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseViewModel.DataNeedsToBesSaved">
            <summary>
            Signal is fired when Data is changed. Used to save data when necessary.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseViewModel.Entities">
            <summary>
            All licensed entities involved in license check process.
            TODO: who deals with entities that are not licensed if any?
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseViewModel.Submodels">
            <summary>
            Submodels responsible for certain aspects of licensing. I.e. evaluation period, user licenses etc.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseViewModel.OverallStatus">
            <summary>
            Overall licensing status
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.LicenseViewModel.NewLicenseDataCache">
            <summary>
            All new license datas
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.NewLicenses.Certificates.RootCertificate">
            <summary>
            Root certificate for user license and other checks
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.NewLicenses.Certificates.LicenseServerRootCertificate">
            <summary>
            Root certificate for license server response verification
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.NewLicenses.NewLicenseDataCache.QueryIsLicenseDataUsed">
            <summary>
            Fired when Notification for certain license data is about to be shown. Will be shown if any subscriber set true to Out argument.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.NewLicenses.NewLicenseDataCache.GetOrCreateLicenseData(JetBrains.Application.License2.NewLicenses.INewLicenseData,JetBrains.Application.License2.ILicensedEntity)">
            <summary>
            Can be null if licensed entity does not support JBA
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.OAuthenticator.StateWithDescription">
            <summary>
            OAuthenticator's overall state
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.OAuthenticator.OpenAuthUrl">
            <summary>
            URI to open in browser while authentication process
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.OAuthenticator.AuthUrls">
            <summary>
            URIs used to perform authentication
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.OAuthenticator.IsReady">
            <summary>
            Whether OAuthenticator is ready to use: either no auth required, tokens are received or there was an error
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.Tokens.IdToken">
            <summary>
            Won't be used
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.Tokens.AccessToken">
            <summary>
            Should be passed in Authorization header
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.Tokens.RefreshToken">
            <summary>
            Used to refresh <see cref="P:JetBrains.Application.License2.OAuth.Tokens.AccessToken"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.Tokens.ExpiresIn">
            <summary>
            Expiration period in seconds
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.OAuth.Tokens.ObtainedTimeUtc">
            <summary>
            When the tokens were obtained or refreshed
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.UIInteractive.IBuiltInConsentOptionsProvider">
            <summary>
            Provider of built-in options. Normally, the options are read 
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.UIInteractive.IBuiltInConsentOptionsProvider.LoadOptions">
            <summary>
            The method is called on background thread just once.
            </summary>
            <returns>Built-in consent options</returns>
        </member>
        <member name="T:JetBrains.Application.License2.UIInteractive.IConsentOptionsFilter">
            <summary>
            Allows not to show certain consent options to the user.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.UIInteractive.IConsentOptionsFilter.IsConsentOptionRelevantToTheUser(JetBrains.Application.License2.ConsentOptions.IConsentOption)">
            <summary>
            Checks whether specified <see cref="!:consentOption"/> relevant to the user
            </summary>
            <param name="consentOption">Consent option in question</param>
            <returns>True if relevant, false if not relevant, null if not sure</returns>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.ConsentOptionsUIInteractive.AlwaysAccepted">
            <summary>
            For UI Interactive tests. If true prevents showing dialogs to user
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor">
            <summary>
            Provide access to cached document data
            Privacy policy locations: 
              HKEY_CURRENT_USER\Software\JetBrains\Platform\JetBrains.AcceptedPrivacyPolicy
              HKEY_CURRENT_USER\Software\JavaSoft\Prefs\jetbrains\privacy_policy\accepted_version
              %appdata%\JetBrains\PrivacyPolicy\Accepted
              %appdata%\JetBrains\PrivacyPolicy\Cached  
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor.TechnicalName">
            <summary>
            Document technical name
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor.AcceptedVersionRelativePath">
            <summary>
            Relative path to the file with accepted version. Shared with Idea.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor.CachedRelativePath">
            <summary>
            Relative path to the file with cached document. Shared with Idea.   
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor.DotnetAcceptedRegistryKey">
            <summary>
            Registry key name for accepted document version for .NET products. For backward compatibility only. May be empty
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor.SharedAcceptedRegistryKey">
            <summary>
            Registry key name for accepted document version shared with Idea. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor.VersionAccess">
            <summary>
            Shared storage access for accepted version
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UIInteractive.DocumentStorageDescriptor.DocumentTextAccess">
            <summary>
            Shared storage access for accepted version
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.UserLicenses.FileUserLicensePersister">
            <summary>
            Loads user license from files located in <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> folder
            Folder: C:\Users\qx\AppData\Roaming\JetBrains\DotNet\vAny
            File mask: *license*.txt
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.LicenseName">
            <summary>
            Name of license for presentation
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.LicenseeName">
            <summary>
            To whom the license belogs. <see cref="P:JetBrains.Application.License.LicenseData.UserName"/> for old licenses.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.AssigneeName">
            <summary>
            To whom the license is assigned. Should be ignored if empty of equals to <see cref="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.LicenseeName"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.LicenseId">
            <summary>
            License identifier used for broadcasting. <see cref="P:JetBrains.Application.License.LicenseData.LicenseKey"/> for old license, <see cref="P:JetBrains.Application.License2.NewLicenses.INewLicenseData.LicenseId"/> for new one.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.LicenseHash">
            <summary>
            License hash. <see cref="F:System.String.Empty"/> for old license, <see cref="P:JetBrains.Application.License2.NewLicenses.INewLicenseData.Hash"/> for new one.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.LicenseRestrictions">
            <summary>
            License restrictions string.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.ExpirationDate">
            <summary>
            Date of license expiration if ever. <see cref="P:JetBrains.Application.License.LicenseData.ExpirationDate"/> for old licenses.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.CheckConcurrentUse">
            <summary>
            True if concurrent use is prohibited
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.UserLicenses.INamedLicenseData.DescribeValidLicense">
            <summary>
            Overall description for presentation
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData.Status">
            <summary>
            Get license status
            </summary>
        </member>
        <member name="P:JetBrains.Application.License2.UserLicenses.INamedLicenseData`1.LicenseData">
            <summary>
            Actual license data
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.UserLicenses.RegistryUserLicensePersister">
            <summary>
            Loads user license from registry corresponding to <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> 
            (HKEY_CURRENT_USER\Software\JetBrains\Shared\vAny\UserLicenses)
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.UserLicenses.RegistryUserLicenseSettingsPersister">
            <summary>
            Loads user license from registry corresponding to <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> 
            (HKEY_CURRENT_USER\Software\JetBrains\Shared\vAny\UserLicenseSettings)
            </summary>
        </member>
        <member name="T:JetBrains.Application.License2.UserLicenses.RegistryValidateKeyResultsPersister">
            <summary>
            Loads user license from registry corresponding to <code>ProductSettingsLocationFlag.AnyProductAnyVersion</code> 
            (HKEY_CURRENT_USER\Software\JetBrains\Shared\vAny\VKR)
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.UserLicenses.UserLicenseViewSubmodel.CheckLicense(JetBrains.Application.License2.UserLicenses.UserLicense,JetBrains.Application.License2.ISupportsUserLicense)">
            <summary>
            Returns 
              - NULL if license failed to decode.
              - data of first successful check
              - data of first failed check if no successful 
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.UserLicenses.UserLicenseViewSubmodel.CheckLicense(JetBrains.Application.License2.UserLicenses.UserLicense,JetBrains.Application.License2.ILicensedEntity)">
            <summary>
            Returns 
              - NULL if license failed to decode.
              - data of first successful check
              - data of first failed check if no successful 
            </summary>
        </member>
        <member name="M:JetBrains.Application.License2.Util.AssetUtil.DescribeValidAsset(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Returns presentable asset (manually entered user licese or asset obtained from JetBrains account) description.
            </summary>
            <param name="licensee">Licensee name</param>
            <param name="licenseRestrictions">License restrictions if any (i.e "for non-commercial development only")</param>
            <param name="subscriptionEndDate">End of maintainence subscription. When no subcription use <see cref="F:System.DateTime.MinValue"/></param>
            <param name="expirationDate">End of license. Use <see cref="F:System.DateTime.MaxValue"/> for endless assets</param>
            <returns>Presentable asset description</returns>
        </member>
        <member name="M:JetBrains.Application.License.ILicenseSupport.CreateLicenseData(System.String,System.String,System.String)">
            <summary>
            Creates license data using licenseKey, userName and company name. If only one type of licenses is acceptable,
            normally returns new LicenseData(...). Otherwise some additional processing should take place
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductGuid">
            <summary>
            Guid (with braces), that is used to store Date marker
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.FreeTrialPeriod">
            <summary>
            Number of days, free trial period lasts
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.FeedbackRequestPeriod">
            <summary>
            Number of free trial days, after which feedback is requested.
            Negative value means feedback is never requested.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.LeftDaysNotification">
            <summary>
            Identifies, when to start informing user that, his free trial
            period ends up 
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.ILicenseSupport.GetLicenseAgreement(JetBrains.Application.License.LicenseType)">
            <summary>
            License agreement in rich text. NULL if no license agreement is necessary
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductBuiltDateUsedForSubscriptionCheck">
            <summary>
            When checking subscription license we need to verify product creation time against subscription period. 
            If we just use <code>IApplicationDescriptor.BuiltOn</code> there might be situation when version X.0 is eligible to use because issued within subscription period,
            but bugfix X.0.1 is issued when the period is over. To handle this the property is set to the date of X.0 release.
            Normally, TeamCity build parameter TC_DateTimeForSubscriptionCheck is used (<see cref="F:JetBrains.Application.Defines.DateTimeForSubscriptionCheck"/>).
            If subscription is not available one may return <see cref="F:System.DateTime.MaxValue"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.BuyUrl">
            <summary>
            Gets the URL that takes to the “Buy Product” page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductFamily">
            <summary>
            JetBrains license server supports ProductFamily as guid without braces !!!
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.Version">
            <summary>
            Version to request from license server. Normally it equals to product major version * 1000  (<see cref="F:JetBrains.Application.Defines.NumLicenseAppVersion"/>)
            If the product supports subscription only use version equal to buildDate.Year*10000 + buildDate.Month*100 + buildDate.Day.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.SendBuildDateAsVersionToOldServers">
            <summary>
            Return true if your product had subscription previously. In the case <see cref="P:JetBrains.Application.License.ILicenseSupport.ProductBuiltDateUsedForSubscriptionCheck"/> will be used to issue ticket 
            in case of old license server.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.JBProductCode">
            <summary>
            Product code withod edition. In case of ReSharper it should be RS.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.ILicenseSupport.DecodeProductEdition(System.String,JetBrains.Application.IApplicationHost)">
            <summary>
            Detect edition by asset's product code
            </summary>
            <param name="productCode">Product code from asset returned by ObtainLicenseResponse</param>
            <param name="descriptor"></param>
            <returns>Product edition decoded</returns>
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.IsChecksumOK">
            does stored checksum corresponds to the username's one?
            checksum occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.Version">
            gets OmniaMea version stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.Type">
            gets type of the license stored in the license code
            occupies 8 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.GenerationDate">
            gets license generation date stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.ExpirationDate">
            gets license expiration date stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.SubscriptionEndDate">
            gets license subscription end date stored in the license code
            occupies 16 bits
        </member>
        <member name="T:JetBrains.Application.License.LicenseSupportBase">
            <summary>
            Simple implementation of license support that fetches all the possible data from product <see cref="T:JetBrains.Application.Defines"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Logging.HotspotWatchdog.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Util.ILogger,System.String)">
            <summary>
            Creates a new instance of <see cref="T:JetBrains.Application.Logging.HotspotWatchdog"/> that watch duration of all measured operations
            (via <see cref="M:JetBrains.Application.Logging.HotspotWatchdog.Measure(System.String)"/>)
            Unit: milliseconds (ms)
            </summary>
        </member>
        <member name="M:JetBrains.Application.Logging.HotspotWatchdog.WithTimeLimitOnInterval(System.TimeSpan,System.TimeSpan)">
            <summary>
            If the cumulative duration of operations
            exceeds <paramref name="timeLimit"/> inside a single <paramref name="observationInterval"/>,
            an error will be logged with a stack trace of the last operation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Logging.PerformanceAggregator`1.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Util.ILogger,JetBrains.Util.Logging.MetricUnit,System.String)">
            <summary>
            Creates a new instance of <see cref="T:JetBrains.Application.Logging.HotspotWatchdog"/> that watch duration of all measured operations
            (via <see cref="!:Measure"/>) under the given <paramref name="policy"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Logging.PerformanceAggregator`1.WithThreadingPolicy(JetBrains.Application.Threading.IShellLocks,JetBrains.Application.Logging.PerformanceAggregator{`0}.Policy)">
            <summary>
            Sets <paramref name="policy"/> for this <see cref="T:JetBrains.Application.Logging.PerformanceAggregator"/>. <paramref name="shellLocks"/> should be not null when policy is not <see cref="F:JetBrains.Application.Logging.PerformanceAggregator`1.Policy.None"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Logging.PerformanceAggregator`1.WithTotalElapsedTime">
            <summary>
            Logs the total time of all measured operations when <see cref="T:JetBrains.Application.Logging.HotspotWatchdog"/> lifetime is terminated. (applicable in playback tests).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Logging.PerformanceAggregator`1.WithQuantile(System.Double)">
            <summary>
            Logs the <see cref="!:quantile"/> of times of all measured operations when <see cref="T:JetBrains.Application.Logging.HotspotWatchdog"/> lifetime is terminated. (applicable in playback tests).
            </summary>
            <param name="quantile"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Logging.PerformanceAggregator`1.WithQuantiles(System.Double[])">
            <summary>
            Logs the <see cref="!:quantiles"/> of times of all measured operations when <see cref="T:JetBrains.Application.Logging.HotspotWatchdog"/> lifetime is terminated. (applicable in playback tests).
            </summary>
            <param name="quantiles"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Logging.PerformanceAggregator`1.WithDefaultQuantiles">
            <summary>
            Logs the pre-defined quantiles (0.5, 0.75, 0.9, 0.95, 0.99, 1) of times of all measured operations when <see cref="T:JetBrains.Application.Logging.HotspotWatchdog"/> lifetime is terminated. (applicable in playback tests).
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Logging.PerformanceAggregator`1.QuantileEstimatorConsumer.P2QuantileEstimator">
            <summary>
            https://aakinshin.net/posts/p2-quantile-estimator/
            </summary>
        </member>
        <member name="M:JetBrains.Application.Notifications.UserNotifications.CreateNotification(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Notifications.NotificationSeverity,System.String,System.String,System.String,JetBrains.Application.Notifications.UserNotificationCommand,JetBrains.Application.Notifications.UserNotificationCommand,System.Boolean,JetBrains.UI.Icons.IconId,System.Boolean,System.Collections.Generic.IEnumerable{JetBrains.Application.Notifications.UserNotificationCommand})">
            <summary>
            Creates new user notification.
            </summary>
            <param name="lifetime">Notification lifetime.</param>
            <param name="severity">Notification severity.</param>
            <param name="title">Notification title. Optional.</param>
            <param name="body">Notification message. Optional.</param>
            <param name="description">Additional description. Optional.</param>
            <param name="executed">Handler to be called when user activates the notification.</param>
            <param name="dismissed">Handler to be called when user closes the notification.</param>
            <param name="closeAfterExecution">True if the notification should be closed once clicked to.</param>
            <param name="iconId">Icon of the notification. Optional</param>
            <param name="silent">Silent notifications shown only in notification log. Optional</param>
            <param name="additionalCommands">Additional commands. Optional</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Notifications.UserNotifications.CreateNotification(JetBrains.Lifetimes.Lifetime,System.TimeSpan,JetBrains.Application.Notifications.NotificationSeverity,System.String,System.String,System.String,JetBrains.Application.Notifications.UserNotificationCommand,JetBrains.Application.Notifications.UserNotificationCommand,System.Boolean,JetBrains.UI.Icons.IconId,System.Boolean,System.Collections.Generic.IEnumerable{JetBrains.Application.Notifications.UserNotificationCommand})">
            <summary>
            Creates expirable new user notification.
            </summary>
            <param name="lifetime">Notification lifetime.</param>
            <param name="expirationTimeSpan">Period of time after which the notification is closed. <see cref="!:dismissed"/> handler is not called.</param>
            <param name="severity">Notification severity.</param>
            <param name="title">Notification title. Optional.</param>
            <param name="body">Notification message. Optional.</param>
            <param name="description">Additional description. Optional.</param>
            <param name="executed">Handler to be called when user activates the notification.</param>
            <param name="dismissed">Handler to be called when user closes the notification.</param>
            <param name="closeAfterExecution">True if the notification should be closed once clicked to.</param>
            <param name="iconId">Icon of the notification. Optional</param>
            <param name="silent">Silent notifications shown only in notification log. Optional</param>
            <param name="additionalCommands">Additional commands. Optional</param>
            <returns></returns>    
        </member>
        <member name="P:JetBrains.Application.Notifications.INotification.Silent">
            <summary>
            Silent notifications shown only in notification log
            </summary>
        </member>
        <member name="T:JetBrains.Application.PerformanceGuide.Impl.PerformanceSwitchInfo">
            <summary>
            Thig to store and reuse single perfomance switch handler extended description, title and id
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitch.Handler">
            <summary>
            Handler of the switch
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitch.State">
            <summary>
            State of the option
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitch.Behaviour">
            <summary>
            Handler behaviour. Is it live etc.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitch.ConflictResolutionMode">
            <summary>
            What is to be done when conflict is found
            </summary>
        </member>
        <member name="T:JetBrains.Application.PerformanceGuide.IPerformanceGuide">
            <summary>
            The component that accumulates all the known <see cref="T:JetBrains.Application.PerformanceGuide.IPerformanceSwitch"/> and manages their state/ updates etc.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PerformanceGuide.IPerformanceGuide.AddSwitchHandler(JetBrains.Lifetimes.Lifetime,JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler)">
            <summary>
            Adds Performance switch for some lifetime
            </summary>
            <param name="lifetime">Switch's lifetime</param>
            <param name="switchHandler">Switch to add</param>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceGuide.Switches">
            <summary>
            All switches registered in the system
            </summary>
        </member>
        <member name="M:JetBrains.Application.PerformanceGuide.IPerformanceGuide.RefreshSwitchesStates(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Refresh state of all or specified switches.   
            </summary>
            <param name="lifetime">Lifetime to perform the refresh</param>
            <param name="ids">An optional collection of <see cref="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.Id"/></param>
        </member>
        <member name="M:JetBrains.Application.PerformanceGuide.IPerformanceGuide.FixSwitches(JetBrains.Application.PerformanceGuide.IPerformanceSwitch[])">
            <summary>
            Async set switch states as requested
            </summary>
            <param name="switches">Switches to set to recommended value. No params mean all</param>
        </member>
        <member name="T:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandlerProvider">
            <summary>
            Provider of switch handlers
            </summary>
        </member>
        <member name="M:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandlerProvider.GetHandlers">
            <summary>
            All handlers returned by the method will be added to <see cref="M:JetBrains.Application.PerformanceGuide.IPerformanceGuide.AddSwitchHandler(JetBrains.Lifetimes.Lifetime,JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler)"/>
            </summary>
            <returns>Handlers to add</returns>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandlerProvider.HandlersMightHaveChanged">
            <summary>
            Fired when handlers might have changed
            </summary>
        </member>
        <member name="T:JetBrains.Application.PerformanceGuide.PerformanceSwitchValue">
            <summary>
            Detailed info of performance switch state
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.PerformanceSwitchValue.State">
            <summary>
            State for the performance monitor
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.PerformanceSwitchValue.CurrentValue">
            <summary>
            Human-readable current value
            </summary>
        </member>
        <member name="T:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler">
            <summary>
            The thing that is able to check, modify and monitor the state of a setting that may affect performance (i.e. TFS Git plugin in Visual Studio)
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.Id">
            <summary>
            Switch Id. Must be unique.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.Group">
            <summary>
            Group of handlers this one belongs to
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.Info">
            <summary>
            Textual information about handler
            Id, Title, Description, Severity etc.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.Title">
            <summary>
            Human-readable name of the switch
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.RecommendedValue">
            <summary>
            Human-readable recommended value for better performance
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.SettingPath">
            <summary>
            Where to locate the switch iun settings
            </summary>
        </member>
        <member name="P:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.CanSetState">
            <summary>
            Whether can set switch state programmatically. Some of VS settings simply don't work 
            </summary>
        </member>
        <member name="M:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.MonitorExternalStateChanges(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Monitors external changes made to the options for <see cref="!:lifetime"/> 
            </summary>
            <param name="lifetime">Lifetime for which monitoring should be performed</param>
            <returns>Signal that will be fired when state changes externally</returns>
        </member>
        <member name="M:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.UpdateStateAsync(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Forces state update.
            </summary>
            <param name="lifetime">Lifetime as cancellation token</param>
            <returns>Task with the updated state</returns>
        </member>
        <member name="M:JetBrains.Application.PerformanceGuide.IPerformanceSwitchHandler.SetStateAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.PerformanceGuide.PerformanceSwitchState)">
            <summary>
            Tries to set new state to the option.
            </summary>
            <param name="lifetime">Lifetime as a cancellation token</param>
            <param name="newState">State to set. Must be <see cref="F:JetBrains.Application.PerformanceGuide.PerformanceSwitchState.OK"/> or <see cref="F:JetBrains.Application.PerformanceGuide.PerformanceSwitchState.NOT_OK"/></param>
            <returns>Task with updated state.</returns>
        </member>
        <member name="T:JetBrains.Application.PerformanceTracking.MemoryEventRecord">
            <summary>
            see https://docs.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-memorystatus
            </summary>
        </member>
        <member name="M:JetBrains.Application.PerformanceTracking.IPerformanceTracking.PopResults">
            <summary>
            Returns results and clears stored results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.PerformanceTracking.IPerformanceTracking.RecordValue(System.String,System.Double)">
            <summary>
            Record value to TC build statistics
            </summary>
            <param name="actionId"></param>
            <param name="value"></param>
        </member>
        <member name="M:JetBrains.Application.PerformanceTracking.IPerformanceTracking.TrackActionRunDuration(System.String,System.Action)">
            <summary>
            Runs action and records its duration
            </summary>
            <param name="actionId"></param>
            <param name="action"></param>
        </member>
        <member name="T:JetBrains.Application.PersistentMap.CachingEnumerator`2">
            <summary>
            Enumerator that stores enumerated values into cache, and them from cache
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:JetBrains.Application.PersistentMap.IKeyValueEnumerator`2.IsCurrentKeyWillBeRemoved">
            <summary>
            For CleaningEnumerator and RemoveCurrent
            </summary>
        </member>
        <member name="M:JetBrains.Application.PersistentMap.PersistentSortedMapExtensions.ToOptimized``2(JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap{``0,``1},JetBrains.Lifetimes.Lifetime,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Special overload to prevent double optimization. fails always (not to run too fast).
            </summary>
        </member>
        <member name="M:JetBrains.Application.PersistentMap.PersistentSortedMapExtensions.RemoveAll``2(JetBrains.Application.PersistentMap.IPersistentSortedMap{``0,``1},System.Predicate{``0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PersistentMap.PersistentSortedMapExtensions.RemoveAll``2(JetBrains.Application.PersistentMap.IPersistentSortedMap{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PersistentMap.LevelDb.ThrowDbExceptionIfNecessary(System.Byte*,System.Byte*)">
            <summary>
            Throws DB exception and optionally free memory
            </summary>
            <param name="errmsg"></param>
            <param name="memoryToFree"></param>
        </member>
        <member name="M:JetBrains.Application.PersistentMap.LevelDbMap`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns>Always returns True</returns>
        </member>
        <member name="T:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2">
            <summary>
            Only one map per DB table is supported. No cache coherency!
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2.UseCachingEnumerator">
            <summary>
            When set to true enumerating through the values will try to get current value from cache if it is presented,
            otherwise current value will be obtained from underlying storage
            </summary>
        </member>
        <member name="F:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2.MissingValueMarker">
            <summary>
            Value that will be stored in <see cref="P:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2.Cache"/> to denote that corresponding key is absent
            </summary>
        </member>
        <member name="P:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2.CacheMissingKeys">
            <summary>
            Fot performance reasons in specific scenarios. Should be used to store information into <see cref="P:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2.Cache"/> that some key is absent.
            Info is stored as <see cref="F:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2.MissingValueMarker"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PersistentMap.OptimizedPersistentSortedMap`2.Remove(`0)">
            <summary>
            Always return 'true' !!!
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.PersistentMap.ShellCaches.ShellCachesVersion">
            <summary>
            If you changed something in caches schema you MUST change this number. 
            Increase this number to force rebuild all caches.
            How to change version:
            Increment number in prefix and write your branch version.
            E.g.
            27:192-winnie.solbuilderprototype
            28:192-branchfornavigation
            29:net193-threading
            </summary>
        </member>
        <member name="M:JetBrains.Application.platforms.DotNetCoreInstallationsDetector.DetectSdkInstallation(JetBrains.Util.VirtualFileSystemPath)">
            <returns>Instance of <see cref="T:JetBrains.Application.platforms.IDotNetCoreCli"/> if at least 1 SDK was found, otherwise null.</returns>
        </member>
        <member name="T:JetBrains.Application.platforms.GlobalJson.GlobalJsonModel">
            <summary>
            Represents global.json
            see https://docs.microsoft.com/en-us/dotnet/core/tools/global-json?tabs=netcore3x#globaljson-schema
            </summary>
        </member>
        <member name="F:JetBrains.Application.platforms.GlobalJson.GlobalJsonModel.Default">
            <summary>
            Represents default model when there is no global.json was specified 
            </summary>
        </member>
        <member name="P:JetBrains.Application.platforms.IDotNetCoreCli.Runtimes">
            <summary>
            This property represents so called 'shared frameworks' in the 'shared' folder under DOTNET_ROOT, also sometimes called 'runtimes'.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Platform.IMonoPathProvider.GetPossibleMonoPaths">
            <summary>
            Ordered list of paths
            </summary>
        </member>
        <member name="M:JetBrains.Application.Processes.IProcessStartInfoPatcher.Patch(JetBrains.Application.Processes.JetProcessStartInfo,JetBrains.Application.Processes.JetProcessRuntimeRequest)">
            <summary>
            This method should be used with Process.Start.
            JetProcessStartInfo is not a live object, it doesn know about any toolset changes. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.Processes.JetProcessRuntimeRequest.DontQuote">
            <summary>
            Can be useful if we want to run runtime with some arguments.
            E.g.: `mono --version`, `dotnet restore` 
            </summary>
        </member>
        <member name="M:JetBrains.Application.Processes.JetProcessRuntimeRequest.CreateInternalRuntime(JetBrains.Application.Processes.EnvironmentVariableMutator,System.Boolean)">
            <summary>
            Use the same runtime as the host process:
            - In R#, we use .NET Framework
            - In Rider on Unix, we always use bundled .NET Core
            - In Rider on Windows, we use bundled .NET Core or .NET Framework depending on the current host runtime 
            </summary>
            <param name="mutator"></param>
            <param name="dontQuote"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.Processes.JetProcessRuntimeType.FullFramework">
            <summary>
            Mono or Windows .NET Framework
            </summary>
        </member>
        <member name="F:JetBrains.Application.Processes.JetProcessRuntimeType.DotNetCore">
            <summary>
            .NET Core
            </summary>
        </member>
        <member name="F:JetBrains.Application.Processes.JetProcessRuntimeType.Direct">
            <summary>
            StartInfo should not be patched
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProcessRunner.InternalProcessesRegistry.OnAdd(System.String,System.Int32,System.Boolean)">
            <summary>
            Can be executed on any thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProcessRunner.InternalProcessesRegistry.OnRemove(System.Int32)">
            <summary>
            Can be executed on any thread
            </summary>
        </member>
        <member name="T:JetBrains.Application.Defines">
             <summary>Pre-compile-time defined constants that emulate the C++ #define that has a value.</summary>
            <remarks>The set of #defines and their default values are given in an MSBuild file. The defauls could be overridden on the build server.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.DateTimeForSubscriptionCheck">
             <summary>
              <para>
                <c>#define DateTimeForSubscriptionCheck 9999-12-31T23:59:59</c>
              </para>
              <para>The date when the recent product's 2-digit version is released. Used for subscription license check.</para>
              <para>If the date is not set, product build time is used.</para>
              <para>Do not change DateTimeForSubscriptionCheck here, edit the property on TeamCity instead</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2003-01-01</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {2D580069-BF69-4B47-BDEA-AF2986412F11}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidVsPackageCoClass">
             <summary>
              <para>
                <c>#define GuidVsPackageCoClass {0C6E6407-13FC-4878-869A-C8B4016C57FE}</c>
              </para>
              <para>GUID of the VS Package COM object CoClass. Used on the autogenerated VS package class, and everywhere in the Registry. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks False</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb True</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsReleaseLicenseAgreement">
             <summary>
              <para>
                <c>#define IsReleaseLicenseAgreement False</c>
              </para>
              <para>Whether the Release license RTF file should be embedded into the installer. Default is False, which takes the pre-release file.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsReSharper">
             <summary>
              <para>
                <c>#define IsReSharper True</c>
              </para>
              <para>Demo Define.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsReSharperMisbehavesEnabled">
             <summary>
              <para>
                <c>#define IsReSharperMisbehavesEnabled False</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 5931F436-2506-415E-A0A9-27F50D7F62BF</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier AD0738CD-C5DC-4650-A216-F4AF3E651058</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
              <para>Note: do not change LicenseSupportIdentifier here, edit the property on TeamCity instead.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.MsiSupportedVsVersionsList">
             <summary>
              <para>
                <c>#define MsiSupportedVsVersionsList 8.0;9.0;10.0;11.0;12.0</c>
              </para>
              <para>The list of VS Versions the installer should be able to install. Note that adding a new version requires modification of WiX code (and maybe some of the C++ code too). Removing versions from this list should generally go smoothly. Must follow the C++ vs versions lsit format, which is semicolon-separater major.minor.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 8000</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.6.1</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductDisplayName">
             <summary>
              <para>
                <c>#define ProductDisplayName ReSharper</c>
              </para>
              <para>The user-friendly name of the product in the short form (no company, no version). The default choice if you want to mention the product name in UI. See Remarks on IApplicationDescriptor::ProductDisplayNameName for details.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName ReSharper 9.0 EAP</c>
              </para>
              <para>The expanded marketing product name, which is typically the &lt;see cref="ProductDisplayName"/&gt; plus the marketing version number, beta/EAP/RC designation, etc. See Remarks on IApplicationDescriptor::ProductDisplayNameName for details.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductName">
             <summary>
              <para>
                <c>#define ProductName ReSharper</c>
              </para>
              <para>The bare technical product name in the shortest form (no company, no version, no spaces, identifier-syntax-compatible). See Remarks on IApplicationDescriptor::ProductDisplayNameName for details.</para>
              <para>If there're multiple products built on these sources, their least common generic name.</para>
              <para>You MUST NOT use this define where an Application Descriptor or IProductNameAndVersion is available (this includes any time when Shell is running). This is ONLY for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductStandaloneApplicationCaps">
             <summary>
              <para>
                <c>#define ProductStandaloneApplicationCaps None</c>
              </para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 {F790F14F-E662-4D25-89A0-9CC8677DE27A}</c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 {5595D9CA-0517-4A8E-9129-F973460986E0}</c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductVisualStudioIntegrationCaps">
             <summary>
              <para>
                <c>#define ProductVisualStudioIntegrationCaps Required</c>
              </para>
              <para>A required parameter of a platform-based MSI Setup which defines the VS integration capabilities of the product.</para>
              <para>Defines whether the installer should suggest integrating the product into Visual Studio. Possible values are:</para>
              <para>“None” — the product has no VS integration capabilities. Example: early versions of some products like DotTrace Memory, Peek.</para>
              <para>“Optional” — the product can be used without VS, but also provides VS integration. Example: DotTrace Performance.</para>
              <para>“Required” — the product only exists as a VS extension and usually should not be installed without VS integration. Example: ReSharper.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/resharper/buy/index.html</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://www.jetbrains.com/resharper/download/index.html</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/resharper/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.resharper.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/resharper/documentation/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
              <para>NOTE: UriProductHelp points to the SINGLE page for all R# versions starting with v4.0. See ReSharperWebHelp class on how the complete URI is producted out of this base: exact product version is appended, plus the options keyword whose help page should be opened. Based on the version number, user is redirected to help for his exact version. Thus, you cannot easily change this URI in a newer version without affecting already-released products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/resharper/uninstall/resharper.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable to dotnet products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/resharper/updates/online.Updates.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Defines.Const">
             <summary>Literal versions of the properties.</summary>
            <remarks>Use these const fields only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.DateTimeForSubscriptionCheck">
             <summary>
              <para>
                <c>#define DateTimeForSubscriptionCheck 9999-12-31T23:59:59</c>
              </para>
              <para>The date when the recent product's 2-digit version is released. Used for subscription license check.</para>
              <para>If the date is not set, product build time is used.</para>
              <para>Do not change DateTimeForSubscriptionCheck here, edit the property on TeamCity instead</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2003-01-01</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {2D580069-BF69-4B47-BDEA-AF2986412F11}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsDynamicCommandSet">
             <summary>
              <para>
                <c>#define GuidVsDynamicCommandSet {E272D1BE-8216-4919-AFA3-EEB57FAB3537}</c>
              </para>
              <para>Command set GUID for the dynamic commands to be registered by the product at runtime. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsGroupsCommandSet">
             <summary>
              <para>
                <c>#define GuidVsGroupsCommandSet {9142D617-6500-478F-9DE9-3185145372D0}</c>
              </para>
              <para>Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
                The IDs are entirely autogenerated by VSCT/CTO tool. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidVsPackageCoClass">
             <summary>
              <para>
                <c>#define GuidVsPackageCoClass {0C6E6407-13FC-4878-869A-C8B4016C57FE}</c>
              </para>
              <para>GUID of the VS Package COM object CoClass. Used on the autogenerated VS package class, and everywhere in the Registry. 
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks False</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb True</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsReleaseLicenseAgreement">
             <summary>
              <para>
                <c>#define IsReleaseLicenseAgreement False</c>
              </para>
              <para>Whether the Release license RTF file should be embedded into the installer. Default is False, which takes the pre-release file.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsReSharper">
             <summary>
              <para>
                <c>#define IsReSharper True</c>
              </para>
              <para>Demo Define.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsReSharperMisbehavesEnabled">
             <summary>
              <para>
                <c>#define IsReSharperMisbehavesEnabled False</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 5931F436-2506-415E-A0A9-27F50D7F62BF</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier AD0738CD-C5DC-4650-A216-F4AF3E651058</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
              <para>Note: do not change LicenseSupportIdentifier here, edit the property on TeamCity instead.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.MsiSupportedVsVersionsList">
             <summary>
              <para>
                <c>#define MsiSupportedVsVersionsList 8.0;9.0;10.0;11.0;12.0</c>
              </para>
              <para>The list of VS Versions the installer should be able to install. Note that adding a new version requires modification of WiX code (and maybe some of the C++ code too). Removing versions from this list should generally go smoothly. Must follow the C++ vs versions lsit format, which is semicolon-separater major.minor.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 8000</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.6.1</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductDisplayName">
             <summary>
              <para>
                <c>#define ProductDisplayName ReSharper</c>
              </para>
              <para>The user-friendly name of the product in the short form (no company, no version). The default choice if you want to mention the product name in UI. See Remarks on IApplicationDescriptor::ProductDisplayNameName for details.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName ReSharper 9.0 EAP</c>
              </para>
              <para>The expanded marketing product name, which is typically the &lt;see cref="ProductDisplayName"/&gt; plus the marketing version number, beta/EAP/RC designation, etc. See Remarks on IApplicationDescriptor::ProductDisplayNameName for details.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductName">
             <summary>
              <para>
                <c>#define ProductName ReSharper</c>
              </para>
              <para>The bare technical product name in the shortest form (no company, no version, no spaces, identifier-syntax-compatible). See Remarks on IApplicationDescriptor::ProductDisplayNameName for details.</para>
              <para>If there're multiple products built on these sources, their least common generic name.</para>
              <para>You MUST NOT use this define where an Application Descriptor or IProductNameAndVersion is available (this includes any time when Shell is running). This is ONLY for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductStandaloneApplicationCaps">
             <summary>
              <para>
                <c>#define ProductStandaloneApplicationCaps None</c>
              </para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 {F790F14F-E662-4D25-89A0-9CC8677DE27A}</c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 {5595D9CA-0517-4A8E-9129-F973460986E0}</c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductVisualStudioIntegrationCaps">
             <summary>
              <para>
                <c>#define ProductVisualStudioIntegrationCaps Required</c>
              </para>
              <para>A required parameter of a platform-based MSI Setup which defines the VS integration capabilities of the product.</para>
              <para>Defines whether the installer should suggest integrating the product into Visual Studio. Possible values are:</para>
              <para>“None” — the product has no VS integration capabilities. Example: early versions of some products like DotTrace Memory, Peek.</para>
              <para>“Optional” — the product can be used without VS, but also provides VS integration. Example: DotTrace Performance.</para>
              <para>“Required” — the product only exists as a VS extension and usually should not be installed without VS integration. Example: ReSharper.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/resharper/buy/index.html</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://www.jetbrains.com/resharper/download/index.html</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/resharper/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.resharper.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/resharper/documentation/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
              <para>NOTE: UriProductHelp points to the SINGLE page for all R# versions starting with v4.0. See ReSharperWebHelp class on how the complete URI is producted out of this base: exact product version is appended, plus the options keyword whose help page should be opened. Based on the version number, user is redirected to help for his exact version. Thus, you cannot easily change this URI in a newer version without affecting already-released products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/resharper/uninstall/resharper.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable to dotnet products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/resharper/updates/online.Updates.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.VsPackageLoadKey">
             <summary>
              <para>
                <c>#define VsPackageLoadKey JetBrains s.r.o.;ReSharper;9.0;standard;AHR2RRIDC0RRA9ZMJMEQPPR8ICZZH1D3ZREDEZRRRJR0AARDEPEIC0IAZHQ2KAR8D1QKH3AKIZJCJKHEITIEIJRHHTZEDCIJJ1P8CPAEE2A2JKH9MHMPZPJ9HKHII3HM</c>
              </para>
              <para>VS PLK, as received from the Microsoft website. See “Changing Product Name and Version SOP” on how to do that. 
            		Format: “CompanyName;ProductName;ProductVersion2;VsMinEdition;PLK”. See VsPackageClassEmitter::PackageInfo for format details.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.ITaskExecutor">
            <summary>
            Can execute a task.
            </summary>
            <remarks>
            This object is stateless, and thus not disposable.
            Execution of each of the tasks is an action in itself, with its own disposable scope.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">
            <para>Task title, short form.</para>
            <para>This is used for the progress window title by the UI progress indicators.</para>
            <para>The long form of the task caption should go to the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> of the <paramref name="task"/>'s <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>.</para>
            <para>Prepended with the product name automatically. Might be empty, in which case the product name will be used.</para>
            </param>
            <param name="task">The task to execute.</param>
            <param name="cancelable">
            <para>Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> supports canceling.</para>
            <para>The <see cref="T:System.OperationCanceledException"/> pattern is supported, which means that an <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> is plugged on the task thread to throw a <see cref="T:System.OperationCanceledException"/> when called for a check with a <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> <c>False</c>; such an exception is called by the task executor and converted into a <c>False</c> return value.</para>
            </param>
            <returns>Whether the task has completed execution (i.e. was not canceled). Note that even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No"/> task could be canceled by setting <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> to <c>False</c> or throwing a <see cref="T:System.OperationCanceledException"/> or letting some other exception out of the <paramref name="task">task function</paramref>.</returns>
            <remarks>If you would like to return any values from the <paramref name="task"/>, assign them to local variables within the closure.</remarks>
        </member>
        <member name="M:JetBrains.Application.Progress.ITaskExecutorWithOptions.ExecuteTask(System.String,JetBrains.Application.Progress.TaskExecutorOptions,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">
            <para>Task title, short form.</para>
            <para>This is used for the progress window title by the UI progress indicators.</para>
            <para>The long form of the task caption should go to the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> of the <paramref name="task"/>'s <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>.</para>
            <para>Prepended with the product name automatically. Might be empty, in which case the product name will be used.</para>
            </param>
            <param name="task">The task to execute.</param>
            <param name="options">The extra execution options</param>
            <returns>Whether the task has completed execution (i.e. was not canceled). Note that even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No"/> task could be canceled by setting <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> to <c>False</c> or throwing a <see cref="T:System.OperationCanceledException"/> or letting some other exception out of the <paramref name="task">task function</paramref>.</returns>
            <remarks>If you would like to return any values from the <paramref name="task"/>, assign them to local variables within the closure.</remarks>
        </member>
        <member name="T:JetBrains.Application.Progress.ProgressIndicatorMarshalled">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.Create(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Threading.IThreading)">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.CreateWithoutSafeThreadCheck(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Threading.IThreading)">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            Note: you should call the <see cref="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.Create(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Threading.IThreading)"/> version whenever possible.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.RunningTaskExecutor">
            <summary>
            For an <see cref="T:JetBrains.Application.Progress.ITaskExecutor" />, tracks the actively running tasks.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.RunningTaskExecutor.ExecutionName">
            <summary>
            Name of the execution session.
            A UI Task Executor has three strings at any moment: the global Execution Name, passed in when creating the session, cannot be changed, makes into the progress window caption; the Task Name, in <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Name" />, is the name of the current big logical step of the task, presented as the bigger text on the progress; Item Name, in <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.StepName" />, is the name of the current atomic item being executed (e.g. the file being processed).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.RunningTaskExecutor.Progress">
            <summary>
            The full progress model.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.SimpleTaskExecutor">
            <summary>
            A task executor that just calls the task method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.SimpleTaskExecutor.PushProgressCanceledInterruptableCookie(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Pushes progress indicator as an interruption check
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.TaskCancelable">
            <summary>
            Whether an <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> task could be user-canceled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.TaskCancelable.No">
            <summary>
            <para>The task does not quite support canceling, so there's no use in displaying the "Cancel" button to the user.</para>
            <para>Note that the task might still be canceled and your <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> run might still return <c>False</c> in some cases, like throwing <see cref="T:System.OperationCanceledException"/> from the task implementation.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.TaskCancelable.Yes">
            <summary>
            The task supports canceling, looks for <see cref="P:JetBrains.Application.Progress.IProgressIndicator.IsCanceled"/>, and user should be presented with the "Cancel" option in the progress UI.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.TaskExecutorNotification">
            <summary>
            An <see cref="T:JetBrains.Application.Progress.ITaskExecutor" /> is given this callback upon construction to notify the owner of any running sessions.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.TaskExecutorOptions">
            <summary>
            The extra task execution options
            </summary>
            <param name="Cancelable">
            <para>Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutorWithOptions"/> supports canceling.</para>
            <para>The <see cref="!:OperationCanceledException"/> pattern is supported, which means that an <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> is plugged on the task thread to throw a <see cref="!:OperationCanceledException"/> when called for a check with a <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> <c>False</c>; such an exception is called by the task executor and converted into a <c>False</c> return value.</para>
            </param>
            <param name="IsIndeterminate">Marks the progress indeterminate (for processes that can't estimate the amount of work to be done) or determinate (for processes that can display the fraction of the work done using <see cref="!:IProgressIndicator.Advance()"/></param>
        </member>
        <member name="M:JetBrains.Application.Progress.TaskExecutorOptions.#ctor(JetBrains.Application.Progress.TaskCancelable,System.Boolean)">
            <summary>
            The extra task execution options
            </summary>
            <param name="Cancelable">
            <para>Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutorWithOptions"/> supports canceling.</para>
            <para>The <see cref="!:OperationCanceledException"/> pattern is supported, which means that an <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> is plugged on the task thread to throw a <see cref="!:OperationCanceledException"/> when called for a check with a <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> <c>False</c>; such an exception is called by the task executor and converted into a <c>False</c> return value.</para>
            </param>
            <param name="IsIndeterminate">Marks the progress indeterminate (for processes that can't estimate the amount of work to be done) or determinate (for processes that can display the fraction of the work done using <see cref="!:IProgressIndicator.Advance()"/></param>
        </member>
        <member name="P:JetBrains.Application.Progress.TaskExecutorOptions.Cancelable">
            <summary>
            <para>Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutorWithOptions"/> supports canceling.</para>
            <para>The <see cref="!:OperationCanceledException"/> pattern is supported, which means that an <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> is plugged on the task thread to throw a <see cref="!:OperationCanceledException"/> when called for a check with a <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> <c>False</c>; such an exception is called by the task executor and converted into a <c>False</c> return value.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.TaskExecutorOptions.IsIndeterminate">
            <summary>Marks the progress indeterminate (for processes that can't estimate the amount of work to be done) or determinate (for processes that can display the fraction of the work done using <see cref="!:IProgressIndicator.Advance()"/></summary>
        </member>
        <member name="T:JetBrains.Application.ResultList.IResultListHandler">
            <summary>
            Specific action handler for actions typically available on a result list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ResultList.IResultListHandler.GoToNextLocation(JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation)">
            <summary>
              <para>A semantical equivalent of VS's “Edit.GoToNextLocation” action.</para>
              <para>This method should update the action status and yield a non-Null function only if it's ready to execute the action.</para>
            </summary>
            <param name="lifetimeExec">Lifetime for the duration of this action execution. The returned functor will only be valid within this lifetime (and the same guard/readlock).</param>
            <param name="context">Action context.</param>
            <param name="presentation">Current action presentation state.</param>
            <returns>The action executor function, if the action is available.</returns>
        </member>
        <member name="M:JetBrains.Application.ResultList.IResultListHandler.GoToPrevLocation(JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation)">
            <summary>
              <para>A semantical equivalent of VS's “Edit.GoToPrevLocation” action.</para>
              <para>This method should update the action status and yield a non-Null function only if it's ready to execute the action.</para>
            </summary>
            <param name="lifetimeExec">Lifetime for the duration of this action execution. The returned functor will only be valid within this lifetime (and the same guard/readlock).</param>
            <param name="context">Action context.</param>
            <param name="presentation">Current action presentation state.</param>
            <returns>The action executor function, if the action is available.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Calculated.Implementation.IScalarUpgradableSetting.Upgrade(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Collections.Immutable.ImmutableArray{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            Upgrade a value in specified mount point
            </summary>
            <param name="mountTarget"></param>
            <param name="transaction"></param>
            <param name="logger"></param>
            <param name="keyIndices"></param>
            <param name="mountPoints">Used to get a value from prev layer to upgrade to. Must be sorted from high priority to low priority</param>
            <param name="previousMountPoint"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Extentions.ICachedSettingsReader`1.ReadData(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Retrieves the data to be stored in settings cache.
            </summary>
            <param name="lifetime">Lifetime of the external request validity. The caller can cancel the request from any thread, thus the reader can check if lifetime is terminated and stop reading the settings for this request.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Extentions.ISettingsCache.GetData``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Extentions.ICachedSettingsReader{``0},System.Action{``0})">
            <summary>
            Data is cached by reader instance equality
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Logging.ISettingsLogger">
            <summary>
            <para>Gets the logger to be used within the Settings subsystem.</para>
            <para>Assertions and algorithm consistency failures are reported to the central logging system immediately, while the outer-world and user-data exceptions are considered nonfatal and somewhat not quite unexpected in the real life, so they're stored for reading on request.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Logging.ISettingsLogger.Logger">
            <summary>
            <para>Gets the logger to be used within the Settings subsystem.</para>
            <para>Assertions and algorithm consistency failures are reported to the central logging system immediately, while the outer-world and user-data exceptions are considered nonfatal and somewhat not quite unexpected in the real life, so they're stored for reading on request.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Logging.SettingsLogging">
            <summary>
            Intercepts all of the exceptions in the Settings subsystem and treats them specially.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Logging.SettingsLogging.CollectedSettingsExceptions">
            <summary>
            <para>Gets the logger which is collecting outer-world failures in exceptions (like invalid data file format). </para>
            <para>Note that, unlike <see cref="P:JetBrains.Application.Settings.Logging.ISettingsLogger.Logger"/>, this member is not overridable. If an inheritor is replacing the logger, its exceptions will not be tracked by this object.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Logging.WrapLoggerForSettings">
            <summary>
            When you're passing your own logger to the Settings subsystem, wraps it and exposes as the proper interface.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.FileSettingsStorageProviderBase">
            <summary>
            Helper class for registering a single file-based storage and a single mounting point with the Settings Store.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.FileSettingsStorageProviderBase.XmlFileStorage">
            <summary>
            The file-based storage (along with serialization) created by this component. Its <see cref="F:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.Storage"/> property is promoted to the <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStore"/> under the <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.FileSettingsStorageProviderBase.MountPoint"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.FileSettingsStorageProviderBase.MountPoint">
            <summary>
            The mounting point for the storage created by this component and promoted to the <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStore"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionary`2">
            <summary>
            Optimizes for the case when the dictionary has zero or one items by allocating no mem.
            Not thread-safe.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionary`2.IsNull">
            <summary>
            Gets if this instance is NULL, i.e. is a piece of an uninitialized zero memory.
            An empty dictionary must be explicitly created manually with the ctor. This safeguards from leaked NULL fields.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionary`2.GetKeys">
            <summary>
            Slow version.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionary`2.ToArrayOrNull">
            <summary>
            Mostly for debugger display. Does not throw on a NULL instance but returns NULL.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.DefaultBody.FrugalWhenOneItemDictionary`2.CountOrNull">
            <summary>
            Mostly for debugger display. Does not throw on a NULL instance but returns NULL.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent.Interned">
            <summary>
            Interns string contents of the path components.
            Being a concurrent dictionary, needs no additional locking.
            Maps any key to the interned version.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase">
            <summary>
            The implementation of the settings storage entrails. Operates on strings, so has to convert each key-path-components based access.
            Its load &amp; save are externally driven in terms of entries (serialization formats are not this object's responsibility).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.#ctor(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Util.ILogger)">
            <summary>
            
            </summary>
            <param name="lifetime">Limiting lifetime for the storage objects.</param>
            <param name="name">Diagnostics name of this storage.</param>
            <param name="logger"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.myDiffToStream">
            <summary>
            <para><see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.myEntriesInStream"/> diff: what should be applied to the settings storage on save to ensure merging of the conflicts.</para>
            <para>Protected with <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.myLockDiffToStream"/>.</para>
            <para>Set to <c>Null</c> when empty to enabled lock-free checks for the “no-dirty” state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.myEntriesInStream">
            <summary>
            <para>The settings storage entries, as read from the persistent storage.</para>
            <para>Maps keys to values.</para>
            <para>In-memory changes are stored in <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.myDiffToStream"/> until persisted to the storage.</para>
            <para>Protected with the <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.myLockEntriesInStream"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.CommitDiffToStream(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Commits the diffs dictionary to the main dictionary, respecting recorded adds and removes.</para>
            <para>Normally is non-throwing.</para>
            </summary>
            <param name="main">Main dictionary. Will be overwritten by commit with changes from <paramref name="diff"/>.</param>
            <param name="diff">Might be <c>Null</c> if there's no diff yet.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.myLockSerialization">
            <summary>
            Held while a save or load process is in progress to avoid runnnig one more in parallel.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.SetBatchWithDiffWriteLocked(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.List{System.String})">
            <summary>
            Does a batch-set to the out-of-transaction storage when committing a transaction.
            Writer lock on diff-to-stream must be held by the caller.
            </summary>
            <param name="items">Transaction changes to apply.</param>
            <param name="keysChanged">Keys which were changed by the batch-change must be written here.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.TransactionData.InTransactionStorage">
            <summary>
            The transaction is currently implemented as one more storage which actually implements all reading &amp; writing. That's it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.TransactionData.OuterTransactionStorage">
            <summary>
            In case of nested transaction, the nearest outer storage (storage from the parent transaction). Otherwise, <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.TransactionData.OutOfTransactionStorage"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase.TransactionData.OutOfTransactionStorage">
            <summary>
            The same storage, but outside all transaction. That's the interface which the outer world uses for accessing the storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFactory.CreateStorage(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Util.ILogger,JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent)">
            <summary>
            Creates the currently-preferred impl of the storage.
            </summary>
            <param name="lifetime"></param>
            <param name="name"></param>
            <param name="logger"></param>
            <param name="interned"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat">
            <summary>
            An implementation of the settings storage which natively operates on key-path-components and stores them in a flat hashtable.
            Its load &amp; save are externally driven in terms of entries (serialization formats are not this object's responsibility).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myDiffToStream">
            <summary>
            <para><see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myEntriesInStream"/> diff: what should be applied to the settings storage on save to ensure merging of the conflicts.</para>
            <para>Protected with <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myLockDiffToStream"/>.</para>
            <para>Set to <c>Null</c> when empty to enabled lock-free checks for the “no-dirty” state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myEntriesInStream">
            <summary>
            <para>The settings storage entries, as read from the persistent storage.</para>
            <para>Maps keys to values.</para>
            <para>In-memory changes are stored in <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myDiffToStream"/> until persisted to the storage.</para>
            <para>Protected with the <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myLockEntriesInStream"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myLockSerialization">
            <summary>
            Held while a save or load process is in progress to avoid running one more in parallel.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myInterned">
            <summary>
            Interns string contents of the path components.
            Locked with <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myLockDiffToStream"/> (rational: we write-access diff-to-stream more often than entries-in-stream, and we do not need interneds apart from writing anyting => better reuse that lock).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myCacheChildLevel2Enumerations">
            <summary>
            <para>Caches enumeration of level-2 children (Enum() with nTakeChildLevelOnly=2, which is a common case for enumerating settings store indexed keys/entries).</para>
            <para>Locked with <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myLockCacheChildLevel2Enumerations"/>.</para>
            <para>Invalidated by any write to the second level or any massive change to storage, filled by Enum() when it encounters a cache miss.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.myLockCacheChildLevel2Enumerations">
            <summary>
            Locks access to the dictionary only, its member classes have their own locking.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.CommitDiffToStream(System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object})">
            <summary>
            <para>Commits the diffs dictionary to the main dictionary, respecting recorded adds and removes.</para>
            <para>Normally is non-throwing.</para>
            </summary>
            <param name="main">Main dictionary. Will be overwritten by commit with changes from <paramref name="diff"/>.</param>
            <param name="diff">Might be <c>Null</c> if there's no diff yet.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.SetBatchWithDiffWriteLocked(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object}},System.Collections.Generic.List{JetBrains.Application.Settings.Storage.KeyPathComponents})">
            <summary>
            Does a batch-set to the out-of-transaction storage when committing a transaction.
            Writer lock on diff-to-stream must be held by the caller.
            </summary>
            <param name="items">Transaction changes to apply.</param>
            <param name="keysChanged">Keys which were changed by the batch-change must be written here.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.TransactionData.InTransactionStorage">
            <summary>
            The transaction is currently implemented as one more storage which actually implements all reading &amp; writing. That's it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.TransactionData.OuterTransactionStorage">
            <summary>
            In case of nested transaction, the nearest outer storage (storage from the parent transaction). Otherwise, <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.TransactionData.OutOfTransactionStorage"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageFlat.TransactionData.OutOfTransactionStorage">
            <summary>
            The same storage, but outside all transaction. That's the interface which the outer world uses for accessing the storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.AssertValidLocalName(System.String)">
            <summary>
            The storage key string (full name) is a slash-separated list of local names. Each local name must comply with the identified rules (Ll,Lu,Lt,Lo,Lm,Nd,Pc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.IsValidLocalName(System.String,JetBrains.Util.OnError)">
            <summary>
            The storage key string (full name) is a slash-separated list of local names. Each local name must comply with the identified rules (Ll,Lu,Lt,Lo,Lm,Nd,Pc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.ValueEquals(System.Object,System.Object)">
            <summary>
              <para>Value “equals” to take possible byte arrays into account.</para>
              <para>Possible raw storage value types include a few primitive POD types, strings, and byte arrays. The latter need some special Equals handling.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.ResolveAutoSerializer(JetBrains.Application.Settings.SettingsStoreSerializerType,JetBrains.Util.dataStructures.Sources.StringSource@)">
            <summary>
            If the serializer choice (<paramref name="serializer"/>) is <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto"/>, picks a specific serializer based on the actual value type (<paramref name="sTypeFullName"/>). Otherwise, returns the serializer choice AS IS.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.GetSettingsStorageSerializedType(JetBrains.Util.dataStructures.Sources.StringSource@,JetBrains.Application.Settings.SettingsStoreSerializerType)">
            <summary>
            <para>Gets the type by which this entry would be represented in the settings key-value storage.</para>
            <para>The settings store only supports primitive types; complex ones are serialized, and their storage type depends on the particular serializer used.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.CoerceEntryDefaultValueToRuntimeType(System.Object,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>When a value has to be specified on an attribute, its type is limited to primitive types. Also, the primitive types might not match if an integer is specified where a floating-point type is expected.</para>
            <para>Conversion logic: basically, it's the <see cref="M:JetBrains.Extension.TypeEx.CoercePrimitiveValueToType(System.Object,System.Type,JetBrains.Util.ILogger)"/>, but with the addition that the default value for a string is <c>""</c> instead of <c>NULL</c> (because generally settings entries only store non-<c>NULL</c> values).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.GetStorageDefaultValue(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.StorageValueTypeId)">
            <summary>
            Gets an object with a default non-<c>Null</c> value for the given storage type (e.g. it'd be an empty string and an empty blob instead of <c>Null</c>s).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero">
            <summary>
            An implementation of the settings storage which natively operates on key-path-components and stores them along their hierarchy, in a tree structure.
            Its load &amp; save are externally driven in terms of entries (serialization formats are not this object's responsibility).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.myChangeSinks">
            <summary>
            The object is for keying, to correctly process the case when the same action is added twice under different lifetimes. This might happen as we're sharing the same sinklist among all transactions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.myHierarchy">
            <summary>
            Root node in the hierarchical structure which stores all the data.
            The nodes are trie-like, by key path components.
            This root is a fake node (empty component value) with list of actual roots.
            RW-locked with <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.LockHierarchy" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.myInterned">
            <summary>
            Interns string contents of the path components.
            Being a concurrent dictionary, needs no additional locking.
            Maps any key to the interned version.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.myLockSerialization">
            <summary>
            Held while a save or load process is in progress to avoid runnnig one more in parallel.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.CommitDiffToStream(System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object})">
            <summary>
              <para>Commits the diffs dictionary to the main dictionary, respecting recorded adds and removes.</para>
              <para>Normally is non-throwing.</para>
            </summary>
            <param name="main">Main dictionary. Will be overwritten by commit with changes from <paramref name="diff" />.</param>
            <param name="diff">Might be <c>Null</c> if there's no diff yet.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.BinarySerialization.Writer.WriteComponentPathDelta(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.KeyPathComponent},JetBrains.Application.Settings.Storage.KeyPathComponents@)">
            <summary>
            Updates <paramref name="componentsWriting" /> to match <paramref name="componentsNext" />. Adds the operations to <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.BinarySerialization.Writer.myWriter"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode">
            <summary>
            A node in the hierarchy tree.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.#ctor(JetBrains.Application.Settings.Storage.KeyPathComponent@)">
            <summary>
            A non-root node .ctor, component must be specified.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.#ctor">
            <summary>
            Root node ctor, does not take a component.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.Children">
            <summary>
            Child nodes.
            Operations: lookup by component (most often), enum, add/remove.
            Null until first filled. Currently never deleted back to Null.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.Component">
            <summary>
            The key path component of this node.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.IsEmpty">
            <summary>
            Gets if this node is totally empty (no value or children).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.IsFrozen">
            <summary>
            As a tree structure, the nodes trie can operate in the Copy-on-Write mode.
            This is useful for sharing the parts of the tree between transactions, without the need to always clone the whole tree.
            Frozen nodes are readonly forever and might be used for free-threaded reading regardless of the locks taken.
            The frozen state must always propagate to the bottom, and lifting the frozen state requires cloning the nodes up to the top.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.ValueInMemoryDiff">
            <summary>
            The value of this node which is in effect.
            If there're any in-memory changes to this node which have not been saved, it's different from <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.ValueInStream" /> until the next save.
            If the storage is not dirty, it's the same as <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.ValueInStream" />.
            All read/write APIs are operating with this value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.ValueInStream">
            <summary>
            Value of this node, as present in the serialization backend.
            <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.ValueInMemoryDiff" /> takes precedence.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.CreateRootNode">
            <summary>
            Creates the root node (does not have a component specified).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode.CloneCow">
            <summary>
            Does Copy-On-Write on the node. Re-mounts its children AS IS.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.LockHierarchy">
            <summary>
            Protects this hierarchy.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.RootNode">
            <summary>
            The root node of the hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.SetCore(JetBrains.Application.Settings.Storage.KeyPathComponents@,System.Object,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.SetWhat,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.Lock)">
            <summary>
            Implements the write.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="what"></param>
            <param name="locking"></param>
            <returns>Whether the effective value has changed.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkWithCow(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.Lock,System.Func{JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkState})">
            <summary>
            Walks the nodes tree in a way which supports copy-on-write when needed.
            Your function is called on every descendant node, DFS.
            If you see that you should change the node, and the node is readonly, yield <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkState.CowNeeded" /> from the function. You'll be called once again on the writable clone of the node.
            If you make the node empty, it will be removed from the tree for you automatically.
            Note that you might be called more than once for some nodes (if we're retracing after making smth writable).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkWithCow(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.Lock,System.Func{JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkState})">
            <summary>
            Walks the nodes tree in a way which supports copy-on-write when needed.
            Your function is called on every descendant node, DFS.
            If you see that you should change the node, and the node is readonly, yield <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkState.CowNeeded" /> from the function. You'll be called once again on the writable clone of the node.
            If you make the node empty, it will be removed from the tree for you automatically.
            Note that you might be called more than once for some nodes (if we're retracing after making smth writable).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkWithCow(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.KeyPathComponent},JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode,System.Collections.Generic.List{JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode},System.Func{JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.HNode,JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkState})">
            <summary>
            Walks the nodes tree in a way which supports copy-on-write when needed.
            Your function is called on every descendant node, DFS.
            If you see that you should change the node, and the node is readonly, yield <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkState.CowNeeded" /> from the function. You'll be called once again on the writable clone of the node.
            If you make the node empty, it will be removed from the tree for you automatically.
            Note that you might be called more than once for some nodes (if we're retracing after making smth writable).
            </summary>
            <param name="components">Key path of the current node, to call into the user callback. Modifiable.</param>
            <param name="node">Node to start the walk from (inclusive).</param>
            <param name="cache">Operations cache.</param>
            <param name="FWithNode">Your handling function.</param>
            <returns>If called from the rootmost node, always will be OK (as it's always writable). Otherwise, you must</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.SetCore_AssertValidValueType(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object@)">
            <summary>
            We're limiting the set of value types which can be held in the storage, this method checks if the limit is obeyed.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.Hierarchy.WalkState.CowNeeded">
            <summary>
            When returned from a call, means “make my node writable and call once more with the same parameters”.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.TransactionData.InTransactionHierarchy">
            <summary>
            The transaction is currently implemented as one more storage which actually implements all reading &amp; writing. That's it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.TransactionData.InnerTransactionContext">
            <summary>
            The context of our own transaction, this is the transaction ID as visible to outer users of the storage, while this class (transaction data) is the actual object implementing the transaction for this specific storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.TransactionData.OutOfTransactionStorage">
            <summary>
            The same storage, but outside all transaction. That's the interface which the outer world uses for accessing the storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.TransactionData.OuterTransactionContext">
            <summary>
            For a first-level transaction (opened under a “bare” storage), <c>NULL</c>.
            For a nested transaction, the context of the outer transaction.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.TransactionData.GetOuterTransactionHierarchy">
            <summary>
            In case of nested transaction, the nearest outer storage (storage from the parent transaction). Otherwise, <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHiero.TransactionData.OutOfTransactionStorage" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid">
            <summary>
            An implementation of the settings storage which natively operates on key-path-components and stores them in a flat hashtable, adding a trie for hierarchical lookup. The trie is employed used for child-enumerating needs, but has to be maintained by all write-operations.
            Its load &amp; save are externally driven in terms of entries (serialization formats are not this object's responsibility).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myFHierarchicalKeyPathComponentGetComponent">
            <summary>
            Cached binary search lookup delegate.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myDiffToStream">
            <summary>
              <para><see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myEntriesInStream" /> diff: what should be applied to the settings storage on save to ensure merging of the conflicts.</para>
              <para>Protected with <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myLockDiffToStream" />.</para>
              <para>Set to <c>Null</c> when empty to enabled lock-free checks for the “no-dirty” state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myEntriesInStream">
            <summary>
              <para>The settings storage entries, as read from the persistent storage.</para>
              <para>Maps keys to values.</para>
              <para>In-memory changes are stored in <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myDiffToStream" /> until persisted to the storage.</para>
              <para>Protected with the <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myLockEntriesInStream" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myHierarchyRoot">
            <summary>
            Root node in the hierarchical structure which enables child enumeration on key paths.
            This root is a fake node (empty component value) with list of actual roots.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myInterned">
            <summary>
            Interns string contents of the path components.
            Locked with <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myLockDiffToStream" /> (rational: we write-access diff-to-stream more often than entries-in-stream, and we do not need interneds apart from writing anyting => better reuse that lock).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myLockHierarchy">
            <summary>
            Locks access to the <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myHierarchyRoot" /> structure. It does not take parts in regular reads, so it's not RW-optimized.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.myLockSerialization">
            <summary>
            Held while a save or load process is in progress to avoid runnnig one more in parallel.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.CommitDiffToStream(System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},System.Collections.Generic.Dictionary{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object})">
            <summary>
              <para>Commits the diffs dictionary to the main dictionary, respecting recorded adds and removes.</para>
              <para>Normally is non-throwing.</para>
            </summary>
            <param name="main">Main dictionary. Will be overwritten by commit with changes from <paramref name="diff" />.</param>
            <param name="diff">Might be <c>Null</c> if there's no diff yet.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.GetOrCreateHierarchyRoot">
            <summary>
            Gets the hierarchy root, if there's an up-to-date version available.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.HierarchyAddKey(JetBrains.Application.Settings.Storage.KeyPathComponents)">
            <summary>
            Ensures the key exists in the hierarchy. Requires an outer lock.
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.HierarchyRemoveKey(JetBrains.Application.Settings.Storage.KeyPathComponents)">
            <summary>
            Ensures the key does not exist in the hierarchy. Requires an outer lock.
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.OnUpdateHierarchy(JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs)">
            <summary>
            Some settings have changed in the dictionary storage.
            Update the hierarchy to stay in sync.
            Note that this happens out of the dictionary storage lock, so the hierarchy state is out of sync at times.
            The consideration is that in absence of external synchronization we're not able to observe the difference in clients, and concurrent changes are not a problem because in this handler we'd be always updating hierarchy to the up-to-date
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.SetBatchWithDiffWriteLocked(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object}},System.Collections.Generic.List{JetBrains.Application.Settings.Storage.KeyPathComponents})">
            <summary>
            Does a batch-set to the out-of-transaction storage when committing a transaction.
            Writer lock on diff-to-stream must be held by the caller.
            </summary>
            <param name="items">Transaction changes to apply.</param>
            <param name="keysChanged">Keys which were changed by the batch-change must be written here.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.HierarchicalKeyPathComponent">
            <summary>
            A node in the tree which maintains the keys hierarchy to speed up children enumerations.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.HierarchicalKeyPathComponent.IsDefined">
            <summary>
            True on nodes which are terminal in some key path component paths.
            False if the node is there just for holding some children, but does not correspond to any actual nodes in the dictionary storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.TransactionData.InTransactionStorage">
            <summary>
            The transaction is currently implemented as one more storage which actually implements all reading &amp; writing. That's it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.TransactionData.OutOfTransactionStorage">
            <summary>
            The same storage, but outside all transaction. That's the interface which the outer world uses for accessing the storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.TransactionData.OuterTransactionStorage">
            <summary>
            In case of nested transaction, the nearest outer storage (storage from the parent transaction). Otherwise, <see cref="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHybrid.TransactionData.OutOfTransactionStorage" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag">
            <summary>
            When storage is loaded from the external source, varies its behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag.FirstTime">
            <summary>
            The storage contents is dropped, no events are fired for newly-loaded items.
            Good for first-time loading of the storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag.SecondTime">
            <summary>
            Applies diff from the source, fires all of the events appropriate.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageProvidersCollection">
            <summary>
            <para>Normally, you should export <see cref="T:JetBrains.Application.Settings.IProvider`1"/> interfaces of <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorage"/> and <see cref="T:JetBrains.Application.Settings.ISettingsStorageMountPoint"/> on your component so that they became available to the Settings Store.</para>
            <para>In case this is undesirable, those storages and mounts can be added to the items collections on this class to be exposed on behalf of this class.</para>
            </summary>
            <remarks>Currently, this is the only way to expose storages/mounts from child containers (like Solution/Project) to the shell-level container, because child containers won't be traversed for interfaces.</remarks>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageProvidersCollection.Storages">
            <summary>
            Live collection of storages. Exposed to the shell-level component container.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageProvidersCollection.MountPoints">
            <summary>
            Live collection of mounting points. Exposed to the shell-level component container.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageTransactionContext">
            <summary>
            Default implementation for <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageTransactionContext.#ctor(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Creates a new empty transaction context without storages in it. You may call <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.AttachStorages(System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.Storage.ISettingsStorage})"/> then (see method documentation).
            </summary>
            <param name="lifetime">Transaction lifetime. All of the uncommitted changes will be reverted. It's not necessary to call <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.RevertAllStorages"/> explicitly.</param>
            <param name="name"><see cref="P:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.Name"/>.</param>
            <param name="transactionOuter">If this is a nested transaction, identifies the outer transaction.</param>
            <param name="logger"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageTransactionContext.myMapStorageToTransactionData">
            <summary>
            Copy-on-write, so has lock-free read access.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalPerProductStorage">
            <summary>
            User settings: the storage serving the Global context, specific to the current product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings">
            <summary>
            Helpers for working with global settings layers (per-product and all-products).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings.BindForWritingToAllProducts">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStore" /> to the application-wide context so that writes were SmartSaved to the All-Products Settings layer (affecting any higher-priority writable layers if they contain conflicting values).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings.ProductGlobalLayerId">
            <summary>
              <para>Identifies the This-Product-Global-Settings <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">user-friendly settings layer</see>.</para>
              <para>To get the layer, obtain or create a <see cref="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers" /> instance and ask it for the layer by its ID.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.DefaultFileStorages.GlobalSettings.BindForSmartWritingToMountPointOverrideReadonly(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.ContextRange)">
            <summary>
            Helper function for binding to a smart-save context which turns the specified readonly mount into a writable one and specifies it as the last-wide-context-mount (which means that no writes will go to lower-priority layers, and higher-priority layers will be updated to agree to the setting being written).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Format.Base64Blob">
            <summary>
            Represents serialization of the BLOB type as a BASE64 string.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ContentSubstring">
            <summary>
            Packs character ranges in string content of a <see cref="T:JetBrains.Application.Settings.Storage.KeyPathComponent"/> into a single DWORD.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.ContentSubstring.RawOffset">
            <summary>
            Offset of content.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.ContentSubstring.RawLengthPlus1">
            <summary>
            Length of content, plus <c>1</c>, if defined.
            If <c>0</c>, then the content length is unlimied (take up to the end). This is the default value in the structure.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.ContentSubstring.RawValue">
            <summary>
            The union of offset and length.
            <c>0</c> means the substring is not limited and the content should be taken as the whole string.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ContentSubstring.IsWhole">
            <summary>
            Whether the whole content should be taken.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ContentSubstring.Whole">
            <summary>
            Gets a content substring for getting whole content.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorage">
            <summary>
            Interface to the key-value settings storage (representing a physical storage on disk or a file from the Web).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorage.Name">
            <summary>
            Gets the user-friendly storage name. This is used for telling storages apart in the mount points list
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Get(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Tries to get the value of the key. 
            </summary>
            <param name="key">Key.</param>
            <param name="transaction"></param>
            <returns>Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.StorageValueTypeId"/>), or <c>Null</c> if the value for this key is not set.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Set(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Sets or resets the value of the key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.StorageValueTypeId"/>) to assign, or <c>Null</c> to reset the value of the given key.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Advises changes to the stored values.
            A change happens both when setting a new value thru <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Set(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)"/> and when synchronizing to external changes to the disk storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Enum(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Enumerates keys and values in the storage.
            The lock is held throughout the whole enumeration process, so you should minimize your callback activities as much as possible.
            </summary>
            <param name="root">The root key from which the enumeration should start. Its children or subtree will be enumerated. To enumerate the whole storage, pass in an empty (but non-<c>Null</c>) key path list here. This function MIGHT modify the key path list in the <paramref name="root"/> on each step by appending the child/ancestor key path components to it. The path prefix which you pass in is never modified though. Upon function exit, the original value is restored.</param>
            <param name="nTakeChildLevelOnly">If nonzero, ancestors of the specified level will be enumerated (such keys whose key path is the <paramref name="root"/> plus one <paramref name="nTakeChildLevelOnly"/> components). If <c>0</c>, the whole subtree will be enumerated, which includes the <paramref name="root"/> itself (if there's a value for it in the storage), and any ancestors (to whom <paramref name="root"/> path is a prefix).</param>
            <param name="FCallback">Your callback which is invoked on every iteration for each key-value pair encountered in the enumeration.
            The callback parameters are the key and non-<c>Null</c> value of the item. Note that the implementation MIGHT reuse the path you passed in as <paramref name="root"/> to be modified on each iteration to point to the current key path. You should not be performing lengthy operations or calling the storage recursively within this callback because the storage lock is held during the whole operation.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.AttachToTransaction(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Makes sure this storage is attached to the specific transaction.
            This method only guarantees that read-repeatable within the transaction will not see any data written to the storage after this point.
            </summary>
            <param name="lifetime"></param>
            <param name="transactionToAttach">Transaction context in which this storage should work in transactional fashion.</param>
            <param name="transactionOuter">The current transaction context, if we're opening a nested transaction.</param>
            <returns>Transaction data of this storage.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.EraseSubtree(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Erases the given key, as well as its whole subtree.
            Pass in an empty list of key components to erase the whole storage contents.
            </summary>
            <param name="root"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageEx_Obsolete.GetObsolete(JetBrains.Application.Settings.Storage.ISettingsStorage,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Tries to get the value of the key. 
            </summary>
            <param name="thіs"></param>
            <param name="key">Key.</param>
            <param name="transaction"></param>
            <returns>Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.StorageValueTypeId"/>), or <c>Null</c> if the value for this key is not set.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageEx_Obsolete.SetObsolete(JetBrains.Application.Settings.Storage.ISettingsStorage,System.String,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Sets or resets the value of the key.
            </summary>
            <param name="thіs"></param>
            <param name="key">Key.</param>
            <param name="value">Either a value of one of the predefined types (<see cref="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.StorageValueTypeId"/>) to assign, or <c>Null</c> to reset the value of the given key.</param>
            <param name="transaction"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorageSerializable">
            <summary>
            A contract to require both interfaces.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext">
            <summary>
            <para>Denotes a transaction opened over a group of <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorage"/> objects.</para>
            <para>To create a new transaction, you create an instance of this interface and add storages to it (or access storages passing them the new context, which also adds them to the transaction).</para> 
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.Name">
            <summary>
            A name to tell transactions apart.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.AttachStorages(System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.Storage.ISettingsStorage})">
            <summary>
            <para>Adds storages to the transaction. It's OK to pass storages which are already in this transaction, or to pass the same storage multiple times.</para>
            <para>Calling storage APIs with this transaction context without adding them to the transaction first is also OK, but in such a case the read-repeatable isolation starts working upon the fist call. Invoking this method on all the storages of interest begins read-repeatable on them.</para>
            </summary>
            <param name="storages"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.RevertAllStorages">
            <summary>
            Reverts all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.CommitAllStorages">
            <summary>
            Commits all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext.GetTransactionData``1(JetBrains.Application.Settings.Storage.ISettingsStorage)">
            <summary>
            Helper method for the storages themselves. Gives them the per-storage-per-transaction data associated with this transaction.
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData">
            <summary>
            An interface for settings storage transaction to talk to the storage in its transaction.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData.Storage">
            <summary>
            <para>Gets the storage this transaction has been created for.</para>
            <para>Note that even though new <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorage"/> objects might be created to server the transaction, this is always the same object as the out-of-all-transactions storage.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData.Commit">
            <summary>
            Commits all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageTransactionData.Revert">
            <summary>
            Reverts all of the in-transaction modifications.
            The transaction remains operable until its lifetime terminates.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.KeyPathComponent">
            <summary>
            A single entry in the storage key path contained in <see cref="T:JetBrains.Application.Settings.Storage.KeyPathComponents"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.Content">
            <summary>
            String content providing the path component as a substring.
            If <c>Null</c>, then this object is in an uninitialized state (semantically <c>Null</c>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.ContentSubstring">
            <summary>
            Defines which substring of the <see cref="F:JetBrains.Application.Settings.Storage.KeyPathComponent.Content"/> should be used.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.ContentPrefix">
            <summary>
            Optional character prefix of the path component, prepended to the substring of <see cref="F:JetBrains.Application.Settings.Storage.KeyPathComponent.Content"/>.
            <c>0</c> for no prefix.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.EqualityComparer">
            <summary>
            A generic equality comparer. Use it with data structures if you would like to avoid boxing on any comparer operation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponent.GetPathComponentSlow">
            <summary>
            Renders the content substring and the prefix as a string. Might do substrings and concatenation, so is possibly slow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponent.Write(System.Text.StringBuilder)">
            <summary>
            Writes self into a stringbuilder. Does not create any intermediate strings, but writing to a stringbuilder is not too good in mem/perf anyway.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponent.AsNormalized">
            <summary>
            Normalizes the component for interning, so that the optimal representation of the component were stored.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.KeyPathComponents">
            <summary>
            A list of <see cref="T:JetBrains.Application.Settings.Storage.KeyPathComponent"/> objects which constitute a settings storage key path.
            The path is operated as splitted into <see cref="F:JetBrains.Application.Settings.Storage.KeyPathComponents.PathSeparatorChar"/>-splitted components because in most use cases it's composed from such components based on the context of access.
            When path originates as components, this allows to avoid concatenating strings for lookup.
            When path originates as a whole string, the components are pointing into character ranges within that string instead of actually creating substrings, so this scenario does not have memory penalty anyway.
            This class is a typed wrapper for a list of components.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.KeyPathComponents.Components">
            <summary>
            The list of components. Might be <c>Null</c> when this struct is just created, so take care.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Parse(System.String)">
            <summary>
            Parses a set of components over a string.
            There is always at least one component.
            Leading and trailing slashes are ignored, any other slashes separate components, even if zero-length.
            Components are pointing into character ranges within <paramref name="s"/> instead of creating substrings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.ParseInterned(System.String,JetBrains.Util.DataStructures.ChunkHashSet{JetBrains.Application.Settings.Storage.KeyPathComponent})">
            <summary>
            Parses a set of components over a string following some invariants: certain chars are prefetched into prefix, and the strings are interned.
            There is always at least one component.
            Leading and trailing slashes are ignored, any other slashes separate components, even if zero-length.
            Components are created over individual strings, which are interned.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.RenderToStringSlow(System.Boolean)">
            <summary>
            The reverse to <see cref="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Parse(System.String)"/>, should not be using in practice because it actually writes everything into a string-builder.
            Leading slash is an option, trailing slash is never added.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Intern(JetBrains.Util.DataStructures.ChunkHashSet{JetBrains.Application.Settings.Storage.KeyPathComponent})">
            <summary>
            Interns strings in all path components.
            </summary>
            <param name="interneds"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Clone">
            <summary>
            Even though this wrapper is a structure (to save on allocating an object), the list of path components inside is a reference object, so it will be shared when this value is passed along.
            If you'd like to persist the value you have received, you have to clone the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.KeyPathComponents.Clone(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.KeyPathComponent}@)">
            <summary>
            Even though this wrapper is a structure (to save on allocating an object), the list of path components inside is a reference object, so it will be shared when this value is passed along.
            If you'd like to persist the value you have received, you have to clone the list.
            </summary>
            <remarks>The <see cref="T:System.Collections.Generic.IList`1" /> of the components in the cloned instance is always a <see cref="T:System.Collections.Generic.List`1" />, can call a concrete type bypassing the interface if used locally.</remarks>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs">
            <summary>
            Args for <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorage.AdviseChange(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageChangeArgs.Keys">
            <summary>
              <para>The list of the keys which were assigned to a new value or whose value was reset.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Substring">
            <summary>
            A structure which adds one DWORD to the string pointer to identify a substring within a string without acyually producing the truncated string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Substring.CommitToString">
            <summary>
            Applies offset and length to get the substring.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesReader">
            <summary>
            State machine for reading settings entries from a possibly-broken XML stream.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.myXmlReader">
            <summary>
            The XML reader actually used for reading. Non-NULL while we're operational.
            Could be either directly the reader passed in, or the wrapping positional XML reader, if we're recording positions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.myLocationAwareXmlReader">
            <summary>
            Wrapping XML reader to know the positions, if we're recording positions. Otherwise, NULL. Also indicates whether we're recording positions.
            When non-NULL, points to the same object as <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.myXmlReader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Entries">
            <summary>
            What we've read from the stream up to the current moment.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositions">
            <summary>
            Records positions of the entries encountered as pairs of entry key and position.
            Note that entry keys are not unique here because each entry might be encountered multiple times in the stream (which is not valid, but possible). The count might be larger than <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Entries"/> for that reason.
            Note that this list might contain positions of invalid entries (without a key, with an invalid value, and so on).
            Empty unless <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag.Record"/> in ctor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.ResourceDictionaryPositions">
            <summary>
            Records positions of <see cref="T:System.Windows.ResourceDictionary"/> elements (normally the root element holding all of the entries) encountered in the stream.
            A valid stream should have exactly one, at the root, parenting all of the entries.
            Empty unless <see cref="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag.Record"/> in ctor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Run(System.Xml.XmlReader,JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag)">
            <summary>
            Runs the reader. Fluent.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.ReadEntryValueData.XmlSpace">
            <summary>
            XML Space (preserve/default) will be applied to value content after reading it thru, when we'll be positioned on the next element already, must use the actual entry element's value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_ReadEntryElementStart_GetEntryKey">
            <summary>
            The key is in the x:Key attribute on the entry element.
            As our entry elements are only convertible from a string value (cannot be assigned thru a property in either attribute or element syntax), the value must be given as text content of the element (this cannot be mixed content, XAML parser fails on that "Cannot have property elements on objects created via TypeConverter"). Thus there's no place to give x:Key in element syntax, and it can be only in the attribute.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_Any_GetEntryTypeId">
            <summary>
            When reader is at an element (opening tag of an element, or an empty element), checks the element fq name to see if it's a settings entry element. Throws if it's not.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_Any_IsResourceDictionaryElement">
            <summary>
            Gets if the current element is a resource dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.Step_Any_TryGetEntryTypeId">
            <summary>
            When reader is at an element (opening tag of an element, or an empty element), checks the element fq name to see if it's a settings entry element. <c>Null</c> if it's not.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.Initial">
            <summary>
            Before stepping.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.GenericRead">
            <summary>
            Default reading state. Waiting for an entry element.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.UsedUp">
            <summary>
            When done.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryElementStart">
            <summary>
            We've encountered an element which is likely an entry, called when the reader is positioned on this element to acknowledge entry type/key and start reading its value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryValueBegin">
            <summary>
            After acknowledging the entry element, initializes into value reading. Still positioned on the entry element.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryValueEndClear">
            <summary>
            We're thru with reading entry value content nodes, store the entry value and proceed to generic-read.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.State.ReadEntryValueNodes">
            <summary>
            The reader is positioned inside the value content, we're reading the nodes and collecting the content.
            Looking for either end tag of content element (checking by reader depth) or for any other entries which might erroneously be placed inside (eg when an element closing tag is lost during merge).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesReader.EntryPositionsFlag">
            <summary>
            Whether to record locations of the entries when scanning through the XML document.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter">
            <summary>
            Utility for writing settings entry into an XML stream based on the existing possibly-broken XML stream with entries and various other XML data.
            The writer must persist the existing non-settings element and order of the already-existing entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run(System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Action{System.Xml.XmlReader}},System.Action{System.Action{System.Xml.XmlWriter}},JetBrains.Util.ILogger,JetBrains.Util.ILogger)">
            <summary>
            Runs the task.
            </summary>
            <param name="entries">The entries to be written.</param>
            <param name="FCreateReader">
            <para>Opens the reader to the previously existing XML stream which should be updated with the new entries.</para>
            <para>Might be called up to two times, first for choosing the writing positions for the new entries, then for streaming into the output writer.</para>
            <para>Yield <c>NULL</c> if there were no pre-existing stream (e.g. writing for the first time).</para>
            <para>Note: <paramref name="FCreateReader"/> and <paramref name="FCreateWriter"/> cannot be on the same stream (file, etc) because they might be created at the same time to pipe the content thru.</para>
            </param>
            <param name="FCreateWriter">
            <para>Opens the writer to emit the new XML stream (which includes the new entries and any other nodes from the previously existing stream, if there were any).</para>
            <para>If this function is never called during the run, then the output is empty and you might delete the storage altogether.</para>
            <para>Note: <paramref name="FCreateReader"/> and <paramref name="FCreateWriter"/> cannot be on the same stream (file, etc) because they might be created at the same time to pipe the content thru.</para>
            </param>
            <param name="loggerForReading">Logging facility used by the entries reader reading the existing entries stream.</param>
            <param name="loggerForWriting">Logging facility used by this class when writing data.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_WriteThruSingleNode(System.Xml.XmlWriter,System.Xml.XmlReader,JetBrains.Util.ILogger)">
            <summary>
            For simple node types, writes them thru.
            Based on <see cref="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)"/>, but only handles single-node types and never calls Read on the reader.
            The above mentioned std method is only good for elements. When called on a text node, also kills the next element ('cause it awaits for some kind of EndElement to stop).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_WriteThroughElementOpeningTag(JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader,System.Xml.XmlWriter)">
            <summary>
            Pipes the opening tag of an element thru.
            </summary>
            <param name="xmlreader"></param>
            <param name="xmlwriter"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_IsElementWithEntriesInside(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},System.Int32,JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,JetBrains.Util.ILogger)">
            <summary>
            Looks up quickly if there're any entry positions child to the element identified by the position.
            </summary>
            <param name="elementactions">Sorted actions list.</param>
            <param name="nIndexInElementActions">Index of the current position in the sorted actions list. Must be AFTER a <see cref="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.EntryElementAction@,System.String@,JetBrains.Util.ILogger)"/> lookup for the current position.</param>
            <param name="position">Position of the element we're checking for child entries.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_IsElementEntrysFirstChild(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},System.Int32,JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition)">
            <summary>
            Looks up quickly if this element is the first child of an entry.
            Removing the first entry child element “reveals” the content nodes of the parent that were previously blocked by this element.
            </summary>
            <param name="elementactions">Sorted actions list.</param>
            <param name="nIndexInElementActions">Index of the current position in the sorted actions list. Must be AFTER a <see cref="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.EntryElementAction@,System.String@,JetBrains.Util.ILogger)"/> lookup for the current position.</param>
            <param name="position">Position of the element we're checking for being the first child.</param>
            <remarks>How: look into the previous position, if it's our parent => we're the first child.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.Run_UpdateExistingXml_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.EntryElementAction@,System.String@,JetBrains.Util.ILogger)">
            <summary>
            Looks up the next sequential item in the sorted list.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult">
            <summary>
            What's been done to the output stream, and how you should treat it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NewSignificantContent">
            <summary>
            The XML Writer creator was called, the new significant content (different from the previous one) has been written. Should be persisted to media.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NoChange">
            <summary>
            There're no changes to do to the content, the old one could be used. If a file, just don't touch.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NoSignificantContent">
            <summary>
            There're no entries to write.
            The XML Writer creator was called, the insignificant content (any non-entry elements encountered in the input stream) has been written.
            Generally, should be persisted to media (to maintain any content we don't understand, eg from newer versions).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.RunResult.NoContentAtAll">
            <summary>
            There're no entries to write, and there were no insignificant content (any non-entry elements encountered in the input stream).
            The XML Writer creator was called, and the settings storage XML stream infrastructure has been emitted, but there's nothing else.
            If the file presence is important (e.g. per-project settings), the file might be freely deleted.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter.XX_GetValueAndTypeId(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.StorageValueTypeId@,System.Object@)">
            <summary>
            Safely gets the value out of the map, checks that it's of a valid type, and gets its Type ID.
            This method throws all of its errors out.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior">
            <summary>
            Modifies behavior of the settings storages on the filesystem.
            The fully-functional implementation to use with real storages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.QueryEditFile(JetBrains.Util.FileSystemPath)">
            <summary>
              <para>Request environment (like integrated SCC in the VS) if the file can be modified.</para>
              <para>Can only be called on the main thread.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.DiskOperationSuppression">
            <summary>
            Add a token here to prevent file settings storages from being loaded from disk.
            This also suppresses save because saving a non-loaded storage would destroy the data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IsDiskOperationAllowed">
            <summary>
            You should not be loading from disk or saving to disk if this is <c>False</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IsSaveToDiskAllowed">
            <summary>
            You should not be saving to disk if this is <c>False</c>. Note that when <see cref="P:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.IsDiskOperationAllowed" /> gets <c>False</c>, this property also gets <c>False</c> automatically.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.Logger">
            <summary>
            All settings-related logging should go into this logger.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.SaveToDiskSuppression">
            <summary>
            Add a token here to prevent file settings storages from being saved to disk.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior">
            <summary>
            Modifies behavior of the settings storages on the filesystem.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.DiskOperationSuppression">
            <summary>
            Add a token here to prevent file settings storages from being loaded from disk.
            This also suppresses save because saving a non-loaded storage would destroy the data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.IsDiskOperationAllowed">
            <summary>
            You should not be loading from disk or saving to disk if this is <c>False</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.IsSaveToDiskAllowed">
            <summary>
            You should not be saving to disk if this is <c>False</c>. Note that when <see cref="P:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.IsDiskOperationAllowed" /> gets <c>False</c>, this property also gets <c>False</c> automatically.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.Logger">
            <summary>
            All settings-related logging should go into this logger.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.SaveToDiskSuppression">
            <summary>
            Add a token here to prevent file settings storages from being saved to disk.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior.QueryEditFile(JetBrains.Util.FileSystemPath)">
            <summary>
              <para>Request environment (like integrated SCC in the VS) if the file can be modified.</para>
              <para>Can only be called on the main thread.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehaviorProvider">
            <summary>
            Allows to publish behavior flag from your component instead of adding them to <see cref="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior" />. This way, your class is implicitly imported into <see cref="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior" /> rather than the other way, which guarantees that all other clients of <see cref="T:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior" /> get your all-time suppressions from the very beginning.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehaviorProvider.Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior)">
            <summary>
            Do the modifications to the behavior in this method, or remember the value to manipulate further on your state changes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehaviorProvider.QueryEditFile(JetBrains.Util.FileSystemPath)">
            <summary>
              <para>Request environment (like integrated SCC in the VS) if the file can be modified.</para>
              <para>Can only be called on the main thread.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization">
            <summary>
            The basic serialization interface for the default storage implementation.
            Works right on in-memory representation of the storage entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Loads entries into the storage.
            If the storage has any in-memory changes, they remain intact.
            </summary>
            <param name="flag"></param>
            <param name="FReadEntries">Storage calls this function when it needs to read the entries. This makes sure it sets any applicable locks around the read operation.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean})">
            <summary>
            Saves the entries from the storage.
            </summary>
            <param name="FSave">Storage calls this function on the exact entries to be saved. The return value indicates whether the save succeeds (if the storage can assume in-memory diff applied).</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached">
            <summary>
            Adds caching capabilities to storage serialization.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.FirstTimeLoadFromCache(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}},System.IO.BinaryReader)">
            <summary>
            This method takes precedence over <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})" />. If you provided data on previous <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.SaveToCache(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean},System.IO.BinaryWriter)" />, and it's still up-to-date, you'll have a chance to load from the cached data instead of parsing the XML anew.
            If you implement this method and your called understands the interface and there's cache data available, on the first-load you'll be called for this method instead of <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})" />. If you cannot read the binary cache data, fallback to reading <see cref="!:FReadEntries" />.
            The caller might always call <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})" /> instead.
            If you throw an exception out of this method, caller assumes reading the cache did not succeed and calls into <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})" />.
            </summary>
            <returns>If were loaded OK. If not, then the caller assumes <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})" /> has to be called, and that the binary cache file is corrupt and has to be deleted.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.SaveToCache(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean},System.IO.BinaryWriter)">
            <summary>
            This method supercedes the regular <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean})" />. If you implement this method, and your caller understands the interface, you'll be called into this method and not into <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean})" />.
            </summary>
            <param name="FSaveEntries">As in <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization.Save(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean})" />. You must provide entries to this function.</param>
            <param name="writer">Specific to this method. Fast-save a binary cache presentation of your state in your own format so that to get it into <see cref="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached.FirstTimeLoadFromCache(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}},System.IO.BinaryReader)" />.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.Name">
            <summary>
            Gets the user-friendly storage name. This is used for telling storages apart in the mount points list
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy">
            <summary>
            Gets the list of entries changed in-memory (<c>Null</c> value means it should be reset).
            Used mostly for diagnostics needs.
            Creates a copy of the dictionary (so use sparingly), because the actual dictionary access is lock-protected.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsDirty">
            <summary>
            Gets whether the storage has any dirty (in-memory) changes pending for save. Free-threaded.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageSerializationCommon.IsEmpty">
            <summary>
            Gets if there're no entries in the storage. This includes both entries-from-stream and dirty entries.
            This allows for optimized behavior if we've got nothing to save.
            Yields <c>Null</c> when it's a bit too expensive to calculate the result.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization">
            <summary>
            Handles binding settings storage to some physical media exposed as a stream.
            If you got some stream (e.g. a file stream), you can use this interface to serialize storages.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Action{System.Action{System.IO.Stream}},JetBrains.Util.ILogger)">
            <summary>
            </summary>
            <param name="flag"></param>
            <param name="FWithStream"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization.Save(System.Action{System.Action{System.IO.Stream}},System.Action{System.Action{System.IO.Stream}},JetBrains.Util.ILogger,JetBrains.Util.ILogger)">
            <summary>
            </summary>
            <param name="FWithReadStream"></param>
            <param name="FWithWriteStream"></param>
            <param name="loggerForReading"></param>
            <param name="loggerForWriting"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader">
            <summary>
            A wrapping XML reader that can tell the (stable enough) position of the current node. These positions have linear order and can be used to identify the same node when reading the document for the next time.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementIndices">
            <summary>
            Hierarchical index of the current element (if it's the current node), or the element containing the current node for non-element nodes (such as text, comments, whitespace, etc).
            The first item is the index of the top-level element (always <c>0</c> in a valid XML document, could be above zero in XML fragments), the second is the index of its child element, and so on.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.OffsetFromElementTag">
            <summary>
            If the current node is the element tag, <c>0</c> for opening, closing, and self-closed tags (see <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKind"/> for kind).
            If the current node is not an element tag, the number of nodes encountered since the last element opening, closing, or self-closed tag (see <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKind"/>for kind: <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.Opening"/> means the node is after the opening tag and is a child of that element; <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.Closing"/> or <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.EmptyElement"/> means it's after the closing or self-closed tag, i.e. the node is on the same level as the element).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKind">
            <summary>
            For an element tag node: the kind of that tag.
            For a non-element node: <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementTagKinds.Opening"/> means that <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementIndices"/> points to the parent element of this node (there were no previous sibling elements to address from yet), and other values mean that <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.ElementIndices"/> is some prev-prev-...-sibling of this node, and nodes are counted starting with its closing tag (which is <see cref="F:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.OffsetFromElementTag"/>=<c>0</c>), or the self-closed tag.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.Depth">
            <summary>
            Gets the depth of the node indicated by the position, just the same way as <see cref="P:System.Xml.XmlReader.Depth"/> would do.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.Clone">
            <summary>
            Snapshots the position.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.IsElement">
            <summary>
            Gets whether this node is either an element opening tag or an empty element's self-closed tag.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.CreateFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Creates a node position from an XML element in an XML document.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodePosition.GetXmlElementByPosition(System.Xml.XmlDocument)">
            <summary>
            Looks up an element in the XML document by this position.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.CurrentPositionSnapshot">
            <summary>
            Creates a copy of the current node hierarchical position (contains a list of indices, so a snapshot is required of you'd like to store it for later use).
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.CurrentPositionVolatile">
            <summary>
            Returns a view on the current position (without cloning its byref part). Cannot be stored for later use because will be invalidated on the next step.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.NodeAbsoluteIndex">
            <summary>
            Zero-based absolute index of the node.
            Note that this depends on reader settings (whether to autoexpand entities or not) and read process decisions (whether to resolve into each particular entity or not), so it's recommended to use the <see cref="M:JetBrains.Application.Settings.Storage.Persistence.LocationAwareXmlReader.CurrentPositionSnapshot"/>, which is accurate on element nodes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.MockFileSettingsStorageBehavior">
            <summary>
            Special implementation for simple one-time storages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache">
            <summary>
            Helps with binary caching of the XML settings storages content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.CreateWriterOnStream(System.IO.Stream)">
            <summary>
            Creates a writer with all of the parameters (e.g. encoding must match when reading and writing).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.TryGetCachedStorageReader(JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity,JetBrains.Util.ILogger)">
            <summary>
            On the first load, try reading the cached binary representation of the settings file, if exists.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity.CreateFromFileProperty(JetBrains.DataFlow.IProperty{JetBrains.Util.FileSystemPath},JetBrains.Util.ILogger)">
            <summary>
            Same as <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity.TryCreateFromFile(JetBrains.Util.FileSystemPath,JetBrains.Util.ILogger)" />, but for a long-run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.CleanupCachedStorage(JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity,JetBrains.Util.ILogger)">
            <summary>
            Deletes the storage disk file once the caller finds it necessary.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers">
            <summary>
            Helpers for serializing Settings Storage entries to and from XML.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SystemWindows">
            <summary>
            XML NS alias for the System.Windows namespace (and a couple others).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SystemInMscorlib">
            <summary>
            XML NS for the System namespace in mscorlib (CLR NS form only, no URI alias).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SystemWindowsMarkup">
            <summary>
            XML NS alias for the System.Windows.Markup namespace.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.NamespaceUri.SettingsStorageFormat">
            <summary>
            XML NS alias for our CLR namespace that contains the BLOB class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlHelpers.XmlNamespaceDescriptions.ResolveNamespaceUri(System.String)">
            <summary>
            Tries to resolve XML namespace URI in any form to one of the known kinds (could be a CLR namespace, an alias URI, etc).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerialization">
            <summary>
            Operates over <see cref="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization" /> (whose serialization works on entries' in-memory representation). Uses <see cref="T:JetBrains.Application.Settings.Storage.Persistence.EntriesReader" /> and <see cref="T:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter" /> to convert it into XML serialization over the given stream.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching">
            <summary>
            Operates over <see cref="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerialization" /> (whose serialization works on entries' in-memory representation). Uses <see cref="T:JetBrains.Application.Settings.Storage.Persistence.EntriesReader" /> and <see cref="T:JetBrains.Application.Settings.Storage.Persistence.EntriesWriter" /> to convert it into XML serialization over the given stream.
            Supports the binary cache to avoid re-parsing the XML stream on each run, if the storage implements <see cref="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageEntriesSerializationCached" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.LoadResult">
            <summary>
            Reports results of the <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.Load(JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageLoadFlag,System.Action{System.Action{System.IO.Stream}},JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity,JetBrains.Util.ILogger)" /> function.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.LoadResult.LoadSource">
            <summary>
            Where the loaded data came from.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.LoadSource">
            <summary>
            Where the loaded data came from.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.LoadSource.None">
            <summary>
            There was no data (e.g. XML file did not exist on disk).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.LoadSource.XmlStream">
            <summary>
            Parsed the XML stream.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.LoadSource.BinaryCache">
            <summary>
            Got an up-to-date binary cache for the source and executed treebuilding off it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.SaveResult.EntriesWriterResult">
            <summary>
            Gets the result of writing the XML form of the storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStorageXmlStreamSerializationWithBinaryCaching.SaveResult.FlushBinaryCache">
            <summary>
            Call to flush the binary cache (when the identity is already known, which only happens after the XML stream is saved successfully to disk and gets its final timestamp and file length, but the lock is not released yet).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageBase"/> to a disk file.
            </summary>
            <remarks>
            <para>Path is supplied as a property. Whenever the property value changes, or the file content pointed to by the path changes, the settings storage is reloaded.</para>
            <para>Behavior depending on the path and its file conditions (when discovered):</para>
            <para>• Path is <c>Null</c>: means the disk storage is not available, operate in-memory only (e.g. temp solution — doesn't have the file yet). Action: memory storage operates normally (do not clear), no reload actions are taken. We hope to have some path for the final save, but if not, the settings will be dropped.</para>
            <para>• Path is non-<c>Null</c>, but the file does not exist: possible causes: either the storage got empty and the file has been deleted, or the file has been temporarily deleted during a write or merge operation, or the storage path has changed to the new location. Action: if path has changed, save in-memory storage ASAP to the new location; otherwise, keep memory storage intact for some amount of time or until a forced save is requested; at then, reload as if from the empty storage (all in-memory content but for the dirty diff is deleted).</para>
            <para>• Path is non-<c>Null</c>, the file exists, but its content is invalid: keep the in-memory copy for as long as possible; when forced to save, overwrite the corrupted content.</para>
            <para>• Path is non-<c>Null</c>, the file exists, and its content is valid: read to replace the from-stream cache of the storage, the dirty diff remains as-is.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsReloadReschedulled">
            <summary>
            A failed reload is reschedulled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsSaveReschedulled">
            <summary>
            A failed save is reschedulled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Storage.ISettingsStorageSerializable,JetBrains.DataFlow.IProperty{JetBrains.Util.FileSystemPath},JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent,JetBrains.Application.FileSystemTracker.IFileSystemTracker,JetBrains.Application.Threading.IThreading,JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior)">
            <summary>
            
            </summary>
            <param name="lifetime"></param>
            <param name="storage">What loads and saves from the stream on our file.</param>
            <param name="path">
            <para>The path to the file, or <c>Null</c> if the file location is not currently available.</para>
            <para>The value is used for reading (<c>Null</c> will cause a clean storage) or writing (<c>Null</c> will skip writing and keep all changes in memory).</para>
            <para>Also the path is watched for changes to reload new content when the file is modified (e.g. from SCC or another instance).</para>
            <para>When you point the path at the new location, it gets overwritten with the current in-memory changes.</para>
            </param>
            <param name="whenNoContent"></param>
            <param name="filetracker">Enables watching for external changes.</param>
            <param name="threading"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Init_SaveOnDirty(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Storage.ISettingsStorageSerializable,JetBrains.Application.Threading.IThreading,JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior)">
            <summary>
            Schedulles save operation when the storage gets dirty.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveRequested">
            <summary>
            Requests that the save operation be done soon. Can be called on any thread, does not wait for save to be completed. Normally schedulles save on another thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myLockSerialization">
            <summary>
            Protects the file read-write operations in the whole.
            Also synchronizes lifetime termination on this object.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.FileWhenNoContent">
            <summary>
            Whether the file should be deleted if there're no settings in it (and no unrecognized content we're obliged to keep).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReschedulled(System.Boolean)">
            <summary>
            Updates whether there's a pending reload reschedulled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveReschedulled(System.Boolean)">
            <summary>
            Updates whether there's a pending save reschedulled.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload_IsWaitingForMissedFile(JetBrains.Util.FileSystemPath,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReason)">
            <summary>
            <para>This function is called when the file we're about to reload is missing from disk.</para>
            <para>If the file we're trying to reload is reported missing, wait for it for some time to reappear (e.g. user is in process of replacing the file with another version).</para>
            <para>This means that for some time we're not treating the missing file as an empty storage to load, but keeping the in-memory content in hope to load the actual file.</para>
            </summary>
            <param name="path"></param>
            <param name="reason"></param>
            <returns>Whether the reload process should be aborted and wait for the file to reappear.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload_ReadStream(JetBrains.Util.FileSystemPath,System.Action{System.IO.Stream})">
            <summary>
            Reads the file stream while loading with appropriate locking and lockwaiting, throws out if the lock cannot be achieved in the time alotted.
            </summary>
            <param name="path"></param>
            <param name="F"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save(JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags)">
            <summary>
            <para>Requests that the storage be saved to disk immediately and synchronously, on the main thread.</para>
            <para>Thread affinity is enforced to enable placing <see cref="M:JetBrains.Application.Settings.Storage.Persistence.FileSettingsStorageBehavior.QueryEditFile(JetBrains.Util.FileSystemPath)"/> calls which are affined to the main thread.</para>
            <para>If you're calling from a background thread, or do not care about synchronous execution, use <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveRequested"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save_QueryEditFile">
            <summary>
            <para>Queries into the behavior whether the file could be written.</para>
            <para>Main thread only, due to SCC limitations.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save_WriteFile_OpenStreamAndTakeLock(JetBrains.Lifetimes.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags,System.Boolean)">
            <summary>
            Opens the file stream exclusively, which constitutes the interprocess lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Save_WriteFile_PromoteWriteCache(System.IO.FileStream,JetBrains.Util.dataStructures.ChunkedMemoryStream,System.Action{JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity},JetBrains.Util.FileSystemPath)">
            <summary>
            Applies written data to the on-disk file.
            As we're now writing into an in-memory stream, this means writing the stream into the file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags.ApplyInMemoryDiff">
            <summary>
            Normal behavior. The modifications done to the storage are applied to what we got on disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags.OverwriteWithMemoryContent">
            <summary>
            Any on-disk content is ignored, in-memory loaded content &amp; changes are forced onto disk.
            This is the behavior when storage is relocated to the new path (otherwise, all of the settings would be lost).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags.WriteIfPossible">
            <summary>
            Just some new settings have been written to the storage, and that would be a nice idea to save it to the disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags.ForcedWrite">
            <summary>
            We really have to save now. For example, we're exiting and there're dirty changes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.OptionWaitForDisappearedFileTimeout">
            <summary>
            See remarks to class. When the file disappears, we expect it might come back within this amount of time.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsStorageCorruptedOnLoad">
            <summary>
            See remarks on the class.
            Means we should not auto-overwrite the settings, assuming the corruption might be due to the SCC conflict and might be fixed soon.
            Only overwrite on forced save if there is dirty content (but make a backup in such a case).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.StreamAccessRetryInitialMs">
            <summary>
            Initial interval before file access retry attempts, in milliseconds. Doubled with each next try.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.MaxReadStreamAccessWaitMs">
            <summary>
            The maximum waiting time to gain access to a stream when loading, in milliseconds.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.RescheduleOnFailedSaveOrReloadInterval">
            <summary>
            If <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload(JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReason)"/> can't get lock for reading the file, reschedulles the next reloading.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.myIsFileEverSeenExisting">
            <summary>
            This flag helps with <see cref="M:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.Reload_IsWaitingForMissedFile(JetBrains.Util.FileSystemPath,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.ReloadReason)"/> to only wait for disappeared files (which were ever seen existing). If the file has never been ever seen, it can be overwritten or treated as missing immediately, without the delay.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent">
            <summary>
            What to do when we're about to save a settings file that has no content.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent.KeepFile">
            <summary>
            Save a valid empty file.
            After the first save, a file will appear on disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent.DeleteFile">
            <summary>
            Delete the file from disk.
            Preferrable for SCC-keeped files (otherwise, empty storages would be created for all solutions/projects).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage">
            <summary>
            Implements a storage with a disk XML file backend.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.#ctor(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.Util.FileSystemPath,JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent,JetBrains.Application.Threading.IThreading,JetBrains.Application.FileSystemTracker.IFileSystemTracker,JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior,JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent)">
            <summary>
            </summary>
            <param name="lifetime"></param>
            <param name="name"></param>
            <param name="path">
              <para>The path to the file, or <c>Null</c> if the file location is not currently available.</para>
              <para>The value is used for reading (<c>Null</c> will cause a clean storage) or writing (<c>Null</c> will skip writing and keep all changes in memory).</para>
              <para>Also the path is watched for changes to reload new content when the file is modified (e.g. from SCC or another instance).</para>
              <para>When you point the path at the new location, it gets overwritten with the current in-memory changes.</para>
            </param>
            <param name="whenNoContent"></param>
            <param name="threading"></param>
            <param name="filetracker"></param>
            <param name="behavior"></param>
            <param name="interned"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.#ctor(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.DataFlow.IProperty{JetBrains.Util.FileSystemPath},JetBrains.Application.Settings.Storage.Persistence.SettingsStoreSerializationToXmlDiskFile.SavingEmptyContent,JetBrains.Application.Threading.IThreading,JetBrains.Application.FileSystemTracker.IFileSystemTracker,JetBrains.Application.Settings.Storage.Persistence.IFileSettingsStorageBehavior,JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent)">
            <summary>
            
            </summary>
            <param name="lifetime"></param>
            <param name="name"></param>
            <param name="path">
            <para>The path to the file, or <c>Null</c> if the file location is not currently available.</para>
            <para>The value is used for reading (<c>Null</c> will cause a clean storage) or writing (<c>Null</c> will skip writing and keep all changes in memory).</para>
            <para>Also the path is watched for changes to reload new content when the file is modified (e.g. from SCC or another instance).</para>
            <para>When you point the path at the new location, it gets overwritten with the current in-memory changes.</para>
            </param>
            <param name="whenNoContent"></param>
            <param name="threading"></param>
            <param name="filetracker"></param>
            <param name="behavior"></param>
            <param name="interned"></param>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.FileWhenNoContent">
            <summary>
            Whether the file should be deleted if there're no settings in it (and no unrecognized content we're obliged to keep).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.ReloadFromDiskRequested">
            <summary>
            Requests an async reload of settings from disk in some near future.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.ReloadFromDiskNow">
            <summary>
            Reloads from disk synchronously.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.SaveToDiskRequested">
            <summary>
            Requests an async saving of settings to disk in some near future.
            Note that the settings are saved even if there're no in-memory changes (there's no need to request a save with in-memory changes because it will occur automatically).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.SaveToDiskNow">
            <summary>
            Saves to disk synchronously.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.SettingsStorageFileExtensionNoDot">
            <summary>
            The default extensions for Settings Storage files in XML format.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.Persistence.XmlFileSettingsStorage.SettingsStorageFileExtensionWithDot">
            <summary>
            The default extensions for Settings Storage files in XML format.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIndexedEntry`2.SnapshotAndFreeze">
            <summary>
            Prefetches all indexed values from the store (=snapshot) and stops reading from the actual store (=freeze).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.IndexedEntry`2.myStore">
            <summary>
            Non-<c>Null</c> when live, <c>Null</c>ed when we get snapshot&amp;frozen.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.IndexedEntry`2.mySnapshot">
            <summary>
            <c>Null</c> until we do a snapshot.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IndexedEntry`2.SnapshotAndFreeze">
            <summary>
            Prefetches all indexed values from the store (=snapshot) and stops reading from the actual store (=freeze).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsOptimization">
            <summary>
            Attaches key getting/setting to the instance of this object to enable caching of some data required for speedup.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsOptimization.GetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the values of all of the settings key's entries and returns them in a settings key class.</para>
            <para>This is always non-<c>Null</c> for a simple (non-indexed) key whose parents are also all simple. If there's no data on that key in the storage, default values will be returned for all of its entries.</para>
            <para>For an indexed key, or a key with an indexed ancestor, this will be <c>Null</c> if no instance is defined for the particular index value specified in <see cref="!:keyIndices"/>.</para>
            </summary>
            <param name="store"></param>
            <param name="key">The settigs key to be read.</param>
            <param name="keyIndices">If this key is parented by one or more indexed keys or is indexed itself, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An instance of the key class with non-indeexed entries read with <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> and indexed entries exposed as with <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedEntryAccess(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger)"/>.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsOptimization.SetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para> Stores the values of all of the settings key's scalar entries.</para>
            <para> It's semantic is equivalent to calling <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for each scalar entry of the key. </para>
            <param name="key">The settigs key to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry</param>
            <param name="keyIndices">If <paramref name="key"/> is indexed itself or is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountGetObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountGetRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountGetSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountSetObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.String,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountSetRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEraseRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountSetSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumKeysObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            NOTE: for enumerating the whole mount, your key path must contain exactly the first NULL component
            NOTE: the key MIGHT contain mountpaht in the first component when your callback is invoked.
            <paramref name="keyPathComponentsWithEmptySlot"/> must be specifically prepared for calling this method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Accesses the mounted settings storage taking its mounting path into account.
            NOTE: for enumerating the whole mount, your key path must contain exactly the first NULL component
            NOTE: the key MIGHT contain mountpaht in the first component when your callback is invoked.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountCopyTo(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger,System.String)">
            <summary>
            Copies the contents of the mounting point as raw storage physical data (the part of the storage mounted under this mount point).
            </summary>
            <param name="transactionTarget"></param>
            <param name="logger"></param>
            <param name="sRootKey">Optional. If only a part of the mounting point's contents should be copied, specifies the root key of the data to copy. If <c>Null</c> or an empty string, the whole storage under the mounting path will be copied.</param>
            <param name="thіs"></param>
            <param name="target"></param>
            <param name="transactionThis"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountErase(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Erases all of the storage contents under the mounting point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEraseSubtreeSlow(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Erases all of the storage contents under the mounting point.
            </summary>
            <param name="mount"></param>
            <param name="keyPathComponentsExact">NULL or empty to erase the whole mounted content. A specific path to erase all the content under it.</param>
            <param name="transaction"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEraseSubtreeRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Erases all of the storage contents under the mounting point.
            </summary>
            <param name="mount"></param>
            <param name="keyPathComponentsWithEmptySlot">Empty (but for the placeholder) to erase the whole mounted content. A specific path to erase all the content under it.</param>
            <param name="transaction"></param>
            <param name="logger"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.ListWithoutPrefix`1">
            <summary>
            Wraps the list so that it appears as if missing one first item.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ListWithPrefix`1">
            <summary>
            Wraps the list so that it appears as if having one extra first item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsOptimization.DoMeSlowly">
            <summary>
            <para>Gets the dummy implementation which does not do any optimizations.</para>
            <para>This is a placeholder. In performance-critical real-life uses, import <see cref="T:JetBrains.Application.Settings.ISettingsOptimization"/> from your container and use this instance in place of this parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsOptimization.OptimizeDefault">
            <summary>
            Gets the default static optimization cache.
            It is still preferrable to import the optimization as a component.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgsEx_Visit.VisitContext">
            <summary>
            Pass params thru hierarchy in a special class to save stack space when recursing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.HasExplicitValue``2(JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>Don't use this unless you really know what you're doing!</summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.HasExplicitValue``3(JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation,System.Linq.Expressions.Expression{System.Func{``0,JetBrains.Application.Settings.IIndexedEntry{``1,``2}}},``1,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>Don't use this unless you really know what you're doing!</summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.HasExplicitValue(JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>Don't use this unless you really know what you're doing!</summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue``2(JetBrains.Application.Settings.IContextBoundSettingsStore,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue``1(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.DataContext.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue``1(JetBrains.Application.Settings.ISettingsStore,System.Func{JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ResetValue(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.DataContext.IDataContext,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedEntryAccess(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger)">
            <summary>
            Creates a dictionary-like object for reading indexed entry values by index.
            </summary>
            <param name="thіs"></param>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="logger"></param>
            <returns>An <see cref="T:JetBrains.Application.Settings.IIndexedEntry`2"/> object.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedKey``1(JetBrains.Application.Settings.IContextBoundSettingsStore,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key is marked as created in the highest-priority storage of the current context.</para>
            <para>This accounts for these two basic scenarios:</para>
            <para>• Create an instance of the key which has all of its entries in their default values (without setting any entries on the key).</para>
            <para>• Mark an instance of an indexed key inherited from a lower-priority storage as defined in this higher-priority storage so that it were available even when the lower-priority storage is removed.</para>
            <para>In most other cases, like when you're setting entries on an indexed key, the indexed key instance will be reported as existing in the current combination of layers (the existence status might be coming from a lower-priority storage).</para>
            </summary>
            <param name="thіs"></param>
            <param name="keyIndices">An index to the key to be created, as well as indices to any parent indexed keys of that key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.IsIndexedKeyDefined``1(JetBrains.Application.Settings.IContextBoundSettingsStore,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Checks whether the instance of an indexed key is marked as created in any mounted storage of the current context.</para>
            </summary>
            <param name="thіs"></param>
            <param name="keyIndices">An index to the key to be checked, as well as indices to any parent indexed keys of that key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetValueLive``2(JetBrains.Application.Settings.ISettingsStore,JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},System.Linq.Expressions.Expression{System.Func{``0,``1}},JetBrains.Application.Threading.IThreading)">
            <summary>
            Gets the live value of the setting in the given context.
            </summary>
            <typeparam name="TEntryMemberType">Value type.</typeparam>
            <typeparam name="TKeyClass">Settings key class owning the settings entry.</typeparam>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="FDataContext">Identifies the context in which the retained-state value should be maintained. As the data context is lifetime-bound and expires on guard release, needs a function to produce the context at need. This function is guaranteed to be called on the primary thread under a guard.</param>
            <param name="lambdaexpression">The entry whose value is to be monitored.</param>
            <param name="threading"></param>
            <returns>A property that changes live as the setting changes.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetValueLive``1(JetBrains.Application.Settings.ISettingsStore,JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},JetBrains.Application.Settings.SettingsScalarEntry,JetBrains.Application.Threading.IThreading)">
            <summary>
            Gets the live value of the setting in the given context.
            </summary>
            <typeparam name="TEntryMemberType">Value type.</typeparam>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="FDataContext">Identifies the context in which the retained-state value should be maintained. As the data context is lifetime-bound and expires on guard release, needs a function to produce the context at need. This function is guaranteed to be called on the primary thread under a guard.</param>
            <param name="entry">The entry whose value is to be monitored.</param>
            <param name="threading"></param>
            <returns>A property that changes live as the setting changes.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetValueProperty``2(JetBrains.Application.Settings.IContextBoundSettingsStoreLive,JetBrains.Lifetimes.Lifetime,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of a non-indexed settings entry as a live property.</para>
            <para>The property will change its value (and fire change events) on the main thread when the entry value changes in this context. If you change property value externally, the new value will be applied to the entry in this context using the SmartSave strategy.</para>
            <para>Note that you will always get a meaningful value (the entry default value), even if the entry value has not been set, or if the entry parent key does not exist (if there's no instance for such indexed key index). If you're reading entries of an indexed key or its ancestors, verify that key instance exists first.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="lambdaexpression">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action)">
            <summary>
            <para>Advises the settings entry change event.</para>
            <para>Fires on any change in settings entries in any child key, in any settings context.</para>
            <para>To sink changes in a specific context only, <see cref="M:JetBrains.Application.Settings.ISettingsStore.BindToContextLive(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.BindToContextFlags)">bind the store to that context</see> and use its <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action)"/> method.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="entry">Entity to be watched for possible changes.</param>
            <param name="FOnChange">Executes when the change is detected.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsKey,System.Action)">
            <summary>
            <para>Advises the settings key change event.</para>
            <para>Fires on any change in settings entries in any child key, in any settings context.</para>
            <para>To sink changes in a specific context only, <see cref="M:JetBrains.Application.Settings.ISettingsStore.BindToContextLive(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.BindToContextFlags)">bind the store to that context</see> and use its <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.AdviseChange(JetBrains.Application.Settings.ISettingsChangedEventSource,JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsEntry,System.Action)"/> method.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Duration.</param>
            <param name="key">Entity to be watched for possible changes.</param>
            <param name="FOnChange">Executes when the change is detected.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.CopyTo(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Util.ILogger,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Copies all of the settings defined in the current context into the given context.
            </summary>
            <param name="thіs">Source context.</param>
            <param name="target">Target context to copy the settings into.</param>
            <param name="logger">Handles errors in this specific routine. Note that any of the store access errors will still go to the logger of that store.</param>
            <param name="keyRoot">Optional. If <c>Null</c>, the whole store available in this context is dumped. If non-<c>Null</c>, only those values under the given schema key are included.</param>
            <param name="keyIndices">Optional. Indices to <paramref name="keyRoot"/>, if it's specified.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.EnumEntryIndices(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gives out all of the indexed entry indices currently present in the store.</para>
            <para>Note that reading indexed entry values by some of these indices might actually return <c>Null</c> due to:</para>
            <para>• Multithreaded access to the setings store.</para>
            <para>• Some technical info leftovers present in the store under this index, but not the actual value.</para>
            <para>• The entry indexed value is set in a base layer and then removed in a higher-priority layer, in which case the removal technical entry will report the index as present, but the actual value will be missing.</para>
            </summary>
            <param name="thіs"></param>
            <param name="entry">Identifies the indexed entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined by the settings entry declaration.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.EnumKeyIndices(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gives out all of the indexed key indices currently present in the store.</para>
            <para>Note that checking <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> by some of these indices might actually return <c>False</c> due to:</para>
            <para>• Multithreaded access to the setings store.</para>
            <para>• Some technical info leftovers present in the store under this index, but not the actual value.</para>
            <para>• The key indexed instance is defined in a base layer and then removed in a higher-priority layer, in which case the removal technical record will report the index as present, but the actual key instance will be missing.</para>
            <para>• You're enumerating indices to an indexed key which is a descendant of another indexed key instance which is not defined itself.</para>
            </summary>
            <param name="thіs"></param>
            <param name="key">Identifies the indexed key.</param>
            <param name="parentKeyIndices">If this key is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key. Note that this should not include the index to the <paramref name="key"/> itself because its possible indices are to be enumerated, but it's not an error if it's present.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined in the settings key attribute.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ISettingsOptimization)">
            <summary>
            <para>Gets the values of all of the settings key's entries and returns them in a settings key class.</para>
            <para>This is always non-<c>Null</c> for a simple (non-indexed) key whose parents are also all simple. If there's no data on that key in the storage, default values will be returned for all of its entries.</para>
            <para>For an indexed key, or a key with an indexed ancestor, this will be <c>Null</c> if no instance is defined for the particular index value specified in <see cref="!:keyIndices"/>.</para>
            </summary>
            <param name="thіs"></param>
            <param name="key">The settigs key to be read.</param>
            <param name="keyIndices">If this key is parented by one or more indexed keys or is indexed itself, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="optimization">Allows to operate whole settings keys faster by applying object-specific optimizations.</param>
            <returns>An instance of the key class with non-indeexed entries read with <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> and indexed entries exposed as with <see cref="M:JetBrains.Application.Settings.SettingsStoreEx.CreateIndexedEntryAccess(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger)"/>.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.SetKey(JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.Application.Settings.SettingsKey,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ISettingsOptimization)">
            <summary>
            <para> Stores the values of all of the settings key's scalar entries.</para>
            <para> It's semantic is equivalent to calling <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for each scalar entry of the key. </para>
            </summary>
            <param name="key">The settigs key to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry</param>
            <param name="keyIndices">If <paramref name="key"/> is indexed itself or is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="optimization">Allows to operate whole settings keys faster by applying object-specific optimizations.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.ToImplementation(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Don't use this unless you know what you're doing
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.GetOrderedMountPointsInContext(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Returns the sequence of mounting points applicable to the specified context, sorted by priority ascending.
            </summary>
            <param name="thіs"></param>
            <param name="context">Filtering context.</param>
            <returns>Sequence.</returns>
            <remarks>This delegates to <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints" />, where there are additional overloads for multiple synchronous queries and asynchronous lock-safe execution.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.BindToMountPoints(JetBrains.Application.Settings.ISettingsStore,JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IListEvents{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.DataFlow.IProperty{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            The context would be live and the mounts list might also change with time.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsStoreEx.UnknownOriginFallback">
            <summary>
            For old APIs which cannot pass the origin correctly.
            WARNING: slow, as it takes the call stack.
            Upgrade to the newer APIs with an explicit origin.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.BindToMountPoints(JetBrains.Application.Settings.ISettingsStore,System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            This means just creating a new bound store on the mount points.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.BindToMountPointWithForcedDefaultValueWrites(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            Binds the context to a mount point so that setting values could be written to it even if they are default values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.BindToMountPoints(JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints,JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            This means just creating a new bound store on the mount points.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreEx.BindToMountPoints(JetBrains.Application.Settings.ISettingsStore,JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IProperty{JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints},JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            The context would be live and the mounts list might also change with time.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Defines the lifetime of this live context, because it tracks the live list of mounts and watches for changes.</param>
            <param name="mounts">The live list of mounts. This is allowed to change in a free-threaded manner. If changing the mounts set causes certain settings to change their values in this context, the appropriate change would be fired asynchronously and with a slight delay.</param>
            <param name="flags">Additional parameters for the context created.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ChangeDispatchHandlerAsyncDelegate">
            <summary>
              <see cref="M:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.RegisterForDispatch(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Implementation.ChangeDispatchHandlerAsyncDelegate)" />
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase">
            <summary>
            Core implementation for context bound settings stores.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.myFCreateIndexedKey_DefineKey">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.myFFillKeyPathComponentsAndCheckIsDefined_CheckKey">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
              <para>Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.</para>
              <para>NOTE: this function is used in much less cases now in favor of <see cref="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})" />, see NP-624.</para>
            </summary>
            <param name="keyPathComponents"></param>
            <param name="key"></param>
            <param name="keyIndices"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
              <para>Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.</para>
              <para>NOTE: this function is not used anymore in favor of <see cref="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})" />, see NP-624.</para>
            </summary>
            <param name="keyPathComponents"></param>
            <param name="entry"></param>
            <param name="indexToEntry"></param>
            <param name="keyIndices"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
              <para>Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.</para>
              <para>NOTE: this function actually always returns <c>True</c> , but marks the places which used to check for the key to be defined before the design was changed to always read the actual entry value, see NP-624.</para>
            </summary>
            <param name="keyPathComponents"></param>
            <param name="key"></param>
            <param name="keyIndices"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsAndCheckIsDefined_NotActuallyCheckingAnymore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
              <para>Builds storage keypath for the settings key. Does not check that all the indexed keys in the path are marked as defined in the store (but checks that all the key indices are supplied with <paramref name="keyIndices" />).</para>
              <para>NOTE: this function is identical to <see cref="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsWithoutChecking(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})" />, but marks the places which used to check for the key to be defined before the design was changed to always read the actual entry value, see NP-624.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.FillKeyPathComponentsWithoutChecking(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Builds storage keypath for the settings key. Does not check that all the indexed keys in the path are marked as defined in the store (but checks that all the key indices are supplied with <paramref name="keyIndices" />).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.GetInvolvedMountPointsCore">
            <summary>
            Backend for <see cref="P:JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints" />. Unlike the functor in the ctor, does not necessarily force refreshing the value before returning. This does not have to be a ctor param because we never have to call it from the ctor.
            This MUST NOT be called in ctor.
            </summary>
            <seealso cref="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.GetUpToDateMountsInfoForStorageOperations" />
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.JetBrains#Application#Settings#IContextBoundSettingsStore#BindToContextFlags">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.GetUpToDateMountsInfoForStorageOperations">
            <summary>
            Called by the base implementation when it needs to get the current mounts list (and recalculate it synchronously if required).
            This MUST NOT be called in ctor.
            </summary>
            <seealso cref="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.GetInvolvedMountPointsCore" />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.SetIndexedValueCore(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Object,System.Boolean,JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            Indexed entry value writer (gets come storage key info precached).
            Supports indexed entry values removal in higher-priority layers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.IndexedValues.IsRemoved">
            <summary>
            <c>True</c> if we've seen a removal record for this index.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.IndexedValues.LayerIndex">
            <summary>
            Layer idetity to combine entry deletion records with entry values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.IndexedValues.ValueSerialized">
            <summary>
              <para>Value serialized to a primitive storage type, as residing in the storage.</para>
              <para>Must be non-<c>Null</c> for a correct value record after the layer is processed. Can only be <c>Null</c> if we have encountered a value-removal record before the actual value record (<see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.IndexedValues.IsRemoved" /> is <c>True</c>). Such a situation after the layer is fully processed means the record should be ignored.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.KeyPathComponentsCached.KeyPathComponentsInUse.Components">
            <summary>
            Delegates to <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.KeyPathComponentsCached.KeyPathComponentsInUse.KeyPathComponents" />' <see cref="F:JetBrains.Application.Settings.Storage.KeyPathComponents.Components" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreBase.KeyPathComponentsCached.KeyPathComponentsInUse.Dispose">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.JetBrains#Application#Settings#ISettingsChangedEventSource#AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.GetInvolvedMountPointsCore">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.GetUpToDateMountsInfoForStorageOperations">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.JetBrains#Application#Settings#IContextBoundSettingsStoreLive#GetValueProperty2``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ApartmentForNotifications)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport">
            <summary>
            Creates and manages live value properties for <see cref="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive" />.
            Allows free-threaded property creation, so there's an object per each thread (<see cref="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment" />) managing that thread's proeprties.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myLifetime">
            <summary>
            This lifetime has been synchronized with termination (via <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myLockSynchronizeShutdown" />).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myLockSynchronizeShutdown">
            <summary>
            Has async threads. This lock makes sure the threads are all in a determinate state when the object is terminated on its home thread.
            Background threads take the reader lock when they're busy and cannot have the lifetime terminated.
            Foreground thread terminates the lifetime under a writer lock.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myMta">
            <summary>
            Per-apartment valueprop objects in MTA, all of them together, lazy-created.
            Protected with <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myLockApartmentsSet" />.
            See also <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myStas" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myStas">
            <summary>
            Per-apartment valueprops (within each thread there're no problems with threading issues).
            STAs per their thread.
            Protected with <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myLockApartmentsSet" />.
            See also <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.myMta" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ExecuteChangeAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsStoreChangeArgs)">
            <summary>
            Call initated by settings-store-change-sink, forwards the change to all apartments with properties.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.GetValueProperty``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Nullable{JetBrains.Application.Settings.ApartmentForNotifications})">
            <summary>
            Gets cached value property, or creates a new one.
            The property is bound to your <paramref name="lifetime" /> and not limited by the lifetime of the <see cref="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport" /> object because the latter might be terminated on any thread which would fire acknowledgement events on a thread not expected by your code. The property will live to the lifetime you pass in here. In all correct scenarios, this is not wider than <see cref="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.GetOrCreateForApartment(System.Nullable{JetBrains.Application.Settings.ApartmentForNotifications})">
            <summary>
            Demand-creates per-apartment property support objects.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment">
            <summary>
            Creates and manages properties in the single apartment on behalf of <see cref="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport" />. Changes to properties which originate in the settings store are fired within the same apartment only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ApartmentScheduler">
            <summary>
            Identifies the home apartment of this object: either an STA dispatcher scheduler, or JetScheduler for the MTA.
            Can only be used-accessed on home thread.
            The only exception is <see cref="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ExecuteChangeAsync(JetBrains.Application.Settings.SettingsStoreChangeArgs)" /> which is called on the change-dispatching background thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myActiveProperties">
            <summary>
            Properties which are alive.
            Protected with <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myLockPropertiesAndTheirLifetimes" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myLifetime">
            <summary>
            <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myLifetime" /> is synced with <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myLockSynchronizeShutdown" /> (both borrowed from the owner).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myLockSynchronizeShutdown">
            <summary>
            <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myLifetime" /> is synced with <see cref="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.myLockSynchronizeShutdown" /> (both borrowed from the owner).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ExecuteChangeAsync(JetBrains.Application.Settings.SettingsStoreChangeArgs)">
            <summary>
            This function is called on an arbitrary thread so that this object analyzed possible changes for its properties (on that thread) and then marshalled to the destination thread to update the property value, as appropriate.
            NOTE: this function is async, so owner calls this function without any termination synchronization, we should take precautions when accessing critical parts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.GetOrCreateValueProperty``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Gets or creates the property (in responce to a user's call to <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})" />).
            Must be called in the home apartment of this object.
            NOTE: shutdown synchronization lock must be held by the caller.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="lifetime"></param>
            <param name="entry"></param>
            <param name="keyIndices"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.GetValueProperty_Create``1(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.Storage.KeyPathComponents)">
            <summary>
            Works when the property has to be created.
            Must be called on home thread of this object.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty">
            <summary>
            Base untyped nongeneric property class to enable managing properties of all types in a loop.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty.FGetItemKey">
            <summary>
            Cached key getter for dictionary-like bin-search arrays.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty.TokenUpdateFromSettingsStore">
            <summary>
            When a property change is annotated with this token, then it's due to a sync to the settings store change.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty.AttachToLifetime(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Adds one more user request for this property to keep it alive.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty.Cast``1">
            <summary>
            Returns the typed version: casts if it's really the proper type, or thows if this is a property of some other type.
            </summary>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty.ReadValueFromStore">
            <summary>
            Re-reads property value from the Settings Store.
            NOTE: caller must synchronize with termination.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty`1">
            <summary>
            Wraps functioning of a single SettingsStore bidi-bound property.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty`1.#ctor(JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment,JetBrains.Util.ILogger)">
            <summary>
            NOTE: must be synchronized with termination by caller.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreLive.ValuePropertiesSupport.ValuePropertiesSupportApartment.ValueProperty`1.AttachToLifetime(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Property is attached to each of the user's lifetimes, to be terminated when there're no clients for the property.
            NOTE: shutdown synchronization lock must be held by the caller.
            NOTE: myOwner.myLockPropertiesAndTheirLifetimes must be held by the caller.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreTransient">
            <summary>
            Default implementation of a non-lifetimed (transient) context-bound settings store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreTransient.#ctor(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints,JetBrains.Application.Settings.BindToContextFlags,JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch,JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreTransient.GetInvolvedMountPointsCore">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ContextBoundSettingsStoreTransient.GetUpToDateMountsInfoForStorageOperations">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.DefaultIsAvailableOptimizedGroup">
            <summary>
            Default optimized group hosts just one item for which there was never ever a fitting group found.
            It does not accept any other items so that not to steal good items from their specialized groups.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultIsAvailableOptimizedGroup.myIsAdded">
            <summary>
            Tells if the item has not only been advertised by also actually added thru groups API.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultIsAvailableOptimizedGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#EvaluateItemsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.DefaultIsAvailableOptimizedGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#IsEmpty">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints">
            <summary>
            Helps with mounting your storages representing the default settings of the product: you cannot specify default values for indexed entries and keys, you have to mount a storage which provides them at the lowest-priortity level.
            You could use this component to load them from resources and such.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.LoadFromResources(JetBrains.Lifetimes.Lifetime,System.Reflection.Assembly,System.String)">
            <summary>
            Loads a settings storage from an XML resource and mounts into the settings store into the global context at a low priority.
            NOTE: you SHOULD rather implement <see cref="T:JetBrains.Application.Settings.IHaveDefaultSettingsStream" /> for pull-providing the default settings storage instead of calling this method push-style.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.LoadFromStream(JetBrains.Lifetimes.Lifetime,System.String,System.IO.Stream,JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity)">
            <summary>
            Loads a settings storage from an XML stream and mounts into the settings store into the global context at a low priority.
            NOTE: you SHOULD rather implement <see cref="T:JetBrains.Application.Settings.IHaveDefaultSettingsStream" /> for pull-providing the default settings storage instead of calling this method push-style.
            </summary>
            <param name="lifetime">Lifetime for the storage.</param>
            <param name="name">Storage name.</param>
            <param name="stream">The stream in Storage XML format to read the storage contents from. You can dispose of the stream immediately after calling this method.</param>
            <param name="identity">Optional identity to binary-cache the loading of this resource.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myBackingStorage">
            <summary>
            Our class is the settings storage façade, and this field implements the actual place where all the stuff collected from default settings providers is stored.
            Delay-created under <see cref="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myLockData" />, lock free reads.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myDefaultSettingsProvidersTossed">
            <summary>
            Lazy-inited. Tossed by root keys they provide, or to the legacy list.
            Delay-created under <see cref="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myLockData" />, lock free reads.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.myLockData">
            <summary>
            Process delay-initing objects which must be unique.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.ExecuteProviderCode(JetBrains.Application.Settings.IHaveDefaultSettings)">
            <summary>
            Delayed-executes loading settings from a provider.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsComposedStorage.ExecuteProviderStream(JetBrains.Application.Settings.IHaveDefaultSettingsStream)">
            <summary>
            Delayed-executes loading settings from a provider.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.myKeysTreeRoot">
            <summary>
            Root of the tree orgainized by settings storage key components. Providers which can tell their root keys are added to this tree on first access, and then executed and removed from this tree when smb first queries into that subtree.
            The root node represents the first key path component, but does not check its name, because that's the mount path and it does not matter.
            The root node's <see cref="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node.Providers" /> lists the legacy providers which do not have their key specified.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.#ctor(System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.IHaveDefaultSettingsStream},System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.IHaveDefaultSettings},System.Action{JetBrains.Application.Settings.IHaveDefaultSettingsStream},System.Action{JetBrains.Application.Settings.IHaveDefaultSettings},JetBrains.Application.Settings.ISettingsSchema,JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.ExecuteProvidersForKey(JetBrains.Application.Settings.Storage.KeyPathComponents@,System.Boolean)">
            <summary>
            We need to operate on the given key, so execute all possible providers ABOVE this key (a provider might contribute to any subkey, so all levels above are needed).
            <paramref name="isExecuteAllSubkeys" /> handles a special case when we're interested in all subkeys under this key as well (eg when doing an enumeration), which requires all providers BELOW this key to execute as well. Possibly leaves unexecuted providers in siblings to the key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.ExecuteProvidersForKey_ExecuteAllRecursive(JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node,JetBrains.Application.Settings.Storage.KeyPathComponents)">
            <summary>
            Triggered on the end of the key path in the rare case we need to execute all providers BELOW. Happens in case of an enum.
            Examples: an enum of all the live templates. Would trigger providers into live templates. Or a total enum, would trigger all providers at all.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node.#ctor(JetBrains.Application.Settings.Storage.KeyPathComponent)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node.Children">
            <summary>
            NULL or empty when no children. Sorted by <see cref="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node.LocalName" /> for binsearching.
            Threading: after inited in ctor, might be changed by removing nodes. Removed nodes remain valid and might still be walked by threads who captured them before removal. Copy-on-write with CAS modification to remove stale nodes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node.LocalName">
            <summary>
            The key path component of this node, one per node.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node.Providers">
            <summary>
            List of providers until they are executed, NULLed after that are all executed.
            Provides for this node (key path from root), or legacy unspecified-keys providers, if on the root node.
            Threading: when decided to execute, execution and NULLin must all happen under a lock on this node object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints.DefaultSettingsProvidersTossed.Node.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints">
            <summary>
            Groups together the information on the mount points that constitute this context-bound settings store, in a single immutable object instance.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.LowestPriorityWritableMount">
            <summary>
              <para>Gets the mounting point out of <see cref="F:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.Mounts" /> outside of which (with lower priority) writes are not allowed.</para>
              <para>NULL means that writes are unconstrained and could go into any of the writable mounts in this context.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.Mounts">
            <summary>
            Gets the mounting points present in the context at the moment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.AsCompositeStorage(JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
              <para>Constructs an <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorage" />-like interface which operates on the stack of mount points involved in this context, reading from the whole stack and writing into the part of the stack limited by <see cref="F:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.LowestPriorityWritableMount" />.</para>
              <para>Respects the mounting path of the mount points. All operations on this storage should only use the default mounting path.</para>
            </summary>
            <remarks>A lightweight operation, no allocations.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.Equals(JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.FromContextRange(JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.BindToContextFlags,System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            Convert ContextRange into the mounts list — non-live.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.FromContextRangeAsync(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.BindToContextFlags,System.Boolean,JetBrains.Util.ILogger)">
            <summary>
            Convert ContextRange into the mounts list — non-live.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints.MakeFilteringQueryForContextRange(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            When getting a list of mounts filtered to a context range, prepares the query to be executed by <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.IsAvailable">
            <summary>
            Availability function which tells whether the owner is avwailable in the given <see cref="T:JetBrains.Application.DataContext.IDataContext" />.
            Default implementation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.IsAvailable.Always">
            <summary>
            Always available.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.IsAvailable.Never">
            <summary>
            Never available.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.IsAvailable.Create(System.Func{JetBrains.Application.DataContext.IDataContext,System.Boolean})">
            <summary>
            Constructor wrapper for smart completion.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.IsAvailable.Everavailable.OptimizationGroup">
            <summary>
            Groups all of the items that are always available. Just pours them into the list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.IsAvailable.Everavailable.OptimizationGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#EvaluateItemsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.IsAvailable.Everavailable.OptimizationGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#IsEmpty">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.IsAvailable.Neveravailable.OptimizationGroup">
            <summary>
            Groups all of the items that are never available. Just skips them all off the output.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.IsAvailable.Neveravailable.OptimizationGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#EvaluateItemsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.IsAvailable.Neveravailable.OptimizationGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#IsEmpty">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1">
            <summary>
            Checks availability by comparing a dataconstant in the datacontext to the predefined value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.DataConstant{`0},`0,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Checks availability by comparing a dataconstant in the datacontext to the predefined value.
            </summary>
            <param name="lifetime">The limiting lifetime for the <paramref name="value" /> you supplied. The value will not be used after the lifetime terminates.</param>
            <param name="constant">The data constant to get from the data context.</param>
            <param name="value">The value of <paramref name="constant" /> in the datacontext must be equal to this <paramref name="value" /> for the availability to be <c>True</c>.</param>
            <param name="locks">Optional locks. If specified, data context access will be protected with a reader lock.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.OptimizedGroup">
            <summary>
            Hashmap of available items set by data constant value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.OptimizedGroup.myLockData">
            <summary>
            Protects access to <see cref="F:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.OptimizedGroup.myMapValueToItems" />. Expecting rare writes and often concurrent reads. Only trivial operations are lock-protected, so not expecting deadlocks or lengthy blocking.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.OptimizedGroup.myMapValueToItems">
            <summary>
            Stores the mounts, optimized for querying by values of this data constant.
            Protected with <see cref="F:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.OptimizedGroup.myLockData" />, so that a set of queries could be executed on exactly the same set of mounts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.OptimizedGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#EvaluateItemsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.IsAvailableByDataConstant`1.OptimizedGroup.JetBrains#Application#Settings#IIsAvailableOptimizedGroup#IsEmpty">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch">
            <summary>
            Defines the strategy for dispatching changes in settings.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.CurrentActivity">
            <summary>
            Gets the task for the current pending/running settings change dispatch activity. After you make a change to the settings store, either by writing to one of the storages or by changing the set of mount points, this would be an incomplete task which would change its state to completed as soon as all the clients finish processing their dispatch callbacks.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.RegisterForDispatch(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Implementation.ChangeDispatchHandlerAsyncDelegate)">
            <summary>
            Registers with a grouping-event-like interface for doing the dispatch.
            Call the returned function when you want to schedule a dispatch, and your <paramref name="λOnDispatchAsync" /> will be called on an undefined thread when it's time to (in the same manner as grouping event's incoming-outgoing).
            </summary>
            <param name="lifetime">Registration.</param>
            <param name="λOnDispatchAsync">The handler which would be called when you have requested processing and it's time to do the processing. If you run async operations within your callback, yield here a task of that activity so that to avoid reentering and running other change dispatch tasks in parallel. Also, settings store clients might learn when all of the initiated settings change activities are completed if this tasking is wired correctly.</param>
            <returns>The functor which you invoke when you see a need to be called back for changes processing. Safe to invoke multiple times, only one callback would happen.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.SuppressThreadDispatch">
            <summary>
            Prevents changes from being dispatched on this thread.
            You must thoroughly dispose of the value returned from this method.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.LazyContextBoundSettingsStore.JetBrains#Application#Settings#IContextBoundSettingsStore#BindToContextFlags">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange">
            <summary>
            Maintains a live list of mount points based on a context range for an operation of a live <see cref="T:JetBrains.Application.Settings.IContextBoundSettingsStoreLive" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.myCurrentMountsList">
            <summary>
            Updated under <see cref="F:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.myLockSetMountsList" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.myIsMountsListUpToDate">
            <summary>
            Falls when we see events in mount changes. The set isn't recalculated immediately to offload these operations from the main thread.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.JetBrains#Application#Settings#ILiveMountPointsInContext#Changed">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.ForceUpdateNow">
            <summary>
            Forces a synchronous update of the mounts list, eg when smb is reading from the bound store and must see the new values already.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.JetBrains#Application#Settings#ILiveMountPointsInContext#GetCurrentMountPoints">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.OnMountSetChangeDispatchedAsync">
            <summary>
            Deferred notification on change in set of possible mounts, update the <see cref="F:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.myCurrentMountsList" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.JetBrains#Application#Settings#ILiveMountPointsInContext#Origin">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange.TryPromoteNewMountList(JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints,JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints)">
            <summary>
             We have both sync and async calculations, possibly running in parallel
             Want to make sure we never overwrite a fresher calculation by an older one
             Unfortunately, we do not have a global snapshot number of the configuration, because calculating the mounts list form the context range involves data context queries to arbitrary stuff
             So run the calculations until nobody else has written a value (older? newer? no way to tell) during out run
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.Provider`1">
            <summary>
            Default implementation of the <see cref="T:JetBrains.Application.Settings.IProvider`1"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ReadonlyXmlStreamSettingsStorage.ReadFromXmlStream(JetBrains.Lifetimes.Lifetime,System.String,System.IO.Stream,JetBrains.Util.ILogger,JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent,JetBrains.Application.Settings.Storage.Persistence.SettingsStorageBinaryCache.StorageCacheIdentity)">
            <summary>
            Creates a new storage and reads XML stream contents into it.
            </summary>
            <param name="lifetime">Lifetime for the storage.</param>
            <param name="name">Storage name.</param>
            <param name="stream">The stream in Storage XML format to read the storage contents from. You can dispose of the stream immediately after calling this method.</param>
            <param name="logger"></param>
            <param name="interned"></param>
            <param name="identity">Optional identity to binary-cache the loading of this resource.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.RequestChangeDispatchDelegate">
            <summary>
              <see cref="M:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.RegisterForDispatch(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Implementation.ChangeDispatchHandlerAsyncDelegate)" />
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.ScalarSettingsStoreAccess">
            <summary>
            Simple interface for accessing the Settings Store on a single mounting point only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ScalarSettingsStoreAccess.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.
            </summary>
            <param name="keyPathComponents"></param>
            <param name="mount"> </param>
            <param name="entry"></param>
            <param name="indexToEntry"></param>
            <param name="keyIndices"></param>
            <param name="transaction"> </param>
            <param name="logger"> </param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ScalarSettingsStoreAccess.FillKeyPathComponentsAndCheckIsDefined(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Builds storage keypath for the settings key, and checks that all the indexed keys in the path are marked as defined in the store.
            </summary>
            <param name="keyPathComponents"></param>
            <param name="mount"> </param>
            <param name="key"></param>
            <param name="keyIndices"></param>
            <param name="transaction"> </param>
            <param name="logger"> </param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.ScalarSettingsStoreAccess.FillKeyPathComponentsWithoutChecking(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Builds storage keypath for the settings key. Does not check that all the indexed keys in the path are marked as defined in the store (but checks that all the key indices are supplied with <paramref name="keyIndices"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myAlwaysCompletedTask">
            <summary>
            Stub when no tasks are running.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myDelegateComparer">
            <summary>
              <para>The current implementation of delegate's hash code in >NET yields the same value for *all* the <see cref="T:System.Action" /> delegates, turning a hashset into a list. Differentiate over methods and targets.</para>
              <para>Our equality: don't allow implicit delegate equality because we're not doing “<c>-=</c>” on new method group delegates, so we're checking equality on references.</para>
              <para>Our hashcode: don't ask for method-info because it might be slow in getting out of the delegate, just check the closure instance; NOTE: now calling <c>Object::GetHashCode</c> nonvirtually on the instance to get its default instance-specific hashcode.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.TimeLimitForAsyncChangeClients">
            <summary>
            Maximum time we'd await for async change handling clients before we drop their chain of tasks (to complete independently, if ever) and proceed along with our chain and report the global status as done processing.
            This is needed to avoid cases when a client loses a chain of tasks accidentally and blocks changes processing forever.
            The timeout is thus a large one to allow for any reasonable activity to happen, but still protect in edge cases.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myCurrentActivityTask">
            <summary>
            Backs <see cref="P:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.CurrentActivity" />.
            The instance swaps from completed to non-completed under <see cref="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myLockDispatchRequests" /> (such as the list with requests).
            The instance swaps from non-completed to completed under <see cref="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myLockDispatchRequests" /> (such as the list with requests) and <see cref="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.mySemaDispatchExclusively" /> (to make sure there're no requests), but the task instance should not change its state to completed under either lock to avoid running arbitrary code under the lock.
            The prev task must be set to completed state outside the lock, to avoid possible deadlocks.
            Cannot be lazy-inited because otherwise it's hard to synchronize with the case when all the stuff has been taken out from the requests list but have not completed processing.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myHashDispatchRequests">
            <summary>
            Modified under <see cref="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myLockDispatchRequests" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myLockDispatchRequests">
            <summary>
            Protects <see cref="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myHashDispatchRequests" /> and <see cref="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myCurrentActivityTask" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.mySemaDispatchExclusively">
            <summary>
            Prevents dispatches running in parallel (mostly for the case of a manual commit).
            NOTE: not using <see cref="T:JetBrains.Util.Threading.Tasks.TaskSemaphore" /> because we sometimes need to wait on it
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.mySuspendCount">
            <summary>
            Suspend/resume counter, plus the box on which the lock is taken when reading/writing.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myΛResumeThreadDispatch">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.CurrentActivity">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.DispatchChangesAsync">
            <summary>
            Async case: grouping event's outgoing action has fired.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.GroupingEventRequestDispatch">
            <summary>
            Just requests gevent dispatch, after all of the internal structs are configured for that.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.OnResumeThreadDispatch">
            <summary>
            Returned from <see cref="M:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.SuppressThreadDispatch" /> as a cached delegate in <see cref="F:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.myΛResumeThreadDispatch" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsChangeDispatch.ServiceModeCommitPendingChangesAsync">
            <summary>
            Forces pending changes in the settings to be processed immediately.
            Not expected in production scenarios.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization">
            <summary>
            Runtime settings store values are freehand CLR types, while writing them as settings storage values or as parts of settings storage keys (as indices) requires serializing them to primitive types.
            Here are common accessors, and the <see cref="T:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization"/> class contains raw serialization routines.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageValueToEntryValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Storage value serialized to a primitive type => settings store settings entry value of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageValueToEntryValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Storage value serialized to a primitive type => settings store settings entry (indexed) value of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryValueToStorageValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Store settings entry value of a CLR type => Settings Storage value serialized to a primitive type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryValueToStorageValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Store settings entry (indexed) value of a CLR type => Settings Storage value serialized to a primitive type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryIndexToStorageValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Serializes an index to an indexed entry or an indexed ket for storing as a settings storage value (for info only; useful form of indices is within the settings storage key).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageKeyToEntryIndex(JetBrains.Application.Settings.SettingsIndexedEntry,System.String,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Storage key part serialized to a string => settings store indexed settings entry index of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.DeserializeStorageKeyToKeyIndex(JetBrains.Application.Settings.SettingsIndexedKey,System.String,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Storage key part serialized to a string => settings store indexed settings key index of a CLR type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeEntryIndexToStorageKey(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Store indexed settings entry index of a CLR type => part of the Settings Storage key serialized to a string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.SerializeKeyIndexToStorageKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Settings Store indexed settings key index of a CLR type => part of the Settings Storage key serialized to a string.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization">
            <summary>
            Contains raw serialization routines.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.DeserializeStorageValue(JetBrains.Application.Settings.SettingsStoreSerializerType,System.Object,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>Deserializes a value in the settings storage back into the CLR type.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.SerializeStorageValue(JetBrains.Application.Settings.SettingsStoreSerializerType,System.Object,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>Serializes a runtime CLR object for storing the value in the settings storage.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.DeserializeStorageKey(JetBrains.Application.Settings.SettingsStoreSerializerType,System.String,System.Type,JetBrains.Util.ILogger)">
            <summary>
            <para>Deserializes a value taken out of a settings storage key part back into the CLR type for use as an index to indexed keys/entries.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.SerializeStorageKey(JetBrains.Application.Settings.SettingsStoreSerializerType,System.Object,JetBrains.Util.ILogger)">
            <summary>
            <para>Serializes a runtime CLR index to indexed keys/entries object for using as a local name part of a settings storage key.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer">
            <summary>
            <para>Serializes an arbitrary string so that it fit the charset of a local name within a storage key.</para>
            <para>The secondary objective is to retain “good” strings unmangled, i.e. if a string fits the charset already, it should be written as is to save space, speed, and human-readability.</para>
            <para>Currently the algorithm lets latin alphanumerics through, and all other characters are encoded similar to QuotedPrintable, but with an underscore as a designator instead of an equality sign.</para>
            <para>To ensure identity on all serializations of the same key, we state that <c>[0-9A-Za-z]</c> are always let thru AS IS, and all others are encoded with an <see cref="F:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.EscapeCharacter">underscore</see> followed by four uppercase hex digits of the UTF-16 character code, starting with the most significant one.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.EscapeCharacter">
            <summary>
            The char which leads the quoted-printable escape sequence. Followed by four uppercase hex digits.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.Serialize(System.String)">
            <summary>
            Serializes an arbitrary strings into a localname-fitting form.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.Deserialize(System.String)">
            <summary>
            Deserializes a previously serialized string back into the original string.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsEntryToSettingsStorageSerialization.CoreStorageSerialization.StringToLocalNameSerializer.IsLetThruChar(System.Char)">
            <summary>
            If the char could be let thru.
            Note that even though an underscore is allowed within a local name, we reserve it for an escaping character and do not let thru.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint">
            <summary>
            Default implementation for a mountpoint.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint.#ctor(JetBrains.Application.Settings.Storage.ISettingsStorage,JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint.MountPath,JetBrains.Application.Settings.MountPointFlags,System.Double,JetBrains.Application.Settings.IIsAvailable,System.String)">
            <summary>
            
            </summary>
            <param name="storage"></param>
            <param name="pathInStorage"></param>
            <param name="flags"></param>
            <param name="priority"></param>
            <param name="isAvailable"></param>
            <param name="name">
            <para>The name of the mouting point. Usually, this is the same as the storage name. However, it is possible to mount different subpaths of a storage separately, in which case individual mount names should be provided.</para>
            <para><c>Null</c> to use the storage name automatically.</para>
            </param>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint.MountPath">
            <summary>
            A special typed wrapper for the mounted path.
            Its main goal is to provide a convenient shortcut to the default value for the mounting path.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint.MountPath.Value">
            <summary>
            Value inside the typed wrapper.
             TODO: minimize use of this value, because its behavior around slashes is inconsistent
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint.MountPath.KeyPathComponent">
            <summary>
            Value inside the typed wrapper.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoint.MountPath.Default">
            <summary>
            The default value to be used in most cases.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints">
            <summary>
            Accumulates all advertised settings storage mount points and optimizes typical access to them.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.Empty">
            <summary>
            Gets an instance without any mountpoints at all.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myLockMountsGroupedByAvailabilityLocked">
            <summary>
            Locks access to <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked">
            <summary>
              <para>Same mounts as in <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.MountPoints" /> and <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.EnumMountPointsLiveOrdered" />, but here they're gathered into groups of the same priority and same availability, with an option to quickly calculate availability of the whole group.</para>
              <para>The groups (all items in group of the same priority) are sorted by priority, ascending.</para>
              <para>For access for modification and when the <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLockFree" /> is outdated only.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLockFree">
            <summary>
              <para>A lock-free cache of <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked" />. When <c>Null</c>, should be recalculated from source.</para>
              <para>Recalculation is not performed on every modification because there might be many modifications in a row and here we get a chance to realloc the array only once.</para>
              <para>Reads are lock-free, writes are protected with the same lock as reads of <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLocked" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.MountPoints">
            <summary>
            Gets all of the mount points currently registered in the system as a live collection which only updates under the Reentrancy Guard.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.FilterMountsByContext(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Gets the <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.MountPoints">mount points</see> that are available in the given <paramref name="context" />, checking their <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable" /> against that context (or rather calling <see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup" /> where applicable).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.FilterMountsByContext(JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})">
            <summary>
            Gets the <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.MountPoints">mount points</see> that are available in the given context, checking their <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable" /> against that context (or rather calling <see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup" /> where applicable).
            Allows to execute multiple queries on a consistent set of mounts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.FilterMountsByContextAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})">
            <summary>
            Gets the <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.MountPoints">mount points</see> that are available in the given context, checking their <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable" /> against that context (or rather calling <see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup" /> where applicable).
            Allows to execute multiple queries on a consistent set of mounts.
            The async version allows the implementation to take any desired locks gracefully.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.AssertConsistentSlow">
            <summary>
            Self-check for calling only in consistency-checking mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.GetMountsGroupedByAvailabilityLockedCold">
            <summary>
            When cached value in <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.myMountsGroupedByAvailabilityLockFree" /> is not available, takes the lock and updates it.
            Cold path.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.SelfCheckControl">
            <summary>
            Whether the owning class should be doing slow self-checks on any modification to ensure consistent modification of the optimization groups.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.SelfCheckControlOffForNormalRuntime">
            <summary>
            Constructed by Shell to run the real product without this slow self-check.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints.SelfCheckControlOn">
            <summary>
            Constructed by Shell to run the real product without this slow self-check.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints">
            <summary>
            Emulates settings-storage-like API on a group of settings storages mounted with mounting points.
            This involves:
            (1) Dispatching access to mounting points favoring storage key translation against the mounting path of each mounting point.
            (2) When reading: looking thru the stack of the mounting points, along their priority, for the highest-priority defined value.
            (3) When writing: either writing to the highest possible mounting point, or implementing the SmartSave strategy.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.CopyToObsolete(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger,System.String)">
            <summary>
            Copies the contents of this layered storage to the target mounting point.
            </summary>
            <param name="mountTarget"></param>
            <param name="transactionThis"></param>
            <param name="transactionTarget"></param>
            <param name="logger">Reports outer errors with copying. Note that in-storage failures will go to the logging facility of the respective storage.</param>
            <param name="sRootKey">Optional. If only a part of the mounting point's contents should be copied, specifies the root key of the data to copy. If <c>Null</c> or an empty string, the whole storage under the mounting path will be copied.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.EnumKeysObsolete(System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Enums keys from all the mounts. Duplicates are removed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.EnumRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Enumerates all of the mounted storages, either under a specific key, or the whole mounted section.
            </summary>
            <param name="keyPathComponentsWithEmptySlot">Storage key to the root to be enumerated (with the first empty slot for MountEnum).</param>
            <param name="nTakeChildLevelOnly"></param>
            <param name="FCallback">Calls you back on each encountered storage key. Includes the mountpath in the first component (whatever it is, not necessarily default/empty). Might call multuple times for the same path if it's present in more than one mountpoint.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.EraseObsolete(System.String,System.Boolean,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Erases all of the data in all the [writable] layers under the given key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.GetExObsolete(System.String,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Gets the value along with the exact storage in which the value was found.
            If the value is not found in either storage, the whole return value is <c>Null</c>, not only the tuple components.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.GetExRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            Gets the value along with the exact storage in which the value was found.
            If the value is not found in either storage, the whole return value is <c>Null</c>, not only the tuple components.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.IsMountWritable(JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean)">
            <summary>
            Gets whether we should be writing into the mounting point, favoring its writeability flags and whether we're in the ignore-readonly-flag mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean)">
            <summary>
            A shortcut to <see cref="!:SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,object,JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object,JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.Settings.Storage.KeyPathComponent@,System.Object,JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean)">
            <summary>
            Sets a value, according with the SmartSave strategy.
            </summary>
            <remarks>
              <para>Here's a detailed description of what SmartSave startegy is about.</para>
              <para>We operate on a layered structure of settings mount points, ordered by priority, some of them writable and some not. A typical picture (as per specific context of a project file) would be:</para>
              <para>• Global User Settings (writable, lowest priority)</para>
              <para>• Solution Shared Settings (R/O)</para>
              <para>• Solution User Settings (writable)</para>
              <para>• Project Shared Settings (R/O)</para>
              <para>• Project User Settings (writable, highest priority)</para>
              <para>Besides that, non-indexed entries have default values defined for them in the Schema, which take effect when neither of this layers has a value defined for the entry.</para>
              <para>SmartSave follows the policy:</para>
              <para><b>(1)</b> As we set the value, the effective value of this context must be read from the deepest layer possible (Defaults is the best choice).</para>
              <para><b>(2)</b> The value assigned must also be effective in all the “parent” contexts of this context.</para>
              <para>These rules guarantee that if user changes a setting here he will also see the effect in other files/projects/solutions, unless explicitly overridden there.</para>
              <para>To fullfill rule 1, we shouldn't be writing into more-specific layers unless we really have to. By default we're writing to the global layer, wiping out all of the more specific overrides. If there're any readonly overrides, we also set the desired value into the lowest availavble writable layer above which there're no overrides for this setting in readonly layers.</para>
              <para>To fullfill rule 2, we're covering each override defined in a readonly layer with a higher-priority override in the nearest writable layer. Even though of all such overrides only the highest one can bee “seen” in exactly this context, overriding intermediate ones guarantees the new value is consistent through all contexts.</para>
              <para>Extension for the secondary value smart-set simultaneousely: this allows to smart-set the primary value almost as usual plus some additional value to have the desired value on all of the mounts which have the primary value assigned, if possible. This is to implement the indexed value removal flag: it's queried for only on the same mount as the value itself, and when setting/removing an indexed value it must take the correct true/false form. In our algorithm, besides writing one more value, this affects the detection of whether we have to cover an override in a readonly layer: the primary value might be OK but the secondary one is bad => both must be written to a higher-priority writable layer for correct behavior.</para>
            </remarks>
            <param name="keyPathComponentsWithEmptySlot">Storage key to the value (with the first empty slot for MountGet/MountSet).</param>
            <param name="valuePrimary">A non-<c>Null</c> value to set. You cannot set value to <c>Null</c> in terms of the SmartSave strategy (but setting to default value is likely to have such an effect), the set-to-<c>Null</c> operation is only applicable when writing to specific mounting points.</param>
            <param name="flags"></param>
            <param name="transaction"></param>
            <param name="componentSecondary">If we're co-setting the secondary value (<see cref="!:valueSecondary" /> is non-<c>Null</c>), specifies the replacement key path component for the last path component of the primary value (<see cref="!:keyPathComponentsWithEmptySlot" />). Hence, the secondary value can differ in the last path component only. Passed byref to save on params stack.</param>
            <param name="valueSecondary">If we're co-setting the secondary value, gives the non-<c>Null</c> secondary value (<paramref name="flags" /> define whether it's the default value). If <c>Null</c>, we're not co-setting.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.JetBrains#Application#Settings#Storage#ISettingsStorage#Enum(JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)">
            <summary>
            Warning! This method is slower than calling <see cref="M:JetBrains.Application.Settings.ISettingsStorageMountPointEx.MountEnumRaw(JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.KeyPathComponents,System.Int32,System.Action{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Object},JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)" /> manually because here it has to cut the first path component out of the mount-enummed data.
            </summary>
            <param name="root"></param>
            <param name="nTakeChildLevelOnly"></param>
            <param name="FCallback"></param>
            <param name="transaction"></param>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags.IgnoreReadonlyFlag">
            <summary>
            Set: does not favor <see cref="F:JetBrains.Application.Settings.MountPointFlags.IsWritable" /> when looking for the mount to write to.
            Not set: writes only to <see cref="F:JetBrains.Application.Settings.MountPointFlags.IsWritable" /> mounts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags.IsNullValueOk">
            <summary>
            Some values have implicit defaults which take effect when a value is not set on any layers. When we're setting a value which is the same as the defaults, the preferrable behavior for SmartSave is toIf during SmartSave we're able to wipe out all of the values set in layers so that reading the storage returns <c>Null</c>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags.IsSecondaryNullValueOk">
            <summary>
            Same as <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags.IsNullValueOk" />, but applies to the secondary value of the <see cref="!:SettingsStorageOnMountPoints.SetSmartRaw(JetBrains.Application.Settings.Storage.KeyPathComponents,object,JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetFlags,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext)" /> method.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult">
            <summary>
            The replacement dummy empty <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult" /> ('cause we don't need its data at the moment and want to keep the stack memory low, and don't want to drop all of the code yet, it's useful for debug and such).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy">
            <summary>
            This is the real <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult" />.
            Has been replaced by a dummy to save on stack traffic because right now we seemingly do not need the thing.
            If it's ever required again, just rename it back.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.EffectiveReadLayerIndex">
            <summary>
            Index of the <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.EffectiveReadMountPoint" /> as a layer in the layered structure.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.EffectiveReadMountPoint">
            <summary>
            The mount which provides the newly-set value.
            Returned non-<c>Null</c> in SmartSave case if succeeded to set the value (can fail if writing to writables only and another value is set in a higher-priority readonly mount), <c>Null</c> otherwise (because direct-write does not read any values).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.IsSuccessful">
            <summary>
            Whether we succeeded to make the given value the effective value of the context.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WrittenTo">
            <summary>
            The list of mounting points we've written to.
            In non-smart-save case, just the highest-priority [writable] mounting point.
            In smart-save case, when setting a <c>Null</c> value, all of the mounting points we've removed value from.
            In smart-save case, when setting a non-<c>Null</c> value: could be empty if non-must-write, or just the wide mounting point, or wide than narrow (if writing to wide didn't have effect for layered reading).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.SetResult(System.Boolean,System.Int32,JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            Assigns the result-outlining properties.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.Action">
            <summary>
            Why this layer is listed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.LayerIndex">
            <summary>
            Index of the <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.MountPoint" /> as a layer in the layered structure.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SetSmartResult_ReplacedWithDummy.WriteData.MountPoint">
            <summary>
            The mounting point the write was performed into.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.PassedReadonlyOk">
            <summary>
            Encountered a value in a readonly layer which was equal to the desired value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.PassedReadonlyConflicting">
            <summary>
            Encountered a value in a readonly layer which was not equal to the desired value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.ValueAlreadyWritten">
            <summary>
            Was about to write a value to a writable layer (to cover defaults or readonlies), but the layer is already set to the desired value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.WroteValue">
            <summary>
            Wrote the desired value to a writable layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints.SmartWriteAction.ErasedValue">
            <summary>
            Erased a value from a writable layer.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStore">
            <summary>
            Main implementation of the Settings Store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStore.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsSchema,JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch,JetBrains.Application.Threading.Tasks.ITaskHost,JetBrains.Application.Settings.Logging.ISettingsLogger)">
            <summary>
            Creates a new store instance.
            </summary>
            <param name="lifetime"></param>
            <param name="schema">This schema must include all of the keys and entries you intend to access thru this store.</param>
            <param name="mountpoints">The list of mounting points which are layers with settings, filtered for availability when you bind to a context.</param>
            <param name="transaction">Non-<c>Null</c> if this store is accessing settings within a transaction. New transactions must be opened by the calling party (e.g. <see cref="M:JetBrains.Application.Settings.ISettingsStore.CreateNestedTransaction(JetBrains.Lifetimes.Lifetime,System.String)" /> method).</param>
            <param name="dataContexts">Helper for creating data contexts. The store itself does not quite need it, but it's required by helper APIs for binding to the context conveniently.</param>
            <param name="changedispatch"></param>
            <param name="tasker"></param>
            <param name="logging">Logging facility of the Settings subsystem.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStore.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsSchema,JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch,JetBrains.Application.Threading.IThreading,JetBrains.Application.Settings.Logging.ISettingsLogger)">
            <summary>
            The component container ctor.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink">
            <summary>
            Implements sinking changes in mount point storages for the <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStore" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.myMapClientsToSimpleChanges">
            <summary>
            Individual changed keys, as should be dispatched to clients.
            The key path components of the change contain a placeholder for the mounting path.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.myMapClientsToWholeMountChanges">
            <summary>
            Whole mount contents change, as should be dispatched to clients.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.myMapMountToClients">
            <summary>
            Maps mounts to the clients which are listening for those mounts at the moment.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.RegisterClientForMounts(JetBrains.Lifetimes.Lifetime,System.Object,System.Collections.Generic.IEnumerable{JetBrains.Application.Settings.ISettingsStorageMountPoint})">
            <summary>
            Entry point for sinking any changes.
            </summary>
            <param name="lifetime">Your client lifetime.</param>
            <param name="originator">Who originated creating this client, for diagnostics.</param>
            <param name="mounts">The mounts you got initially. This is a static snapshot.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.RegisterClientForMountsLive(JetBrains.Lifetimes.Lifetime,System.Object,JetBrains.DataFlow.IProperty{System.Collections.Immutable.ImmutableArray{JetBrains.Application.Settings.ISettingsStorageMountPoint}})">
            <summary>
            Entry point for sinking any changes.
            </summary>
            <param name="lifetime">Your client lifetime.</param>
            <param name="originator">Who originated creating this client, for diagnostics.</param>
            <param name="mountsLive">The mounts you got initially, and any further changes to the mounts set. Changes will be fired for contents of any mounts not present initially.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.DispatchChanges">
            <summary>
            Does processing the recorded changes (storage keys and mountpoints set) on a background thread when the grouping event ticks.
            NOTE: threading policy depends on the <see cref="T:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch" /> strategy.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.SinkMountChanges(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.Storage.ISettingsStorageTransactionContext,JetBrains.Util.ILogger)">
            <summary>
            For each known mount, sinks its changes while its known.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.TrackLiveMountPointsForClient_OnAdd(JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.ClientInfo,JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean)">
            <summary>
            Called when a client wants to register one more mount for it, for the lifetime specified. Also called for initial lifetimes, <see cref="!:isWithAddAcknowledgement" /> is <c>False</c> for such mounts.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.ClientInfo">
            <summary>
            Given out when someone advises settings store changes
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.ClientInfo.Originator">
            <summary>
            Identifies the originator of this client registration for the settings store changes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.ClientInfo.AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)">
            <summary>
            Like <see cref="F:JetBrains.Application.Settings.Implementation.SettingsStoreChangeSink.ClientInfo.Changed" />, but allows to spawn an async activity in response to the change.
            The main profit is that the change originator can then track when all of the activities by processing the change are complete.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation">
            <summary>
            <para>Defines translation between <see cref="T:JetBrains.Application.Settings.SettingsSchema"/> in terms of end-user Settings Store entities (<see cref="T:JetBrains.Application.Settings.SettingsEntry"/>, <see cref="T:JetBrains.Application.Settings.SettingsKey"/>) to string keys in the Settings Storage which physically holds the values.</para>
            </summary>
            <remarks>
            <h1>Schema</h1>
            <para><see cref="T:JetBrains.Application.Settings.SettingsSchema">The schema</see> is the logical schema on <see cref="T:JetBrains.Application.Settings.SettingsKey">settings keys</see> / <see cref="T:JetBrains.Application.Settings.SettingsEntry">settings entries</see>, exposed to the application for getting/setting values of arbitrary user types.</para>
            <para>It is collected by reading classes with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute"/> (which produces hierarchy of keys) and inspecting their members for <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/> (which produces key entries).</para>
            
            <h1>Physical Storage</h1>
            <para>Physically, all of the data is stored in the settings storage, which is a key-value store with string keys and values of a few primitive types.</para>
            <para>The logical schema maps into the settings storage keys. For each settings key or settings entry there might be zero or more metadata values written into the storage under a storage key corresponding to one of the metadata items of the key/entry. Some metadata items are required for storing/reading the value, and others are purely informational and might be used for storage browsers and human-readability.</para>
            
            <h1>Storage Keys</h1>
            <para><i>(note: there are Settings Keys, which are logical entities of the Settings Schema and which contain Settings Entries; and there are Settings Storage keys which are string values keying the physical key-value storage actually holding raw values, which is actually written to disk)</i></para>
            <para>Storage keys are slash-separated strins: <c>/one/two/three/four/@metadata</c>.</para>
            <para>The format of the storage keys strings vaguely resembles that of an XPath request. Speaking in terms of XPath, we're only addressing “xml attribute values” in the physical storage. In the storage key string, this means it always ends with “/@metadataname” (a path-separating slash, metadata prefix and name of some <see cref="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.Metadata">metadata</see>).</para>
            <para>Here are syntax definitions of valid settings storage keys pointing to some schema-originating metadata.</para>
            <para>Settings Key metadata:</para>
            <code>
               KeyPathSeparator MountPointPathInStorage 
            
               (
                   KeyPathSeparator KeyLocalName
                   [ KeyPathSeparator ValueInLocalNamePrefix SerializedIndex ]  // Indexed keys only
               )+                                                               // Each key in parent keys chain
            
               KeyPathSeparator MetadataPrefix MetadataName
            </code>
            <para>Settings Entry metadata:</para>
            <code>
               KeyPathSeparator MountPointPathInStorage 
            
               (
                   KeyPathSeparator KeyLocalName
                   [ KeyPathSeparator ValueInLocalNamePrefix SerializedIndex ]  // Indexed keys only
               )+                                                               // Each key in parent keys chain
            
               KeyPathSeparator EntryLocalName
               [ KeyPathSeparator ValueInLocalNamePrefix SerializedIndex ]      // Indexed entries only
            
               KeyPathSeparator MetadataPrefix MetadataName
            </code>
            <para>Legend:</para>
            <list type="table">
            <listheader><term>Keyword</term><description>Meaning</description></listheader>
            <item><term><c>KeyPathSeparator</c></term><description><para><c>“/”</c>. Constant. Defined in <see cref="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition"/> as <see cref="F:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition.KeyPathSeparator"/>.</para><para>Separates local names of settings keys and entries, index values on indexed keys and entries, and tailing metadata name in the path making the settings storage key. Analogous to the XPath separator.</para></description></item>
            <item><term><c>ValueInLocalNamePrefix</c></term><description><para><c>“=”</c>. Constant. Defined in <see cref="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition"/> as <see cref="F:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition.ValueInLocalNamePrefix"/>.</para><para>When one of the storage key path components are formed from a user-supplied value (for example, indices of indexed keys or entries), denotes such keys for telling them apart from key path components coming from keys/entries' local names.</para><para>If this prefix appears after a settings key or entry local name component in the storage key path, means the key or entry is indexed rather than simple.</para></description></item>
            <item><term><c>MetadataPrefix</c></term><description><para><c>“@”</c>. Constant. Defined in <see cref="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition"/> as <see cref="F:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition.MetadataPrefix"/>.</para><para>The last component of the settings storage key on which actual data is stored is a metadata name, which is denoted by this prefix to tell apart from other key components.</para></description></item>
            <item><term><c>MountPointPathInStorage</c></term><description><para>This is not in the scope of this class.</para><para>This path is added by the <see cref="T:JetBrains.Application.Settings.ISettingsStorageMountPoint">mounting point</see> when it mounts a path of a physical storage for access in a specific context.</para><para>As the single storage file might host several independent mount points, they're designated with a prefix on the storage key actually written to the file.</para><para>The mounting point handles appending/removing of this prefix when exposing the storage, so store-to-storage translation does not have to deal with this prefx.</para></description></item>
            <item><term><c>KeyLocalName</c></term><description>Local name of the Settings Key. Defined by <see cref="F:JetBrains.Application.Settings.SettingsKey.LocalName"/>.</description></item>
            <item><term><c>EntryLocalName</c></term><description>Local name of the Settings Entry. Defined by <see cref="F:JetBrains.Application.Settings.SettingsEntry.LocalName"/>.</description></item>
            <item><term><c>SerializedIndex</c></term><description>An index to a particular instance of an indexed key or an indexed entry, in a serialized form. Defined by the actual index value passed to the key/entry access functions.</description></item>
            <item><term><c>MetadataName</c></term><description>Name of the metadata on this key or entry. Possible names defined in <see cref="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.Metadata"/>, see descriptions and possible usages below.</description></item>
            </list>
            
            <h1>Settings Key</h1>
            <para>There is no required metadata for a Settings Store <see cref="T:JetBrains.Application.Settings.SettingsKey">Settings Key</see> because keys themselves have no values in Settings Store. Only entry values are written to the storage. A key is just an organizational unit in the logical schema which helps with early-bound key values and typed deserialization.</para>
            <para>A <see cref="T:JetBrains.Application.Settings.SettingsKey">Settings Key</see> maps to the storage key formed by concatenating local names of it and all of the parent keys. For example, WebProxy under Internet under Environment under root makes the <c>/Environment/Internet/WebProxy</c> settings storage key.</para>
            
            <para><b>Common Settings Key</b> metadata:</para>
            <para>Metadata stored for a settings key, supposing <c>/K/E/Y</c> is its key path:</para>
            <para><i>(note: these are not settings entries of the key yet, just optional metadata for the logical settings key in the physical storage)</i></para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/@KeyDescription</c></term><description><para>(<c>String</c>) Description of the key, as specified in <see cref="!:SettingsKeyAttribute.Description"/>.</para> <para>Optional, non-vital, written when setting value, could be used by settings storage browsers.</para></description></item>
            </list>
            <para><b>Non-indexed Settings Key</b> metadata:</para>
            <para>No special metadata on a non-indexed key — just the all-keys common items.</para>
            <para><b>Indexed Settings Key</b> metadata:</para>
            <para>The storage key for an indexed key includes the serialized form of a particular index which defines the specific instance of an indexed key: <c>/K/E/Y/=IndexSerialized</c>.</para>
            <para>This applies to all of the indexed keys in the parent keys path. For example, if key <c>K</c> is also indexed, the sample path would look like <c>/K/=KIndexSerialized/E/Y/=YIndexSerialized</c>. When reading samples for entry storage keys below, take into account that any indexed key in entrie's parents has also to include its index value.</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/=IndexSerialized/@KeyIndexDefined</c></term><description><para>(<c>Boolean</c>) <c>True</c> means there is an instance of an indexed key defined for this index. Note that there might be no entry values written to the storage for this key instance if they're all in their default values, still the key instance will be marked as existent.</para><para><c>False</c> means the key might be defined on some of the lower-priority layers, but has been revoked at a higher-priority layer and all of its entries must be ignored.</para><para>{no value} means the key instance is not defined for this index (even though there might be some leftovers of settings entry values in the storage). </para><para>If this value is undefined in all the layers, the key instance will not be present in the logical Settings Store. However, if it's defined to <c>True</c> on at least one layer's storage, all of the entry values on all the storages on any layers, even those without the <c>KeyIndexDefined</c> set, will take part in entry values composition.</para> <para><b>Required.</b> Vital, an indexed key instance will be treated as non-existent without this value.</para></description></item>
            <item><term></term><description></description></item>
            </list>
            
            <h1>Settings Entry</h1>
            
            <para>All information on a <see cref="T:JetBrains.Application.Settings.SettingsEntry">Settings Entry</see> is stored under the key path of its parent Settings Key, plus the local name of the settings entry. Example settings storage key: <c>/K/E/Y/EntryLocalName</c></para>
            
            <para>Common metadata for indexed and non-indexed settings entries (all optional and non-vital):</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryDescription</c></term><description><para>(<c>String</c>) Description of the entry, as specified in <see cref="!:SettingsEntryAttribute.Description"/>.</para> <para>Optional, non-vital, written when setting value, could be used by settings storage browsers.</para></description></item>
            <item><term></term><description></description></item>
            </list>
            
            <para><b>Non-indexed Settings Entry</b> metadata:</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryValue</c></term><description><para>(any type) The serialized value of the entry.</para> <para><b>Required.</b> Vital for reading the entry value.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryType</c></term><description><para>(<c>String</c>) Full name of the <see cref="T:System.Type">CLR type</see> of the settings entry member which was serialized into the settings storage primitive type.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntrySerializer</c></term><description><para>(<c>String</c>) <see cref="T:JetBrains.Application.Settings.SettingsStoreSerializerType"/> enum member name representing the value serializer used when writing the value.</para> <para>Optional, non-vital.</para></description></item>
            </list>
            
            <para><b>Indexed Settings Entry</b> metadata:</para>
            <para>Indexed entries are mapping a simple index to a simple value.</para>
            <para>The following metadata is added to the entry itself, stored under the <c>/K/E/Y/EntryLocalName</c> storage key:</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexType</c></term><description><para>(<c>String</c>) Full name of the <see cref="T:System.Type">CLR type</see> of the indexed settings entry index.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexSerializer</c></term><description><para>(<c>String</c>) <see cref="T:JetBrains.Application.Settings.SettingsStoreSerializerType"/> enum member name representing the value serializer used when writing the index.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexedValueType</c></term><description><para>(<c>String</c>) Full name of the <see cref="T:System.Type">CLR type</see> of the indexed settings entry value.</para> <para>Optional, non-vital.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/@EntryIndexedValueSerializer</c></term><description><para>(<c>String</c>) <see cref="T:JetBrains.Application.Settings.SettingsStoreSerializerType"/> enum member name representing the value serializer used when writing the indexed value.</para> <para>Optional, non-vital.</para></description></item>
            </list>
            <para>An indexed entry is a set of (index, value) pairs, which should have fast lookup by index. Such pairs are units of storage.</para>
            <para>For each pair, its data is stored under the <c>/K/E/Y/EntryLocalName/=IndexSerialized</c> storage key.</para>
            <list type="table">
            <listheader><term>Key</term><description>Meaning</description></listheader>
            <item><term><c>/K/E/Y/EntryLocalName/=IndexSerialized/@EntryIndexedValue</c></term><description><para>(any type) The serialized indexed value of the (index, value) pair.</para> <para><b>Required.</b> <b>Vital</b> for reading the indexed value stored for a specific index.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/=IndexSerialized/@EntryIndex</c></term><description><para>(any type) The serialized index of the (index, value) pair.</para> <para>Optional. Non-vital. Useful for reading the storage because the "IndexSerialized" representation is serialized into a restricted charset and is often unreadable with a bare eye, while in this place a more permissive regular entry value serializer is put to use.</para></description></item>
            <item><term><c>/K/E/Y/EntryLocalName/=IndexSerialized/@EntryIndexRemoved</c></term><description><para>(<c>Boolean</c>) <c>True</c> to force removing the indexed value from the indexed entry values set.</para> <para>This has an effect when a stack of storages is merged, and the indexed entry has has a value for this index in some lower-priority storage, which a higher-priority storage wants to remove altogether as if it has never been set.</para><para>Note that for <c>EntryIndexRemoved</c> to work as intended, <c>EntryIndexedValue</c> must also be set to some (dummy) value on the same storage. For performance reasons, storage lookup through layers is only done for <c>EntryIndexedValue</c>, and <c>EntryIndexRemoved</c> is only checked on those storages found during this lookup.</para> <para>Optional. <b>Vital</b> for removing indexed values in an overriding storage.</para></description></item>
            </list>
            <para>The serialization behavior for index values taking part in storage keys (<c>IndexSerialized</c> in the above examples) differs from that of the indexed values and scalar entry values (and <c>EntryIndex</c> metadata) because we're enforcing strict rules on key local names character set.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.AppendIndex(System.String,JetBrains.Application.Settings.SettingsIndexedKey,System.Object,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Appends a serialized index value.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="key"></param>
            <param name="index">Index value.</param>
            <param name="logger"></param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.AppendIndex(System.String,JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,JetBrains.Util.ILogger)">
            <summary>
            Appends a serialized index value.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="entry"></param>
            <param name="index">Index value.</param>
            <param name="logger"></param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.AppendMetadata(System.String,System.String)">
            <summary>
            Appends metadata name.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="sMetadataName">Metadata name to append. MUST NOT include the metadata prefix.</param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.AppendLocalName(System.String,System.String)">
            <summary>
            Appends the local name as the next key component.
            </summary>
            <param name="sKeyBase">Base key. MUST NOT be slash-terminated.</param>
            <param name="sLocalName">Local name to append. MUST NOT include leading or trailing (or any) slashes.</param>
            <returns>Composed string. MUST NOT be slash-terminated.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.Metadata">
            <summary>
            <para>When settings store data is written into the physical settings storage, all of the storage keys end with the last path component containing metadata names (prefixed with <see cref="F:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition.MetadataPrefix"/> for distinction).</para>
            <para>Taking an analogy to XPath syntax, we're only addressing attributes, so all of the expected storage keys end with <c>“/@metadataname”</c>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition">
            <summary>
            Individual elements for composing full storage key paths out of individual local names, index values, and metadata names.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition.KeyPathSeparator">
            <summary>
            Separates local names of settings keys and entries, index values on indexed keys and entries, and tailing metadata name in the path making the settings storage key. Analogous to the XPath separator.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition.MetadataPrefix">
            <summary>
            The last component of the settings storage key on which actual data is stored is a metadata name, which is denoted by this prefix to tell apart from other key components.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.PathComposition.ValueInLocalNamePrefix">
            <summary>
            <para>When one of the storage key path components are formed from a user-supplied value (for example, indices of indexed keys or entries), denotes such keys for telling them apart from key path components coming from keys/entries' local names.</para>
            <para>If this prefix appears after a settings key or entry local name component in the storage key path, means the key or entry is indexed rather than simple.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.ParseStorageKeys_Key(System.Collections.Generic.IList{JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance},JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.ISettingsSchema,System.Collections.Generic.List{JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.StorageKeyParsedComponent},JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Aggregates one more changed key into the total changes delta tree.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Implementation.StoreToStorageTranslation.FillKeyPathComponents(JetBrains.Application.Settings.Storage.KeyPathComponents,JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Util.ILogger,System.Func{JetBrains.Application.Settings.Storage.KeyPathComponents,System.Boolean})">
            <summary>
            Writes key path to the settings key into the empty components list.
            Leaves one empty leading slot for mounting path component.
            Throws out exceptions for caller: missing key index.
            </summary>
            <param name="keyPathComponents">Writes here. Must be empty.</param>
            <param name="key">Settings key (its parents and its own components will be written, as well as key index components).</param>
            <param name="keyIndices">Indices to the indexed keys in path.</param>
            <param name="logger">Logger.</param>
            <param name="FCallAfterEachIndexedKey">Callback to be invoked after writing an index for each indexed key. If <c>False</c>, processing is aborted and <c>False</c> is returned.</param>
            <returns>Whether any of the <paramref name="FCallAfterEachIndexedKey"/> calls returned <c>False</c>. If so, results might be incomplete.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Implementation.TrackMountPointsWithDefaults">
            <summary>
            Tracks lists of mounts with defaults for reuse by all clients, most notably, user friendly settings layers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.TrackMountPointsWithDefaults.AsArrayProperty">
            <summary>
            The current state of the mounts-with-defaults, as a live property which holds an immutable list, with updates on the main thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Implementation.TrackMountPointsWithDefaults.AsLiveList">
            <summary>
            The current state of the mounts-with-defaults, as a live list with updates on the main thread.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ApartmentForNotifications">
            <summary>
            Defines the target apartment to dispatch change notifications in.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.ApartmentForNotifications.ThreadIfSta">
            <summary>
            <c>NULL</c> for MTA, or an STA thread for a STA.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ApartmentForNotifications.Mta">
            <summary>
            Sets up for the MTA apartment (any MTA thread).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ApartmentForNotifications.Primary(JetBrains.Application.Threading.IThreading)">
            <summary>
            Sets up for the STA apartment of the primary thread (identified by <see cref="T:JetBrains.Application.Threading.IThreading" />).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ApartmentForNotifications.Sta(System.Threading.Thread)">
            <summary>
            Sets up for the STA apartment of this thread (the thread must be STA).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.AsyncChangedSinkDelegate">
            <summary>
            Delegate for an event sink for the Async Changed signal, like with <see cref="M:JetBrains.Application.Settings.ISettingsChangedEventSource.AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)" />. See there for comments.
            </summary>
            <seealso cref="M:JetBrains.Application.Settings.ISettingsChangedEventSource.AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)" />
        </member>
        <member name="T:JetBrains.Application.Settings.DefaultSettingsAttribute">
            <summary>
              <para>Marks components which implement <see cref="T:JetBrains.Application.Settings.IHaveDefaultSettings" /> or <see cref="T:JetBrains.Application.Settings.IHaveDefaultSettingsStream" /> interfaces. Logically, they are on the <see cref="T:JetBrains.Application.ShellComponentAttribute">Shell</see> level. The special attribute is required so that those classes could declare the settings keys for which they supply default values. This way their operations could be delayed up until the moment the respective settings keys are queried for.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.DefaultSettingsAttribute.#ctor(System.Type)">
            <summary>
            Declares the settings keys for which the component provides default values.
            </summary>
            <param name="typeOfRootSettingsKey">A type reference to a <see cref="T:JetBrains.Application.Settings.SettingsKey" /> or a <see cref="T:JetBrains.Application.Settings.SettingsIndexedKey" /> class. All of the default settings provided by this component must be for this settings key or its child keys in the settings schema tree.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.DefaultSettingsAttribute.TypeOfRootSettingsKey">
            <summary>
            A type reference to a <see cref="T:JetBrains.Application.Settings.SettingsKey" /> or a <see cref="T:JetBrains.Application.Settings.SettingsIndexedKey" /> class. All of the default settings provided by this component must be for this settings key or its child keys in the settings schema tree.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsEntryAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute">settings key class</see> that should be settings store simple entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttribute.#ctor(System.Object,System.String)">
            <summary>
            </summary>
            <param name="DefaultValue">
              <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
              <para>The possible values are:</para>
              <para>• <c>Null</c>, which means the default value for the <see cref="T:System.Type" /> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
              <para>• Some value of the same type as the <see cref="T:System.Type" /> of the field, or a value type convertible to it.</para>
              <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type" /> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter" /> is used for reading the value.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttribute.DefaultValue">
            <summary>
              <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
              <para>The possible values are:</para>
              <para>• <c>Null</c>, which means the default value for the <see cref="T:System.Type" /> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
              <para>• Some value of the same type as the <see cref="T:System.Type" /> of the field, or a value type convertible to it.</para>
              <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type" /> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter" /> is used for reading the value.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttribute.ReflectionHelpers.GetDefaultValueFromRuntimeType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},JetBrains.Util.ILogger)">
            <summary>
              <para>Uses Reflection to get the entry default value from the loaded runtime type. Avoid using wherever possible because it needs a loaded assembly. For use in static context where settings store is not available and the settings key/entry class is about to be used anyway. NOT for use in any of the Settings Store infrastructure code.</para>
            </summary>
            <param name="lambdaexpression">Identifies the entry.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsEntryAttributeBase">
            <summary>
            Base attribute for settings entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttributeBase.#ctor(System.String)">
            <summary>
            </summary>
            <param name="description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.EntryNameOverride">
            <summary>
              <para><c>Null</c> to use the field/property member name as the <see cref="F:JetBrains.Application.Settings.SettingsEntry.LocalName">settings entry local name</see> in the settings schema.</para>
              <para>Non-empty to override the local name with a custom string (must comply to key/entry local name rules).</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.ValueSerializer">
            <summary>
            Gets or sets how the value of the field/property should be serialized for storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntryAttributeBase.ReflectionHelpers.myMapPrimitiveTypeNamesToStorageTypesWithCoersion">
            <summary>
            By a name of a primitive mscorlib type, gives out the storage type that will be holding this type (possibly, after coersion).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttributeBase.ReflectionHelpers.GetEntryLocalAndMemberNames(JetBrains.Util.dataStructures.Sources.StringSource@,JetBrains.Application.Catalogs.PartCatalogAttribute@)">
            <summary>
            Applies local name override. The member name is just committed to a runtime string. It's returned so that the runtime string instance could be reused between the local name and the member name in the most likely scenario they're the same.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntryAttributeBase.ReflectionHelpers.GuessValueSerializer(JetBrains.Application.Catalogs.PartCatalogAttribute@,JetBrains.Application.Catalogs.PartCatalogType@)">
            <summary>
            If the value serializer type is <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto" />, guesses the actual type by the member type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedEntryAttribute">
            <summary>
              <para>Use this attribute to mark those fields and properties of a <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute">settings key class</see> that should be indexed store entries.</para>
              <para>Such an entry declares a set of values accessible with an index, which works as a dictionary or a list in a settings store.</para>
              <para>The field or property annotated with this attribute must be of type <see cref="T:JetBrains.Application.Settings.IIndexedEntry`2" /> where generic parameters define the index type and the value indexed type.</para>
            </summary>
            <remarks>
              <para>While simple <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute" /> enables storing atomic values, this option allows to stores dictionaries with arbitrary keys and lists.</para>
              <para>A list has to be represented as a dictionary because it requires an identity (an index) to define rules for overriding when store is composited from layers. If your list items bear their identity themselves, use them as indices and define values as a simple boolean. If an additional identity is required, use the index as the identity and values as the payload information.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedEntryAttribute.#ctor(System.String)">
            <summary>
            </summary>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntryAttribute.KeySerializer">
            <summary>
            Gets or sets how indices should be serialized for storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedEntryAttribute.ReflectionHelpers.GuessIndexSerializer(JetBrains.Application.Catalogs.PartCatalogAttribute@,JetBrains.Application.Catalogs.PartCatalogType@)">
            <summary>
            Reads the key serializer, also resolves <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto" /> into a specific type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedKeyAttribute">
            <summary>
              <para>Marks a class that will be used as a frontend to settings.</para>
              <para>Represents an indexed settings key which exists in multiple copies per different index values.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.#ctor(System.Type,System.String,System.Type)">
            <param name="Parent">
              <para>The parent settings key. </para>
              <para><see cref="T:System.Reflection.Missing" /> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
            <param name="IndexType">Type of the indices to this indexed key.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.IndexSerializer">
            <summary>
            Gets or sets how indices should be serialized.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.IndexType">
            <summary>
            Gets the type of the indices to this indexed key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedKeyAttribute.ReflectionHelpers.GuessKeySerializer(JetBrains.Application.Catalogs.PartCatalogAttribute,JetBrains.Application.Catalogs.PartCatalogType)">
            <summary>
            Reads the key serializer, also resolves <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto" /> into a specific type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsKeyAttribute">
            <summary>
            <para>Marks a class that will be used as a frontend to settings.</para>
            <para>Represents a settings key.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKeyAttribute.#ctor(System.Type,System.String)">
            <param name="Parent">
            <para>The parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsKeyAttributeBase">
            <summary>
            Base attribute for settings keys.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKeyAttributeBase.#ctor(System.Type,System.String)">
            <param name="Parent">
              <para>The parent settings key. </para>
              <para><see cref="T:System.Reflection.Missing" /> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.KeyNameOverride">
            <summary>
              <para>By default, the class name is used as the settings key name (but for the "Settings" suffix).</para>
              <para>If this property is non-empty, its value will be used as the key name instead.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.Parent">
            <summary>
              <para>Gets the parent settings key. </para>
              <para><see cref="T:System.Reflection.Missing" /> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating a new one.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKeyAttributeBase.ReflectionHelpers.GetParentTypeIfNotRoot(JetBrains.Application.Catalogs.PartCatalogAttribute)">
            <summary>
            Reads the parent specification out of the attribute, returns its type info (unless it's pointing to the special root type).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.AvailabilityGroupQuery">
            <summary>
            Groups info for a single query to an <see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup" />. Allows to place multiple queries so that their set of mounts were consistent for both queries.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.AvailabilityGroupQuery.Context">
            <summary>
            The context against which the availability of the items in the group should be checked.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.AvailabilityGroupQuery.Output">
            <summary>
            Target list to which the fitting items of this group should be added (to the end, in an undefined order).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.BindToContextFlags.RespectReadonlyFlag">
            <summary>
            Does not write into readonly mounting points.
            This is the default behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.BindToContextFlags.IgnoreReadonlyFlag">
            <summary>
            Writes into readonly mounting points.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.BindToContextFlags.EraseDefaultValues">
            <summary>
            If we are trying to write a default value for some setting, prefer erasing it from all the mounting points to let the default value (as set on <see cref="T:JetBrains.Application.Settings.SettingsScalarEntry" />) have effect.
            If the defaults layer is present, it also has the same effect.
            This is the default behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.BindToContextFlags.ForceWriteDefaultValues">
            <summary>
            Setting values could be written to it even if they are default values.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.ContextRange">
            <summary>
            Specifies a range of contexts for <c>BindToContext</c>-family methods on <see cref="T:JetBrains.Application.Settings.ISettingsStore"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.ContextRange.FGetWideContext">
            <summary>
            Gets the widest allowed context of the SmartSave.
            <c>NULL</c> if the context is not limited on the wide edge (e.g. SmartSave writes can go to the whole range of the narrow context mounts).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.#ctor(System.Guid)">
            <summary>
            Converts from a system <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.#ctor(System.String)">
            <summary>
            Converts from a string. Ideally, the string must match for format and convert just 32 hex uppercase chars.
            Does not throw if something goes wrong: uses zeros for missing bytes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.#ctor(System.Byte[])">
            <summary>
            Creates a GUID out of raw data. Ideally, the data should have exactly 16 bytes.
            Does not throw if something goes wrong: uses zeros for missing bytes.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToString">
            <summary>
            Converts to the default <see cref="T:JetBrains.Application.Settings.GuidIndex"/> format string: 32 uppercase hex digits without any other decorations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToGuid">
            <summary>
            Converts to the classic GUID.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToString(System.String)">
            <summary>
            Converts to a GUID string using the <see cref="T:System.Guid"/> format specifiers.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.GuidIndex.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts to a GUID string using the <see cref="T:System.Guid"/> format specifiers.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IContextBoundSettingsStore">
            <summary>
            Operates the same <see cref="T:JetBrains.Application.Settings.SettingsEntry"/>/<see cref="T:JetBrains.Application.Settings.SettingsKey"/> API idioms as <see cref="P:JetBrains.Application.Settings.IContextBoundSettingsStore.SettingsStore"/>, but is bound to the specific context (which is defined by <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStorageOnMountPoints"/> with specific mounts selected).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of a non-indexed settings entry.</para>
            <para>Note that you will always get a meaningful value (the entry default value), even if the entry value has not been set, or if the entry parent key does not exist (if there's no instance for such indexed key index). If you're reading entries of an indexed key or its ancestors, verify that key instance exists first.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValues(System.Collections.Generic.IList{JetBrains.Application.Settings.SettingsScalarEntry},System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Executes <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for a series of entries in a row, which has performance benefits over getting them one by one.
            All of the entries must belong to the same key.
            For all details, see <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/>.
            </summary>
            <param name="entries">Entries of the single key.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An array of values of the same length as <see cref="!:entries"/> where each value corresponds to the entry at the same index. See <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> for details on the entry values returned.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Sets the value of a non-indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.ResetValue(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Resets the value of a non-indexed settings entry in the highest-priority storage. It will have the value in the next storage or the entry default value.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be read.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The value, as set in the highest-priority storage which is not restricted for overriding. The settings entry default value otherwise (<c>Null</c> if not available).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.SetIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Object)">
            <summary>
            <para>Sets the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be written.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.RemoveIndexedValue(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Removes the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, whose indexed instance is to be removed.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.CreateIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key is marked as created in the highest-priority storage of the current context.</para>
            <para>This accounts for these two basic scenarios:</para>
            <para>• Create an instance of the key which has all of its entries in their default values (without setting any entries on the key).</para>
            <para>• Mark an instance of an indexed key inherited from a lower-priority storage as defined in this higher-priority storage so that it were available even when the lower-priority storage is removed.</para>
            <para>In most other cases, like when you're setting entries on an indexed key, the indexed key instance will be reported as existing in the current combination of layers (the existence status might be coming from a lower-priority storage).</para>
            </summary>
            <param name="key">Indexed settings key to create an instance of.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be created, as well as indices to any parent indexed keys of <paramref name="key"/>.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.DeleteIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Ensures that the instance of an indexed key does not exist anymore in the current layered context.</para>
            <para>All data for this key index is wiped from the highest-priority storage.</para>
            <para>If the key still remains defined because of some lower-priority storage, a special revocation flag is written to the highest-priority storage.</para>
            </summary>
            <param name="key">Indexed settings key to delete an instance of.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be deleted, as well as indices to any parent indexed keys of <paramref name="key"/>.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Gets whether the instance of an indexed key for particular index is defined in the current layered context.</para>
            <para>Also checks all possible parent indexed keys of this key, and their indices in <paramref name="keyIndices"/>.</para>
            <para>It is valid to pass in a non-indexed key as <paramref name="key"/>, in which case its indexed ancestor keys will be checked. If there are none, the key is always assumed as defined.</para>
            </summary>
            <param name="key">Indexed settings key to check. Might be a non-indexed key iteself to check its possible indexed parents.</param>
            <param name="keyIndices">An index to the <paramref name="key"/> to be deleted, as well as indices to any parent indexed keys of <paramref name="key"/>. Note that this can be <c>Null</c> if you're testing an arbitrary settings key without checking if it's indexed or not first.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints">
            <summary>
              <para>Exposes the mount points that take part in this context.</para>
              <para>For a transient (non-live) bound context, this value never changes. For a live context, you would get a consistent snapshot for the current moment, see the live property to get events when it changes.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.SettingsStore">
            <summary>
            Gets the parent Settings Store which has been bound to the context.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.Schema">
            <summary>
            Gets the Settings Schema of the parent settings store.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStore.BindToContextFlags">
            <summary>
            Gets the flags which were used when a Settings Store were bound to a context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.GetSnapshot(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            Gets the snapshot of the Settings Store content in a form of Settings Key and Settings Entry instances.
            </summary>
            <param name="keyRoot">Optional. If <c>Null</c>, the whole store available in this context is dumped. If non-<c>Null</c>, only those values under the given schema key are included.</param>
            <param name="keyIndices">Optional. Indices to <paramref name="keyRoot"/>, if it's specified.</param>
            <returns>Delta with extracted settings store values.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedValues(JetBrains.Application.Settings.SettingsIndexedEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>Enumerates all of the indices of the defined entry indexed value instances, and those values.</summary>
            <param name="entry">Identifies the indexed entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined by the settings entry declaration.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStore.EnumIndexedKey(JetBrains.Application.Settings.SettingsIndexedKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Boolean)">
            <summary>
            <para>Gives out all of the indexed key indices currently present in the store.</para>
            <para>Note that checking <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStore.IsIndexedKeyDefined(JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})"/> by some of these indices might actually return <c>False</c> due to:</para> 
            <para>• Multithreaded access to the setings store.</para>
            </summary>
            <param name="key">Identifies the indexed key.</param>
            <param name="parentKeyIndices">If this key is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key. Note that this should not include the index to the <paramref name="key"/> itself because its possible indices are to be enumerated, but it's not an error if it's present.</param>
            <param name="isIgnoringKeyIsDefined"></param>
            <returns>An enumeration of the index objects. The CLR type of these objects is defined in the settings key attribute.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation.FindLayerWhereSettingValueComeFrom(JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Returns a layer where a scalar settings entry has explicit value (usually non-default, but it depends)</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be read.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The highest-priority storage where value is explicitly set or null</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation.FindLayerWhereSettingValueComeFrom(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
            <para>Returns a layer where an indexed settings entry has explicit value</para>
            </summary>
            <param name="entry">The indexed settings entry whose value is to be read.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <returns>The highest-priority storage where value is explicitly set or null</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation.SetValueWithMountLastWideOverride(JetBrains.Application.Settings.SettingsScalarEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ISettingsStorageMountPoint,System.Boolean)">
            <summary>
            <para>Sets the value of a non-indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry whose value is to be written.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="overrideMountLastWide">Value should be written to this mount point or to mount point with more priority</param>
            <param name="prohibitNulls"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation.SetIndexedValueWithMountLastWideOverride(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},System.Object,JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            <para>Sets the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, the value of whose indexed instance is to be written.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
            <param name="value">The value to be written. Must be of the CLR type specified in the settings entry.</param>
            <param name="overrideMountLastWide">Value should be written to this mount point or to mount point with more priority</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation.RemoveIndexedValueWithMountLastWideOverride(JetBrains.Application.Settings.SettingsIndexedEntry,System.Object,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ISettingsStorageMountPoint)">
            <summary>
            <para>Removes the value of an indexed settings entry.</para>
            </summary>
            <param name="entry">The settigs entry, whose indexed instance is to be removed.</param>
            <param name="entryIndex">An index to the indexed entry instance.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.IContextBoundSettingsStoreLive">
            <summary>
              <para>Live version of the context-bound store.</para>
              <para>Is bound to a lifetime, watches for newly-appearing mounting points, retranslates change events.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.InvolvedMountPointsLive">
            <summary>
              <para>Adds to the base interface's <see cref="P:JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints" /> property: as the live context might see its mount points set change, fires when this happens so that any consumers could update on the new <see cref="P:JetBrains.Application.Settings.IContextBoundSettingsStore.InvolvedMountPoints" />.</para>
              <para>Note that this does not happen immediately when the set of globally available mount points in <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints" /> changes. Instead, an update is schedulled onto a background thread. The update will be performed sooner if you try to use the context bound store for read/write operations. After the change the mount points set is reflected in this property, there would be an additional delay until respective changes are processed and fired thru <see cref="P:JetBrains.Application.Settings.ISettingsChangedEventSource.Changed" /> or <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})" />.</para>
            </summary>
            <remarks>Previously, there would be an <see cref="T:JetBrains.DataFlow.IListEvents`1" />, but with free-threaded modifications, so it were hard to process its events consistently on clients.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})">
            <summary>
              <para>Gets the value of a non-indexed settings entry as a live property.</para>
              <para>When the value changes in the Settings Store, the property will also change its value (and fire change events) after a slight delay on the same STA or MTA where you made the call to <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})" />. For instance, if you call it from the STA main thread, you will get all changes on the main thread as well.</para>
              <para>If you set a new value to the property, the new value will be applied to the settings entry in this bound context using the SmartSave strategy. To ensure correct behavior, only set new values in the same apartment as the initial call to this method, so that change notifications for your changes also complied with the property threading policy.</para>
              <para>Note that you will always get a meaningful value (the entry default value), even if the entry value has not been set, or if the entry parent key does not exist (if there's no instance for such indexed key index). If you're reading entries of an indexed key or its ancestors, verify that key instance exists first.</para>
            </summary>
            <param name="lifetime">The lifetime in which the property listens to the changes in the settings store.</param>
            <param name="entry">The settings entry whose value is to be read and written.</param>
            <param name="keyIndices">If this entry is parented by one or more indexed keys, the indices to those keys. It is an error to have an index omitted for an indexed key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty2``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ApartmentForNotifications)">
            <summary>
            Same as <see cref="M:JetBrains.Application.Settings.IContextBoundSettingsStoreLive.GetValueProperty``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object})" />, but allows to pass the desired apartment for notifications. This allows to make a component which processes its changes on the main thread but can be initially created on any thread.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IHaveDefaultSettings">
            <summary>
              <para>If you got default settings to be always preloaded into the Settings Store, you can expose by implementing this interface.</para>
              <para>The component should be marked with <see cref="T:JetBrains.Application.Settings.DefaultSettingsAttribute" /> and state the settings keys under which defaults are provided. This component should be ready to be factored and queried on any thread and at any moment.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IHaveDefaultSettings.Name">
            <summary>
            The name for the mounting point which will be mounting your settings stream into the settings store.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IHaveDefaultSettingsStream">
            <summary>
              <para>If you got default settings to be always preloaded into the Settings Store, you can either push them into the <see cref="T:JetBrains.Application.Settings.Implementation.DefaultSettingsMountPoints" /> (NOT recommended) or expose by implementing this interface. In the latter case, they will be available immediately upon composition, and the composition will be more performant.</para>
              <para>The component should be marked with <see cref="T:JetBrains.Application.Settings.DefaultSettingsAttribute" /> and state the settings keys under which defaults are provided. This component should be ready to be factored and queried on any thread and at any moment.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IHaveDefaultSettingsStream.Name">
            <summary>
            The name for the mounting point which will be mounting your settings stream into the settings store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IHaveDefaultSettingsStream.GetDefaultSettingsStream(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Requests your settings for loading into the system as default settings.
            </summary>
            <param name="lifetime">Lifetime of caller's use of the returned stream.</param>
            <returns>The stream which can be loaded into an <see cref="T:JetBrains.Application.Settings.Storage.Persistence.ISettingsStorageStreamSerialization" />. It is the callee's responsibility to dispose of the stream correctly if needed, according to the lifetime provided by the caller. Returning a NULL is a valid case if you SUDDENLY discovered you would not like to provide settings in this environment.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.IIsAvailable">
            <summary>
            Availability function which tells whether the owner is available in the given <see cref="T:JetBrains.Application.DataContext.IDataContext" />.
            For mass querying a large group of mounts for availability, consider implementing <see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup" /> for them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailable.IsAvailable(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Gets whether the owner is available in the given <see cref="T:JetBrains.Application.DataContext.IDataContext" />.
            </summary>
            <param name="context">The data context which defines the availability.</param>
            <returns>Availability.</returns>
            <remarks>This is the synchronous version, which isn't very good with locks. To handle them gracefully, implement an <see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup" /> for these mounts.</remarks>
        </member>
        <member name="T:JetBrains.Application.Settings.IIsAvailableOptimization">
            <summary>
            Availability function which allows to group a set of items and calculate their availability in one action (<see cref="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimization.CreateEmptyGroup">
            <summary>
            Creates a new empty optimization group might be optimizing this item. This group MUST accept the item it was created from when it is passed to <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.IIsAvailable)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.IIsAvailableOptimizedGroup">
            <summary>
            Optimizes querying availability of a group of items with one call.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.IsEmpty">
            <summary>
            Gets whether this group is empty of any items. Used for cleaning up old empty groups.
            Unlike checking <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.GetItems" /> for emptiness, should not have the penalty of making a copy of all items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItems(JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery}@)">
            <summary>
              <para>Evaluates items in the group for availability.</para>
              <para>Must be thread-safe.</para>
            </summary>
            <param name="queries">Multiple queries to be executed on exactly the same set of mounts (prevents concurrent modifications on other threads). The queries each specify an <see cref="T:JetBrains.Application.DataContext.IDataContext" /> to calculate availability against, and the output collection.</param>
            <seealso cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItemsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})" />
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItemsAsync(JetBrains.Lifetimes.Lifetime,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery})">
            <summary>
              <para>Evaluates items in the group for availability.</para>
              <para>Must be thread-safe.</para>
            </summary>
            <param name="lifetime">The asynchronous operation lifetime.</param>
            <param name="queries">Multiple queries to be executed on exactly the same set of mounts (prevents concurrent modifications on other threads). The queries each specify an <see cref="T:JetBrains.Application.DataContext.IDataContext" /> to calculate availability against, and the output collection.</param>
            <remarks>This is the async version of the basic <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItems(JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery}@)" />, which allows to await for any locks rather than wait for them.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.GetItems">
            <summary>
              <para>Gets the list of items currently in the group (such that were submitted to <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.IIsAvailable)" /> with <c>True</c> result, and whose lifetime has not been terminated).</para>
              <para>To be thread safe, might need to make a copy of the items, beware perf penalty.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.TryAddItem(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsStorageMountPoint,JetBrains.Application.Settings.IIsAvailable)">
            <summary>
              <para>Tells whether the given item belongs to this availability group, and will be returned from <see cref="M:JetBrains.Application.Settings.IIsAvailableOptimizedGroup.EvaluateItems(JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.Application.Settings.AvailabilityGroupQuery}@)" /> when it fits.</para>
              <para>If yes, adds the item to the group for the duration of the <paramref name="lifetime" />.</para>
              <para>Must be thread-safe.</para>
            </summary>
            <param name="lifetime">If the item fits, it should be managed by the group for the duration of the lifetime. If the item does not fit, this function MUST NOT add actions to the lifetime.</param>
            <param name="item">The item to try adding to the group.</param>
            <param name="availability">Availability object of the item being added to the group. Validate it for being fit for management by this group.</param>
            <returns><c>True</c> if item is added and tied to the lifetime, <c>False</c> otherwise.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.ILiveMountPointsInContext">
            <summary>
            The live set of mount points to which a <see cref="T:JetBrains.Application.Settings.IContextBoundSettingsStoreLive" /> binds by either means.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ILiveMountPointsInContext.Changed">
            <summary>
            Notifies that the mount points list has changed.
            NOTE that this might be triggered by a call to <see cref="M:JetBrains.Application.Settings.ILiveMountPointsInContext.GetCurrentMountPoints" /> if a recalc were pending.
            Should not fire when there were actually no change.
            Should fire at least once in a reasonable amount of time after <see cref="M:JetBrains.Application.Settings.ILiveMountPointsInContext.GetCurrentMountPoints" /> starts to return another value. The recalc should happen in absence of calls to <see cref="M:JetBrains.Application.Settings.ILiveMountPointsInContext.GetCurrentMountPoints" /> as well, otherwise changes would not be dispatched correctly.
            This signal might not have acknowledgement.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ILiveMountPointsInContext.Origin">
            <summary>
            Gets a freehand string which describes the source of this live mounts list, for diagnostics (e.g. memory leak tracking if the list is formed incorrectly).
            This is especially important for custom-formed mount lists (no based on a context range).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ILiveMountPointsInContext.GetCurrentMountPoints">
            <summary>
            Gets a snapshot of the current list of mount points.
            If the mount points list updates itself to some external changes asynchronously with a delay (such as with binding to a context range), causes the update to happen so that an up-to-date list would be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsChangedEventSource">
            <summary>
              <para>Can fire events on changes in settings.</para>
              <para>Applies to the Settings Store in the whole, and to its live context bindings.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsChangedEventSource.Changed">
            <summary>
              <para>Listens to changes in the settings store.</para>
              <para>This signal fires on the settings store change processing thread, which might be either a special thread onwed by the settings store, or a pooled thread. It's OK to occupy it for some time, but all other change processing will be delayed by your activities.</para>
              <para>If you are using lifetimed entities, make sure to protect their use with a synchronized lifetime.</para>
            </summary>
            <seealso cref="M:JetBrains.Application.Settings.ISettingsChangedEventSource.AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)" />
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsChangedEventSource.AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)">
            <summary>
              <para>Listens to changes in the settings store.</para>
              <para>Your sink is called on the settings store change processing thread, which might be either a special thread onwed by the settings store, or a pooled thread. It's OK to occupy it for some time, but all other change processing will be delayed by your activities.</para>
              <para>You return a task from the sink. Even though this task does not block the thread and multiple sinks might be running in parallel, the change processing awaits for your task before firing subsequent changes, and the <see cref="P:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.CurrentActivity" /> would not be completed until all the sinks are completed.</para>
              <para>Scenarios when you want to return an incomplete task from the sink: caller changes a value in the settings store; caller checks for the <see cref="P:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.CurrentActivity" /> task, which is incomplete because the change is pending for processing; the change gets tossed and your sink gets called; the task from your sink completes asynchronously; only after that <see cref="P:JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch.CurrentActivity" /> might become completed; the client knows when the consequences of the changed value are fully applied.</para>
            </summary>
            <seealso cref="P:JetBrains.Application.Settings.ISettingsChangedEventSource.Changed" />
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsStorageMountPoint">
            <summary>
            To make a physical settings storage available for use with the Settings Store access, it must be mounted into the Settings Store using this interface.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Name">
            <summary>
            Gets the name of the mounting point. Usually, this is the same as the storage name. However, it is possible to mount different subpaths of a storage separately, in which case individual mount names should be provided.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable">
            <summary>
            Gets whether the mounting point is available in specific contexts.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Priority">
            <summary>
            Gets the priority of this mounting point.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Flags">
            <summary>
            Basic characteristics of the mounting point.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Metadata">
            <summary>
            Custom metadata to provide extensive information on the mounting point.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Storage">
            <summary>
            Gets the underlying storage of the mounting point.
            All of the storage operations should go under <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.PathInStorage"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.PathInStorage">
            <summary>
            The mounting path in the storage under which all of the data accessible through this mounting point resides.
            This allows to mount several subparts of the same storage individually.
            </summary>
            <remarks>The type of this property is essentially a string, but it is strongly-typed to enable smart-completing typical default values when a new mounting point is created.</remarks>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsStore">
            <summary>
            The central interface for accessing Settings in terms of Keys &amp; Entries in various contexts.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.DataContexts">
            <summary>
              <para>Gets the helper object which creates the data contexts to define the contexts in which settings are read or written.</para>
              <para>For example, two project files might have different settings because different mounting points are available in their contexts.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.MountingPointsTransaction">
            <summary>
              <para>Gets the transaction object which this settings store uses for accessing the underlying mounted storages.</para>
              <para>This is always non-<c>Null</c> if this settings store is running within a transaction (and is <see cref="T:JetBrains.Application.Settings.ISettingsStoreInTransaction" /> actually).</para>
              <para>If this settings store is not in a transaction, then this is <c>Null</c>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.MountPoints">
            <summary>
              <para>Gets the total list of mounting points available for storing the settings.</para>
              <para>Binding the store to a context filters this list down to those mounting points available in a specific context.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.ISettingsStore.Schema">
            <summary>
            Gets the settings schema which describes possible Keys and Entries which can be read or written on the Settings Store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToContextLive(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
              <para>Binds Settings Store for reading and writing values in a specific context.</para>
              <para>The resulting object is live, which means it will see the newly-added mounting points (if they fit the context) and can fire events when settings change in this context.</para>
            </summary>
            <param name="lifetime">Lifetime for the live context.</param>
            <param name="contextrange">Range of the contexts for reading and writing.</param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToContextTransient(JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
              <para>A lightweight method which binds Settings Store for reading and writing values in a specific context.</para>
              <para>Do not store the resulting objects because they will not see any newly-added mounts. Does not require a lifetime.</para>
            </summary>
            <param name="contextrange">Range of the contexts for reading and writing.</param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToMountPointsLive(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ILiveMountPointsInContext,JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            The context would be live and the mounts list might also change with time.
            </summary>
            <param name="lifetime">Defines the lifetime of this live context, because it tracks the live list of mounts and watches for changes.</param>
            <param name="mounts">The live list of mounts. This is allowed to change in a free-threaded manner. If changing the mounts set causes certain settings to change their values in this context, the appropriate change would be fired asynchronously and with a slight delay.</param>
            <param name="flags">Additional parameters for the context created.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.BindToMountPointsTransient(JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints,JetBrains.Application.Settings.BindToContextFlags)">
            <summary>
            Binds the context to the explicitly specified mount points.
            This means just creating a new bound store on the mount points.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStore.CreateNestedTransaction(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
              <para>Creates a nested transaction in the current Settings Store.</para>
              <para>All of the changes to the transacted Settings Store are not visible outside the transaction until you commit them.</para>
              <para>You have the same interface to the transacted Settings Store as to the normal one, with addition of a few methods for committing and reverting its transaction.</para>
            </summary>
            <param name="lifetime">Lifetime of the transaction. The transaction is automatically reverted when this lifetime ends. If you would like to commit the changes, call <see cref="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.CommitTransaction" /> before terminating the transaction lifetime.</param>
            <param name="name"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.ISettingsStoreInTransaction">
            <summary>
            An interface to the settings store that has been created as a child transaction to some other settings store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.CommitTransaction">
            <summary>
            <para>Commits the changes accumulated within this transaction to the parent context (to the real Settings Store if this is not a nested transaction).</para>
            <para>You can continue using the transaction after it's committed.</para>
            </summary>
            <remarks>The operation is thread-safe in that the Settings Store will be running consistently, but you might encounter side-effects if you are working on another thread with the transaction being committed.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.RevertTransaction">
            <summary>
            <para>Reverts all of the changes performed within the transaction.</para>
            <para>You can continue using the transaction after it's reverted.</para>
            <para>Terminating the transaction lifetime also terminates the transaction, so it's not required to call <see cref="M:JetBrains.Application.Settings.ISettingsStoreInTransaction.RevertTransaction"/> before dropping the obhect.</para>
            </summary>
            <remarks>The operation is thread-safe in that the Settings Store will be running consistently, but you might encounter side-effects if you are working on another thread with the transaction being reverted.</remarks>
        </member>
        <member name="T:JetBrains.Application.Settings.LiveMountPointsInContext">
            <summary>
            Creator accessors for <see cref="T:JetBrains.Application.Settings.ILiveMountPointsInContext" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.LiveMountPointsInContext.FromContextRange(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ContextRange,JetBrains.Application.Settings.ISettingsStore,JetBrains.Application.Settings.BindToContextFlags,JetBrains.Application.Settings.Implementation.ISettingsChangeDispatch,JetBrains.Util.ILogger)">
            <inheritdoc cref="T:JetBrains.Application.Settings.Implementation.LiveMountPointsInContextRange" />
            <remarks>No origin given here because a ContextRange is supposed to handle dropping obsolete mounts correctly and never cause a leak.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.LiveMountPointsInContext.FromLiveListUnsynchronized(JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IListEvents{JetBrains.Application.Settings.ISettingsStorageMountPoint},JetBrains.DataFlow.IProperty{JetBrains.Application.Settings.ISettingsStorageMountPoint},System.String)">
            <summary>
            Matches the legacy API before mounts list and last-wide were sync'ed by putting them into <see cref="T:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints" /> together so that they changed in sync.
            Thus dangerous because any settings activity on background threads might observe your partial change (in either collection or the property).
            Use only when you never change at least one of them.
            </summary>
            <param name="lifetime"></param>
            <param name="mounts"><paramref name="mounts" /> and <see cref="!:mountLastInWideContext" /> make <see cref="T:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints" /> together.</param>
            <param name="mountLastInWideContext"><paramref name="mounts" /> and <see cref="!:mountLastInWideContext" /> make <see cref="T:JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints" /> together.</param>
            <param name="origin"><see cref="P:JetBrains.Application.Settings.ILiveMountPointsInContext.Origin" /></param>
        </member>
        <member name="M:JetBrains.Application.Settings.LiveMountPointsInContext.FromLiveProperty(JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IProperty{JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints},System.String)">
            <inheritdoc cref="T:JetBrains.Application.Settings.LiveMountPointsInContext.LivePropertyWrapper" />
        </member>
        <member name="M:JetBrains.Application.Settings.LiveMountPointsInContext.FromStatic(JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints,System.String)">
            <summary>
            A live set which never changes.
            </summary>
            <param name="mounts"><see cref="M:JetBrains.Application.Settings.ILiveMountPointsInContext.GetCurrentMountPoints" /></param>
            <param name="origin"><see cref="P:JetBrains.Application.Settings.ILiveMountPointsInContext.Origin" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:JetBrains.Application.Settings.LiveMountPointsInContext.LivePropertyWrapper">
            <summary>
            Wraps a live property.
            There is no way to force immediate recalculation here. The value in the property is assumed to be always up to date (as much as needed for bound store access).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.LiveMountPointsInContext.LivePropertyWrapper.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IProperty{JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints},System.String)">
            <param name="lifetime">For sinking property events within this class.</param>
            <param name="propLiveMountPoints">The live mount points list.</param>
            <param name="origin"><see cref="P:JetBrains.Application.Settings.ILiveMountPointsInContext.Origin" />: you should describe the way of making this property list, plus the owner who keeps this list alive, for tracking of memory leaks.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="F:JetBrains.Application.Settings.LiveMountPointsInContext.LivePropertyWrapper.LiveMountPointsProperty">
            <summary>
            The original property.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.LiveMountPointsInContext.LivePropertyWrapper.JetBrains#Application#Settings#ILiveMountPointsInContext#Changed">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.LiveMountPointsInContext.LivePropertyWrapper.JetBrains#Application#Settings#ILiveMountPointsInContext#GetCurrentMountPoints">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.LiveMountPointsInContext.LivePropertyWrapper.JetBrains#Application#Settings#ILiveMountPointsInContext#Origin">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.LiveMountPointsInContext.StaticWrapper.JetBrains#Application#Settings#ILiveMountPointsInContext#Changed">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.LiveMountPointsInContext.StaticWrapper.JetBrains#Application#Settings#ILiveMountPointsInContext#GetCurrentMountPoints">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.LiveMountPointsInContext.StaticWrapper.JetBrains#Application#Settings#ILiveMountPointsInContext#Origin">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.Settings.MountPointFlags.IsDefaultValues">
            <summary>
            This mounting point is providing default values for settings entries and keys.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.MountPointFlags.IsWritable">
            <summary>
            This mounting point is user writable by default under normal conditions.
            Mounting points without this flag shouldn't be written to, unless this is specifically desired by user/algorithm.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses">
            <summary>
            <para>Standard priority classes for well-known settings storages.</para>
            <para>NOTE: you should avoid assigning zero priority to mounting points because relative priorities of injected layers will not work correctly in this case.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.AmbientStorage">
            <summary>
            Storages providing default settings.
            For example, built-in live templates, SSR patterns mounted by plugins, etc.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.GlobalAllProductStorage">
            <summary>
            One more global storage for per-user settings, for all products. Settings could be promoted here from per-product global user storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.GlobalPerProductStorage">
            <summary>
            The default global storage for per-user settings. Specific to the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.HierarchyStorage">
            <summary>
            Base priority for nested storages within the hierarchy (for R#, these are solution/project storages).
            If you need more than one priority level per hierarchy, use different mantissa with the same exponent (i. e. multiply by a positive number below ten).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStorageMountPointPriorityClasses.SyntheticPriorityOfSmartLayer">
            <summary>
            When we're rendering the settings layers, mount-originating layers take the priority of the underlying mount.
            The “Smart” synthetic layer does not have a single mount under it. To be displayed in a sorted list along with other layers, it uses this fake priority level.
            Do not use for real mounting points.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgs">
            <summary>
            Describes a group of changes to the logical settings store.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys">
            <summary>
            <para>Entry point to the hierarchical representation of the changed entities.</para>
            <para>These objects follow the hierarchy of the logical schema. Only the part of the schema that has changes described by this object is included.</para>
            <para>By inspecting these objects, you can determine whether the particular key or entry has changed itself. If a key is included but not <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IsChangedItself"/>, then there're some changes in its child keys or entries.</para>
            <para>For indexed keys and entries, you can get particular index values.</para>
            <para>This list is ordered by key local names and then index serialized values, which makes it possible to do binary searches.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.ChangedStorageKeys">
            <summary>
            A sorted hash set of any storage keys affected by this change.
            This is a hybrid path: the first path component MUST be empty because it's reserved for the mounting path, and the remaining components represent the physical path within the mounted storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.ChangedKeys">
            <summary>
            <para>Quick access to all of the changed keys listed under <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            <para>Note that this means that either the key has changed, or rather one of its descendants.</para>
            <para>To get information on indexed key indices, inspect <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.ChangedEntries">
            <summary>
            <para>Quick access to all of the changed entries listed under <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            <para>To get information on indexed entry indices, inspect <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.RootKeys"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.RemoveUnchangedThingsAndCollectLists(JetBrains.Util.ILogger)">
            <summary>
            There might be such entities in the lists for which there're no descendants with is-changed-itself status (e.g. only technical changes were registered for those).
            Remove such entities.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance">
            <summary>
            A change to a settings key instance.
            “Instance” means that for an indexed key this refers to a speficic instance (identified by a particular index value) rather then the schema key in general.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.SettingsKey">
            <summary>
            The changed settings key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.Children">
            <summary>
            Child keys of this key, if there were any changes in them.
            For indexed keys, only particular instances are listed. If more than one instance of the same key was changed, there will be more than one instance of the same key in the list.
            This list is sorted by key local name and then index serialized value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IsChangedItself">
            <summary>
            If <c>True</c>, there were changes to this exactly key (only applies to indexed key instances, because they might be created and deleted).
            If <c>False</c>, the key itself didn't change, but this node has some ancestors which changed themselves.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.Entries">
            <summary>
            Changed entries of this key, if any.
            For indexed entries, only particular instances are listed. If more than one instance of the same entry was changed, there will be more than one instance of the same entry in the list.
            This list is sorted by key local name and then index serialized value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IndexSerialized">
            <summary>
            If <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.SettingsKey"/> is an indexed key, a non-<c>Null</c> index to the particular instance. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.FGetLocalNameAndIndex">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.myLocalNameAndIndex">
            <summary>
            Serves as a dictionary key when indexing this stull in a parent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.TryGetIndexValue">
            <summary>
            If this is an indexed key instance, deserializes the <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsKeyInstance.IndexSerialized"/> index value into a runtime object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance">
            <summary>
            A change to a settings entry instance.
            “Instance” means that for an indexed entry this refers to a speficic instance (identified by a particular index value) rather then the schema entry in general.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.SettingsEntry">
            <summary>
            The changed settings entry.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IndexSerialized">
            <summary>
            If <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.SettingsEntry"/> is an indexed entry, a non-<c>Null</c> index to the particular instance. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IsChangedItself">
            <summary>
            If <c>True</c>, there were significant changes to this exactly entry.
            If <c>False</c>, then the entry is only present because some technical information on it might have changed which does not affect the entry value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.FGetLocalNameAndIndex">
            <summary>
            Cached delegate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.TryGetIndexValue">
            <summary>
            If this is an indexed entry instance, deserializes the <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IndexSerialized"/> index value into a runtime object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.GetIndexValue">
            <summary>
            If this is an indexed entry instance, deserializes the <see cref="F:JetBrains.Application.Settings.SettingsStoreChangeArgs.SettingsEntryInstance.IndexSerialized"/> index value into a runtime object.
            Throws otherwise or on failures.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsStoreSerializerType">
            <summary>
            Defines the choice of serializers for storing Settings Store data in the underlying physical storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Auto">
            <summary>
            Chooses the best serializer automatically based on the member type of the member annotated with the attribute.
            For primitive types, it's <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Primitive"/>. In most other cases, <see cref="F:JetBrains.Application.Settings.SettingsStoreSerializerType.TypeConverterToInvariantString"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.Primitive">
            <summary>
            The value is serialized AS IS, as a primitive type. Is not applicable to non-primitive types (those not directly supported by the settings store types).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.TypeConverterToInvariantString">
            <summary>
            The <see cref="T:System.ComponentModel.TypeDescriptor"/> is queried for <see cref="T:System.ComponentModel.TypeConverter"/> and it is used to convert between the typed value and an invariant string.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.XmlSerializer">
            <summary>
            The object is serialized into string and back with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.XamlSerializer">
            <summary>
            The object is serialized into string with <see cref="T:System.Windows.Markup.XamlWriter"/> and back with <see cref="T:System.Windows.Markup.XamlReader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsStoreSerializerType.BinaryFormatter">
            <summary>
            The object is serialized into BLOB and back with <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SchemaStorageKeyPathComponent">
            <summary>
            <see cref="P:JetBrains.Application.Settings.SettingsEntry.CachedPathComponents"/> and <see cref="P:JetBrains.Application.Settings.SettingsKey.CachedPathComponents"/> items.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SchemaStorageKeyPathComponent.Component">
            <summary>
            Path component.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SchemaStorageKeyPathComponent.IndexRequired">
            <summary>
            If non-<c>Null</c>, an additional path component with an index value for this indexed key is required after this component.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsEntry">
            <summary>
            Base class for entries of a settings key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.ClrMember">
            <summary>
            Gets the member of the settings key class which defines this settings entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntry.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntry.IsIndexed">
            <summary>
              <para>Gets whether this entry is an indexed entry.</para>
              <para>When <c>True</c>, this instance is actually of type <see cref="T:JetBrains.Application.Settings.SettingsIndexedEntry" /> which has additional information about the index type. Otherwise, the actual type of the instance is <see cref="T:JetBrains.Application.Settings.SettingsScalarEntry" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.LocalName">
            <summary>
              <para>Local name of the entry.</para>
              <para>Appended to the full name of the containing settings key to get the actual key in the settings storage key-value store.</para>
              <para>Complies with the identifier rules (<see cref="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.AssertValidLocalName(System.String)" />).</para>
              <para>By default, equal to <see cref="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberName" />, but might be overridden with <see cref="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.EntryNameOverride" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.Parent">
            <summary>
            The settings key containing this entry.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsEntry.SettingsKeyClassMemberName">
            <summary>
              <para>As this entry has been defined by some member (field/property) in the settings key class, gives the name of that member.</para>
              <para>Same as the <see cref="F:JetBrains.Application.Settings.SettingsEntry.LocalName" /> by default, but the latter might be overridden with <see cref="P:JetBrains.Application.Settings.SettingsEntryAttributeBase.EntryNameOverride" />.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntry.AssertValid">
            <summary>
            Called in non-production envirnoments to retrieve all of the lazy parameters of this key and let all lazied asserts throw out.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsEntry.CachedPathComponents">
            <summary>
            Cached path components for mapping this settings schema entity to physical keys in the settings storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsEntry.MakeCachedPathComponents">
            <summary>
            Lazy-inits <see cref="P:JetBrains.Application.Settings.SettingsEntry.CachedPathComponents" /> on first use and stores for reuse: bases on the parent key, which lazy-inits also.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedEntry">
            <summary>
            Describes an indexed settings entry in the settings schema.
            </summary>
            <seealso cref="T:JetBrains.Application.Settings.SettingsIndexedEntryAttribute" />
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedEntry.myLazyIndexAndValueInfo">
            <summary>
            Lazy-inited backend for index and value catalog types and their serialization info. Stored together in a reference type to have atomic operations on it.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntry.IndexClrType">
            <summary>
              <para>The CLR type of the index.</para>
              <para>This is the first generic actual parameter on the <see cref="T:JetBrains.Application.Settings.IIndexedEntry`2" /> member which defines the entry.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntry.IndexedValueClrType">
            <summary>
              <para>The CLR type of the indexed values.</para>
              <para>This is the second generic actual parameter on the <see cref="T:JetBrains.Application.Settings.IIndexedEntry`2" /> member which defines the entry.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntry.IndexedValueSerializer">
            <summary>
            The way indexed values should be serialized. Equivalent to <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueSerializer" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntry.IndexSerializer">
            <summary>
              <para>The way indices should be serialized.</para>
              <para>Note that the final algorithm is a bit different from what's applied to serializing entry values because serialized indices take part in the settings storage keys as local names, which implies strict limitations on their type (always a string) and character set.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntry.SettingsStorageIndexedValueType">
            <summary>
            The type in settings storage with which indexed values are stored.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedEntry.SettingsStorageIndexType">
            <summary>
              <para>The type in settings storage with which indices might be stored as settings storage values.</para>
              <para>Note that normally indices are used as local names within the settings storage key path, where they must always be strings.</para>
              <para>However, for human readability, we might be writing a copy of the index into the value, in which case it's serialized against the same rules as normal settings entry values. That's where this datum applies.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedEntry.AssertValid">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedEntry.LazyIndexAndValueInfo">
            <summary>
            Boxes the lazy-inited stuff into the single reference.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedEntry.LazyIndexAndValueInfo.#ctor(JetBrains.Application.Settings.SettingsIndexedEntry)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsIndexedKey">
            <summary>
              <para>Describes an indexed settings key in the settings schema.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedKey.myIsLazyInited">
            <summary>
            Whether <see cref="F:JetBrains.Application.Settings.SettingsIndexedKey.myLazyIndexClrType" /> and <see cref="F:JetBrains.Application.Settings.SettingsIndexedKey.myLazyIndexSerializer" /> already have values and might be used.
            This must be raised after those are assigned, and after a fence.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedKey.myLazyIndexClrType">
            <summary>
            Lazy inited, NULL until that, look at <see cref="F:JetBrains.Application.Settings.SettingsIndexedKey.myIsLazyInited" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsIndexedKey.myLazyIndexSerializer">
            <summary>
            Lazy inited, NULL until that, look at <see cref="F:JetBrains.Application.Settings.SettingsIndexedKey.myIsLazyInited" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedKey.IndexClrType">
            <summary>
              <para>The type of the index to this indexed key.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsIndexedKey.IndexSerializer">
            <summary>
              <para>The way indices should be serialized.</para>
              <para>Note that the final algorithm is a bit different from what's applied to serializing entry values because serialized indices take part in the settings storage keys as local names, which implies strict limitations on their type (always a string) and character set.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsIndexedKey.AssertValid">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsKey">
            <summary>
              <para>Describes a settings key (indexed or not) in the settings schema.</para>
              <para>Indexed keys are described by a more specific type <see cref="T:JetBrains.Application.Settings.SettingsIndexedKey" />.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.myAttrKey">
            <summary>
            The mandatory attribute on the settings key class.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.myChildren">
            <summary>
            Lazy-filled on first use.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.myLazyEntries">
            <summary>
            Entries are kept in this list, sorted by member-name for quicker lookup (lambda expressions give us the CLR member name), after asked for the first time.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.Children">
            <summary>
              <para>Gets the child settings keys of this key. Their <see cref="P:JetBrains.Application.Settings.SettingsKey.Parent" /> will be pointing to this instance.</para>
              <para>When defining a settings key as a class with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute" /> or <see cref="T:JetBrains.Application.Settings.SettingsIndexedKeyAttribute" />, the <see cref="P:JetBrains.Application.Settings.SettingsKey.Parent" /> is specified as a parameter to the attribute. CLR inheritance has nothing to do with settings key parenting in the schema.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.Entries">
            <summary>
              <para>Gets the settings entries of this settings key.</para>
              <para>They are defined as fields or properties in the settings key class marked with <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute" /> or <see cref="T:JetBrains.Application.Settings.SettingsIndexedEntryAttribute" />.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.IsIndexed">
            <summary>
              <para>Gets whether this key is an indexed key. To get an entry value, you must provide an index to each indexed key in the parent keys chain.</para>
              <para>When <c>True</c>, this instance is actually of type <see cref="T:JetBrains.Application.Settings.SettingsIndexedKey" /> which has additional information about the index type.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.LocalName">
            <summary>
              <para>Local name of the key.</para>
              <para>Appended to the full name of the parent settings key to get the actual key in the settings storage key-value store.</para>
              <para>Complies with the identifier rules (<see cref="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.AssertValidLocalName(System.String)" />).</para>
              <para>By default, equal to <see cref="F:JetBrains.Application.Settings.SettingsKey.SettingsKeyClassClrType" />.<see cref="P:JetBrains.Application.Parts.PartCatalogueType.LocalName" />, but might be overridden with <see cref="P:JetBrains.Application.Settings.SettingsKeyAttributeBase.KeyNameOverride" />.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.Parent">
            <summary>
              <para>Gets the parent key of this settings key, or <c>Null</c> if this key is one of the root keys.</para>
              <para>When defining a settings key as a class with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute" /> or <see cref="T:JetBrains.Application.Settings.SettingsIndexedKeyAttribute" />, the <see cref="P:JetBrains.Application.Settings.SettingsKey.Parent" /> is specified as a parameter to the attribute. CLR inheritance has nothing to do with settings key parenting in the schema.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsKey.SettingsKeyClassClrType">
            <summary>
            CLR type of the class which defined this settings key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKey.TryFindEntryByMemberName(System.String)">
            <summary>
            Optimizes lookup thru lambda expressions which give us the member name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKey.AssertValid">
            <summary>
            Called in non-production envirnoments to retrieve all of the lazy parameters of this key and let all lazied asserts throw out.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsKey.CachedPathComponents">
            <summary>
            Cached path components for mapping this settings schema entity to physical keys in the settings storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKey.GetEntryByMemberName(System.String)">
            <summary>
            Optimizes lookup thru lambda expressions which give us the member name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsKey.LazyInitCachedPathComponents">
            <summary>
            Lazy calculates <see cref="F:JetBrains.Application.Settings.SettingsKey.myLazyCachedPathComponents" /> for us and all the parents.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsScalarEntry">
            <summary>
            Describes a scalar settings entry in the settings schema.
            </summary>
            <seealso cref="T:JetBrains.Application.Settings.SettingsEntryAttribute" />
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsScalarEntry.myLazySettingsStorageEntryType">
            <summary>
            After lazy inited, stores the <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType" /> value together with <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.myFlagIsLazyInited" /> flag to mark as inited.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsScalarEntry.myLazyValueSerializer">
            <summary>
            After lazy inited, stores the <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueSerializer" /> value together with <see cref="F:JetBrains.Application.Settings.SettingsScalarEntry.myFlagIsLazyInited" /> flag to mark as inited.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsScalarEntry.IsIndexed">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsScalarEntry.RawDefaultValue">
            <summary>
              <para>Gets the default value to be used for this settings entry in case it's not set for this context.</para>
              <para>Note that the type of this default value is neither <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType" /> nor the <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType" />. It's the object value written in the <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute" />. <see cref="M:JetBrains.Application.Settings.Storage.DefaultBody.SettingsStorageHelpers.CoerceEntryDefaultValueToRuntimeType(System.Object,System.Type,JetBrains.Util.ILogger)" /> contains special logic for converting this into the runtime entry value type.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType">
            <summary>
            The type of this entry in the setting storage. This only matches <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType" /> for select primitive types. In all other cases, <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueSerializer" /> is used for converting values between <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType" /> and <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType" /> back and forth.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType">
            <summary>
              <para>Gets the CLR type of the value of this scalar entry.</para>
              <para>This is the type of the object you'll be getting from the <see cref="T:JetBrains.Application.Settings.Implementation.SettingsStore" /> when reading this value.</para>
              <para>For a scalar entry, matches the type of the member which defines the entry..</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueSerializer">
            <summary>
              <para>Gets how the value of the field/property should be serialized for storage.</para>
              <para>Used for converting values between <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType" /> and <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.SettingsStorageEntryType" /> back and forth</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsScalarEntry.GetDefaultValue``2(JetBrains.Application.Settings.ISettingsStore,System.Linq.Expressions.Expression{System.Func{``0,``1}},JetBrains.Util.ILogger)">
            <summary>
              <para>Gets the entry default value. Accessible even when the settings store is not available at the point (e.g. in a static context or when running in fallback mode without the Shell).</para>
            </summary>
            <typeparam name="TKeyClass"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="settings">The settings store, if available. If specified, will be for a quick look up of the entry default value. If <c>Null</c>, the default value will be parsed out of the entry itself, which might be slow.</param>
            <param name="lambdaexpression">Identifies the entry.</param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsScalarEntry.GetDefaultValueInEntryMemberType">
            <summary>
            Converts the <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.RawDefaultValue">raw default value</see> to the <see cref="P:JetBrains.Application.Settings.SettingsScalarEntry.ValueClrType">entry value runtime type</see>.
            <para>If possible, should not let exceptions out.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsScalarEntry.AssertValid">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsSchema">
            <summary>
            <para>This schema is the logical schema on <see cref="T:JetBrains.Application.Settings.SettingsKey">settings keys</see> / <see cref="T:JetBrains.Application.Settings.SettingsEntry">settings entries</see>, exposed to the application for getting/setting values of arbitrary user types.</para>
            <para>It is collected by reading classes with <see cref="T:JetBrains.Application.Settings.SettingsKeyAttribute"/> (which produces hierarchy of keys) and inspecting their members for <see cref="T:JetBrains.Application.Settings.SettingsEntryAttribute"/> (which produces key entries).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsSchemaCollector.myCacheRootKeys">
            <summary>
            Caches the list of the root keys (keys which do not have a parent, which is denoted by the <see cref="T:System.Reflection.Missing" /> type as the parent key type).
            This info is repeatedly requested when tossing settings changes, so it's worth storing after getting for the first time.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsSchemaCollector.myLookupChildren">
            <summary>
            Indexes child keys by their parent. We can directly get the parent of a key by reading from its attribute, but there's no way to quickly find all child keys when we need to enumerate the tree, so gotta build this index. Lazy-filled when first needed to traverse the tree top-down (usually, not from direct settings access, but on presentation or changes processing).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsSchemaCollector.myLookupKeyCatalogType">
            <summary>
            Indexes settings key catalog types by their string name. Lazy-filled when first needed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.SettingsSchemaCollector.mySettingsKeys">
            <summary>
            Caches the settings keys which have already been created. They are lazy-created on first access, which offloads computations from startup. Some of the keys are required sync on startup for reading critical settings, but not many. Lock-free access. Multiple instances of a key might be created while doing concurrent GetOrCreate, but only one of them would be exposed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.AssertValid">
            <summary>
            Called in non-production environments, makes consistency checks on the full schema and causes all of the lazily-computed values be computed and checked.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.GetChildKeys(JetBrains.Application.Settings.SettingsKey)">
            <summary>
            Called by a key when it delay-queries the list of its child keys.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Introspection.AssertTypeNoNullable(JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Application.Settings.SettingsEntry)">
            <summary>
            Nullable`1 not allowed
            Cannot be boxed, so many of our methods will fail to roundtrip it when serializing
            Expected to be called on the assertions branch only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Introspection.GetKeyEntries(JetBrains.Application.Settings.SettingsKey)">
            <summary>
            Lazy-called when smb first needs the entries of a key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Introspection.GetKeyEntries_Bases(JetBrains.Application.Catalogs.PartCatalogType@,JetBrains.Util.dataStructures.Sources.CollectionSource{JetBrains.Application.Catalogs.PartCatalogTypeMember}@)">
            <summary>
            Walk base classes (if any) to collect their members as settings entries into a settings class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.Introspection.GetKeyEntries_Entry(JetBrains.Application.Settings.SettingsKey,JetBrains.Application.Catalogs.PartCatalogTypeMember@)">
            <summary>
            Processes a single member in the settings entry class.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly">
            <summary>
            Stores the full name of the type and the short name of the assembly (without the strong name, version, etc).
            Using this identity for types allows us to avoid problems with binding redirections not quite working in our metadata assembly APIs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly.EqualityComparer.#ctor">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly.EqualityComparer.System#Collections#Generic#IEqualityComparer{JetBrains#Application#Settings#SettingsSchemaCollector#TypeInWeakAssembly}#Equals(JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly,JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly.EqualityComparer.System#Collections#Generic#IEqualityComparer{JetBrains#Application#Settings#SettingsSchemaCollector#TypeInWeakAssembly}#GetHashCode(JetBrains.Application.Settings.SettingsSchemaCollector.TypeInWeakAssembly)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.Settings.Upgrade.IMigrateSettings">
            <summary>
              <para>Implement this interface on a <see cref="T:JetBrains.Application.Settings.Upgrade.MigrateSettingsAttribute" />-annotated class to migrate settings to a newer semantic layout within the Settings Store.</para>
              <para>You can import components in your constructor. Your object won't have any thread affinity.</para>
              <para>Don't forget to write your tests, see SettingsMigrationTestBase</para>
              <para>Also, consider using upgradable settings instead</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Upgrade.IMigrateSettings.GetEntriesToMigrate(JetBrains.Application.Settings.ISettingsSchema)">
            <summary>
              <para>Same as <see cref="M:JetBrains.Application.Settings.Upgrade.IMigrateSettings.GetKeysToMigrate(JetBrains.Application.Settings.ISettingsSchema)" />, but applies to individual entries when the whole key is not considered for migration to the new format.</para>
              <para>If you're not migrating the whole key, you don't have to list any entries from it or child keys in this parameter.</para>
              <para>Might be called on any thread.</para>
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Upgrade.IMigrateSettings.GetKeysToMigrate(JetBrains.Application.Settings.ISettingsSchema)">
            <summary>
              <para>Yield the keys which your migration routine would like to migrate to the new format, should there be any values under them.</para>
              <para>Your migration routine will only be called if these are present in some layer, and this migration routine has not yet been called on that layer.</para>
              <para>This also includes all the entries in these keys, so you don't have to individually list them within <see cref="M:JetBrains.Application.Settings.Upgrade.IMigrateSettings.GetEntriesToMigrate(JetBrains.Application.Settings.ISettingsSchema)" />.</para>
              <para>Child keys are also included.</para>
              <para>Might be called on any thread.</para>
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Upgrade.IMigrateSettings.Migrate(JetBrains.Application.Settings.IContextBoundSettingsStoreImplementation)">
            <summary>
              <para>Called on a specific settings layer when a migration case is detected.</para>
              <para>(1) The settings covered by <see cref="M:JetBrains.Application.Settings.Upgrade.IMigrateSettings.GetKeysToMigrate(JetBrains.Application.Settings.ISettingsSchema)" /> or <see cref="M:JetBrains.Application.Settings.Upgrade.IMigrateSettings.GetEntriesToMigrate(JetBrains.Application.Settings.ISettingsSchema)" /> are defined in this layer.</para>
              <para>(2) This migration routine has not yet been called for this layer.</para>
            </summary>
            <param name="store">The settings store bound to the specific layer. The default settings layers are not included in the stack.</param>
            <returns>Optional async implementation.</returns>
        </member>
        <member name="T:JetBrains.Application.Settings.Upgrade.MigrateSettingsAttribute">
            <seealso cref="T:JetBrains.Application.Settings.Upgrade.IMigrateSettings" />
        </member>
        <member name="T:JetBrains.Application.Settings.Upgrade.SettingsMigrationManager">
            <summary>
              <para>Helps with migrating the semantical settings format to newer versions within Settings Store.</para>
              <para>Collects possible <see cref="T:JetBrains.Application.Settings.Upgrade.IMigrateSettings" />, determines their applicability, calls per mount.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Upgrade.SettingsMigrationManager.DisableMigration">
            <summary>
            Can be set in metadata for a mount point to disable migration
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Upgrade.SettingsMigrationSettingsKey">
            <seealso cref="T:JetBrains.Application.Settings.Upgrade.SettingsMigrationManager" />
            <seealso cref="T:JetBrains.Application.Settings.Upgrade.IMigrateSettings" />
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayers">
            <summary>
            Manages user-injected settings layers based on disk files.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.FileInjectedLayerSettingsKey">
            <summary>
            Serializes information on a file-based user-injected layer to enable restoring it after application restarts.
            The index is just an unique key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.InjectedFiles">
            <summary>
            Collection of tuples of Layer's display name and icon and injected file
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.FileInjectedLayerInstance.ActualPath">
            <summary>
            The current actual absolute path of the layer (either calculated from the relative, or taken as absolute).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.ForEachHostingLayer(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer)">
            <summary>
            When a new hosting layer appears, we're notified of it (layer additions are originated in a guarded context).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.SynchronizeHostLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer)">
            <summary>
            Reads the list of injections from the host layer and synchronizes the list on our <see cref="F:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.myMapHostToInjected"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.mySynchronizeReadHostLayerCurrentData">
            <summary>
            Ensures synchronization on reading injected layer settings from the host layer: that the lifetime does not terminate while we're busy.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.FileInjectedLayers.RegisterInjectedMounts.Synchronize">
            <summary>
            Normally, host layers are watched for injections info async with a delay.
            If you've just added injection info, call into this method to immediately update the set of injected layers.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.InjectedLayersSettingsKey">
            <summary>
            Base key for all injected layers related data.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.ResetSettings">
            <summary>
            Requests for resetting the settings to their defaults should be sent thru this class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.ResetSettings.Reset(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,System.Collections.Generic.IEnumerable{System.Tuple{JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object}}})">
            <summary>
            <para>Resets settings to their defaults.</para>
            <para>Unlike <see cref="M:JetBrains.Application.Settings.UserInterface.ResetSettings.ResetAllSettings"/>, does not treat user-injected layers in a special way.</para>
            </summary>
            <param name="layerid">Optional. The layer to reset settings in. If omitted, settings will be reset in all the layers.</param>
            <param name="keys">Optional. Keys whose child settings should be reset. Settings outside these keys will not be affected. Resets all applicable settings if omitted.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.ResetSettings.ResetAllSettings">
            <summary>
            <para>Resets all settings to their factory defaults.</para>
            <para>User-injected layers are not wiped, they are just deleted as injected layers. If they are injected from a file, the settings in that file remain intact.</para>
            <para>See also <see cref="T:JetBrains.Application.Settings.UserInterface.ResetSettings"/> which wipes specific (or all) layers without telling injected ones apart.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer">
            <summary>
            We can be settings on options pages in different contexts, like “Smart”, “Solution Shared Settings Only”.
            Also we might be mounting new settings files as layers and changing their order.
            This class describes one of these layers, as visible to the user..
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.SettingsStoreContext">
            <summary>
            The settings context for reading/writing on this layer.
            All of these are opened over the same settings store transaction. If you're working with these in an Options dialog, then they're in the Options Dialog transaction.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.IsDefault">
            <summary>
            Whether it's the default “Smart” “settings layer” (a combination of all application-wide mounts) which is edited in the default Options dialog.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Id">
            <summary>
            Identifies this layer in an instance-invariant and transaction-invariant manner.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Priority">
            <summary>
            Priority of this layer when displaying a sorted layers list.
            The lower the number, the higher the priority.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Metadata">
            <summary>
            <para>Exposes the metadata of the layer (writable).</para>
            <para>For layers based on a mounting point, this is the metadata of the mounting point.</para>
            <para>For the default layer, this is just a disconnected local bag.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.DisplayName">
            <summary>
            Display name of the layer. This is composed out of the <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DisplayName"/> metadata and the mounting point name (<see cref="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Name"/>) if the former is empty.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Icon">
            <summary>
            Icon of the layer. This is composed out of the <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Icon"/> metadata
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity">
            <summary>
            Allows to identify and match settings layers in different transactions.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity.IsUserEditable">
            <summary>
            False means that an extension is managing this. Don't let the user edit/delete/reset. They can always disable
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity.HasCustomEditSemantic">
            <summary>
            True means: this layer needs special handling for editing (not all settings may be changed there) and for saving (may need a special UI).
            On practice this means a layer hidden from view unless a client makes additional checks (via <see cref="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity.Metadata"/> or via type checking) that it can handle it.
            Example: editorconfig layer
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity.IsDefault">
            <summary>
            Whether it's the default “Smart” “settings layer” (a combination of all application-wide mounts) which is edited in the default Options dialog.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers">
            <summary>
            We can be editing settings on options pages in different contexts, like “Smart”, “Solution Shared Settings Only” (displayed as tabs above settings page in the options view).
            This class describes a set of such contexts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DefaultLayer">
            <summary>
            The default options context for smart editing which always exists.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.UserEditableLayers">
            <summary>
            The list of available options context which could be manually selected for editing by the user.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.VisibleLayers">
            <summary>
            The list of layers that are visible. This is a superset of <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.UserEditableLayers"/> and includes
            any layer that has the <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsNonUserEditable"/> metadata set (e.g. extensions)
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.EditableLayers">
            <summary>
            The list of all layers that may be viewed or edited. This is a superset of <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.VisibleLayers"/>.
            It includes, for example, a special EditorConfig layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsHiddenFromUserFriendlyLayers">
            <summary>
            Set this metadata to <c>True</c> on a mounting point if you want to keep it from appearing in the user-friendly settings layers list (in Options' SaveTo, in SettingsLayers dialog, etc).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsAutoGenerated">
            <summary>
            <c>True</c> mounting point is generated by R#
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsNonUserEditable">
            <summary>
            If set to <c>True</c>, this settings in the mount point cannot be edited by the user, so this layer should not be presented to the user as a save location
            </summary>
            <remarks>
            <para>Primarily intended for settings exposed by extensions, where the user shouldn't edit them (they should save changes in e.g. the smart layer), but the layer should still be visible in the manage options dialog</para>
            <para>Use <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsHiddenFromUserFriendlyLayers"/> to completely hide the layer from the user</para>
            </remarks>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.ExcludeFromResetAllSettings">
            <summary>
            If <c>True</c>, the mount point won't be cleared during <see cref="M:JetBrains.Application.Settings.UserInterface.ResetSettings.ResetAllSettings" />
            <remarks>
            Note: The option is ignored if <see cref="M:JetBrains.Application.Settings.UserInterface.ResetSettings.Reset(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,System.Collections.Generic.IEnumerable{System.Tuple{JetBrains.Application.Settings.SettingsKey,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object}}})"/> is used.
            </remarks>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Origin">
            <summary>
            Some text which hints on the origin of the layer — e.g. from appdata or solution folder.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DiskFilePath">
            <summary>
            In case this layer originates as a disk file, exposes the full path to that file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DisplayName">
            <summary>
            If non-empty, could be used as the display name for the layer in the user interface. Otherwise, the mount point name should be used where applicable.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.LayerId">
            <summary>
            Layer ID
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Icon">
            <summary>
            If non-empty, could be used as the icon for the layer in the user interface. Otherwise, the mount point name should be used where applicable.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.Flags.IncludeHiddenLayers">
            <summary>
            By default, layers with <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.IsHiddenFromUserFriendlyLayers"/> metadata are excluded from the user-friendly-layers list.
            This flag overrides the behavior to include all of the available layers.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsMountPointLayer.MountPointIdentity.CharacteristicMount">
            <summary>
            Any layer besides the default (smart) one originates from a mounting point, which is made writable and to which all of the mounting points with factory defaults are mixed in.
            This gives out this originating mount of the layer, or <c>Null</c> for the default (smart) layer.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsMountPointLayer.MountPointIdentity.IsDefault">
            <summary>
            Whether it's the default "Smart" "settings layer" (a combination of all application-wide mounts) which is edited in the default Options dialog.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsSmartLayer.SmartLayerIdentity.IsDefault">
            <summary>
            Whether it's the default "Smart" "settings layer" (a combination of all application-wide mounts) which is edited in the default Options dialog.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers">
            <summary>
            <para>Central management authority for user-injected settings layers — those that were added by a user when mounting e.g. a disk file as a new settings layer.</para>
            <para>“User-Injected Layer” — a settings layer (backed up by a <see cref="T:JetBrains.Application.Settings.ISettingsStorageMountPoint">mounting point</see> in the <see cref="T:JetBrains.Application.Settings.ISettingsStore">Settings Store</see>) created by the user over some disk file or URI or other media.</para>
            <para>“Layer Hosting User Injections” — to restore injected layers in subsequent sessions, information on them is stored as settings in one of the regular layers. A layer which can store such information is a hosting layer (regardless of whether it has any such records already or not). Each user-injected layer belongs to exactly one hosting layer, so they have some kind of a parent-child relation. Currently an injected layer cannot host injections, but that might be a subject to change.</para>
            <para>The overall operation is as follows: when <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> sees a new hosting layer, it publishes it on the <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/> collection. Specific user injected layer implementations watch this structure, load their settings from each new hosting layer, and call into <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> for registering the layer. Creation of a brand new injected layer is on the handlers' part. Layer deletion could be initiated from <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> because there should be the single deletion action for the layers.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsHostingUserInjections">
            <summary>
            If the mounting point is holding the list of user-mounted layers which are mounted when the mounting point is loaded and aligned in the same “group” as their parent mount.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsUserInjected">
            <summary>
            If the mounting point was created as a user-mounted layer based on the list in some <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsHostingUserInjections"/> mounting point.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.InjectedLayerDescriptor">
            <summary>
            Metadata on the mounting point of the injected layer with its descriptor object, as provided by the owner.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections">
            <summary>
            Lists all of the injection hosting layers which might possibly contain records on injected layers in them.
            Injection handlers should watch this collection, read their own injection information in their own format from the settings of that layer, and <see cref="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.RegisterUserInjectedLayer(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor)"/> for each of such layers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.myMapInjectedMountToInjectedLayer">
            <summary>
            Allows to get injection runtime info by injected layer ID.
            Mounts are created by <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo"/>s, a runtime info lives the whole span the injection is defined, while the mounts get recreated from time to time.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.myMapHostMountToHostingLayer">
            <summary>
            Allows to get hosting layer runtime info by hosting layer ID.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.myLayersHostingUserInjectionsInternal">
            <summary>
            Same as <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/>, but contains the full info.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.RegisterUserInjectedLayer(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor)">
            <summary>
            <para>Registers a user-injected layer in the settings system.</para>
            <para>After calling this method, the layer becomes available with the Settings Store, and this class registers its relation between the injection host and injected layer.</para>
            <para>This method is to be called by injections functionality implementation (for example, file-based injections). That code should watch for any new <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/>, read the feature-specific injection information from it, create the storage and the mounting point WIHTOUT registering them with the settings system, set <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsUserInjected"/> metadata on the mounting point, and supply the metadata to this function. When the layer is just injected by the user in the UI, the injection settings should be written to the appropriate injections host, the functionality should then get the change notification and process it by creating the storage and supplying it to this function.</para> 
            </summary>
            <param name="lifetimeInjection">Duration of the injection registration.</param>
            <param name="descriptor"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Gets whether this layer has been user-injected.
            </summary>
            <param name="layerPossiblyInjected"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsHostingUserInjectedLayers(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Gets if the layer might yield user-injected layers.
            Note that this does not necessarily mean it will.
            </summary>
            <param name="layerPossiblyHostingInjections"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.TryGetLayerHostingUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            If this layer is user-injected, gets the layer which is hosting it.
            Otherwise, <c>NULL</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.GetLayerHostingUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            If this layer is user-injected, gets the layer which is hosting it.
            Otherwise, throws an exception.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.Init_WatchForHostingLayers(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers,JetBrains.Application.Threading.IThreading,JetBrains.Util.ILogger)">
            <summary>
            Expose those mounts that might have user-mounted layers written to them.
            </summary>
            <param name="lifetime"></param>
            <param name="mounts"></param>
            <param name="layers"></param>
            <param name="threading"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.Init_AssertValidFlags(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.Implementation.SettingsStorageMountPoints,JetBrains.Util.ILogger)">
            <summary>
            Asserts user-mounted-layer-related metadata flags combination is valid on mounting points.
            </summary>
            <param name="lifetime"></param>
            <param name="mounts"></param>
            <param name="logger"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.GetAllUserInjectedLayers">
            <summary>
            Gets user-injected layers coming from all the hosts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.GetUserInjectedLayersFromHost(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Gets user-injected layers coming from the specific host.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.DeleteUserInjectedLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Deletes the user-injected layer: the record on the injection in the hosting layer is erased, and the layer disappears from the settings system.
            </summary>
            <param name="layerInjected"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.TurnInjectedLayerOnOff(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,System.Nullable{System.Boolean})">
            <summary>
            <para>An injected layer might be turned off, in which case all of its settings do not take effect, even though information about the layer is not removed from the system.</para>
            <para>This method allows to toggle the state.</para>
            </summary>
            <param name="layerInjected"></param>
            <param name="desired"><c>True</c> to turn on, <c>False</c> to turn off, <c>Null</c> to toggle.</param>
            <returns>Actual on/off state after this method runs (especially useful with Toggle).</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.IsInjectedLayerOn(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            See <see cref="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.TurnInjectedLayerOnOff(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,System.Nullable{System.Boolean})"/>.
            Gets the current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.CanReorderInjectedLayers(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags)">
            <summary>
            Gets whether we can change relative order of the injected layers of the same hosting layer.
            </summary>
            <param name="layerToMove">The layer whose position is supposed to be changed.</param>
            <param name="how">How the potision should be changed. See flag values for details.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayers(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity)">
            <summary>
            Changes relative order of the injected layers of the same hosting layer.
            </summary>
            <param name="layerToMove">The layer whose position is to be changed.</param>
            <param name="how">How the potision should be changed. See flag values for details.</param>
            <param name="other">Meaning depends on the <paramref name="how"/> value, see flag values for details.</param>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor">
            <summary>
            Info provided by layer registrator.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.InjectionsHostLayer">
            <summary>
            The injections host (which stores the information about the injected layer in its settings). If you're watching for <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.LayersHostingUserInjections"/>, then it's the layer you got notified of.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.Identity">
            <summary>
            <para>The persistent identity of this injected layer. For such features as turning injected layers on/off and editing their priority to work between sessions, this must be persistent between sessions per layer. This should be related to the information stored in the hosting layer by the injection handlers.</para>
            <para>NOTE: this identity must be unique per hosting layer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.InjectedLayerStorage">
            <summary>
            The storage which should be mounted as an injected layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.DeleteRequested">
            <summary>
            Called by <see cref="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers"/> when user requests deletion of an injected layer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.InitialMetadata">
            <summary>
            Any initial metadata, such as a custom <see cref="F:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayers.DisplayName">display name</see>, which will be applied to the mounting points created to represent your injected layer in the Settings Store.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo">
            <summary>
            Info on the runtime instance of an injected layer, as stored by this class.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.HostingLayer">
            <summary>
            Data on the hosting layer (“parent” of this injected layer).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.InjectedMount">
            <summary>
            The mounting point currently representing this injected layer.
            It is registered with the Settings Store.
            It is recreated per each combination of the flags, e.g. on change of the priority.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.IsOn">
            <summary>
            When <c>True</c>, the contents of the mount take part in the Settings Store.
            When <c>False</c> (which corresponds to the unchecked checkbox in the Settings Layers dialog), the contents of the mount are excluded from the Settings Store, even though it's still listed throughout the system.
            This is manifested thru the <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.IsAvailable"/> parameter.
            A mount is recreated to update this flag.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.RelativePriority">
            <summary>
            The mount priority, as exposed in <see cref="P:JetBrains.Application.Settings.ISettingsStorageMountPoint.Priority"/>.
            A mount is recreated to update this flag.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.Identity">
            <summary>
            Exposes <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.Descriptor"/>.<see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerDescriptor.Identity"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo.DisplayName">
            <summary>
            Bound to the display name metadata on all of the mounts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.InjectedLayers">
            <summary>
            Lists the injected layers of this host. Is a hash set.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.myMapIdentityToInjectedLayer">
            <summary>
            Helper dictionary for navigating <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.InjectedLayers"/> by identities.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.ReorderInjectedLayers(JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags,JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.UserInjectedLayerRuntimeInfo)">
             <summary>
             Changes relative order of the injected layers of the same hosting layer.
             </summary>
             <param name="injectedToMove">The layer whose position is to be changed.</param>
             <param name="how">How the potision should be changed. See flag values for details.</param>
             <param name="injectedOther">Meaning depends on the <paramref name="how"/> value, see flag values for details.</param>
             <remarks>
             Invariants: 
             (1) The priorities must be changed so that the desired order applies.
             (2) We assume that all of the existing priorities are different (otherwise (2) might not be totally fulfilled). // TODO: validate on host load
             (3) As few positions as possible must be changed, because a position change means recreating mounting points and firing settings changes on each operation.
            
             Algorithm:
             Determine two priorities between which the item should be placed. On edges, higher one is zero and lower one is last plus one.
             Choose the new priority to be the mean value of those two priorities.
             </remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.HostingLayerRuntimeInfo.ReorderInjectedLayers_GetAllPrioritiesConsistent">
            <summary>
            Reads all of the priorities known to customization settings, and makes sure they're consistent in that there're no missing, negative, or duplicate values. Rewrites priorities in the settings store before returning the list as needed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.MakeFirst">
            <summary>
            <para>Makes the layer first in the list (with the highest priority).</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.MakeLast">
            <summary>
            <para>Makes the layer last in the list (with the highest priority).</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutBefore">
            <summary>
            <para>Places the layer immediately before another layer (with a slightly higher priority).</para>
            <para>This flag requires the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutAfter">
            <summary>
            <para>Places the layer immediately after another layer (with a slightly lower priority).</para>
            <para>This flag requires the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.UpOne">
            <summary>
            <para>Takes the nearest layer with a higher priority and does <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutBefore"/> for it.</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.DownOne">
            <summary>
            <para>Takes the nearest layer with a lower priority and does <see cref="F:JetBrains.Application.Settings.UserInterface.UserInjectedSettingsLayers.ReorderInjectedLayersFlags.PutAfter"/> for it.</para>
            <para>This flag does not require the “other” parameter.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.WellKnownRootKeys.EnvironmentSettings">
            <summary>
            <para>Root key for Environment settings.</para>
            <para>Refer to it in your settings classes that should be directly parented under Environment — but preferably choose any of the existing nodes under Environment.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.WellKnownRootKeys.HousekeepingSettings">
            <summary>
            <para>Root key for all housekeeping data (i.e. cached shortcuts data, recently used something global etc).</para>
            <para>Refer to it in your settings classes that should be directly parented under Housekeeping — but preferably choose any of the existing nodes under Housekeeping.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Shell.AddProductIdentityToLogs">
            <summary>
            On product shell start-stop, exposes the product info in the logs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Shell.AddSystemTraceToLogs">
            <summary>
            Add own listener to intercept problems on callstacks where our code (any) is present, and submit to exception reporting.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Shell.ApplyCommandLineKeysToLogger">
            <summary>
            Applies the command line arguments to the logger.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Shell.AssertShellLocksAreGuarded">
            <summary>
            Prevents <see cref="T:JetBrains.Application.Threading.Invocator"/> reentrancy when a lock is taken (temporary).
            Asserts that any primary-thread lock is guarded by <see cref="T:JetBrains.Application.Threading.Invocator"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Shell.HostCulture">
            <summary>
            WTF
            </summary>
        </member>
        <member name="P:JetBrains.Application.Shell.HostCulture.Culture">
            <summary>
            WTF
            </summary>
        </member>
        <member name="M:JetBrains.Application.Shell.OneTimeInitializationChecker.IsInitializationNeeded(System.String,System.Boolean,System.Action{System.Exception},JetBrains.Application.Environment.Components.ProductSettingsLocation)">
            <summary>
            Checks if the one-time-init is needed.
            Optionally, marks it as done in the Registry (write-touches Current User hive only).
            </summary>
            <param name="identity">Identity of user</param>
            <param name="bMarkAsDone">Whether to mark one-time-init as performed for this config.</param>
            <param name="failed">Action to execute if check failed, or null</param>
            <returns>Whether one-time-init was required.</returns>
        </member>
        <member name="M:JetBrains.Application.Shell.OneTimeInitializationChecker.GetActualIdentity(JetBrains.Application.IApplicationHost)">
            <summary>
            If the per-machine one-time-init value is not available, this value is used instead.
            </summary>
            <param name="applicationDescriptor"></param>
        </member>
        <member name="P:JetBrains.Application.Shell.OneTimeInitializationManager.IsOneTimeInitAllowed">
            <summary>
            Gets whether the one-time-init is allowed to run at the moment, e.g. the main window has already been created.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Shell.OneTimeInitializationManager.OnCheckFailed(System.Exception)">
            <summary>
            Invoked when one-time-init fails to read/write the Registry. Should report to the user in an app-dependent manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Shortcuts.ActionShortcut.ToString">
            <summary>
            ToString must provide a human-readable string for the shortcut.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Shortcuts.MultiIdeActionMap.MultiIdeActionMapHelper">
            <summary>
            Updates "multi_ide_action_map.json". See: ssh://git@git.jetbrains.team/keymaps/keymaps.git
            This is a modified code based on MappingUtils originally written by @Vladimir.Krasnotsvetov
            </summary>
        </member>
        <member name="F:JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope.Global">
            <summary>
            Action should be available everywhere: in common scope and in text controls.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope.TextEditor">
            <summary>
            Action should be available in text controls only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope.GlobalOnly">
            <summary>
            Action should be available in global scope, but not in text controls.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Shortcuts.ShortcutUtil.ourWinFormAndVSKeyPairs">
            <summary>
            Warning! Duplicates from both sides
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.ApplicationMutex">
            <summary>
            Can be taken once per process (not per thread as <see cref="T:System.Threading.Mutex"/>). Only one acquire per process is possible.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.AsyncProcessing.IAsyncScheduler">
            <summary>
            Scheduler interface for <see cref="T:JetBrains.Application.Threading.AsyncProcessing.AsyncItemsProcessor`1"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.AsyncProcessing.IAsyncScheduler.Schedule(JetBrains.Lifetimes.Lifetime,System.Action)">
            <summary>
            Schedules an action to process items
            </summary>
            <param name="lifetime">Lifetime validity</param>
            <param name="action">Action to perform</param>
        </member>
        <member name="M:JetBrains.Application.Threading.AsyncProcessing.IAsyncScheduler.OnInterrupted(System.Int32)">
            <summary>
            
            </summary>
            <param name="interruptedCount">Number of continuous interrupts</param>
            <returns>How processing should continue</returns>
        </member>
        <member name="P:JetBrains.Application.Threading.AsyncProcessing.IItemsToProcess`1.IsEmptyNotificationMode">
            <summary>
            IsEmpty property which should be used by subscribers which want to be 100% sure that the corresponding
            advise logic for "IsEmpty=False" event will be executed BEFORE the item will be processed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.AsyncProcessing.IItemsToProcess`1.IsEmptyProcessingMode">
             <summary>
             IsEmpty property which should be used ONLY by processors (like <see cref="T:JetBrains.Application.Threading.AsyncProcessing.AsyncItemsProcessor`1" />) for actual
             item processing. This property has a reentrancy problem in the synchronous mode (e.g., when
             locks.Dispatcher.IsAsyncBehaviorProhibited == true).
            
             Imagine that IsEmptyProcessingMode has two subscribers:
               AsyncItemsProcessor (via WhenFalse) and
               a custom subscriber (via ForEachValue).
             Here is a possible execution scenario:
             1. AsyncItemsProcessor Initialization. It performs IsEmptyProcessingMode.Set(true). (@@@)
             2. The custom subscriber gets the "true" value. (!!!)
             2. We add a new item in the AsyncItemsProcessor. It performs IsEmptyProcessingMode.Set(false). (@@@)
             2.1. The first subscriber of IsEmptyProcessingMode is executed ("false" case). It's the AsyncItemsProcessor which
                  immediately start to process items because we are in the synchronous mode.
             2.1.1. The item processing is finished which means that AsyncItemsProcessor performs
                    IsEmptyProcessingMode.Set(true) (@@@)
             2.1.1.1. The custom subscriber gets the "true" value. (!!!)
             2.2. The second subscriber of IsEmptyProcessingMode is executed ("false" case). It's the custom subscriber.
                  The custom subscriber gets the "false" value. (!!!)
            
             Thus, we get the following chain of events:
             * IsEmptyProcessingMode.Set(true)
             * The custom subscriber gets the "true" value
             * IsEmptyProcessingMode.Set(false)
             * IsEmptyProcessingMode.Set(true)
             * The custom subscriber gets the "true" value
             * The custom subscriber gets the "false" value
            
             To avoid such problems, always use <see cref="P:JetBrains.Application.Threading.AsyncProcessing.IItemsToProcess`1.IsEmptyNotificationMode"/> for custom subscribers.
             <see cref="P:JetBrains.Application.Threading.AsyncProcessing.IItemsToProcess`1.IsEmptyProcessingMode"/> is designed only for item processing.
             </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.AsyncReadLockLazy`1">
            <summary>
            A lazily-calculated asynchronous value with ReadLock requirement. Provide safe way to get result value from code with WriteLock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.AsyncReadLockLazy`1.GetValueSync">
            <summary>
            Proper way to get value sync instead of sync waiting by GetValueAsync().Result,
            which can lead to deadlock when called from MainThread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Threading.AsyncReadLockLazy`1.CalculateWithReadLock">
            <summary>
            Calculates value with ReadLock in loop to handle interrupts
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.ContentModelReadWriteLock">
            <summary>
            Implements the housekeeping logic around <see cref="T:JetBrains.Util.Concurrency.ReentrantWriterPreferenceReadWriteLock" />
            for the needs of full <see cref="T:JetBrains.Application.Threading.IShellLocks" /> functionality.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.ContentModelReadWriteLock.myAfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.ContentModelReadWriteLock.myBeforeAcquiringReadLock">
            <summary>
            Fires before the Read Lock is acquired in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.ContentModelReadWriteLock.myLastWriterLockCallers">
            <summary>
            Hi-perf tracking of the recent writer lock callers.
            We get the <see cref="T:JetBrains.Util.Threading.CallerInfo" /> anyway when taking a lock, here we store it in a cyclic buffer (limiting max count).
            Not conditioned by any logger/assertion mode, because there should be no penalty.
            Threading: only records acquired writer locks, so naturally protected by the writer lock.
            Reading is diagnostic-only, not in prod code, so on your own risk (usually from debugger).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.ContentModelReadWriteLock.myDispatcher">
            <summary>
            Identifies the primary thread (for the Write Lock affinity).
            Attaches to the thread it's created on.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AsyncContextLifetime">
             MUST BE Taken Under Read Lock.
            
             Lifetime of current "transaction" if we consider whole program's state as database with only one row guarded by read and write actions.
             So if caller read or write state (take Read lock or Write lock) in async-await execution, this lifetime is Alive.
             If some other async activity (not sharing same AsyncLocal) read state, lifetime is Alive.
             If some other async activity (not sharing same AsyncLocal) write state, lifetime becomes Terminated.
        </member>
        <member name="M:JetBrains.Application.Threading.ContentModelReadWriteLock.BackgroundReadersAllowedLifetime">
            <summary>
            Returns lifetime of content model state when background readers are allowed.
            This lifetime is terminated when some activity requests (not when acquires but when just asks) a non-gentle write-lock,
            and is renewed when write-lock request finishes (successfully or not).
            So new lifetime is created not on release but on acquire, this allows get lifetime for async readers from current writer activity.
            Could be used for asynchronous operations.
            MUST BE Taken Under Read Lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.ContentModelReadWriteLock.NoNewWriteLocksLifetime">
            <summary>
            Returns lifetime of content model state without new write locks.
            This lifetime is terminated when some activity acquires a write-lock.
            Taken under write-lock lifetime will be alive till next success lock acquire.
            Could be used for asynchronous operations.
            MUST BE Taken Under Read Lock.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.ContentModelReadWriteLock.myRwLock">
            <summary>
            Core implementation of the RW locks.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.AfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.IsReadAccessAllowed">
            <summary>
            True if read access is allowed in the current thread.
            </summary>
            <seealso cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireReadLock" />
            <seealso cref="M:JetBrains.Application.Threading.IShellLocksEx.AssertReadAccessAllowed(JetBrains.Application.Threading.IShellLocks)" />
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.IsReadLockHeld">
            <summary>
            Indicates that the current thread owns the read lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.IsWriteAccessAllowed">
            <summary>
            True if write access is allowed in the current thread.
            </summary>
            <seealso cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireWriteLock(JetBrains.Util.Threading.CallerInfo)" />
            <seealso cref="M:JetBrains.Application.Threading.IShellLocksEx.AssertWriteAccessAllowed(JetBrains.Application.Threading.IShellLocks)" />
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.IsWriteLockHeld">
            <summary>
            Indicates that the current thread owns the write lock.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.IsWriteLockRequested">
            <summary>
            Indicates that any thread (UI currently, because no one else is allowed) requests for write lock, but not yet granted.
            This property is not accurate as it is set after <see cref="E:JetBrains.Application.Threading.ContentModelReadWriteLock.BeforeAcquiringWriteLock"/> is fired and thus there is a moment when write is being requested but the property is not set yet.
            Consider using <see cref="P:JetBrains.Application.Threading.ContentModelReadWriteLock.IsWriteLockRequestedOrHeldBySomeThread"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.IsWriteLockRequestedOrHeldBySomeThread">
            <summary>
            True since start of the first <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireWriteLock(JetBrains.Util.Threading.CallerInfo)"/> until release by the last <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseWriteLock"/>
            or since write lock is first acquired by <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.TryAcquireWriteLock(System.Int32,JetBrains.Util.Threading.CallerInfo)"/> and until it is released by <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseWriteLock"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.Interruption">
            <summary>
            An interruption source for WriteLock.
            It will raise interrupt flag when write lock is being requested.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireReadLock">
            <summary>
             Fetches read lock - the lock which is used to control read-access to ReSharper data (such as PSI, documents, etc.) and
             is obtained by threads that perform read-operations.
            </summary>
            <remarks>
             Read lock cannot be acquired when the write lock is acquired by another thread and execution will be blocked until the write lock is released.
             You do not need to acquire read lock in the UI thread (since write operations cannot be performed in any thread different from the UI thread).
             Use <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseReadLock" /> method to release read lock.
            <b>NOTE:</b> the best way to hold read lock for a block of code is to use <code>ReadLockCookie</code>
            </remarks>
            <seealso cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseReadLock" />
        </member>
        <member name="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireWriteLock(JetBrains.Util.Threading.CallerInfo)">
            <summary>
            Fetches write lock - the lock which is used to control write-access to ReSharper data (such as PSI, documents, etc.) and
            is obtained by threads that perform write-operations.
            </summary>
            <remarks>
            Write lock cannot be acquired when the read lock is acquired by another thread and execution will be blocked until the read lock is released.
            Acquiring of the write lock is allowed only in the UI thread (and so you cannot perform any write operations from non-UI thread).
            Note that you do not have to obtain the write lock explicitly in most of cases. All low-level write methods (such as PSI or document modifications)
            obtain write lock automatically. You may need to obtain write lock if your subsystem (similar to PSI or documents) has its own data to be modified in write operations only.
            Use <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseWriteLock" /> method to release write lock.
            <b>NOTE:</b> the best way to hold write lock for a block of code is to use <code>WriteLockCookie</code>
            </remarks>
            <seealso cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseWriteLock" />
        </member>
        <member name="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseReadLock">
            <summary>
             Releases read lock.
             For more information about read lock see <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireReadLock" />.
            </summary>
            <seealso cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireReadLock" />
        </member>
        <member name="M:JetBrains.Application.Threading.ContentModelReadWriteLock.ReleaseWriteLock">
            <summary>
             Releases write lock.
             For more information about write lock see <see cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireWriteLock(JetBrains.Util.Threading.CallerInfo)" />.
            </summary>
            <seealso cref="M:JetBrains.Application.Threading.ContentModelReadWriteLock.AcquireWriteLock(JetBrains.Util.Threading.CallerInfo)" />
        </member>
        <member name="E:JetBrains.Application.Threading.ContentModelReadWriteLock.AfterReadLockReleased">
            <summary>
            Fires after the Read Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.Threading.ContentModelReadWriteLock.BeforeAcquiringReadLock">
            <summary>
            Event which is raised before read lock is acquired.
            </summary>
            <seealso>AcquireReadLock</seealso>
        </member>
        <member name="E:JetBrains.Application.Threading.ContentModelReadWriteLock.BeforeAcquiringWriteLock">
            <summary>
            Event which is raised before write lock is acquired.
            This event can be used by background operations which need to stop/pause to allow write operation to execute.
            </summary>
            <seealso>AcquireWriteLock</seealso>
        </member>
        <member name="P:JetBrains.Application.Threading.ContentModelReadWriteLock.WriteLockTimestamp">
            <summary>
            The timestamp is incremented each time write lock is requested and released
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.ExecuteOrQueueSingular">
            <summary>
            Wraps <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> by executing the same single action. If the execution has been delayed because another execution is in progress (<see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> scenario), does not queue any more executions until the pending one is executed. When the object is disposed of, drops all of the pending executions so that they're never executed after the <see cref="M:System.IDisposable.Dispose"/>.
            Mostly like a <see cref="T:JetBrains.Threading.GroupingEvent"/>, but without any grouping or additional delaying.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.ExecuteOrQueueSingular.#ctor(JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Application.Threading.IThreading)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.ExecuteOrQueueSingular.#ctor(JetBrains.Lifetimes.Lifetime,System.Action,System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            Allows to specify the execute-or-queue action manually.
            </summary>
            <param name="lifetime"></param>
            <param name="FUserAction">The useful user action to be executed when the guarded context is entered.</param>
            <param name="FExecuteOrQueue">The action that causes something to be executed or queued.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivity.Start">
            <summary>
            Override this method with activity that should happen in primary thread before background thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivity.Work">
            <summary>
            Override this method with activity that happens in background thread.
            </summary>
            This method should periodically check return value of <c>interrupt</c> and either return or 
            throw <c>OperationCanceledException</c>
            NOTE: the method may not be called if lifetime expires. 
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivity.Finish">
            <summary>
            Override this method with activity that will happen in primary thread after worker thread finishes
            NOTE: the method may not be called if lifetime expires. 
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivity.OnInterrupt">
            <summary>
            This method is invoked in primary thread if work is interrupted. 
            <b>NOTE: read lock is released between interruption and this method call!</b>
            If this method is invoked, <cref>Finish</cref> will NOT be called.
            NOTE: the method may not be called if lifetime expires. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.InterruptableReadActivityThe">
            <summary>
            A non-abstract implementation for the <see cref="T:JetBrains.Application.Threading.InterruptableReadActivity"/> that allows to specify its behavior externally, without creating an inheritor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivityThe.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IShellLocks,JetBrains.Application.InterruptionSet)">
            <summary>
            Constructs the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="shellLocks"></param>
            <param name="interruptionSet">The interruption that will be used for cancellation in the <see cref="P:JetBrains.Application.Threading.InterruptableReadActivityThe.FuncRun"/> function.</param>
        </member>
        <member name="P:JetBrains.Application.Threading.InterruptableReadActivityThe.FuncCancelled">
            <summary>
            Gets or sets the function that is executed in case the action is aborted.
            NOTE: the method may not be called if lifetime expires in an inappropriate moment. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.InterruptableReadActivityThe.FuncCompleted">
            <summary>
            Gets or sets the function that gets executed on the UI thread in case the action completes successfully.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.InterruptableReadActivityThe.FuncCompletedOrCancelled">
            <summary>
            Gets or sets the function that is executed on the UI thread when the action finishes execution with either result.
            NOTE: the method may not be called if lifetime expires in an inappropriate moment. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.InterruptableReadActivityThe.FuncRun">
            <summary>
            Gets or sets the worker function that executes on the secondary thread.
            Its parameter is similar to <c>interruption</c> in the <c>.ctor</c>,
            but includes additional conditions from the implementation. Returns the success flag.
            NOTE: the method may not be called if lifetime expires in an inappropriate moment. 
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.InterruptableReadActivityThe.FuncStart">
            <summary>
            Gets or sets the function that is executed on the primary thread when the action starts.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.InterruptableReadActivityThe.Name">
            <summary>
            Gets or sets the name for the operation, and for the worker thread of the operation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivityThe.Finish">
            <summary>
            Override this method with activity that will happen in primary thread after worker thread finishes
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivityThe.OnInterrupt">
            <summary>
            This method is invoked in primary thread if work is interrupted. 
            </summary>
            If this method is invoked, <cref>Finish</cref> will NOT be called.
            
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivityThe.Start">
            <summary>
            Override this method with activity that should happen in primary thread before background thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.InterruptableReadActivityThe.Work">
            <summary>
            Override this method with activity that happens in background thread.
            </summary>
            This method should periodically check return value of <c>d</c> and either return or 
            throw <c>OperationCanceledException</c>
        </member>
        <member name="T:JetBrains.Application.Threading.Invocator">
            <summary>
              <para>A combined invocator that encapsulates both <see cref="P:JetBrains.Application.Threading.Invocator.ReentrancyGuard" /> and <see cref="T:JetBrains.Threading.TimedActionsHost" />.</para>
              <para>When disposed of, shuts down the <see cref="T:JetBrains.Threading.TimedActionsHost" /> and cancels all of its timed actions. It's OK for individual alarm consumers to dispose of them as well.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.Invocator.myIsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.Invocator.Dispatcher">
            <summary>
            Gets the dispatcher of the thread served by this Invocator.
            On a Shell's invocator, this would be the application's main thread.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.Invocator.IsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.Invocator.ReentrancyGuard">
            <summary>
            Gets the reentrancy guard that implements the non-timed actions of this Invocator.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.Invocator.TimedActions">
            <summary>
            Provides access to the underlying <see cref="T:JetBrains.Threading.TimedActionsHost" />, <see cref="P:JetBrains.Application.Threading.Invocator.ReentrancyGuard" />, <see cref="T:JetBrains.Threading.JetDispatcher" />, and <see cref="T:System.Threading.Thread" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.IShellLocks">
            <summary>
            Expands basic threading constructs with the Reader-Writer pessimistic locking which protects the content model stuff, such as Documents, Project Model, PSI, and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IShellLocks.ContentModelLocks">
            <summary>
            The Reader-Writer pessimistic locking which protects the content model stuff, such as Documents, Project Model, PSI, and so on.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.AllowNestedExecutionAndReleaseLocks(JetBrains.Application.Threading.IShellLocks,System.String,System.Action)">
            <summary>
            When executed under a reentrancy guard, lifts the guard and releases all of the locks, ie constructs a clean state.
            Must be executed on the primaty thread.
            </summary>
            <param name="thіs"></param>
            <param name="name">Name for the <see cref="P:JetBrains.Application.Threading.Invocator.ReentrancyGuard"/> lifting.</param>
            <param name="F">The action to be executed in the clean state.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.Threading.IShellLocks,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.Threading.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLockEx(JetBrains.Application.Threading.IShellLocks,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLockEx(JetBrains.Application.Threading.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLockEx(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueReadLockEx(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>Takes a read lock.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.QueueReadLock(JetBrains.Application.Threading.IShellLocks,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.QueueReadLock(JetBrains.Application.Threading.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.QueueReadLock(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.QueueReadLock(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.QueueReadLockOrRunSync(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>Takes a read lock.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.AssertReadAccessAllowed(JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Checks whether read lock is acquired and issues an internal assertion if it's not true.
            Useful method to be inserted in data access methods to ensure correct use of locks.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.AssertWriteAccessAllowed(JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Checks whether write lock is acquired and issues an internal assertion if it's not true.
            Useful method to be inserted in data modification methods to ensure correct use of locks.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.TryExecuteWithReadLock(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.TimeSpan,System.Action)">
            <summary>
            Tries to acquire the reader lock, keeps trying for at most <paramref name="timeout" />. Optimal for use on back threads to avoid blocking.
            Holds the lifetime while executing.
            </summary>
            <returns>Whether the action were executed — we could get the reader lock and the lifetime were alive enough.</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx``2(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.Int32,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWeakWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Int32,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWeakWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Int32,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWeakWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
            <param name="gentleTimeoutMs">Timeout in milliseconds till read activities are not to be interrupted</param>
            <remarks>In case of async <paramref name="F"/> write lock will be available till the first await, so all write actions must be placed before.
            Will be better to wrap them by explicit WriteLocks acquiring</remarks>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWeakWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
            <remarks>In case of async <paramref name="F"/> write lock will be available till the first await, so all write actions must be placed before.
            Will be better to wrap them by explicit WriteLocks acquiring</remarks>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.Int32,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
            <param name="gentleTimeoutMs">Timeout in milliseconds till read activities are not to be interrupted</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <summary>
            Executes specified function under write lock delayed until write lock is available. The method can be called from any thread. 
            </summary>
            <param name="thіs"><see cref="T:JetBrains.Application.Threading.IShellLocks"/> instance</param>
            <param name="lifetime">Lifetime for the function. If lifetime is terminated before execution task will be returned in canceled state</param>
            <param name="name">Name of the action for logging/ testing purposes</param>
            <param name="F">Function to execute</param>
            <param name="gentleTimeout">Timeout till read activities are not to be interrupted</param>
            <param name="predicate">Predicate to check before write lock acquiring</param>
            <typeparam name="T">Function return type</typeparam>
            <returns>Task wrapper over the function</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,System.Int32,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
            <param name="gentleTimeoutMs">Timeout in milliseconds till read activities are not to be interrupted</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteOrQueueWithWriteLockWhenAvailableEx``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteWithWriteLockWhenAvailable(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,System.Int32,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteWithWriteLockWhenAvailable(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
            <param name="gentleTimeoutMs">Timeout in milliseconds till read activities are not to be interrupted</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteWithWriteLockWhenAvailable(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Action,System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteWithWriteLockWhenAvailable``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteWithWriteLockWhenAvailable``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.Int32,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteWithWriteLockWhenAvailable``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)"/>
            <param name="gentleTimeoutMs">Timeout in milliseconds till read activities are not to be interrupted</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.ExecuteWithWriteLockWhenAvailable``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0},System.TimeSpan,JetBrains.Application.Threading.IShellLocksEx.AcquireWriteLockWhenAvailablePredicate)">
            <summary>
            Executes specified function under write lock if it can be taken immediately or delayed until it can be acquired.
            Can be called on UI thread in guarded context only.
            </summary>
            <param name="thіs"><see cref="T:JetBrains.Application.Threading.IShellLocks"/> instance</param>
            <param name="lifetime">Lifetime for the function. If lifetime is terminated before execution task will be returned in canceled state</param>
            <param name="name">Name of the action for logging/ testing purposes</param>
            <param name="F">Function to execute</param>
            <param name="gentleTimeout">Timeout till read activities are not to be interrupted</param>
            <param name="predicate">Predicate to check before write lock acquiring</param>
            <typeparam name="T">Function return type</typeparam>
            <returns>Task wrapper over the function</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.HideReadLocks(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime)">
            <summary>
            Hides all of the read locks taken by the current thread, and returns them back on dispose.
            Used by wait-for-caches kind functions to allow write locks on the other thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.IsOnMainThreadGuarded(JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Is on main thread with guard and read lock
            </summary>
            <param name="locks">IShellLocks instance</param>
            <returns>True if on main thread in guarded context</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksEx.IsOnMainThread(JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Is on main thread
            </summary>
            <param name="locks">IShellLocks instance</param>
            <returns>True if on main thread in any (guarded or unguarded) context</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.ExecuteOrQueueReadLockAsync``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.String,System.Func{``0})">
            <summary>
              <para>Executes an action on the <see cref="T:JetBrains.Threading.JetDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
              <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)" />.</para>
              <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)" /> does.</para>
              <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <remarks>This is temporary version till IShellLocksEx.HideReadLocks removing, with sync <paramref name="F" /></remarks>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartBackground(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Action)">
            <summary>
            Start action on background thread (JetPool).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartBackground``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{``0})">
            <summary>
            Start action on background thread (JetPool).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartBackgroundAsync(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Start action on background thread (JetPool).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartBackgroundAsync``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Start action on background thread (JetPool).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartBackgroundRead(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Action,System.Boolean)">
            <summary>
            Start action on background thread (JetPool) with ReadLock.
            </summary>
            <param name="action"></param>
            <param name="retryOnOperationCanceled">retry operation if lifetime is <see cref="P:JetBrains.Lifetimes.Lifetime.IsAlive" /> and action
            finished with <see cref="T:System.OperationCanceledException" /></param>
            <param name="locks"></param>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartBackgroundRead``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{``0},System.Boolean)">
            <summary>
            Start action on background thread (JetPool) with ReadLock.
            </summary>
            <param name="action"></param>
            <param name="retryOnOperationCanceled">retry operation if lifetime is <see cref="P:JetBrains.Lifetimes.Lifetime.IsAlive" /> and action
            finished with <see cref="T:System.OperationCanceledException" /></param>
            <param name="locks"></param>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartMainRead(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Action)">
            <summary>
            Starts action on main thread under read lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartMainRead``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{``0})">
            <summary>
            Starts action on main thread under read lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartMainReadAsync(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Starts asynchronous action on <c>main_thread+read_lock</c> context. Action supports <c>await</c> inside.
            Please note that after <c>await</c> execution will be returned to main_thread+read_lock context .
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IShellLocksExAsync.StartMainReadAsync``1(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
              <inheritdoc cref="M:JetBrains.Application.Threading.IShellLocksExAsync.StartMainReadAsync(JetBrains.Application.Threading.IShellLocks,JetBrains.Lifetimes.Lifetime,System.Func{System.Threading.Tasks.Task})" />
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.IThreading">
            <summary>
            Exposes threading tasks of the application.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IThreading.Dispatcher">
            <summary>
              <para>Gets the <see cref="T:JetBrains.Threading.JetDispatcher" /> of the home thread of this instance.</para>
              <para>If you get <see cref="T:JetBrains.Application.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IThreading.GroupingEvents">
            <summary>
              <para>A host that creates grouping events to be executed on the home thread of this instance (optionally, under protection of the <see cref="P:JetBrains.Application.Threading.IThreading.ReentrancyGuard" />).</para>
              <para>If you get <see cref="T:JetBrains.Application.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IThreading.IsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IThreading.ReentrancyGuard">
            <summary>
              <para>Gets the <see cref="P:JetBrains.Application.Threading.IThreading.ReentrancyGuard" /> of the home thread of this instance.</para>
              <para>If you get <see cref="T:JetBrains.Application.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IThreading.Tasks">
            <summary>
            Gets the .NET Async Tasks API for executing tasks asynchronously on either background or main thread, optionally with guarding and content access locks.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IThreading.ThreadManager">
            <summary>
            Gets the scheduler for running background tasks on other threads.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.IThreading.TimedActions">
            <summary>
              <para>Schedules one-time and recurring actions to be executed on the home thread of this instance, optionally under protection of the <see cref="P:JetBrains.Application.Threading.IThreading.ReentrancyGuard" />.</para>
              <para>If you get <see cref="T:JetBrains.Application.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.LogAssertGuarded(JetBrains.Application.Threading.IThreading)">
            <summary>
            <para>Checks that the activity is executed on the proper thread and is being guarded from reentrancy.</para>
            <para>Does not break execution, just logs the failure — the common case of the failure is adding new guard-checks, in which case the features could go on functioning “as before” without breaking execution, but logging the failure.</para>
            </summary>
            <param name="thіs"></param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Application.Threading.IThreading,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="P:JetBrains.Application.Threading.IThreading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="!:IThreading.ReentrancyGuard.Execute"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="!:Threading.ReentrancyGuard.TryExecute"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Application.Threading.IThreading,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="P:JetBrains.Application.Threading.IThreading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="!:IThreading.ReentrancyGuard.Execute"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="!:Threading.ReentrancyGuard.TryExecute"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueueEx(JetBrains.Application.Threading.IThreading,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="!:Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="!:IThreading.ReentrancyGuard.Execute"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="!:IThreading.ReentrancyGuard.TryExecute"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="!:Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="!:Threading.ReentrancyGuard.Execute"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="!:Threading.ReentrancyGuard.TryExecute"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="!:Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="!:Threading.ReentrancyGuard.Execute"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="!:Threading.ReentrancyGuard.TryExecute"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueueEx(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="!:Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="!:Threading.ReentrancyGuard.Execute"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="!:Threading.ReentrancyGuard.TryExecute"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueueEx(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="!:Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="!:Threading.ReentrancyGuard.Execute"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)"/> does.</para>
            <para>If Async behavior is prohibited, like in test environment, always executes synchronously.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="!:Threading.ReentrancyGuard.TryExecute"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Reclaims the queuing and cancels the action from executing when the lifetime ends.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
            <returns>You may optionally dispose of the return value to prevent the action from executing later.</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Reclaims the queuing and cancels the action from executing when the lifetime ends.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns>You may optionally dispose of the return value to prevent the action from executing later.</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.Queue(JetBrains.Application.Threading.IThreading,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.QueueAt(JetBrains.Application.Threading.IThreading,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> when the timeout elapses.</para>
            <para>Returns a token that cancels the action execution. The token disposal is optional.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.QueueAt(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> when the timeout elapses.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy among the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.QueueAt_NoReentrancyGuarding(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> when the timeout elapses.</para>
            <para>The action does not use <see cref="T:JetBrains.Threading.ReentrancyGuard"/> to execute.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.CreateGroupingEvent(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Creates and registers an event that groups multiple incoming signals within a time span and issues only one outgoing signal for them.</para>
            <para>This allows to accommodate for external events firing at a high rate and execute the handler only when their activity suspends.</para>
            <para>The object is thread-safe: the incoming event may fire on any thread, the outgoing activity always happens on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>This function is free-threaded.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">A name to identify the event.</param>
            <param name="interval">The grouping interval. The incoming events are grouped until there's a pause of the <paramref name="interval"/> length, and after that the outgoing event is fired. The interval must be not above <see cref="F:JetBrains.Threading.GroupingEvent.MaxInterval"/>.</param>
            <param name="action">Optional. The action for the outgoing event. This action will be executed on the primary thread and under the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>. If you omit this action, advise the <see cref="P:JetBrains.Threading.GroupingEvent.Outgoing"/> event on the return value.</param>
            <returns>The event on which the incoming events can be fired. Must be disposed of.</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.QueueRecurring(JetBrains.Application.Threading.IThreading,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> at recurring intervals. Can be used on the primary thread only.</para>
            <para>Returns a token that cancels the recurring action execution. This token must be eventually disposed of.</para>
            <para>When the application gets inactive, the action is executed once, and then suspends until the application gets activated again.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.QueueRecurring(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Application.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> at recurring intervals. Can be used on the primary thread only.</para>
            <para>Returns a token that cancels the recurring action execution. This token must be eventually disposed of.</para>
            <para>When the application gets inactive, the action is executed once, and then suspends until the application gets activated again.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueueWhenNotGuarded(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action,JetBrains.Util.Threading.Tasks.TaskPriority)">
            <summary>
            Executes the activity at the moment when there's no <see cref="T:JetBrains.Threading.ReentrancyGuard"/> running.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.ExecuteOrQueueWhenNotGuarded(JetBrains.Application.Threading.IThreading,JetBrains.Lifetimes.Lifetime,System.String,System.Action)">
            <summary>
            Executes the activity at the moment when there's no <see cref="T:JetBrains.Threading.ReentrancyGuard"/> running.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.AssertMainThread(JetBrains.Application.Threading.IThreading)">
            <summary>
            Throw an exception if calling thread is not associated with threading's dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreadingEx.AssertNonMainThread(JetBrains.Application.Threading.IThreading)">
            <summary>
            Throw an exception if calling thread is associated with threading's dispatcher.
            <para></para>
            NOTE: Throw an exception if async behavior is prohibited and calling thread is not associated with threading's dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreading_DataFlowEx.ForValuesGuarded``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IThreading,System.Action{JetBrains.Lifetimes.Lifetime,``0})">
            <summary>
            <para>Guarded binds a lifetime to most of the values of the property. Some values may be skipped if it is changed too fast and the handler cannot catch up on the UI thread. This is necessary when propety is changed multi-threaded but the consumer needs not overlapping notifications</para>
            <para><paramref name="FHandler">Your handler</paramref> is called for each new value of the property and is given the <see cref="T:JetBrains.DataFlow.ObsoleteLifetimeAndDefinitionAtTheSameTime">lifetime object</see> for that value. This per-value lifetime is terminated whenever a new value is assigned to the property, or when the <paramref name="lifetime"/> you define for this method terminates.</para>
            <para>Using the per-value lifetime, you can define a pair of actions (after-value-comes — before-value-goes) to be executed for each value, or spawn some activity for the duration of this value, etc.
            The lifetime must have gurded termination</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreading_DataFlowEx.WhenTrueGuarded(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IThreading,System.Action{JetBrains.Lifetimes.Lifetime})">
            <summary>
            Creates a lifetime (and calls your handler guarded) whenever the property value gets <c>True</c>.
            Closes the lifetime when the property value changes to <c>False</c>, or the lifetime of this method ends.
            </summary>
            <param name="property">The property whose value is to be monitored.</param>
            <param name="lifetime">Duration for the rules defined by this method.</param>
            <param name="threading">Threading object to make guarded calls</param>
            <param name="FHandler">The handler that is executed when the value raises.</param>
        </member>
        <member name="M:JetBrains.Application.Threading.IThreading_DataFlowEx.WhenFalseGuarded(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IThreading,System.Action{JetBrains.Lifetimes.Lifetime})">
            <summary>
            Creates a lifetime (and calls your handler guarded) whenever the property value gets <c>False</c>.
            Closes the lifetime when the property value changes to <c>True</c>, or the lifetime of this method ends.
            </summary>
            <param name="property">The property whose value is to be monitored.</param>
            <param name="lifetime">Duration for the rules defined by this method.</param>
            <param name="threading">Threading object to make guarded calls</param>
            <param name="FHandler">The handler that is executed when the value raises.</param>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Disable">
            <summary>
            Do not use multi-core fibers
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Normal">
            <summary>
            Regular fiber usage. Number of fibers equals processor number
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Aggressive">
            <summary>
            Aggressive fiber usage. Number od fibers is twice processor count
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IMultiCoreFibers.EnqueueJob(System.Action)">
            <summary>
            Add job to the end fof the queue
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IMultiCoreFibers.EnqueuePriorityJob(System.Action)">
            <summary>
            Add job to the beginning fof the queue
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.MultiCoreFibersPool">
            <summary>
            Utility class to parallelize jobs on multiple processor cores
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.SequentialItemsProcessor`2">
            <summary>
            Processes requests asynchronously one at a time. Allows to await processing result for each request.
            </summary>
            <typeparam name="TRequest">Type of request</typeparam>
            <typeparam name="TResult">Type of processing result</typeparam>
        </member>
        <member name="M:JetBrains.Application.Threading.SequentialItemsProcessor`2.SendAsync(JetBrains.Lifetimes.Lifetime,`0)">
            <summary>
            Schedules a request processing for a specified <see cref="!:lifetime"/>. If lifetime expires processing is canceled.
            </summary>
            <param name="lifetime">Lifetime for which the request is valid</param>
            <param name="request">Request to process</param>
            <returns>Awaitable result</returns>
        </member>
        <member name="M:JetBrains.Application.Threading.SequentialItemsProcessor`2.SendAsync(`0)">
            <summary>
            Schedules a request processing valid until processor lifetime expiration
            </summary>
            <param name="request">Request to process</param>
            <returns>Awaitable result</returns>
        </member>
        <member name="T:JetBrains.Application.Threading.ShellLocks">
            <summary>
            Groups the locking-related methods in the Shell.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.ShellLocks.myIsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.ShellLocks.#ctor(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates shell locks over an existing threading object.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.Tasks.SingleThreadExecutor.CurrentlyExecuting">
            <summary>
            Property that contains task which is currently being executed or null if executor's queue is empty
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.Tasks.SingleThreadExecutor.Idle">
            <summary>
            Property that contains true is some task is currently being executed or null if executor's queue is empty.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.Tasks.SingleThreadExecutor.Queue(System.Action,JetBrains.Util.Threading.Tasks.TaskPriority,System.Boolean)">
            <summary>
              Warning!!! Think twice before queueing task in SYNC mode, very deadlock-prone pattern.
              Queue task to execution in sequential mode. It's guaranteed that all tasks are being executed sequentially and if
              task was queued after other task with same priority, their
              order will be retained.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Threading.Tasks.SingleThreadExecutor.SyncContinuationAction">
            <summary>
            Action will be executed synchronously after each task, before other task in this scheduler will be executed.
            But if you wait queued task somehow (or run it in sync manner) then this wait would have finished before SyncContinuation started.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.TaskWithWorkStealing">
            <summary>
            Use this class if you need to run some async task that sometimes needs to be sync-waited for.
            If there is no available thread to start async task, the sync-wait can lead to a dead lock.
            So, this class steals the work from an async task instead of sync-wait, executing it synchronously.
            Please note that no work stealing occurs in case when async task already started, as
            there is no threat of thread-starving then.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.TreeLocks.CreateUpgradableModelLock(JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Create second-level lock with Logger.Assert for incorrect lock order
            </summary>
            <param name="shellLocks"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Threading.TreeLocks.CreateModelLock(JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Create second-level lock with Logger.Assert for incorrect lock order
            </summary>
            <param name="shellLocks"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Threading.TreeLocks.CreateUILock(JetBrains.Application.Threading.NoContentLockInsideReadWriteLock,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Create third-level lock with Logger.Assert for incorrect lock order
            </summary>
            <param name="modelLock"></param>
            <param name="contentLock"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Threading.TryWriteLockCookie.ReleaseConditionally(System.String,System.String)">
            <summary>
            Can throw OperationCanceledException
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.TryWriteLockCookie.ReleaseAndSleep(System.Int32,System.String,System.String)">
            <summary>
            Can throw OperationCanceledException
            </summary>
            <param name="millisToSleep"></param>
        </member>
        <member name="F:JetBrains.Application.Threading.UnguardedAlarm.ourRequests">
            <summary>
            Maps requests to invocation times
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.UnguardedAlarm.myRequests">
            <summary>
            List of requests for specific alarm
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.UnguardedAlarm.ourTimer">
            <summary>
            The alarms timer
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionsRevised.Handlers.IDataContextOwner">
            <summary>
            Provide ability to prolongate DataContext during requirements prepare and use it later outside, in Execute
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor.CustomVisualStudioId">
            <summary>
            Allows to manually override the integer ID part for the VS command.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionsRevised.Menu.ActionAttribute.Id">
            <summary>
            Allows to manually override the integer ID part for the VS command.
            You should not remove/change it for existing actions with shortcuts, otherwise VS will lose the shortcuts.
            In all the other cases you don't need it, and had better not to define it.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionsRevised.Menu.ActionAttribute.IsContextDependent">
            If action os context dependent, then we can't cache presentation for this action
            because in can be changed without explicit user actions
        </member>
        <member name="M:JetBrains.Application.UI.ActionsRevised.Menu.ActionAttribute.#ctor(System.String,System.String)">
            <summary>
            Action ID should match the action handler type name, for discoverability.
            Do not override the action ID. This ctor exists for backward compatibility
            with the old action system.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionsRevised.Menu.ActionAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            Action ID should match the action handler type name, for discoverability.
            Do not override the action ID. This ctor exists for backward compatibility
            with the old action system.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts.AddShortcut(JetBrains.Application.Shortcuts.ShortcutScheme,JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor,JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope,JetBrains.Application.Shortcuts.ActionShortcut)">
            <summary>
            Adds the shortcut to the specified action in the specified scope to the specified scheme.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts.RemoveShortcut(JetBrains.Application.Shortcuts.ShortcutScheme,JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor,JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope,JetBrains.Application.Shortcuts.ActionShortcut)">
            <summary>
            Removes the shortcut to the specified action in the specified scope from the specified scheme.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts.GetDefinedShortcutsWithScopes(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor)">
            <summary>
            Returns list of shortcuts defined for the specified action in selected scheme.
            </summary>
            <remarks>Visual Studio note: defined shortcuts may differ from currently assigned shortcuts.
            Shortcuts could be not applied yet or user could customize the shortcuts.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts.GetAssignedShortcuts(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithIdDescriptor)">
            <summary>
            Returns shortcuts currently assigned to the action if any, an empty list otherwise.
            If the action overrides VS commands, VS command shortcuts are returned.
            </summary>
            <remarks>Visual Studio note: defined shortcuts may differ from currently assigned shortcuts.
            Shortcuts could be not applied yet or user could customize the shortcuts.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.ActionsRevised.Shortcuts.IActionShortcuts.TryGetActionByShortcut(JetBrains.Application.Shortcuts.ActionShortcut)">
            <summary>
            Try get the action that is currently assigned to the shortcut in the current context.
            </summary>
            <remarks>Visual Studio note: defined shortcuts may differ from currently assigned shortcuts.
            Shortcuts could be not applied yet or user could customize the shortcuts.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.ActionsAsyncAvailability.Prepare(JetBrains.Lifetimes.Lifetime,System.Collections.Generic.List{JetBrains.Application.UI.ActionSystem.ActionBar.AsyncUpdateList})">
            <summary>
            prepare the context
            execute ui action while we are still on ui thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager.RegisterActionBar(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager.JetBrains#Application#UI#ActionSystem#ActionBar#IActionBarManager#ActionManager">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager.CreateActionBar(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager.CreateActionContextMenu(JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager.JetBrains#Application#UI#ActionSystem#ActionBar#IActionBarManager#CreateActionMenu(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager.JetBrains#Application#UI#ActionSystem#ActionBar#IActionBarManager#CreateItemAutomation(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.ActionSystem.ActionsRevised.Loader.IActionNodeDef,JetBrains.Application.UI.Actions.Automations.IActionAutomation)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.ActionBar.DummyActionBarManager.JetBrains#Application#UI#ActionSystem#ActionBar#IActionBarManager#ThemedIconManager">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionBar(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            Creates an action bar.
            </summary>
            <param name="lifetime">The action bar lifetime.</param>
            <param name="def"></param>
            <param name="autoUpdate"></param>
            <param name="FGetDataRules">Helps with creating a Data Context each time the actions on the bar have to be updated or executed. System-wide data providers (and data rules) are mixed in when <see cref="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.CreateDataContext(JetBrains.Lifetimes.Lifetime)">Data Context is created</see>. If you're creating an action bar for a local control, you can use <see cref="P:JetBrains.Application.UI.Actions.ActionManager.IActionManager.DataContexts"/> :: <see cref="M:JetBrains.Application.DataContext.FindDataRules.FindDataRulesInControl(JetBrains.Application.UI.UIAutomation.ControlWrapper)"/> as an implementation for this functor. Return <c>Null</c> if the control is not available at the moment.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionContextMenu(JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            Creates a context menu.
            This menu will be registered in the action bars list, so you must make sure it's disposed of. 
            Calling <see cref="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionContextMenu.BeginShow(JetBrains.Util.Media.JetPhysicalPoint)"/> makes sure it's disposed of after showing or instead of showing if failed to show.
            </summary>
            <param name="lifetimeDefinition">The context menu lifetime.</param>
            <param name="actionGroup">Child actions of this group will populate the created action bar.</param>
            <param name="FGetDataRules">Helps with creating a Data Context each time the actions on the bar have to be updated or executed. System-wide data providers (and data rules) are mixed in when <see cref="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.CreateDataContext(JetBrains.Lifetimes.Lifetime)">Data Context is created</see>. If you're creating an action bar for a local control, you can use <see cref="P:JetBrains.Application.UI.Actions.ActionManager.IActionManager.DataContexts"/> :: <see cref="M:JetBrains.Application.DataContext.FindDataRules.FindDataRulesInControl(JetBrains.Application.UI.UIAutomation.ControlWrapper)"/> as an implementation for this functor.</param>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.CreateActionMenu(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            Creates an action menu.
            </summary>
            <param name="lifetime">The action menu lifetime.</param>
            <param name="actionGroup">Child actions of this group will populate the created action bar.</param>
            <param name="FGetDataRules">Helps with creating a Data Context each time the actions on the bar have to be updated or executed. System-wide data providers (and data rules) are mixed in when <see cref="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.CreateDataContext(JetBrains.Lifetimes.Lifetime)">Data Context is created</see>. If you're creating an action bar for a local control, you can use <see cref="P:JetBrains.Application.UI.Actions.ActionManager.IActionManager.DataContexts"/> :: <see cref="M:JetBrains.Application.DataContext.FindDataRules.FindDataRulesInControl(JetBrains.Application.UI.UIAutomation.ControlWrapper)"/> as an implementation for this functor.</param>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager.ShowActionContextMenuInWinFormsControl(JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.UI.ActionsRevised.Loader.IActionGroupDef,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}},JetBrains.Util.Media.JetPhysicalPoint)">
            <summary>
            A special implementation for WinForms to avoid message processing issues.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManagerEx">
            <summary>
            UI-framework-agnostic helpers for <see cref="T:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManager"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBarManagerEx.Update(JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar)">
            <summary>
            Combines <see cref="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.Update(JetBrains.Application.DataContext.IDataContext)"/> and <see cref="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionBar.CreateDataContext(JetBrains.Lifetimes.Lifetime)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionBar.IActionContextMenu.BeginShow(JetBrains.Util.Media.JetPhysicalPoint)">
            <summary>
            Shows the menu async at the given screen point.
            Don't dispose of the menu right after calling this method because it might be still operated onscreen.
            The menu will dispose of itself after you call this method, either when it's executed/dismissed, or immediately if it could not be shown (eg no items to show).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerCommandBindingsFactory">
            <summary>
            Base dummy impl for non-interactive contexts.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerSimpleCommand">
            <summary>
              <para>Exposes an <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager" />'s <see cref="T:JetBrains.Application.UI.ActionsRevised.Menu.IExecutableAction" /> as a simple <see cref="T:System.Windows.Input.ICommand" />. See derived impl for Routed Command based handler.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerSimpleCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <inheritdoc />
        </member>
        <member name="E:JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerSimpleCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionManager.ActionManagerSimpleCommand.System#Windows#Input#ICommand#Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.ActionManager.DummyActionManagerCommandBindings">
            <summary>
              <para>Dummy base impl.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionManager.DummyActionManagerCommandBindings.JetBrains#Application#UI#Actions#ActionManager#IActionManagerCommandBindings#GetCommand(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId)">
            <summary>
              <para>Creates a new command corresponding to the action, and registers the command bindings on the view element to which the <c>ActionManagerCommandBindingsBehavior</c> is applied.</para>
              <para>Safe to call multiple times.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus.Unsupported">
            <summary>
            Action is not supported by product and cannot be executed using product handlers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus.Available">
            <summary>
            Action is supported and can be executed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus.Unavailable">
            <summary>
            Action is supported but cannot be executed because of improper context.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus.Invisible">
            <summary>
            Same as <see cref="F:JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus.Unavailable"/> but hidden from menu where possible.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.ActionsRevised.Handlers.EvaluationStatus.CallNext">
            <summary>
            All action handlers have called nextUpdate delegate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionGroupAttribute.#ctor(System.String,JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.ActionGroupInsertStyles)">
            <summary>
            Action ID should match the action handler type name, for discoverability.
            Do not override the action ID. This ctor exists for backward compatibility
            with the old action system.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithExecuteRequirement.GetRequirement(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Specifying requirements like <see cref="!:CommitAllDocumentsRequirement"/> via this method
            instead of simply calling sync commit methods during execution could improve performance
            and is considered cleaner approach
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IActionWithFallback">
            <summary>
            The interface allows Priority Command Target handler to control VS command overriding.
            1) VS's command overridden by an an action with update requirements is executing. The interface gives an ability to process VS QueryStatus synchronously, 
            and make a decision whether to override the VS command or to let it to be executed.
            2) R#'s command that overrides VS command is executing. The interface gives an ability to fall back to VS command and not to execute R#'s action.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.IRefactoringAction">
            <summary>
            A marker interface that allows VsOleCommandTargetHandler to process overriding VS commands.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute">
            <summary>
            Bind the action to an existing VS command.
            VS commands are intercepted in VS priority command target.
            Execution is delegated back to VS when the action is not available and Update method calls nextUpdate delegate.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute.VsOverriddenAction">
            <summary>
            VS command ID to override.
            Format: ({guid}:id). Example: "({1496a755-94de-11d0-8c3f-00c04fc2aae2}:118)"
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute.HideVsCommand">
            <summary>
            Hide VS command from VS main and context menus. The command is still invokable, but not visible in the UI.
            Used to avoid duplication in menus that contain both VS and ReSharper actions.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute.FallBackOnly">
            <summary>
            VS command is not intercepted, but if ReSharper action is not available it delegates execution to the VS command.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.ActionsRevised.Menu.VsOverrideActionAttribute.Configurable">
            <summary>
            An ability to turn override off in the ReSharper options.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAll.ActionGroupId">
            <summary>
            ID of the action group with the “Close All” family actions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAllItem.#ctor(System.String,System.Boolean,System.Action)">
            <param name="text">Item title.</param>
            <param name="isCurrent">If this is the “Current” item. “Close All but This” shouldn't touch this item.</param>
            <param name="FClose">Close action for closeable items, <c>Null</c> for non-closeable.</param>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAllItem.Close">
            <summary>
            Closes this item (if it's closeable), does nothing otherwise.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAllItem.IsCloseable">
            <summary>
            Whether this item could be closed (there're noncloseable tabs sometimes).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAllItem.IsCurrent">
            <summary>
            If this is the “Current” item. “Close All but This” shouldn't touch this item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Actions.CloseAll.CloseAllItem.Text">
            <summary>
            Item title.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.JetPopupContextMenu">
            <summary>
            Supports displaying a JPM which holds menu items from the action system, closely resembling how a context menu works.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.EscapeActionHandlerBase">
            <summary>
            Base class for implementing escape action handlers
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Menu.MnemonicProcessor.CONSONANTS">
            <summary>
            Bitmap for chars which are consonants.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.OneOfaListActionHandler.IsAvailable(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            When overridden in inheritors determines whether the handler is available in the current context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.OneOfaListActionHandler.Execute(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            When overridden in inheritors performs the handler action
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.ShortcutManager.ShortcutManager.SelectedShortcutScheme">
            <summary>
            Value can be null at very beginning while shortcut scheme is not set.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema">
            <summary>
            Knows about all the text control actions there are (from <see cref="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.ActionIds"/>).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema.Entries">
            <summary>
            Gets entries for all the known actions. The list of entries matches the IDs defined in <see cref="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.ActionIds"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema.Entry">
            <summary>
            A schema entry on the single action from <see cref="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.ActionIds"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema.Entry.ActionId">
            <summary>
            ID of the action (as in <see cref="!:IActionDefWithId.ActionId"/>).
            Must be listed in <see cref="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.ActionIds"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema.Entry.ActionName">
            <summary>
            Base name, as in <see cref="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Names"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema.Entry.IsEditing">
            <summary>
            See <see cref="F:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.TextControlActionAttribute.IsEditing"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema.Entry.IsWithSelection">
            <summary>
            See <see cref="M:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Composition.DecomposeIsWithSelection(System.String)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Schema.Entry.ShortcutKeys">
            <summary>
            See <see cref="F:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.TextControlActionAttribute.ShortcutKeys"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.ActionIds">
            <summary>
            Action IDs in the action system, plus extra stuff like shortcuts and whether they modify the text. Composed with <see cref="M:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Composition.Compose(System.String,System.Boolean)" /> from <see cref="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Names" />.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Composition">
            <summary>
            How Action ID is composed from Name &amp; stuff.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Names">
            <summary>
            Base bare names of actions. Not used in technical stuff, Action IDs are used instead. Composed into Action ID with <see cref="M:JetBrains.Application.UI.ActionSystem.Text.TextControlActions.Composition.Compose(System.String,System.Boolean)" />. Might make multiple actions, with Shift modifier and without (if applicable).
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.GetPathToMenuRoot(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns menu path excluding the action itself (e.g. "ReSharper | Refactor"), or empty string if the action is not in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.GetMenuPathText(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns action menu path (e.g. "ReSharper | Refactor | Rename"), or empty string if the action is not in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.GetShortcutText(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns the shortcut currently assigned to the action, or empty string if the action has no assigned shortcuts.
            If the action overrides a VS command, returns the shortcut of the VS command.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.GetShortcutOrMenuPathText(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns the shortcut currently assigned to the action, or menu path if the action has no assigned shortcuts, or empty string if the action is not in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.GetHowToExecuteText(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns action menu path and/or shortcut text (e.g. "ReSharper | Refactor | Rename (F2)", or action id if the action is not in the menu and has no shortcuts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration.Parentheses">
            <summary>
            Surround text with "(" and ")".
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration.SpaceBefore">
            <summary>
            Prepend text with space.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration.ToInline">
            <summary>
            Surround text with "(" and ")" and prepend with space. To be used in Format("{0}") and concatenations.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration.ArrowPathDelimiter">
            <summary>
            Use the arrow symbol as a delimiter of menu path.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Actions.ActionManager.ActionManagerCommandBindingsEx.GetCommand(JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindings,System.String)">
            <summary>
            <para>Registers the action with this command scope and returns a routed command which will represent the action in this scope.</para>
            <para>Safe to call multiple times.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Actions.ActionManager.ActionManagerCommandBindingsEx.GetCommand``1(JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindings)">
            <summary>
            <para>Registers the action with this command scope and returns a routed command which will represent the action in this scope.</para>
            <para>Safe to call multiple times.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Actions.ActionManager.ActionManagerContextMenu">
            <summary>
            <para>Viewmodel part of the infrastructure supporting <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager">Action Manager</see> driven context menus over WPF elements.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Actions.ActionManager.ActionManagerEx">
            <summary>
            Extensions for <see cref="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Actions.ActionManager.ActionManagerEx.ExecuteActionAsync``1(JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.Lifetimes.Lifetime)">
            <summary>
            Does all the threading on itself, execs the action, yields when the action execution is completed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Actions.ActionManager.ActionManagerEx.GetPresentableShortcutText``1(JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns the shortcut currently assigned to the action, or empty string if the action has no assigned shortcuts.
            If the action overrides a VS command, returns the shortcut of the VS command.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Actions.ActionManager.ActionManagerEx.GetShortcutOrMenuPathText``1(JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns the shortcut currently assigned to the action, or menu path if the action has no assigned shortcuts, or empty string if the action is not in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Actions.ActionManager.ActionManagerEx.GetHowToExecuteText``1(JetBrains.Application.UI.Actions.ActionManager.IActionManager,JetBrains.Application.UI.ActionSystem.UserPresentation.IActionPresentableTexts.Decoration)">
            <summary>
            Returns action menu path and/or shortcut text (e.g. "ReSharper | Refactor | Rename (F2)", or action id if the action is not in the menu and has no shortcuts.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Actions.ActionManager.IActionManager">
            <summary>
            TODO: persistent mnemonics, dynamic mnemonics in update.
            TODO: dataContext prolongation assertions
            TODO: Delegate to host when executing actions programmatically
            TODO: assert where VSOverride is applicable.
            TODO: combo-box action...
            TODO: iconizqation in VS contextmenus
            TODO: assertions in Vsct
            TODO: do not generate empty groups
            TODO: MvcAnnotatorActionHandler
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Actions.ActionManager.IActionManagerCommandBindings.GetCommand(JetBrains.Application.UI.ActionsRevised.Loader.IActionDefWithId)">
            <summary>
            <para>Creates a new command corresponding to the action, and registers the command bindings on the view element to which the ActionManagerCommandBindingsBehavior is applied.</para>
            <para>Safe to call multiple times.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Actions.ActionPresentation">
            <summary>
            Visual presentation of an Action
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Actions.Automations.ActionContextMenuAutomation.OnShowRequested">
            <summary>
            Should be handled by the view serving this automation object, and show the appropriate view for a menu. Default impl wired up in action bar manager, upon creation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripComboBox#ComboBox">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripComboBox#Width">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripLabel#Text">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripLabel#ToolTipText">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripLabel#Image">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripProgressBar#Text">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripProgressBar#Value">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripProgressBar#Minimum">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripProgressBar#Maximum">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripProgressBar#ProgressColor">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Actions.Automations.ActionRootAutomation.DummyCustom.JetBrains#Application#UI#ActionSystem#ActionBar#Legacy#ICustomStripProgressBar#ProgressBar">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Actions.DelegateActionHandler">
            <summary>
            An action handler which could be defined with just two delegates.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Actions.MenuGroups.GotoActionGroup">
            <summary>
            This action group is a synthetic parent for actions which should not be listed under our main menu or well-known
            context menus, but are still user-friendly enough to be listed in Goto Action
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Automation.AutomationViewsRegistry.JetBrains#Application#UI#Automation#IAutomationViewsRegistry#RegisteredViews">
            <summary>
            Gets a dictionary to map automation types to the view types with which such automation objects should be presented in the UI.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Automation.AutomationViewsRegistry.JetBrains#Application#UI#Automation#IAutomationViewsRegistry#RegisterManually(JetBrains.Lifetimes.Lifetime,System.Type,System.Type,JetBrains.Application.UI.Automation.ViewKind)">
            <summary>
            <para>Manually registers a view for an automation object.</para>
            <para>To have your view listed automatically, use the <see cref="T:JetBrains.Application.UI.Automation.ViewAttribute"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Automation.AutomationViewsRegistry.JetBrains#Application#UI#Automation#IAutomationViewsRegistry#RegisterManually``2(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Automation.ViewKind)">
            <summary>
            <para>Manually registers a view for an automation object.</para>
            <para>To have your view listed automatically, use the <see cref="T:JetBrains.Application.UI.Automation.ViewAttribute"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Automation.IAutomationViewsRegistry.DefaultParentComponentContainer">
            <summary>
            Gets default parent component container for creating view.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisteredViews">
            <summary>
            Gets a dictionary to map automation types to the view types with which such automation objects should be presented in the UI.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisterManually(JetBrains.Lifetimes.Lifetime,System.Type,System.Type,JetBrains.Application.UI.Automation.ViewKind)">
            <summary>
            <para>Manually registers a view for an automation object.</para>
            <para>To have your view listed automatically, use the <see cref="T:JetBrains.Application.UI.Automation.ViewAttribute"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Automation.IAutomationViewsRegistry.RegisterManually``2(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Automation.ViewKind)">
            <summary>
            <para>Manually registers a view for an automation object.</para>
            <para>To have your view listed automatically, use the <see cref="T:JetBrains.Application.UI.Automation.ViewAttribute"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Automation.IAutomationViewsRegistryEx.CreateView``1(JetBrains.Application.UI.Automation.IAutomationViewsRegistry,JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.Components.IComponentContainer,JetBrains.Application.UI.UIAutomation.IAutomation)">
            <summary>
            Creator routine core.
            </summary>
            <param name="thіs">The views registry which is the API to create the views. Cannot fetch thru the container because that would mean a circular dependency. Might be required by views to instantiate child views.</param>
            <param name="lifetime">View LT.</param>
            <param name="typeView">Class to create.</param>
            <param name="containerForFactoring">Would resolve ctor params thru this if avail.</param>
            <param name="oAutomation">Passed to ctor params.</param>
            <typeparam name="TRes"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:JetBrains.Application.UI.Automation.IViewModelPresenter">
            <summary>
            That's framework independent base class. 
            It could be winforms control or some proxy, which's rendered on any client side.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Automation.WindowModality">
            <summary>
            Whether to show a dialog modally or nonmodally.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Automation.WindowModality.Nonmodal">
            <summary>
            The dialog is shown nonmodally.
            Its creation function might be executed offstack if that is required to open a <see cref="T:JetBrains.Threading.ReentrancyGuard"/> transaction.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Automation.WindowModality.Modal">
            <summary>
            The dialog is executed modally, but not necessarily on the same stack: the execution function might return before the dialog is actually shown, in case that is required to open a <see cref="T:JetBrains.Threading.ReentrancyGuard"/> transaction.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Automation.WindowModality.ModalThisStack">
            <summary>
            The dialog is executed modally exactly on this stack, so that the execution function returns only after the dialog is completed. This requires that <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is not held at call time (otherwise the transaction cannot be opened in the given invariants).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Automation.WindowModalityDataConstants.ShowDialogModality">
            <summary>
            Context parameter for Show Options action: whether to show dialog modally or not.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.Definitions.ExternalDependencyDefinition">
            <summary>
            Defines a dependency on an external object that implements the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.Definitions.ItemDependencyDefinition">
            <summary>
            Defines a dependency on a property on an item where the item implements the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.ExpressionFlattener">
            <summary>
            Given a LINQ expression, traverses the expression and produces a flat list of all of the 
            expressions. A list of expression types can be provided which the expression flattener will stop 
            at rather than traversing any further.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.DependencyExtractor">
            <summary>
            Serves as a base class for dependency extractors that create dependencies against properties. 
            These dependencies have one thing in common: They only look for MemberAccess expressions, and 
            the type of dependency depends on what the root of the expression is.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.ExternalDependencyExtractor">
            <summary>
            A dependency extractor that finds dependencies on external resources. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.Extractors.ItemDependencyExtractor">
            <summary>
            Extracts dependencies placed on child items within a query by looking for uses of <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.IExpressionAnalyzer">
            <summary>
            Implemented by classes that can parse LINQ expression trees and extract dependencies from them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.ExpressionAnalysis.IExpressionAnalyzer.DiscoverDependencies(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Extracts the dependencies.
            </summary>
            <param name="expression">The expression.</param>
            <param name="itemParameter">The item parameter.</param>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPathNavigator">
            <summary>
            An interface implemented by classes which can traverse a property path.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPathNavigator.TraverseNext(System.Object,System.String,System.Action{System.Object,System.String})">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <returns>
            An appropriate <see cref="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.IToken"/> for the property.
            </returns>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPropertyReader`1">
            <summary>
            This interface is implemented by classes which read property values.
            </summary>
            <typeparam name="TCast">The type to cast the return type to.</typeparam>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPropertyReader`1.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.PathNavigator">
            <summary>
            A factory for the construction of property monitors by detecting information about the object.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.ITokenFactory">
            <summary>
            Implemented by factories that construct <see cref="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.IToken">ITokens</see> from a property path.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.TokenFactories.ITokenFactory.ParseNext(System.Object,System.String,System.Action{System.Object,System.String},JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.IPathNavigator)">
            <summary>
            Creates an appropriate property monitor for the remaining property path string on the target object.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <param name="callback">The callback.</param>
            <param name="pathNavigator">The path navigator.</param>
            <returns> An appropriate <see cref="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.IToken"/> for the property. </returns>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.ClrMemberToken">
            <summary>
            A property monitor for CLR based properties.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.ClrMemberToken.DiscardCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to discard the current target.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.ClrMemberToken.MonitorCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to monitor the current target.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.ClrMemberToken.ReadCurrentPropertyValueOverride">
            <summary>
            When overridden in a derived class, gets the value of the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.ClrMemberToken.DisposeOverride">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.IToken.NextToken">
            <summary>
            Gets the next monitor in the chain.
            </summary>
            <value>The next monitor.</value>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.IToken.AcquireTarget(System.Object)">
            <summary>
            Acquires the target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.RemainingPath">
            <summary>
            Gets the remaining fragments.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.PropertyName">
            <summary>
            Gets the remaining fragments.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.CurrentTarget">
            <summary>
            Gets the current target.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.PropertyMonitorLock">
            <summary>
            Gets the property monitor lock.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.PathNavigator">
            <summary>
            Gets the traverser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.NextToken">
            <summary>
            Gets the next monitor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.AcquireTarget(System.Object)">
            <summary>
            Acquires the target.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.DiscardCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to discard the current target.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.MonitorCurrentTargetOverride">
            <summary>
            When overridden in a derived class, gives the class an opportunity to monitor the current target.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.ReadCurrentPropertyValueOverride">
            <summary>
            When overridden in a derived class, gets the value of the current target object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.HandleCurrentTargetPropertyValueChanged">
            <summary>
            Handles the current target property value changed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.ChangeDetected(System.String)">
            <summary>
            Notifies the parent IPropertyMonitor that a property on the target object has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.MemberToken.DisposeOverride">
            <summary>
            When overridden in a derived class, lets the derived class dispose any event handlers.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Dependencies.PathNavigation.Tokens.WpfMemberToken">
            <summary>
            A property monitor for WPF DependencyProperties.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.DependencyDiscovery">
            <summary>
            Indicates which mode of automatic dependency analysis to conduct on an expression. 
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.BindableLinq.DependencyDiscovery.Enabled">
            <summary>
            Bindable LINQ will inspect the expression(s) passed to this extension method and look for property access or control access in order to detect  
            and wire up dependencies automatically. This is the default behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.BindableLinq.DependencyDiscovery.Disabled">
            <summary>
            No automatic dependency analysis will take place. Dependencies can still be added manually using the <see cref="M:JetBrains.Application.UI.BindableLinq.Extensions.BindableEnumerable.DependsOn``3(``0,System.Linq.Expressions.Expression{System.Func{``1,``2}})"/> extension methods. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Helpers.Weak">
            <summary>
            Contains methods to build weak event handlers.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Helpers.Weak.Event``1(System.EventHandler{``0})">
            <summary>
            Creates a weak event handler for a given event handler.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Helpers.WeakEvent`1">
            <summary>
            Represents a wrapper around subscribing to a weak event and keeping the event handler callback alive.
            </summary>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
        </member>
        <member name="M:JetBrains.Application.UI.BindableLinq.Helpers.WeakEvent`1.#ctor(System.EventHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Application.UI.BindableLinq.Helpers.WeakEvent`1"/> class.
            </summary>
            <param name="originalHandler">The original handler.</param>
        </member>
        <member name="P:JetBrains.Application.UI.BindableLinq.Helpers.WeakEvent`1.HandlerProxy">
            <summary>
            Gets or sets the subscriber.
            </summary>
            <value>The subscriber.</value>
        </member>
        <member name="T:JetBrains.Application.UI.BindableLinq.Helpers.WeakEventProxy`1">
            <summary>
            An event handler wrapper used to create weak-reference event handlers, so that event subscribers 
            can be garbage collected without the event publisher interfering. 
            </summary>
            <typeparam name="TEventArgs">The type of event arguments used in the event handler.</typeparam>
            <remarks>
            To understand why this class is needed, see this page: 
                http://www.paulstovell.net/blog/index.php/wpf-binding-bug-leads-to-possible-memory-issues/
            For examples on how this is used, it is best to look at the unit test: 
                WeakEventProxyTests.cs
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Commands.SignalCommand">
            <summary>
              An Avalon command which fires a signal when executed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Commands.UICommand">
            <summary>
            Represents view model for a command
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Commands.UiCommandAutomation">
            <summary>
            Describes the view model of a UI command (e.g. on a toolbar).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.FontsManager.DefaultCodeFont">
            <summary>
            Gets editor font
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.FontsManager.DialogFont">
            <summary>
            Font for dialogs
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.FontsManager.LookupFont">
            <summary>
            Gets lookup font
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.FontsManager.MenuFont">
            <summary>
            A font to be used for menu item labels.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.FontsManager.TipFont">
            <summary>
            Font for pop-up tips
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.FontsManager.EditorTooltipFont">
            <summary>
            Font for tooltips in editor
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.IFontsManager.DefaultCodeFont">
            <summary>
            Gets editor font
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.IFontsManager.DialogFont">
            <summary>
            Font for dialogs
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.IFontsManager.LookupFont">
            <summary>
            Gets the lookup lists font.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.IFontsManager.MenuFont">
            <summary>
            A font to be used for menu item labels.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.IFontsManager.TipFont">
            <summary>
            Font for pop-up tips
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Fonts.IFontsManager.EditorTooltipFont">
            <summary>
            Font for tooltips in code editor
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Fonts.JetFontEx.ToWindowsFormsFont(JetBrains.Util.RichText.JetFont,JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Gets a font for Windows Forms and for the current DPI value.
            The returned font is pixel-bound and would not autoscale on render (but might change its pixel value if your Form gets a DPI-change event and dynamic DPI tricks are active).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.IIsApplicationActiveState">
            <summary>
            Tracks the application active state (whether any of its windows currently have focus).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IIsApplicationActiveState.IsEnabled">
            <summary>
            When set to <c>True</c>, starts tracking the active state of the application and promoting the values into the <see cref="P:JetBrains.Application.UI.Components.IIsApplicationActiveState.IsApplicationActive"/>.
            Initially, OFF. The default implementation sets to <c>True</c> for the Shell lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IIsApplicationActiveState.IsApplicationActive">
            <summary>
            Gets whether the application currently has user focus. Readonly.
            When <c>False</c>, you should generally cease any user-oriented activity.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.Interop.AvalonOperationCrisp">
            <summary>
            Enforses crisp fonts in avalon controls.
            Call whenever you're about to use Avalon, before or after doing so.
            All the calls but the first one will be ignored.
            </summary>
            <remarks>
            Hooks the MILCORE so that it obtained somehow improved information about the system settings.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Interop.AvalonOperationCrisp.Execute_InstallHook">
            <summary>
            Injects the hook.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Interop.AvalonOperationCrisp.Execute_InvalidateMil">
            <summary>
            A kick for the MILCORE to query for the display settings again, this time with our improved data.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Interop.AvalonOperationCrisp.OnSystemParametersInfoW(System.UInt32,System.UInt32,System.Void*,System.UInt32)">
            <summary>
            Our replacement function which we hook into the MILCORE's IAT.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.Interop.AvalonOperationCrispComponent">
            <summary>
            Executes the <see cref="T:JetBrains.Application.UI.Components.Interop.AvalonOperationCrisp"/> on shell startup.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.IsApplicationActiveStateDummy">
            <summary>
            Dummy implementation for operations without a component container.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.IsApplicationActiveState">
            <summary>
            Tracks the application active state (whether any of its windows currently have focus).
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.IsApplicationActiveState.UpdateActive(JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Checks the active window to update the active state.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.IUIApplication">
            <summary>
            Tracks and exposes various aspects of the UI Application functions and state.
            </summary>
            <remarks>
            For controls which should be able to run without a Shell, use <see cref="T:JetBrains.Application.UI.Components.IUIApplicationSimple" />.
            </remarks>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplication.ApplicationModalState">
            <summary>
            Controls modal dialogs showing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplication.FileDialogs">
            <summary>
            File Open/Save and Folder Open dialogs.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplication.MainWindowPopupWindowContext">
            <summary>
            A context for driving popup windows over the main window — how to position them unless specified otherwise, and when to hide.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplication.Settings">
            <summary>
            Gets the application settings store.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplication.ShellLocks">
            <summary>
            The application-wide reader-writer locks.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplication.WindowsHookManager">
            <summary>
            Enables operation of components which require intercepting Windows messages.
            For example, reliable handling dynamic DPI or tracking element's onscreen position requires the hooks.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.IUIApplicationEx.OpenUri(JetBrains.Application.UI.Components.IUIApplicationSimple,System.Uri)">
            <summary>
              Opens the specific URI in the default Web browser.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.IUIApplicationSimple">
            <summary>
              <para>
                The simplified UI Application interface. This is a subset of <see cref="T:JetBrains.Application.UI.Components.IUIApplication" /> which can easily be run without a Shell.
              </para>
              <para>You should use the simple interface in UI controls which should be able to run in shell-less mode.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.Idle">
            <summary>
              Fires periodically during the application idle time.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.IsApplicationActive">
            <summary>
              Gets whether the application currently has user focus. Readonly.
              When <c>False</c>, you should generally cease any user-oriented activity.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.IsInternalMode">
            <summary>
              <para>Gets if the product has been started with Internal-Only functionality enabled.</para>
              <para>For multi-product environments, turning Intenral on any of the products should enable Internal mode for all of the features.</para>
            </summary>
            // TODO: write xmldoc on how to get this flag in non-UI scenarios in multiproduct case
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.MainWindow">
            <summary>
              Gets a handle to the application main window that could be used for owning dialog boxes, and such.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.OpensUri">
            <summary>
            Opens an URI in the system-default Web browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.OuterLifetime">
            <summary>
              Gets the readonly lifetime object which can be used for checking if the instance has already been terminated.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.Theming">
            <summary>
              Exposes all of the application's theming services.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.Threading">
            <summary>
              Gets the threading tasks of the application.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.IUIApplicationSimple.WindowBranding">
            <summary>
              Branding parameters for product windows and controls.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.IUIApplicationSimpleEx.OpenUri(JetBrains.Application.UI.Components.IUIApplicationSimple,System.String)">
            <summary>
              Opens the specific URI in the default Web browser.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.NonInteractiveMessageBoxHandler">
            <summary>
            When starting up a non-interactive environment, installs the non-interactive msgbox handler. Overridden in the interactive environments.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.NonInteractiveMessageBoxHandler.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Util.ILogger,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Components.SuspendFileSystemTrackerWhenInactive">
            <summary>
            Suspends processing changes when the application does not have keyboard input focus.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Theming.ColorTheme.GetColorBlended(JetBrains.Application.UI.Components.Theming.ThemeColor,JetBrains.Application.UI.Components.Theming.ThemeColor,System.Double)">
            <summary>
            Gets bended color with factor 'alpha'
            </summary>
            <param name="source">Color A</param>
            <param name="destination">Color B</param>
            <param name="alpha">Blend proportion</param>
            <returns>Color</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Theming.DummyThemingAggregator.CreateDummyThemingInstance(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Threading.IThreading,JetBrains.Util.ILogger,System.Reflection.Assembly[])">
            <summary>
            Creates a dummy theming instance for out-of-shell uses of the interface. Do not use in the real application, inject yourself the real interface from the component container instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Theming.IThemeManagerEx.IsDarkTheme(JetBrains.Application.UI.Components.Theming.IColorThemeManager,JetBrains.Lifetimes.Lifetime)">
            <summary>
            <para>Gets a live property which determines whether the current visual studio theme operates with dark colors.</para>
            <para>Note that this considers generic UI colors rather than text editor colors. In VS versions below 11, these might disagree.</para>
            <para>The value depends on the actual UI colors lightness rather than the theme name in VS, which will fit with any possible theme customizations: our UI choices should be driven by actual colors rather than by any theme names.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Components.Theming.IThemeManagerEx.IsMonochromeTheme(JetBrains.Application.UI.Components.Theming.IColorThemeManager,JetBrains.Lifetimes.Lifetime)">
            <summary>
              <para>Gets a live property which determines whether the current visual studio theme is monochrome.</para>
              <para>Note that this considers generic UI colors rather than text editor colors. In VS versions below 11, these might disagree.</para>
              <para>The value depends on the actual UI colors saturation rather than the theme name in VS, which will fit with any possible theme customizations: our UI choices should be driven by actual colors rather than by any theme names.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.Theming.ITheming">
            <summary>
              <para>The common application theming interface.</para>
              <para>Aggregates the <see cref="T:JetBrains.Application.Icons.IThemedIconManager" />, <see cref="T:JetBrains.Application.UI.Components.Theming.IColorThemeManager" />, <see cref="T:JetBrains.Application.UI.Components.Theming.IStatusBarColorsManager" />, <see cref="T:JetBrains.Application.UI.Components.Fonts.IFontsManager" /> interfaces.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.Theming.ThemeColor.EnvironmentBackground">
            <summary>
            Main environment background color. Usually overlaid by the document tabs.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Application.UI.Components.Theming.ThemedGradientBrush" -->
        <member name="M:JetBrains.Application.UI.Components.Theming.ThemeManager.InitializeTheming(System.Type)">
            <summary>
            Call this method to initialize theme from constructor.
            Provide enclosing type name to initialize it only once and after all inheritors are initialized
            </summary>
            <param name="from"></param>
        </member>
        <member name="T:JetBrains.Application.UI.Components.Theming.ThemingAggregator">
            <summary>
            Aggregates all of the theming components to expose them with the common interface.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.Theming.ThemingAggregator.ColorThemeManager">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Components.Theming.ThemingAggregator.JetBrains#Application#UI#Components#Fonts#IFontsManager#LookupFont">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.IsEnabled">
            <summary>
            Whether all logging is enabled.
            <c>False</c> by default. Turning off should suspend as much logging as possible.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.IsLoggingAvalon">
            <summary>
            Whether to log changes to the <see cref="P:System.Windows.Input.Keyboard.FocusedElement" /> (might be lots of minor changes logged when focus is being assigned to a new scope). Also adds Avalon elements to the full-chain logging.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.UseAutomationForAvalon">
            <summary>
            Whether to use UI automation to get information on Avalon elements.
            When enabled it forces AutomationPeer creation, which could lead to performance penalties and memory leaks.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.IsLoggingFullChain">
            <summary>
            If for each focused window its chain of parents is traversed to get the full path in the logs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.IsLoggingStackTraces">
            <summary>
            Whether to capture a stack trace for each focus change event.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.FocusChanged">
            <summary>
            Fired when focus is changed. Forces collecting focused window info.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.Focused">
            <summary>
            The information on the last focused window.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.FocusRecord.ScreenBounds">
            <summary>
            Total screen bounds (<see cref="F:JetBrains.Application.UI.Components.TrackFocus.WindowRecord.BoundsOnScreen" /> are within these limits unless the window is larger than screen).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.WindowRecord.Id">
            <summary>
            Unique identity of the control. HWND is used, if available. Otherwise, the managed object ID.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.WindowRecord.IsTopLevel">
            <summary>
            Whether this a top-level window. Currently, only a HWND-based window can be a toplevel one.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.WindowRecord.Name">
            <summary>
            Name of a WinForms control, or Name of the Avalon control, or avalon's control AutomationID, if any.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.WindowRecord.Pid">
            <summary>
            Pid of the process that owns this window.
            0 for Avalon windows and fake records.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.WindowRecord.ProcessName">
            <summary>
            The name of the process that owns this window.
            Could be null even if pid is not 0.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Components.TrackFocus.WindowRecord.BoundsOnScreen">
            <summary>
            Bounds on screen, <c>Null</c> if not visible.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Components.UIApplication.UIApplication">
            <summary>
              Tracks and exposes various aspects of the UI Application functions and state.
            </summary>
            <remarks>
              <para>Even if those components are excluded from the application, provides the fallback implementation.</para>
              <para>
                For controls which should be able to run without a Shell, use <see cref="T:JetBrains.Application.UI.Components.IUIApplicationSimple" />.
              </para>
            </remarks>
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplication.JetBrains#Application#UI#Components#IUIApplication#ApplicationModalState">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplication.JetBrains#Application#UI#Components#IUIApplication#FileDialogs">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplication.JetBrains#Application#UI#Components#IUIApplication#MainWindowPopupWindowContext">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplication.JetBrains#Application#UI#Components#IUIApplication#Settings">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplication.JetBrains#Application#UI#Components#IUIApplication#ShellLocks">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplication.JetBrains#Application#UI#Components#IUIApplication#WindowsHookManager">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple">
            <summary>
              <para>
                The simplified UI Application class. This is a subset of <see cref="T:JetBrains.Application.UI.Components.UIApplication.UIApplication" /> which can easily be run without a Shell.
              </para>
              <para>You should use the simple interface in UI controls which should be able to run in shell-less mode.</para>
            </summary>
            <remarks>
              <para>Even if those components are excluded from the application, provides the fallback implementation.</para>
              <para>
                For controls which should be able to run without a Shell, use <see cref="T:JetBrains.Application.UI.Components.IUIApplicationSimple" />.
              </para>
            </remarks>
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple.Idle">
            <summary>
              Fires periodically during the application idle time.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple.IsApplicationActive">
            <summary>
              Gets whether the application currently has user focus. Readonly.
              When <c>False</c>, you should generally cease any user-oriented activity.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple.MainWindow">
            <summary>
              Gets a handle to the application main window that could be used for owning dialog boxes, and such.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple.Theming">
            <summary>
              Exposes all of the application's theming services.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Components.UIApplication.UIApplicationSimple.Threading">
            <summary>
              Gets the threading tasks of the application.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.BulbMenu.AnchorsTrieNode.ChildrenItems">
            <summary>BulbMenuItem or unsorted AnchorsTrieNode</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.BulbMenu.Anchors.AnchorComparer.System#Collections#Generic#IComparer{JetBrains#Application#UI#Controls#BulbMenu#Anchors#IAnchor}#Compare(JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor,JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor">
            <summary>
            1. Anchors are used to shape bulb actions menu, by introducing groups of actions and nested menus in UI.
            2. Anchors are hierarchical and this hierarchy strictly enforces order of actions with different anchors.
            3. Anchors with the same <see cref="P:JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor.ParentAnchor"/> are sorted via the value of <see cref="P:JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor.Position"/> property.
               Child actions of anchors are sorted inside in a way that infrastructure defines (for examples, context actions
               are sorted via 'Priority' property of [ContextAction] attribute and quick fixes are sorted in the order
               of quick fix registration).
            4. If anchor has <see cref="P:JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor.Position"/> property equal to <c>null</c>, this means the anchor is "unsorted" - it
               will be placed alongside menu items of child actions in the order actions infrastructure defines (see 3).
            5. Anchors have reference equality, so you have to use the same instance of anchor for all of desired child actions.
            6. All anchor implementations are static and immutable, so you can store them in static data without worry.
            7. You don't need anchors to control the single action placement, most of the time [ContextAction(Priority=...)]
               or quick fixes registration tweaks is enough to solve your issue.
            8. Anchor <see cref="P:JetBrains.Application.UI.Controls.BulbMenu.Anchors.IAnchor.Position"/> has nothing to do with actions positions within this anchor.
            </summary>
            <remarks>
            Anchor types:
            * <see cref="T:JetBrains.Application.UI.Controls.BulbMenu.Anchors.RootAnchor"/> - just a logical root of all child actions and anchors;
            * <see cref="T:JetBrains.Application.UI.Controls.BulbMenu.Anchors.SubmenuAnchor"/> - the most basic anchor kind to introduce nesting of actions.
              It is represented as a menu item with all the child actions (including actions of child anchors);
              Can have static presentation or take presentation from it's first child menu item.
              Can be executable or not, pass <see cref="T:JetBrains.Application.UI.Controls.BulbMenu.Anchors.SubmenuBehavior"/> to control behavior;
            * <see cref="T:JetBrains.Application.UI.Controls.BulbMenu.Anchors.InvisibleAnchor"/> - anchor that is not introducing nested menu, but simply
              groups actions together in menu, introduced by parent anchor. This group may be separated
              from the menu items of previous anchor of the same parent via special flag.
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.BulbMenu.IRichTextBulbAction">
            <summary>
            This interface should be implemented by bulb items that want to display
            <see cref="P:JetBrains.Application.UI.Controls.BulbMenu.IRichTextBulbAction.RichText"/> as opposed to plain text.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.BulbMenu.IRichTextBulbAction.RichText">
            <summary>
            Text to be displayed on the bulb item.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.CheckBoxAutomation">
            <summary>
            Automation object which represents a check box control in the UI.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Dock.Layout.Area.DockTargetArea">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.Common.IDockLayoutRectangleElement.PlacementOverlay">
            <summary>
            Currently displayed overlay, indicating where dragged item can be placed
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.Common.IDockLayoutRectangleElement.HighlightedOverlay">
            <summary>
            Currently highlighted overlay, indicating where dragged item will be placed
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Dock.Layout.Common.LayoutExtensions.GetAutoHideLocation(JetBrains.Application.UI.Controls.Dock.Layout.DockFrameContainer)">
            <summary>
            Determines current container position relative to document area. Returns None if container is inside document area
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockContainer.IsDocumentArea">
            <summary>
            Document area. Its frames cannot be auto-hidden and frame container has document style instead tool style.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockContainer.ContainsDocumentArea">
            <summary>
            True if container or one of nested containers is document area
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockContainer.ShouldFill">
            <summary>
            Determines if container should be scaled with window or occupy fixed amount of container size
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame">
            <summary>
            Descriptor for panel that contains content directly
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.Id">
            <summary>
            Unique id
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.IsActive">
            <summary>
            True if frame is currently selected. There may be one active frame per container
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.IsLastActive">
            <summary>
            True if frame is currently selected. There may be one last active frame per layout
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.IsVisible">
            <summary>
            Closing tool window should hide it to preserve layout
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.Title">
            <summary>
            Header title
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.FileName">
            <summary>
            Document's file name
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.Container">
            <summary>
            Container where frame belongs to. Dragging frame will cause re-assigning with new value. Setting null means closing
            this frame and removing it from layout model.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.Width">
            <summary>
            Width for initializing new container in case frame is moved to new container.
            WARNING! Not same units as in DockTargetArea
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.Height">
            <summary>
            Height for initializing new container in case frame is moved to new container
            WARNING! Not same units as in DockTargetArea
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Dock.Layout.DockFrame.HideOrCloseDocument">
            <summary>
            If frame is document removes it from layout, otherwise hides it
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Dock.Layout.DockFrameContainer">
            <summary>
            Contains one or multiple frames. Displayed as tab control in case multiple frames
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Dock.Layout.DockFrameContainer.HideAndCloseDocuments">
            <summary>
            Hides tool frames and removes document frames. If all frames were document this container will also be deleted
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Dock.Layout.DockSplitContainer">
            <summary>
            Contains tool frame containers or other tool split containers  
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Dock.Layout.DockWindow.HideAndCloseDocuments">
            <summary>
            Closes document frames and hides tool frames. If window contained only documents then it is closed, otherwise it is hidden.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ChooseFileType.Equals(JetBrains.Application.UI.Controls.FileSystem.ChooseFileType)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ChooseFileType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ChooseFileType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs">
            <summary>
            The base non-interactive implementation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForFolder(System.String,JetBrains.Util.FileSystemPath,JetBrains.Application.UI.Controls.FileSystem.IWindowOwner)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForFoldersWithMultiselect(System.String,JetBrains.Util.FileSystemPath,JetBrains.Application.UI.Controls.FileSystem.IWindowOwner)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForOpenFile(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],JetBrains.Util.FileSystemPath)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForOpenMultipleFiles(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],JetBrains.Util.FileSystemPath)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.DummyCommonFileDialogs.JetBrains#Application#UI#Controls#FileSystem#ICommonFileDialogs#BrowseForSaveFile(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],JetBrains.Util.FileSystemPath,System.String)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Controls.FileSystem.DummyCommonLocateFile">
            <summary>
            The base non-interactive implementation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.DummyCommonLocateFile.LocateActionName">
            <inheritdoc/>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.DummyCommonLocateFile.LocateFile(JetBrains.Util.FileSystemPath)">
            <inheritdoc/>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs">
            <summary>
            Implements the Common File Dialogs for opening/saving files and opening folders with graceful defaults for title and filters and with proper interactivity switches, so that you're OK to call them from non-interactive code.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForFolder(System.String,JetBrains.Util.FileSystemPath,JetBrains.Application.UI.Controls.FileSystem.IWindowOwner)">
            <summary>
            Shows folder picker modal dialog with standard or custom settings
            </summary>
            <param name="title">title of dialog window</param>
            <param name="initialFolder"></param>
            <param name="ownerAvalon">owner of the dialog window</param>
            <param name="ownerWin32">owner of the dialog window</param>
            <returns>picked folder path (or null, if cancel button has been pressed)</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenFile(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],JetBrains.Util.FileSystemPath)">
            <summary>
            Asks user to browse for opening a file.
            </summary>
            <param name="windowtitle">Title (full, with "Open" text), or default will be used.</param>
            <param name="filetypes">File types for the file types combobox.</param>
            <param name="initialDirectory"></param>
            <returns>NULL if failed to choose a valid path. If non-NULL, then a valid abs path.</returns>
            <remarks>See extension methods for file-reading helpers.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForOpenMultipleFiles(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],JetBrains.Util.FileSystemPath)">
            <summary>
            Asks user to browse for opening a file or files.
            </summary>
            <param name="windowtitle">Title (full, with "Open" text), or default will be used.</param>
            <param name="filetypes">File types for the file types combobox.</param>
            <returns>NULL if user-canceled or none of the paths were valid, otherwise those of the paths which were valid. If non-NULL, then a valid abs path.</returns>
            <remarks>See extension methods for file-reading helpers.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs.BrowseForSaveFile(System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            Asks user to browse for saving a file.
            </summary>
            <param name="windowtitle">Title (full, with "Save" text), or default will be used.</param>
            <param name="filetypes">File types for the file types combobox.</param>
            <param name="initialDirectory"></param>
            <param name="fileName">String containing the file name without extension selected in the file dialog box.</param>
            <returns>NULL if failed to choose a valid path. If non-NULL, then a valid abs path.</returns>
            <remarks>See extension methods for file-writing helpers.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogsEx.BrowseForOpenFileStreams(JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs,System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],JetBrains.Application.UI.Controls.FileSystem.AllowMultipleFiles,System.Action{System.IO.Stream})">
            <summary>
            Asks user to browse for opening a file or files.
            </summary>
            <param name="this"></param>
            <param name="windowtitle">Title (full, with "Open" text), or default will be used.</param>
            <param name="filetypes">File types for the file types combobox.</param>
            <param name="allowmultiple">Whether to allow user select multiple files, in which case your action would be called once per each file.</param>
            <param name="reader"></param>
            <returns>NULL if user-canceled or none of the paths were valid, otherwise those of the paths which were valid. If non-NULL, then a valid abs path.</returns>
            <remarks>See extension methods for file-reading helpers.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogsEx.BrowseForSaveFileStream(JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs,System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],System.Action{System.IO.Stream})">
            <summary>
            Asks user to browse for saving a file.
            </summary>
            <param name="this"></param>
            <param name="title">Title (full, with "Save" text), or default will be used.</param>
            <param name="filetypes">File types for the file types combobox.</param>
            <param name="writer"></param>
            <returns>NULL if failed to choose a valid path. If non-NULL, then a valid abs path.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogsEx.BrowseForSaveFileStream``1(JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs,System.String,JetBrains.Application.UI.Controls.FileSystem.ChooseFileType[],System.Func{System.IO.Stream,``0})">
            <summary>
            Asks user to browse for saving a file.
            </summary>
            <param name="this"></param>
            <param name="title">Title (full, with "Save" text), or default will be used.</param>
            <param name="filetypes">File types for the file types combobox.</param>
            <param name="writer"></param>
            <returns>NULL if failed to choose a valid path. If non-NULL, then a valid abs path.</returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.FileSystem.ICommonLocateFile">
            <summary>
            Common interface to locate file in file explorer on current OS.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonLocateFile.LocateActionName">
            <summary>
            Returns name of the action for current operating system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.FileSystem.ICommonLocateFile.LocateFile(JetBrains.Util.FileSystemPath)">
            <summary>
            Opens file explorer and selects(if possible on given OS) passed file
            </summary>
            <param name="file"></param>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.GotoByName.BulbMenuComponent.IconMargin">
            <summary>
            Additional icon margin to align it with bulb menu toolbar, in device independent pixels.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.BulbMenuComponent.GetIconPadding">
            <summary>
            Total padding around bulb menu icon to align the bulb menu with gutter margin or bulb indicator icons, in device independent pixels.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController">
            <summary>
            Controls a <see cref="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel"/>, implements the basic services to support async calculation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.IsComplete">
            <summary>
            Gets or sets whether the data for the controller to produce the items from is complete.
            Affects the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsReady"/> property that is <c>True</c> only when <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.IsComplete"/> and no async action is running.
            You cannot set the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsReady"/> directly, alter this property value instead.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.IsNotRunningAsyncAction">
            <summary>
            Reflects the internal async state.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Creates the controller and attaches to the model.
            The controller lifetime is also synchronized to the model lifetime. That is, when the model is disposed of, the controller is also disposed of (but not the other way).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.EtcItemKey">
            <summary>
            Key for the “More” item in the menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.FuncEtcItemExecute">
            <summary>
            If the action is available, then the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.EtcItemKey"/> that's added to the end of the list if there're too many items to show is enabled and can be executed. Also, a toolbar button is present to execute this same action.
            Executes on the primary thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.ItemsGottenDirty">
            <summary>
            Fires when the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.Items"/> collection is considered dirty and should be recalculated by the implementing model.
            Listens for changes in all the affecting properties, groups them, and then fires this aggregate signal.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.myAsyncState">
            <summary>
            Current state of controller.
            
            You should change state only on main thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.myUpdateEntrancy">
            <summary>
            Used to assert single thread usage of UpdateItems.
            
            Derives of GotoByNameController should not check single thread usage of UpdateItems.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.Model">
            <summary>
            The data part of the thing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.CreateEtcItem">
            <summary>
            The “more…” item at the end of the truncated list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.BeforeUpdateItems">
            <summary>
            When the items get dirty (<see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.ItemsGottenDirty"/>), this function is called on the UI thread right before the <see cref="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem},JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})"/> thing.
            The base implementation clears the collection.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.ExecuteItem(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,JetBrains.DataFlow.ISignal{System.Boolean})">
            <summary>
            Called when an item is to be executed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem},JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})">
            <summary>
            When the items get dirty (<see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.ItemsGottenDirty"/>), this function is called on the secondary thread.
            You can use the static methods of <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> to check if the calculation results are not needed anymore and it should be canceled.
            </summary>
            <param name="filterString">The filtering string against which the items list should be produced.</param>
            <param name="itemsConsumer">A function you can use to add items to the output collection in a thread-safe manner. The function checks for the items limit and returns whether more items can be added.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.InitDefaultAsyncAction">
            <summary>
            Starts watching for the model's getting dirty.
            Contains the code for spawning the async recalculation of the items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncRun(System.String,JetBrains.Util.Threading.SynchronizedLifetime,JetBrains.Threading.GroupingEvent,System.Action@)">
            <summary>
            Run async items provider on background thread.
            After complete you should manually call updateModel action on main thread to commit remaining elements to jpm.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.InternalExecuteItem(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Relays the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IncomingExecuteItem"/> to the <see cref="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.ExecuteItem(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,JetBrains.DataFlow.ISignal{System.Boolean})"/> method, filtering out the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.EtcItemKey"/> execution.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AddItemsBehavior">
            <summary>
            Defines what the <c>FAddItems</c> parameter of the <see cref="M:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem},JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})"/> function should do.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AddItemsBehavior.Append">
            <summary>
            Appends a new item or items to the existing items list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AddItemsBehavior.Replace">
            <summary>
            Replaces all the items in the list with the new ones.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AddItemsBehavior.RemoveLast">
            <summary>
            Removes the last item in the list.
            </summary>
            <remarks>
            If you pass this behaviour to an itemsConsumer, it ignores items passed with it.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the list was empty right before using this behaviour.</exception>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Idle">
            <summary>
            There are no async operations running. If needed, one could be started right away, and switch to <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.WaitForCommit"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.WaitForCommit">
            <summary>
            An async operation is sceduled and waiting before CommitAllDocumenst requirement will be satisfied.
            On interrupt should go to <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Idle"/>
            On CommitAllDocuments should start async operation and go to <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Running"/>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Running">
            <summary>
            An async operation is currently running. When it completes, we'd go <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Idle"/>.
            If the model gets dirty before the operation completes, we set the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Cancelling"/> state (so that FIsCancelled starts returning <c>True</c> for the async operation), and wait for the state to become <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Idle"/> before running a new operation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Cancelling">
            <summary>
            The async operation were running when the model state was invalidated. This state holds until the async operation terminates, after which a new one is spawned automatically.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameController.AsyncState.Disposed">
            <summary>
            When the user dismisses the GotoByName UI, the pending async operation should be cancelled. This is the terminal state.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameDataConstants.SearchTextData.Selection">
            <summary>
            Selection &amp; caret position, in the start&amp;length form (<c>Null</c> if none).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel">
            <summary>
            The core part of GotoByName.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.CaptionText">
            <summary>
            Menu title text.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.CheckBoxText">
            <summary>
            Gets the text on the checkbox (which is only visible when <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsCheckBoxCheckerVisible"/> is true).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.LabelText">
            <summary>
            Gets the text on the the label (which is only visible when <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsCheckBoxCheckerVisible"/> is false).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.FilterText">
            <summary>
            The current filter, against which the model produces the list of filtered menu items, <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.Items"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.SelectedIndex">
            <summary>
            Current index of the selected item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.AutoselectFirstItem">
            <summary>
            Switch off\on autoselectFirstItem function.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IncomingExecuteItem">
            <summary>
            This signal is fired on the model by the consumer when a specific menu item should be executed by the model's controller.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsCheckBoxChecked">
            <summary>
            Gets or sets whether the checkbox is currently checked.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsCheckBoxCheckerVisible">
            <summary>
            Gets whether the checker on the checkbox should be visible, or not.
            If <c>False</c>, only checkbox text should be visible.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsCheckBoxVisible">
            <summary>
            Gets whether the check-box (or just its text, if not <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsCheckBoxCheckerVisible"/>) is visible in the Goto-By-Name UI.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.IsReady">
            <summary>
            Whether the model is ready, ie the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.Items"/> list is complete against the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.FilterText"/>.
            If <c>False</c>, then the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.Items"/> list is still being calculated in the background.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.Items">
            <summary>
            The current set of menu items that pass the <see cref="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.FilterText"/>.
            Must be modified on the UI thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.ToolbarButtons">
            <summary>
            Toolbar buttons for the menu's title.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.CloseOnExecute">
            <summary>
            Whether to close the menu automatically whenever an item (menu item or toolbar button) is executed. The default is <c>True</c>.
            If <c>False</c>, the menu will not close when you execute an item, unless you spawn some control that steals focus from the menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.CueBannerText">
            <summary>
            Sets the textual cue, or tip, that is displayed by the edit control to prompt the user for information.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.GotoByName.GotoByNameModel.CueBannerAlignLeft">
            <summary>
            Sets the location for the textual cue either left (true) or right (false, default)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.IsCancellable">
            <summary>
            If user can cancel a task, see <see cref="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Cancel"/>>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Cancel">
            <summary>
            Fired when a user cancels a task (by clicking on status bar in ReSharper and accepting "Stop task" confirmation or by clicking X icon on status bar in Rider)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Lifetime">
            <summary>
            Lifetime of a progress indicator. Indicator would be removed when lifetime is terminated.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Title">
            <summary>
            Shown in Rider in a tooltip and on maximized "Background tasks" dialog above a progress bar. Shown in ReSharper in process cancellation confirmation prompt.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Header">
            <summary>
            Shown directly in status bar
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Description">
            <summary>
            Shown in Rider on maximized "Background tasks" dialog under a progress bar. Shown in ReSharper in a tooltip.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.ProgressFraction">
            <summary>
            The current position of the progress, in the [0..1] range, inclusive 
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Icon">
            <summary>
            Shown in ReSharper in status bar before header. Would be ignored in Rider.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Click">
            <summary>
            Fired in ReSharper when a user clicks on icon/text on a status bar. Would be ignored in Rider.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IBackgroundProgressIndicatorManager.CreateIndicator(JetBrains.Lifetimes.Lifetime,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a background progress indicator. Must be called from a main thread
            </summary>
            <param name="lifetime">Lifetime of a progress indicator. Indicator would be removed when lifetime is terminated.</param>
            <param name="isCancellable">If user can cancel a task <see cref="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.Cancel"/></param>
            <param name="hasProgress">If a task tracks its progress by changing <see cref="P:JetBrains.Application.UI.Controls.IBackgroundProgressIndicator.ProgressFraction"/></param>
            <param name="title">Shown in Rider in a tooltip and on maximized "Background tasks" dialog above a progress bar. Shown in ReSharper in process cancellation confirmation prompt.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.ICheckBoxAutomation">
            <summary>
            Automation object which represents a check box control in the UI.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.ShouldBeHidden">
            <summary>
            Sets whether the control should be made invisible (by default, the value is set on the control initially, or inherited from the parents).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.IsVisible">
            <summary>
            Gets whether the control is currently visible, which includes the value set on the control explicitly, and value inherited from the parent, and <see cref="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.ShouldBeHidden"/> value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.ShouldBeDisabled">
            <summary>
            Sets whether the control should be made disabled (by default, the value is set on the control initially, or inherited from the parents).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.IsEnabled">
            <summary>
            Gets whether the control is currently enabled, which includes the value set on the control explicitly, and value inherited from the parent, and <see cref="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.ShouldBeHidden"/> value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.IsCheckedLogically">
            <summary>
            Gets or sets whether the checkbox is in the checked state (even if it might be appearing as unchecked onscreen in case it's disabled).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxAutomation.IsAppearingChecked">
            <summary>
            Gets whether the checkbox presentation onscreen has the check.
            When a checked checkbox gets disabled, its check disappears onscreen, even though the state remains the same.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeHidden">
            <summary>
            Sets whether the control should be made invisible (by default, the value is set on the control initially, or inherited from the parents).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsVisible">
            <summary>
            Gets whether the control is currently visible, which includes the value set on the control explicitly, and value inherited from the parent, and <see cref="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeHidden"/> value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeDisabled">
            <summary>
            Sets whether the control should be made disabled (by default, the value is set on the control initially, or inherited from the parents).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsEnabled">
            <summary>
            Gets whether the control is currently enabled, which includes the value set on the control explicitly, and value inherited from the parent, and <see cref="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.ShouldBeHidden"/> value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsCheckedLogically">
            <summary>
            Gets or sets whether the checkbox is in the checked state (even if it might be appearing as unchecked onscreen in case it's disabled).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.ICheckBoxDisabledNoCheckViewModel.IsAppearingChecked">
            <summary>
            Gets whether the checkbox presentation onscreen has the check.
            When a checked checkbox gets disabled, its check disappears onscreen, even though the state remains the same.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.IconAndTooltipAutomation">
            <summary>
            A Themed Icon that has a tooltip on hover.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IconAndTooltipAutomation.Create``1(JetBrains.UI.RichText.RichText)">
            <summary>
            Create an icon by its icon class.
            </summary>
            <param name="tooltip"></param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.IConstrainableControl">
            <summary>
            An interface that extends the standard control functionality by allowing it to negotiate for its size and focus on activation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IConstrainableControl.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IConstrainableControl.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IConstrainableControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.Application.UI.Controls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IConstrainableControl.SetLayout(JetBrains.Application.UI.PopupLayout.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.IHaveRenderParams">
            <summary>
            The property for control views, especially <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/>-based, which use render params for setting up their render.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IHaveRenderParams.RenderParams">
            <summary>
            <para>Gets or sets the rendering aspect.</para>
            <para>Must not be <c>Null</c>.</para>
            <para>A live property, so that the control could fire the layout recalculation events on its change.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.IItemPainter`1">
            <summary>
            Interface for creating custom painters
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IItemPainter`1.IsHandled(`0)">
            <summary>
            Checks if a given Item can be handled by the painter
            </summary>
            <param name="item">The Item to check</param>
            <returns><c>true</c> if the Item can be handled, <c>false</c> it cannot.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IItemPainter`1.GetSize(`0,JetBrains.UI.IGraphicsContainer)">
            <summary>
            Returns size of an item
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IItemPainter`1.Draw(`0,JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle,JetBrains.Application.UI.Controls.DrawMode,System.Boolean)">
            <summary>
            Draws a given Item in specified rectangle
            </summary>
            <remarks>
            If the Item cannot be handled, the method should do nothing
            </remarks>
            <param name="item">The Item to draw</param>
            <param name="gc">Graphics to draw in</param>
            <param name="rect">Bounding rectangle to use</param>
            <param name="drawMode"></param>
            <param name="hovered"></param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Infrastructure.ISubscriptionTracker">
            <summary>
            Can be implemented by data provider to perform additional action on expanded/collapsed nodes
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Infrastructure.ListCountInfo">
            <summary>
            Optimization to avoid collection allocations for INotifyCollectionChanged subscribers that use only Count from args and not data.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.IWindowlessControl">
            <summary>
            An interface for the objects that implement a part of the control.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IWindowlessControl.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.IWindowlessControl.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IWindowlessControl.Paint(JetBrains.UI.IGraphicsContainer)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the most recent call to the <see cref="M:JetBrains.Application.UI.Controls.IWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)"/> method.
            </summary>
            <param name="gc"></param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.IWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.Application.UI.Controls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetLoaderAnimationAutomation">
            <summary>
            Automation element for the JetBrains loader animation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.ApproveItemEventArgs">
            <summary>
            <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu"/> event arguments that reference an item and request for approval of some action on that item.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ApproveItemEventArgs.Approved">
            <summary>
            Gets or sets whether the handler approves the event and allows the action meant by it to occur.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.DescribeItemEventArgs">
            <summary>
            Arguments for the <code>JetPopupMenu.DescribeItemEvent</code> event.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.DescribeItemEventArgs.Descriptor">
            <summary>
            Gets the descriptor to be filled by the event sink.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner">
            <summary>
            On-the-fly adorning of menu items presentation, like for highlighting search hits. Experimental API addition.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IJetPopupMenuItemAdorner.AdornItemText(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,JetBrains.UI.RichText.RichText@,JetBrains.UI.RichText.RichText@,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet)">
            <summary>
            Never modify the original text object. Either return it back unchanged, or create your own richtext.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.IncomingDelete">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be deleted.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.IncomingExecute">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be executed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.IncomingExpand">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.InputItems">
            <summary>
            Input items for the filter, as coming from the previous filter in the stack.
            The filter must perform the filtering operation on them and apply the changes to the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.OutputItems"/> collection.
            The filter must not modify its <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.InputItems"/>, it's changed externally.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.IsBusy">
            <summary>
            Gets whether the filter is currently busy populating the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.OutputItems"/> collection.
            The "not ready" state for the async population of the items collection.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.OutputItems">
            <summary>
            Output items of the filter. This collection is changed by the filter only, based on the changes to the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.InputItems"/> collection and filter's own operation.
            The <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.OutputItems"/> result goes either to the input of the next filter, or to the final reault of the stack.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuColumnId">
            <summary>
            Column IDs for the menu item columns.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuColumnId.Icon">
            <summary>
            A column that holds the item icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuColumnId.Label">
            <summary>
            A column that renders the item's text label and shortcut key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuColumnId.MAX">
            <summary>
            The total number of columns defined.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc">
            <summary>
            Implements the <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu"/> overall runtime logic.
            Presentation is handled by <c>JetPopupMenuView</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ArrowKeysWrapAroundEnds">
            <summary>
            Whether selection should wrap around ends of the items list in the menu.
            <c>True</c> by default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.AutoselectFirstItem">
            <summary>
            Whether to select the first menu item when items appear in the menu. <c>True</c> is the default behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.BeforeExecuteAction">
            <summary>
            Fires before an action is executed on a menu item or a toolbar button.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.CurrentItems">
            <summary>
            The list of items currently displayed in the menu, as produced by the filters.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ItemChanged">
            <summary>
            An item has changed.
            This event is fired for the changes in the item state (eg selection). Note: not valid if the whole collection changes.
            You can fire it externally if you change the item presentation (but not the size).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ItemsContainer">
            <summary>
            Stores, filters down and providers the menu items for display in this menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.KeyboardAcceleration">
            <summary>
            Gets or sets the way keyboard acceleration works for the list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.LastSelectedItem">
            <summary>
            Gets the most recent non-<c>Null</c> <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.SelectedItem">selected item wrapper object</see>.
            <c>Null</c> is a legitimate value meaning there weren't ever any selection, or the MRU selected item has been removed from the items list.
            If not <c>Null</c>, must belong to the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.CurrentItems"/> collection.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.Mnemonics">
            <summary>
            Handles the mnemonic assignment.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.QuickSearch">
            <summary>
            Manages the incremental QuickSearch process.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item wihtin the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.CurrentItems"/> list.
            The return value is guaranteed to be either a valid items array index, or the special <c>-1</c> value in case there is no selection.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.SelectedItem">
            <summary>
            Gets the selected item wrapper object.
            <c>Null</c> is a legitimate value meaning there's no selection.
            If not <c>Null</c>, must belong to the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.CurrentItems"/> collection.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ToolbarButtons">
            <summary>
            Toolbar buttons for the menu's title.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ApplyCurrentPassFilter(System.Collections.Generic.ICollection{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem})">
            <summary>
            Applies a current-items-pass filter to the list of menu items, so that only those items are left on output that belong to the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.CurrentItems"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.DeleteSelectedItem">
            <summary>
            Removes the selected item from the list, if such an operation is supported by the provider.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.DumpItemsToString">
            <summary>
            Dumps all the menu items.
            Calls <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.DumpItemsToXaml(System.Xml.XmlWriter)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.DumpItemsToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps all the menu items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ExecuteMnemonic(System.Char,System.Boolean@)">
            <summary>
            Tries to execute a mnemonic.
            If there's exactly one item registered for this mnemonic, executes the item.
            If there're no items, does nothing.
            If there're multiple conflicting items, selects them in turn, but does not execute.
            </summary>
            <param name="ch">The character to be tested, either a v-key or a char representation.</param>  // TODO: switch to using the accelerator tables
            <returns>Whether an item was executed for this mnemonic.</returns>
            <param name="bMnemonicWasAccepted">If we've refused to execute (returned <c>False</c>), tells whether it's due to the mnemonic not found (<c>False</c>) or duplicate mnemonic (<c>True</c>).</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ExecuteSelectedItem">
            <summary>
            Performs the action over the selected item, which should have enabled state for the action to succeed.
            Returns whether the execution was performed.
            If there is no selection or the item is disabled, just returns <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ExpandSelectedItem">
            <summary>
            If the selected item has a sub-menu associated with it, opens that sub-menu and returns the success flag. Otherwise, returns <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.GetNextIndex(System.Int32,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.NextItemDir,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.EndBehavior,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.AllowedItems)">
            <summary>
            Gets the next/prev item based on the current index.
            Note: the new index is not guaranteed to differ from the original or to fall into the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.CurrentItems"/> valid indices (eg -1)!
            </summary>
            <param name="nOriginalIndex">Current index, may be <c>-1</c>. Won't fail on totally invalid numbers.</param>
            <returns>The next index, may be <c>-1</c> if <paramref name="endbehavior"/> is <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.EndBehavior.ReturnNothing"/> or there are no [suitable] items.</returns>
            <param name="direction">Whether to go towards the end or beginning.</param>
            <param name="endbehavior">Whether to wrap over the end of the items list.</param>
            <param name="alloweditems">Whether iteration is allowed over all the items, or enabled ones only.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.SelectNextItem(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.NextItemDir)">
            <summary>
            Selects the next item in either direction.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.InitLogging(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Sinks events for logging.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.AllowedItems">
            <summary>
            Defines which items could be processed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.AllowedItems.All">
            <summary>
            All the items are OK.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.AllowedItems.ItemsWithActionsOnly">
            <summary>
            Disabled items should be ignored. Returns items which can be executed or expanded (or both).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.EndBehavior">
            <summary>
            When requesting the next item, defines the behavior at the end of the list, whether to wrap around or return a "no-selection" item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.EndBehavior.Stop">
            <summary>
            Can't go “next” beyond the last item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.EndBehavior.WrapAround">
            <summary>
            Goes to the item at the opposite end after the last item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.EndBehavior.ReturnNothing">
            <summary>
            Goes to “no selection” after the last item.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ItemIndexEventArgs">
            <summary>
            Event arguments that specify a menu item and its index in the current items collection for fast access in the view.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ItemIndexEventArgs.Index">
            <summary>
            Gets the index of the item that has changed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ItemIndexEventArgs.Item">
            <summary>
            Gets the item that has changed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.NextItemDir">
            <summary>
            When requesting the next item, defines the direction of the search.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem">
            <summary>
            Stores the item information and implements the basic behavior of the jet-popup-menu item.
            Is a logical part of <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc"/>, whose visual presentation is handled by IJetPopupMenuItemView-implementors, as directed by JetPopupMenuView.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myDisplayName">
            <summary>
            Text to be rendered in the list.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myIcon">
            <summary>
            The icon. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myKey">
            <summary>
            An external key to the item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myMnemonic">
            <summary>
            An uppercase character that is the item's mnemonic, or <c>Null</c>, if the item has no mnemonics assigned.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myShortcutText">
            <summary>
            Shortcut text, displayed to the right of the main item text.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myStyle">
            <summary>
            Style &amp; state of the item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myTailGlyph">
            <summary>
            Holds the tail glyph of the item, which is the rightmost icon that goes after the shortcut text.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.myTooltipText">
            <summary>
            Tooltip text for this item, or an empty string if there is no tools item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.#ctor(System.Object,JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor)">
            <summary>
            Creates a new item.
            </summary>
            <param name="key">External key of the item this class would represent.</param>
            <param name="descriptor">Describes the item data to make the item presentation out of it.</param>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.StubText">
            <summary>
            Gets the default text that should be used when item text is not available.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.DisplayName">
            <summary>
            Gets the text to be rendered in the item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.Icon">
            <summary>
            Gets the icon. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.IsEnabled">
            <summary>
            Gets whether this item is enabled.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.IsWithActions">
            <summary>
            Gets whether this item has available actions (to execute or expand).
            Effectively, <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.IsEnabled"/> or <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.IsExpandable"/> (which might be both true at the same time).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.IsExpandable">
            <summary>
            Gets whether this item can be xpanded.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.IsGroupHeader">
            <summary>
            Gets whether this item is a group header item.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.IsSeparator">
            <summary>
            Gets whether this item is a separator item.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.Key">
            <summary>
            Gets the external item key of type <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.ManualMnemonic">
            <summary>
            Gets the manually-assigned mnemonic, if any, as was specified in the producing <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.Mnemonic">
            <summary>
            Gets or sets an uppercase character that is the item's mnemonic, or <c>Null</c>, if the item has no mnemonics assigned.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.ShortcutText">
            <summary>
            Gets the shortcut text to be displayed to the right of the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.DisplayName"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.Style">
            <summary>
            Gets the style &amp; state of the item.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.TailGlyph">
            <summary>
            Holds the tail glyph of the item, which is the rightmost icon that goes after the shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.TooltipText">
            <summary>
            Gets the tooltip text for this item, or an empty string if there is no tools item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.Init(JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor)">
            <summary>
            Retrieves the item data via its provider, adjusts if needed, and stores a static copy.
            Calcs the sizes, but does not layout.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemNoAdornmentAdorner">
            <summary>
            An empty do-nothing adorner, passes text thru unpainted.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemNoAdornmentAdorner.AdornItemText(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,JetBrains.UI.RichText.RichText@,JetBrains.UI.RichText.RichText@,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet)">
            <summary>
            Never modify the original text object. Either return it back unchanged, or create your own richtext.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewHitTestResult">
            <summary>
            Menu item view hit test result.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewHitTestResult.Above">
            <summary>
            The y-coordinate is above the item. The x-coordinate is not checked.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewHitTestResult.Below">
            <summary>
            The y-coordinate is below the item. The x-coordinate is not checked.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewHitTestResult.Bulk">
            <summary>
            The bulk of the menu item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewHitTestResult.ActiveTailGlyph">
            <summary>
            The tail glyph that can be clicked (eg expandable items).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags">
            <summary>
            Affects the presentation of menu item views.
            Does not affect layout and measure.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags.IsSelected">
            <summary>
            The item is currently in the selected state.
            Does not affect item size or layout.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags.ExcludeUpperMargin">
            <summary>
            The item does not have the upper margin (spacer between the items).
            Required for first items in non-scrollable views and standalone presentations.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItemViewPresentationFlags.IsExpanded">
            <summary>
            The item has been exanded, and a popup menu has been opened under it. If the item is expand-or-execute, its tail glyph area should be displayed highlighted.
            Does not affect item size or layout.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsContainer">
            <summary>
            A composite container for the <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc"/> items.
            Aggregates several filters, organizes them into a stack, allows for incremental population or filtering of the items.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsContainer.myPushFilterLinks">
            <summary>
            Links between the filters' output-input collections, as well as the outer collections of the container itself.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter">
            <summary>
            The default implementation of a menu items filter.
            Although it can be inherited, most operations can be fulfilled by advising its events externally.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.#ctor(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Creates a filter and assigns it an ID.
            This ID will be used to produce the IDs of containing data points (lists and signals).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.Id">
            <summary>
            Gets the identifier of the filter.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.IncomingDelete">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be deleted.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.IncomingExecute">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be executed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.IncomingExpand">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.InputItems">
            <summary>
            Input items for the filter, as coming from the previous filter in the stack.
            The filter must perform the filtering operation on them and apply the changes to the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.OutputItems"/> collection.
            The filter must not modify its <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.InputItems"/>, it's changed externally.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.IsBusy">
            <summary>
            Gets whether the filter is currently busy populating the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.OutputItems"/> collection.
            The "not ready" state for the async population of the items collection.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MenuItemsFilter.OutputItems">
            <summary>
            Output items of the filter. This collection is changed by the filter only, based on the changes to the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.InputItems"/> collection and filter's own operation.
            The <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.IMenuItemsFilter.OutputItems"/> result goes either to the input of the next filter, or to the final reault of the stack.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore">
            <summary>
            Handles the mnemonic assignment and access.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.myMapMnemonicToItem">
            <summary>
            Item by mnemonic.
            No duplicate mnemonics are allowed. If a manually-assigned mnemonic conflicts with smth, it's refused.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.PreprocessMnemonic(System.Char)">
            <summary>
            The routine that adapts the mnemonic for case-insensitivity, and all.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.RemoveMnemonicMark(System.String)">
            <summary>
            Removes the mnemonic marks (a single ampersand) from the given text.
            Removes escaping from normal ampersands (from a double ampersand).
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.RemoveMnemonicMark(System.String,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Removes the mnemonic marks (a single ampersand) from the given text.
            Removes escaping from normal ampersands (from a double ampersand).
            </summary>
            <param name="escaped">The source escaped string.</param>
            <param name="stripped">The unescaped string (single ampersands stripped, double ampersands unescaped into single).</param>
            <param name="nEscapedMnemonicIndex">Index of the mnemonic character in the <paramref name="escaped"/>, or <c>-1</c> if no mnemonics were found in the string. Note: it's the char itself rather than its ampersand.</param>
            <param name="nStrippedMnemonicIndex">Index of the mnemonic character in the <paramref name="stripped"/>, or <c>-1</c> if no mnemonics were found in the string.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.GetItemsByMnemonic(System.Char)">
            <summary>
            Case-insensitively looks up a set of items by their mnemonic. Won't return <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.IsMnemonicUsed(System.Char)">
            <summary>
            Case-insensitively checks whether the given nmenonic is already used by one or more items in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.RegisterMnemonic(System.Char,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem)">
            <summary>
            Registers a mnemonic for an item.
            A duplicate mnemonic is an error.
            </summary>
            <returns>The preprocessed mnemonic value as it gets into the map, eg, uppercased.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.RegisterMnemonicAndHighlight(System.Char,JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,System.Int32)">
            <summary>
            Registers a mnemonic for an item.
            A duplicate mnemonic is an error.
            If the <paramref name="index"/> is not <c>-1</c>, the mnemonic is underlined in the menu item presentation.
            </summary>
            <returns>The preprocessed mnemonic value as it gets into the map, eg, uppercased.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.TryGetItemByMnemonic(System.Char)">
            <summary>
            Case-insensitively looks up an item by its mnemonic.
            Returns <c>Null</c> if not found.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.TryGetMnemonicByItem(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem)">
            <summary>
            Returns an uppercase mnemonic for the item, if available, or <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.TryUnregister(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem)">
            <summary>
            Unregisters the item's mnemonic, if there is such. Returns the success flag.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.Watch(JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.IListEvents{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem})">
            <summary>
            Starts watching the collection of menu items for mnemonic assignment.
            This includes manual and auto mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.AssignMnemonic_Auto(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem)">
            <summary>
            Chooses and assigns the mnemonics automatically.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.AssignMnemonic_Manual(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem)">
            <summary>
            Checks and places the manually-assigned mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.AssignMnemonic_Manual_Free(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,System.String)">
            <summary>
            Places the non-index-bound mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.MnemonicStore.AssignMnemonic_Manual_Positioned(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,System.String@)">
            <summary>
            Handles positionally-specified manual mnemonics (specified by duplicating the display-name with an ampersand).
            On fallback, the <param name="sManualMnemonic"/> is modified to contain just one proposed mnemonic char.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost">
            <summary>
            Implements the incremental search functionality for the <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu"/> family of controls.
            Can be either consumed directly by the menu customizers to obtain the current search string, or used to produce a menu items filter to be included into the item filters stack in <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc.ItemsContainer"/>.
            </summary>  
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.InputString">
            <summary>
            Gets or sets the string, as entered in the UI.
            The changes to this property are withheld for the grace period and after that they apply to the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchString"/> and <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchPredicate"/> properties. During that grace period, the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.IsPending"/> is <c>True</c>, and <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.CommitPendingChanges"/> will cause the changes to be applied immediately.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.IsActive">
            <summary>
            Gets or sets whether the search is currently active.
            The setter fails silently if being set to <c>False</c> while <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.IsAlwaysActive"/> is <c>True</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.IsAlwaysActive">
            <summary>
            Gets or sets whether the search host cannot be deactivated. 
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.IsPending">
            <summary>
            Gets whether there are pending changes to the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.InputString"/>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.IsValid">
            <summary>
            Gets or sets whether the current <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchString"/> is considered to be valid by the search-host consumer.
            If the search-host is used as a filter (<see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.CreateFilter(JetBrains.Lifetimes.Lifetime)"/>), then this value reflects the number of items in the filter, meaning the search-string is valid iff there are items in the list after applying the filter.
            Otherwise, just the user-assigned value is stored.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchPredicate">
            <summary>
            Gets the current filtering regex, based on the current <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchString"/>.    
            Func must return NaN to filter out the results. Otherwise it returns priority of item lexicographically (lower double means higher priority)
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchString">
            <summary>
            Gets the current filtering string. Any changes to the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.InputString"/> get into this property as the grace period expires.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.Matcher">
            <summary>
            Gets the current filtering string. Any changes to the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.InputString"/> get into this property as the grace period expires.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchHitAdorner">
            <summary>
            The adorner to highlight the current search hits.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.HintText">
            <summary>
            Sets the textual cue, or tip, that is displayed by the edit control to prompt the user for information.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.MatchWithPriority(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem,System.Func{System.String,System.Double})">
            <summary>
            Prioritize item. Than lower is return value then higher is priority (to sort lexicographically) in list. Double.NaN means no match.
            </summary>
            <param name="item">What to match</param>
            <param name="predicate"></param>
            <returns>NaN if no match. Priority otherwise.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.ProcessSearchString(System.String)">
            <summary>
            Produces the matcher predicate out of a plaintext search string.
            Throws on errors.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.CommitPendingChanges">
            <summary>
            If the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.SearchString"/> setter is working asynchronously and defers writes of the new value, causes the deferred write operation to occur immediately.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHost.CreateFilter(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates a menu items filter that applies the search string to filter the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.Detail.SearchHostMatcherHitHighlightAdorner">
            <summary>
            An adorner for the identifier matcher case.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor">
            <summary>
            Describes how the menu should present an item.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Icon">
            <summary>
            Gets the image (icon) for the item.
            <c>Null</c> if the item has no image.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Mnemonic">
            <summary>
            If the menu is working in the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags.Mnemonics"/> mode, specifies the mnemonic to assign to this menu item.
            The letter holding the mnemonic will be underlined automatically.
            To specify a mnemonic, either:
            (1) set the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Mnemonic"/> to contain a plaintext copy of the item <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Text"/>, with the mnemonic char prepended by an ampersand “&amp;”; normal ampersands should be doubled in the text,
            or,
            (2) set the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Mnemonic"/> to contain the single case-insensitive character of the mnemonic, whose position in the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Text"/> will be determined automatically; it's also legal to specify a mnemonic not present in the text.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.ShortcutText">
            <summary>
            Shortcut text to be displayed to the right of the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Text">main item text</see>.
            May be <c>Null</c> or an empty string for no shortcut.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Style">
            <summary>
            Gets or sets the style of the item.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Tag">
            <summary>
            A freehand object tag on the menu item descriptor.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.TailGlyph">
            <summary>
            Gets or sets an optional glyph that is displayed at the end of the menu item, after its shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Text">
            <summary>
            Gets the text that should present the item in the list.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Tooltip">
            <summary>
            Get the tooltip that should be shown when the mouse pointer hovers above this item in the list.
            May be <c>Null</c> or an empty string for no tooltip.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.ItemEventArgs">
            <summary>
            <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu"/> event arguments that reference an item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.ItemEventArgs.#ctor(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,System.Object)">
            <summary>
            Inits the instance.
            </summary>
            <param name="menu">The owning menu, must not be <c>Null</c>.</param>
            <param name="key">Key to the item that is described by the event, <c>Null</c> means “no item” (eg no selection).</param>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ItemEventArgs.Key">
            <summary>
            Gets the key to the item referenced by this event.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ItemEventArgs.Menu">
            <summary>
            Gets the popup menu that has fired the event.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.ItemExpandedEventArgs">
            <summary>
            Arguments for the event that notifies about a menu item expanding its submenu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.ItemExpandedEventArgs.SubmenuLifetime">
            <summary>
            The lifetime of the submenu display. Will be terminated when the submenu closes.
            As you will get this event each time the submenu opens on the same parent menu, bind all per-submenu objects to this lifetime instead of the parent menu's lifetime.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.ItemExpandedEventArgs.Submenu">
            <summary>
            Gets the submenu that will be opened as a result of expanding the submitem.
            Populate it with items and sink its events for item presentation and actions, just like you would do with the parent menu.
            The menu will open after this event exits.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo">
            <summary>
            A descriptor for the popup menu toolbar item.
            This interface must be wholy implemented, no <see cref="T:System.NotImplementedException"/>s allowed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo.Clicked">
            <summary>
            Gets the Clicked signal for this toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo.IsChecked">
            <summary>
            Gets or sets whether the button is initially checked.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo.Presentation">
            <summary>
            Gets or sets the toolbar button presentation, usually consisting of just one icon.
            <c>Null</c> to hide the button.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo.Shortcuts">
            <summary>
            Shortcut keys for the toolbar button.
            Can be either null or empty if no shortcuts registered
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo.TooltipText">
            <summary>
            Gets or sets the tooltip text for the button.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu">
            <summary>
            <para>Interface class for the Jet Popup Menu component.</para>
            <para>Create an instance, set up the properties and call for the <c>Show*()</c> method.</para>
            <para>Designed to be usable even without a running shell.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.myCloseOnExecute">
            <summary>
            <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.CloseOnExecute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.myMenuDocument">
            <summary>
            Menu model document, when menu is running.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.myNoItemsBanner">
            <summary>
            <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.NoItemsBanner"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.myToolbarButtons">
            <summary>
            <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ToolbarButtons"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.myCaption">
            <summary>
            <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.Caption"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.#ctor(JetBrains.Lifetimes.OuterLifetime,JetBrains.Application.UI.Components.IUIApplicationSimple,JetBrains.Application.UI.Components.IIsApplicationActiveState,JetBrains.Application.UI.Tooltips.ITooltipManager,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            <para>Creates the menu object and supplies it with environmental data.</para>
            <para>There are two main usage scenarios:</para>
            <para>• Add items to <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemKeys"/>, sink events like <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.DescribeItem"/> or <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemClicked"/>, and call <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Show(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)"/> or <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.ShowModal(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)"/>, or their overloads and variations.</para>
            <para>• If the items are simple, call <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.SetItems(JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem[])"/> and then <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Show(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)"/> or <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.ShowModal(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)"/>, or their overloads and variations.</para>
            </summary>
            <param name="lifetime">Required. The limiting lifetime of the menu. As you're passing in some components, your access to these components is limited by some lifetime (usually, the lifetime of the entity into which they were injected). To ensure safe access to these components, this lifetime must be passed to the menu.</param>
            <param name="uiapp">Required. Common UI components.</param>
            <param name="isApplicationActiveState">Required. Governs whether popups are allowed to show.</param>
            <param name="tooltipman">Optional. Some functionality might be impaired if omitted.</param>
            <param name="windowsHookManager">Optional. Required for proper functioning of multilevel popup menus.</param>
            <param name="settstore">Optional. Takes overrides from settings, otherwise uses settings' default values.</param>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.Caption">
            <summary>
            Gets or sets the popup menu caption, displayed in the title section of the menu.
            <c>Null</c> for no caption.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.CaptureMouseInitially">
            <summary>
            Gets or sets whether the list should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.CloseOnExecute">
            <summary>
            Whether to close the menu automatically whenever an item (menu item or toolbar button) is executed. The default is <c>True</c>.
            If <c>False</c>, the menu will not close when you execute an item, unless you spawn some control that steals focus from the menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.DescribeItem">
            <summary>
            Fires when the item needs to be described in order to be presented in the menu.
            The <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/> is the menu item key (not Null).
            The <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> is an empty menu item descriptor that should be filled by the event sink.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemClicked">
            <summary>
            Fires when an item is clicked in the menu.
            Gives out the item key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemDeleted">
            <summary>
            Fires when the menu wants to remove an item.
            The sink must approve the event for the item to disappear from the menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemExpanded">
            <summary>
            Fires when an item should be expanded into a submenu.
            Either a submenu should be shown, or a tooltip explaining the failure to do so.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ClosingViewOnExecute">
            <summary>
            True while JPN view is being closed before executing the menu action (<see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.CloseOnExecute"/>).
            Keeps logical menu lifetime alive while menu item is executing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemKeys">
            <summary>
            Gets the collection to which the keys for the menu items should be added.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.KeyboardAcceleration">
            <summary>
            Gets or sets the way keyboard acceleration works for the list.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.NoItemsBanner">
            <summary>
            Gets or sets the banner that is displayed instead of the menu if there are zero items in the menu.
            May be <c>Null</c>, which means that the menu should be displayed even in case there are no items.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.PopupWindowContextSource">
            <summary>
            Gets or sets the popup window context that defines the owning context for the menu, as a non-lifetimed Source object.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.SelectedItemKey">
            <summary>
            Gets the key of the item currently selected in the menu.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ToolbarButtons">
            <summary>
            Gets the list of toolbar buttons to display in the title section of the menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.myCaptureMouseInitially">
            <summary>
            Means the list should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.IsHighlightingSearchHostResults">
            <summary>
            Whether menu should automatically highlight search hits from the Search Host when rendering menu items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.CaptureIfMouseDown">
            <summary>
            A helper for setting the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.CaptureMouseInitially"/> property automatically, based on whether the mouse button is currently down or not.
            Has no visible effect if the menu is already running.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.SetItems(JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem[])">
            <summary>
            Produces a simple static popup menu with self-contained items, each of which has its own <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem.Executed"/> event.
            Can be called only once.
            Cannot be used together with setting <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemKeys"/> explicitly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.InitViewModel(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)">
            <summary>
            Prepare the menu.
            </summary>
            <param name="when">Specifies the flags that could cancel showing the menu and replace it with something else.</param>
            <param name="lifetimeDefinitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the menu lifetime if you pass a definition in here. It will be terminated when the menu closes.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.CheckThread">
            <summary>
            Throws if called on a wrong (non-UI) thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.OnMenuItemDeleted(JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem)">
            <summary>
            Processes user's deletion of an item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowCore_CutoffEarly(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Cut off menu show early, without describing items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowCore_CutoffLate(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,System.Collections.Generic.ICollection{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuItem})">
            <summary>
            Cut off menu show after we know item descriptions, like if it's enabled.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen">
            <summary>
            When the menu should not be actually shown.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems">
            <summary>
            If there're no items in the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ItemKeys"/> collection, the menu is not shown, just the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.NoItemsBanner"/> is displayed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoEnabledItems">
            <summary>
            If there're no enabled items, the menu is not shown, just the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.NoItemsBanner"/> is displayed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleItem">
            <summary>
            If there is exactly one item in the menu, the menu is not shown, and that item is executed automatically. // TODO: check if the item is enabled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleEnabledItem">
            <summary>
            If there is exactly one enabled item in the menu, the menu is not shown, and that item is executed automatically.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet">
            <summary>
            A set of precalculated colors that are based on the system ones and are used for painting different parts of the control.
            See <c>JetPopupMenuView.CreateJetPopupMenuColorSet</c> for creating in a Windows-aware context with color coersion to nearest solid set up.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet.SelectionFillCenterTop">
            <summary>
            The gradient stop is in the center, makes the lower gradient color for the upper half.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet.SelectionFillCenterBottom">
            <summary>
            The gradient stop is in the center, makes the upper gradient color for the lower half.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet.SearchHitText">
            <summary>
            Foreground color for hiliting search hits in menu items text.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet.SearchHitFill">
            <summary>
            Background color for hiliting search hits in menu items text.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenuColorSet.Blend(JetBrains.Util.Media.JetRgbaColor,JetBrains.Util.Media.JetRgbaColor,System.Double,System.Func{JetBrains.Util.Media.JetRgbaColor,JetBrains.Util.Media.JetRgbaColor})">
            <summary>
             Alpha-blends two colors.
            </summary>
            <param name="factor">A real number between <c>0</c> and <c>1</c>, specifying the first color alpha.</param>
            <returns></returns>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <param name="FCoerceToSolidColor"></param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus">
            <summary>
              <para>Factory for popup menus to inject all of the required components into the popup menu.</para>
              <para>Designed to be usable even without a running shell.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Create">
            <summary>
              Creates a new popup menu.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.CreateWithLifetime(JetBrains.Lifetimes.Lifetime)">
            <summary>
              Creates a new popup menu.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Show(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,System.Action{JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu})">
            <summary>
              Shows the menu non-modally, calls your callback to fill the menu, giving you the lifetime for all the layouters and popup window contexts to be used with menu.
              The lifetime you give is just a limiting lifetime and is not critical; the lifetime you're given in the callback should be used for menu-bound entities.
            </summary>
            <param name="lifetime">The limiting lifetime for the menu. Not critical to have, but you should generally have one (i.e. one of your component).</param>
            <param name="when">Skip menu display conditions.</param>
            <param name="FFillMenu">The callback for you to fill the menu with items. Gives you the lifetime of the menu's async show. Bind any per-menu entities to this lifetime.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Show(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Lifetimes.LifetimeDefinition)">
            <summary>
              <para>Displays the menu onscreen. Cannot be called twice.</para>
              <para>Calls <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Show(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)" /> with the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems" /> flag.</para>
            </summary>
            <param name="menu">Menu</param>
            <param name="lifetimeDefinitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the parentMenu lifetime if you pass a definition in here. It will be terminated when the parentMenu closes.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Show(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)">
            <summary>
            Shows the menu onscreen. Cannot be called twice.
            </summary>
            <param name="menu">Menu</param>
            <param name="when">Specifies the flags that could cancel showing the menu and replace it with something else.</param>
            <param name="lifetimeDefinitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the parentMenu lifetime if you pass a definition in here. It will be terminated when the parentMenu closes.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.ShowIfMultiple(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Lifetimes.LifetimeDefinition)">
            <summary>
              <para>Displays the menu onscreen. Cannot be called twice.</para>
              <para>Calls <see cref="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.Show(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)" /> with the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems" /> and <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleItem" /> flags.</para>
            </summary>
            <param name="menu">Menu</param>
            <param name="lifetimeDefinitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the parentMenu lifetime if you pass a definition in here. It will be terminated when the parentMenu closes.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.ShowModal(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,JetBrains.Lifetimes.LifetimeDefinition)">
            <summary>
            Shows the menu onscreen. Does not return until a parentMenu item is executed or parentMenu is dismissed.
            </summary>
            <param name="menu">Menu</param>
            <param name="when">Specifies the flags that could cancel showing the menu and replace it with something else.</param>
            <param name="lifetimeDefinitionOptional">Optional. Gives you an opportunity to forcibly close the menu.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenus.ShowModal(JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu.ShowWhen,System.Action{JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu})">
            <summary>
              Shows the menu non-modally, calls your callback to fill the menu, giving you the lifetime for all the layouters and popup window contexts to be used with menu.
              The lifetime you give is just a limiting lifetime and is not critical; the lifetime you're given in the callback should be used for menu-bound entities.
            </summary>
            <param name="when">Skip menu display conditions.</param>
            <param name="FFillMenu">The callback for you to fill the menu with items. Gives you the lifetime of the menu's async show. Bind any per-menu entities to this lifetime.</param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags">
            <summary>
            Determines how mnemonics are assigned to menu items.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags.QuickSearch">
            <summary>
            Enable the Narrow-Down QuickSearch.
            This is the default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags.Mnemonics">
            <summary>
            Use mnemonic for quick access to the menu items, as specified at the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Mnemonic"/> field and assigned automatically, if missing.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags.CustomSearch">
            <summary>
            Lets a client code define custom filter.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor">
            <summary>
            The default menu item descriptor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.#ctor(System.Object)">
            <summary>
            Creates the default descriptor from an object by specifying the object's text representation as the item's text.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Icon">
            <summary>
            Gets the image (icon) for the item.
            <c>Null</c> if the item has no image.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Mnemonic">
            <summary>
            If the menu is working in the <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.KeyboardAccelerationFlags.Mnemonics"/> mode, specifies the mnemonic to assign to this menu item.
            The letter holding the mnemonic will be underlined automatically.
            To specify a mnemonic, either:
            (1) set the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Mnemonic"/> to contain a plaintext copy of the item <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Text"/>, with the mnemonic char prepended by an ampersand “&amp;”; normal ampersands should be doubled in the text,
            or,
            (2) set the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Mnemonic"/> to contain the single case-insensitive character of the mnemonic, whose position in the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Text"/> will be determined automatically; it's also legal to specify a mnemonic not present in the text.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.ShortcutText">
            <summary>
            Shortcut text to be displayed to the right of the <see cref="P:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor.Text">main item text</see>.
            May be <c>Null</c> or an empty string for no shortcut.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Style">
            <summary>
            Gets or sets the style of the item.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Tag">
            <summary>
            A freehand object tag on the menu item descriptor.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.TailGlyph">
            <summary>
            Gets or sets an optional glyph that is displayed at the end of the menu item, after its shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Text">
            <summary>
            Gets the text that should present the item in the list.
            Should not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemDescriptor.Tooltip">
            <summary>
            Get the tooltip that should be shown when the mouse pointer hovers above this item in the list.
            May be <c>Null</c> or an empty string for no tooltip.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle">
            <summary><seealso cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyleValidator" />
            Defines the style and state for a list item described by a <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor" /> object.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.Enabled">
            <summary>
            This flag is present iff the item is enabled.
            Cannot be used together with <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.Separator" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.Separator">
            <summary>
            Whether the item is a separator item.
            Cannot be used together with <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.Enabled" /> and <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.GroupHeader" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.GroupHeader">
            <summary>
            Whether the item is a static item.
            A static item is a special full-size item that cannot be selected or triggered and is painted in a greyed style.
            Cannot be used together with <see cref="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.Separator" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle.CanExpand">
            <summary>
            Whether the item can be expanded into a submenu.
            An event is fired by the document when submenu should be shown.
            With just this flag, the item itself cannot be executed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyleValidator">
            <summary>
            Validates the <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle"/> values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyleValidator.AssertValid(JetBrains.Application.UI.Controls.JetPopupMenu.MenuItemStyle)">
            <summary>
            Throws if invalid.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem">
            <summary>
            A simple menu item for the <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.JetPopupMenu"/> that allows to easily create and use a small menu consisting of static items only, with all the handlers attached to the items themselves rather than global “describe” and “clicked” all-item callbacks.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem.#ctor">
            <summary>
            Default ctor. Don't forget to init the item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem.#ctor(JetBrains.UI.RichText.RichText,JetBrains.UI.Icons.IconId,System.Action)">
            <summary>
            Fully initializes the item.
            </summary>
            <param name="text">Main text of the item.</param>
            <param name="icon">Icon for the item.</param>
            <param name="FOnExecute">Called when the item is clicked.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem.CreateSeparator">
            <summary>
            Creates a ready-for-use separator menu item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem.Executed">
            <summary>
            Fires when this particular item is clicked.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem.Expanded">
            <summary>
            Fires when this particular item is expanded (expanding the item should be allowed in the style flags).
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.SimpleMenuItem.Describe(JetBrains.Application.UI.Controls.JetPopupMenu.IMenuItemDescriptor)">
            <summary>
            Copies the item description into the given descriptor.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo">
            <summary>
            The default <see cref="T:JetBrains.Application.UI.Controls.JetPopupMenu.IToolBarItemInfo"/> interface implementation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.#ctor(JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys[],System.Boolean,System.Action{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc})">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.#ctor(JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys,System.Boolean,System.Action{JetBrains.Application.UI.Controls.JetPopupMenu.Detail.JetPopupMenuDoc})">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.#ctor(JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys,System.Boolean,System.Action)">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.#ctor(JetBrains.Application.UI.Controls.Utils.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.Clicked">
            <summary>
            Gets the Clicked signal for this toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.IsChecked">
            <summary>
            Gets or sets whether the button is initially checked.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.Presentation">
            <summary>
            Gets or sets the toolbar button presentation, usually consisting of just one icon.
            <c>Null</c> to hide the button.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.Shortcuts">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Controls.JetPopupMenu.ToolbarItemInfo.TooltipText">
            <summary>
            Gets or sets the tooltip text for the button.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidthKind.Explicit">
            <summary>
            Column width is directly specified and do not depend on data or container size
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidthKind.Auto">
            <summary>
            Column width depends on data size
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidthKind.Star">
            <summary>
            Column width depends on container size
            Input value can be in any abstract units in required proportions.
            Output value will be in control width units maintaining input proportion.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidth.InitialWidth">
            <summary>
            Initial setting. Star value for ColumnWidthKind.Star in abstract units, or control size units for ColumnWidthKind.Explicit. Ignored for Auto.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidth.DesiredWidth">
            <summary>
            Width requested by data to fit without clipping 
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidth.UserWidth">
            <summary>
            Width set by user
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.GridView.ColumnWidth.ActualWidth">
            <summary>
            Displayed control actual width
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Controls.Lists.IListController.ScrollToItem">
            <summary>
            Triggered when scroll position is changed by data source.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Controls.Lists.IListEventSource.ItemsUpdated">
            <summary>
            Triggered when specified node expanded state was updated by ViewModel.
            If node is null then entire tree was collapsed.
            Updating multiple items raised from INotifyCollectionChanged events for collection returned in GetChangeProvider
            will collapse children nodes. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.ITreeController">
            <summary>
            Interface used by UI control to perform and accept commands. 
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.ITreeMapperNodeExpander.Reset">
            <summary>
            Clears cached data
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.ITreeMapperNodeExpander.SynchronizeExpandedState(JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode)">
            <summary>
            Updates node subtree according to data source, does not change states on datasource
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.ITreeMapperNodeExpander.SetExpandedState(JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode,System.Boolean)">
            <summary>
            Changes node expanded state and updated data source if possible
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.ITreeMapperNodeExpander.CollapseEntireNode(JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode,System.Boolean)">
            <summary>
            Collapses all expanded nodes within subtree
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.NodeSizeChangeTracker">
            <summary>
            Raises collection change event for plain list
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.NotifyTreeCollectionChangedEventArgs">
            <summary>
            Sent by TreeListMapperDataSource. Replace action means expand/collapse, so first item in range is actually not changed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.PlainListItem.Level">
            <summary>
            Tree depth. I.e. for indents.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeListDataSource.GetNode(System.Object)">
            <summary>
            Returns node associated with data or null if node is collapsed
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.LocalIndex">
            <summary>
             Index within parent collection
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.Item">
            <summary>
            Node data
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.ChildrenChangeSubscription">
            <summary>
            Subscription token for collection change event of children
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.PlainIndex">
            <summary>
            Index in plain list
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.UpdateLocalIndex(System.Int32)">
            <summary>
            Moves node, if there is another one in target index then it will be overwritten, so check it before calling this method
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.GetChild(System.Int32)">
            <summary>
            Returns cached child node by index or null if it was not cached
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.CreateChild(System.Int32)">
            <summary>
            Creates new child node and adds it to cache
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.DataSource.TreeMapperNode.MapPlainIndex(System.Int32)">
            <summary>
            Returns list of children indexes on each level from root to leaf and direct parent node.
            To get node call GetChild on returned parent node with last index from returned path. 
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.IExpandedStateProvider.IsExpanded(System.Object)">
            <summary>
            Return expanded state or null if it is not managed by data source.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.IExpandedStateProvider.GetExpandedChildren(System.Object)">
            <summary>
            Return collection of expanded children with indexes or null if expanded states are not managed by data source.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.IExpandedStateProvider.SetExpanded(System.Object,System.Boolean)">
            <summary>
            Sets expanded state or does nothing if it is not managed by data source.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeDataProvider">
            <summary>
            Interface to miscellaneous external tree structures. Implemented by adapters for connecting existing ViewModels without rewriting them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeDataProvider.GetParent(System.Object)">
            <summary>
            Returns parent or null if specified node is in root collection.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeDataProvider.GetChildrenCount(System.Object)">
            <summary>
            Returns number of child items in specified parent. Expected to return immediately, if data loading is required then return 0 and trigger ItemUpdated after loading is completed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeDataProvider.IsLeaf(System.Object)">
            <summary>
            Returns true if node can have children. If it returns false then neither GetChildrenCount nor RequestLoadChildren will be called.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeDataProvider.GetChild(System.Object,System.Int32)">
            <summary>
            Returns child item by index within parent. Or null/stub if data is not loaded.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeDataProvider.GetChildIndex(System.Object,System.Object)">
            <summary>
            Retrieves index within parent.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeNode">
            <summary>
            Basic interface for tree structures. Implement INotifyPropertyChanged for tracking changes.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Lists.TreeList.ITreeNode.Children">
            <summary>
            Children collection. Implement INotifyCollectionChange for tracking changes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.MemoryUsageIndicatorContentAutomation.IsAccurateValue">
            <summary>
            The timer is not running when app does not have focus, the value might not be accurate.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Misc.FilterController`1">
            <summary>
            Helper class for displaying list of filters buttons , intendeed for use in conjunction with xaml binding. Manages a list of abstract items and allows to toggle their state on\off
            </summary>
            <typeparam name="FilterItemType"></typeparam>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1">
            <summary>
            Represents a group of radio buttons with a single value that is determined by the radiobutton that is checked.
            There is an option checkbox that disables or enables the whole group.
            </summary>
            <typeparam name="TValue">Type of the value chosen by this group.</typeparam>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.HasCheckbox">
            <summary>
            Whether the label should be shown with a checkbox which represents the <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.NothingSelectedValue"/>: when the checkbox is checked, user can choose between the radio buttons and their values; otherwise, the radio buttons are disabled and the <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.NothingSelectedValue"/> is assumed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.LabelText">
            <summary>
            Text of the label (of the checkbox if <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.HasCheckbox"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.LabelHelp">
            <summary>
            Text that will be in Help button near LabelText
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.NothingSelectedValue">
            <summary>
            The <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.Value"/> when none of the radio buttons is selected. If <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.HasCheckbox"/>, this is the <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.Value"/> when the checkbox gets unchecked and all the radio buttons get disabled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.Value">
            <summary>
            <para>The composite value of this group.</para>
            <para>Each radio button is assigned a value. When a radio button is selected, its value gets here. When this proprty changes, the corresponding radio button is also selected.</para>
            <para>If <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.HasCheckbox"/>, then the checkbox represents one more value, <see cref="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.NothingSelectedValue"/>, which is in effect when the checkbox is not checked (and radio buttons are disabled). When the checkbox gets checked, one of the radio buttons gets selected and dictates its value.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.RadioButtons">
            <summary>
            The collection of the radio buttons in the group, each assigned a value, as added with <see cref="M:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.AddRadioButton(JetBrains.UI.RichText.RichText,`0,System.String)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.AddComment(JetBrains.UI.RichText.RichText)">
            <summary>
            Adds a comment to the last radio button.
            The only difference with adding a control directly is that the enabled state of the comment will be synched to the previous radio button.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.AddDependent(System.Object)">
            <summary>
            Adds a dependent control to the last radio button.
            The only difference with adding a control directly is that the enabled state of the dependent control will be synched to the previous radio button checked/enabled state.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.AddRadioButton(JetBrains.UI.RichText.RichText,`0,System.String)">
            <summary>
            Adds a new radio button to the group, along with its value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupModel`1.InitDataFlow(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Data flow of the model.
            NOTE: part of the control logic rules involving its child control state resides in the view model dataflow init.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.RadioGroup.RadioGroupViewModel">
            <summary>
            The automation object class so that to register a view for it. Registering a view for an interface does not quite currently work.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RichTextAutomation.myRenderParams">
            <summary>
            Rendering aspect.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RichTextAutomation.myRichTextBlock">
            <summary>
            Content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.RichTextAutomation.#ctor(JetBrains.UI.RichText.RichText)">
            <summary>
            Creates the painter over a rich text.
            If the text contains line breaks, it's split into several <see cref="P:JetBrains.Application.UI.Controls.RichTextAutomation.RichTextBlock"/> lines.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.RichTextAutomation.#ctor(JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.RenderParams)">
            <summary>
            Creates the automation over a rich text block.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.RichTextAutomation.#ctor(JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates the automation over a rich text block.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.RichTextAutomation.RichTextBlock">
            <summary>
            Gets or sets the content.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.RichTextAutomation.RenderParams">
            <summary>
            Gets or sets the rendering aspect.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RichTextWithProgressAutomation.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.RichTextWithProgressAutomation.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.SizeConstraint">
            <summary>
            Represents a constraint on control size
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.SizeConstraint.ConstrainingSize">
            <summary>
            Gets the width and height representing the current constraint.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.StatusBarProgressIndicator">
            <summary>
            A status bar indicator for a progress.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.StatusBarProgressIndicator.Icon">
            <summary>
            Icon for the progress.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.StatusBarProgressIndicator.Indicator">
            <summary>
            The indicator in the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.StatusBarProgressIndicator.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.StatusBarProgressIndicator.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.StatusBarProgressIndicatorContentAutomation.Icon">
            <summary>
            Icon for the progress.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.StatusBarProgressIndicatorContentAutomation.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.StatusBarProgressIndicatorContentAutomation.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TabStripView.TabStripClosedEventArgs">
            <summary>
            Provides data for cancelable closing of one or more tabs
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TabStripView.TabStripClosingEventArgs">
            <summary>
            Provides data for cancelable closing of one or more tabs
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TabStripView.TabStripOpenTabMode.AtBeginning">
            <summary>
            A new tab should be placed at the beginning
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TabStripView.TabStripOpenTabMode.AtEnd">
            <summary>
            A new tab should be placed at the end
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TabStripView.TabStripViewModel">
            <summary>
            Gets or sets view model for TabStrip
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TabStripView.TabStripViewModel.Open(JetBrains.Application.UI.Controls.TabStripView.TabStripItem)">
            <summary>
            Adds a new tab item and select it
            </summary>
            <param name="tabStripItem"></param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TabStripView.TabStripViewModel.Close(System.Collections.Generic.IEnumerable{JetBrains.Application.UI.Controls.TabStripView.TabStripItem})">
            <summary>
            Close one or more tabs
            </summary>
            <param name="items">Items to close</param>
            <returns>True if tabs was closed successfully</returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.CachedFilterDescriptor">
            <summary>
            Caches acceptability of items and optionally propagetes firm 'true' acceptability 
            through hierarchy to avoid futher additional traversing
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.CachedFilterDescriptor.#ctor(JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor,JetBrains.Application.UI.Controls.TreeGrid.FilteringMode,System.Func{System.Object,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="filterDescriptor"></param>
            <param name="mode"></param>
            <param name="getParent"></param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.IChainedJob">
            <summary>
            Represents a delegate for job chain definition. 
            It should do a part of work and return this job or one or more new job. 
            It should be ready that it is invoked again after it returns 'empty'.
            </summary>
            <returns>Tasks to to continue. Cannot be null</returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.ChainedJobQueue">
            <summary>
            Represents helper to enqueue <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.IChainedJob"/> and pump with timelimit
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.UIChainedJobExtensions.Pump(JetBrains.Application.UI.Controls.TreeGrid.IChainedJob)">
            <summary>
            Pumps the particular job chain until it end
            </summary>
            <param name="chainedJob">Task chain</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.UIChainedJobExtensions.Pump(JetBrains.Application.UI.Controls.TreeGrid.IChainedJob,System.TimeSpan)">
            <summary>
            Pumps the particular job chain with timelimit
            </summary>
            <param name="chainedJob">Task chain</param>
            <param name="timeLimit">Limit of time</param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.ChildrenProviders.ChildrenProvider`1">
            <summary>
            Represents implementation to provide children via callback
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.DelegateItemFilter`1">
            <summary>
            Represent filtration using <see cref="T:System.Func`2"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DelegateItemFilter`1.#ctor(System.Func{`0,System.Nullable{System.Boolean}})">
            <summary>
            Constructor
            </summary>
            <param name="function">It should return false to hide element, true to show, null to define that occurrences still can be among its children</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DelegateItemFilter`1.IsAccepted(System.Object)">
            <summary>
            Should return true if item is filtered and should be hidden
            </summary>
            <param name="item">Data item</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue.IsBusy">
            <summary>
            Gets the value which means if the queue has actions (it can still has post action)
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue.#ctor(System.Func{System.Action,JetBrains.Application.UI.Controls.TreeGrid.ICancellable},System.Windows.Threading.DispatcherPriority,System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="queuer">Physical queuing lambda, for example via Dispatcher or ReentrancyGuard</param>
            <param name="priority">Priority to schedule pumping</param>
            <param name="timelimit">Time limit to pump queue once</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue.Queue(System.Action)">
            <summary>
            Enqueues an execution of an action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue.QueuePostaction(System.Action)">
            <summary>
            Enqueues an action which will be executed when all main actions are performed
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue.Pump">
            <summary>
            Executes all actions
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue.Pump(System.TimeSpan)">
            <summary>
            Executes pended actions, stops if execution time > timelimit
            </summary>
            <param name="timelimit"></param>
            <returns>Returns true if actions and post-actions were processed</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.DispatchedQueue.Cancel">
            <summary>
            Cancels currently pended actions
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.EventBasedItemFilter">
            <summary>
            Represent filtration with event-callback, a helpful adapter for XAML
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Controls.TreeGrid.EventBasedItemFilter.Filter">
            <summary>
            Event callback to filter items
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.EventBasedItemFilter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.EventBasedItemFilter.IsAccepted(System.Object)">
            <summary>
            Should return true if item is filtered and should be hidden
            </summary>
            <param name="item">Data item</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.FilterEventArgs">
            <summary>
            Represents arguments for EventBasedItemFilter event
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.FilterEventArgs.IsAccepted">
            <summary>
            Gets or sets a value that indicates whether the item passes the filter.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.FilterEventArgs.Item">
            <summary>
            Gets the object that the filter should test.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.FilterEventArgs.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="item">Test item</param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection">
            <summary>
            Combines a set of <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor">tree grid filters</see> to get the single filter usable on the tree.
            Exposes the <see cref="F:JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection.CombinedFilter" /> property which you should bind to the tree's filter property.
            Add your filters to <see cref="F:JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection.Filters" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection.CombinedFilter">
            <summary>
              <para>The resulting filter.</para>
              <para>Bind to the tree view.</para>
              <para>The property value changes whenever the set of filters changes, thus notifying the tree of the need to recalculate the filtered set.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection.Filters">
            <summary>
              <para>Add/remove your filters here.</para>
              <para>The key is just a convenience which allows to add/remove your filter object by a key.</para>
              <para>If using lifetimes or adding forever, just create a new object.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventArgs`1">
            <summary>
            Arguments for handler of value changed event
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventArgs`1.Previous">
            <summary>
            Gets previous value, before changing
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventArgs`1.Current">
            <summary>
            Get current value, new value
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Constructor
            </summary>
            <param name="previous">Previous value, before changing</param>
            <param name="current">Current value, new value</param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Helpers.ValueChangedEventHandler`1">
            <summary>
            Generic delegate for handler of value changed event
            </summary>
            <typeparam name="T">Type of changed value</typeparam>
            <param name="sender">Sender</param>
            <param name="args">Previous and current values</param>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.IActionInvocator">
            <summary>
            Incapsulates action execution logic
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.IActionInvocator.Queue(System.Action)">
            <summary>
            Queues action and perform it when it is will be appropriate
            </summary>
            <param name="action">Action</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.IActionInvocator.TryExecute(System.Action)">
            <summary>
            Tries to perform the action immediatelly
            </summary>
            <param name="action">Action</param>
            <returns>True if action has been performed, false in case action execution has been dropped</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.IActionInvocator.AssertAccess">
            <summary>
            Throw exception in case of we are out of executor's context (for ex., right thread, 'guarded', etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.ReentrancyGuardedActionInvocator">
            <summary>
            Implements pended action execution with <see cref="T:JetBrains.Threading.ReentrancyGuard"/>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.DefaultActionInvocator">
            <summary>
            Implements pended action execution immediatelly, queuing with <see cref="T:System.Windows.Threading.Dispatcher"/>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.IChildrenProvider.IsObservable">
            <summary>
            Gets whether the actual children collection is observable (capable to be changes trackable).
            In case of not alive models, right value will help improve performance
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.IChildrenProvider.HasChildren(System.Object)">
            <summary>Gets whether the item has children</summary>
            <param name="item">Item</param>
            <returns>Returns false if currently it does not have any children</returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor">
            <summary>
            <see cref="T:JetBrains.UI.TreeGrid.TreeGridView"/> item filtration extensibility point
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.IFilterDescriptor.IsAccepted(System.Object)">
            <summary>
            Returns a value indicating if the given item is accepted and should be shown to user
            </summary>
            <param name="item">Data item</param>
            <returns>
            true - node is accepted itself and should be shown to user
            null - node is not accepted itself, however one of its children might be
            false - node is not accepted and shouldn't be shown to user, although one of its children might be
            </returns>
            <remarks>
            In case you are implementing per item filtering without knowleadge about children items you should return true if item accepted itself and null otherwise.
            In case you have knowledge about sub items, it would be more optimal to return true and false as final results.
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.CombiningFilterDescriptor">
            <summary>
            Combines multuple filters.
            NOTE: set of filters cannot be changed because we cannot notify client (=tree) of the filter change to make it re-calculate.
            Use the <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.FiltersCollection" /> class on your view model if you want to change the set of filters dynamically.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.ITreeGridItemFilter">
            <summary>
            <see cref="T:JetBrains.UI.TreeGrid.TreeGridView"/> item filtration extensibility point
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.ITreeGridItemFilter.IsAccepted(System.Object)">
            <summary>
            Should return true if item is filtered and should be hidden
            </summary>
            <param name="item">Data item</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPair`1">
            <summary>
            Represents pair of data item and its index in parent's children colleciton
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.ObjectIndexPath`1">
            <summary>
            Represents full path to a data item in the tree control including indices
            </summary>
            <typeparam name="T">Type of data item</typeparam>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.ObjectPath`1">
            <summary>
            Represents full path to a data item in the tree control
            </summary>
            <typeparam name="T">Type of data item</typeparam>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.PredicateItemFilter`1">
            <summary>
            Represent filtration using <see cref="T:System.Predicate`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.PredicateItemFilter`1.Predicate">
            <summary>
            Gets the predicate. It should return true to hide element
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.PredicateItemFilter`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.PredicateItemFilter`1.#ctor(System.Predicate{`0},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="predicate">It should return false to hide element</param>
            <param name="finalValue">Determines whether the predicate false-value is consiredering as final value for filtering. If finalValue false, IsAccepted will return null in case of false predicate value</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.PredicateItemFilter`1.IsAccepted(System.Object)">
            <summary>
            Should return true if item is filtered and should be hidden
            </summary>
            <param name="item">Data item</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.ChildrenProvider`1">
            <summary>
            Represents implementation to provide children explicitly via function
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.CombiningFilterDescriptor">
            <summary>
            Combines multuple filters.
            NOTE: set of filters cannot be changed because we cannot notify client (=tree) of the filter change to make it re-calculate.
            Use the <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection" /> class on your view model if you want to change the set of filters dynamically.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.DelegateFilterDescriptor`1">
            <summary>
            Represent filtration using <see cref="T:System.Func`2"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.DelegateFilterDescriptor`1.#ctor(System.Func{`0,System.Nullable{System.Boolean}})">
            <summary>
            Constructor
            </summary>
            <param name="function">It should return false to hide element, true to show, null to define that occurrences still can be among its children</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.DelegateFilterDescriptor`1.IsAccepted(System.Object)">
            <summary>
            Should return true if item is filtered and should be hidden
            </summary>
            <param name="item">Data item</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection">
            <summary>
            Combines a set of <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.IFilterDescriptor">tree grid filters</see> to get the single filter usable on the tree.
            Exposes the <see cref="F:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection.CombinedFilter" /> property which you should bind to the tree's filter property.
            Add your filters to <see cref="F:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection.Filters" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection.CombinedFilter">
            <summary>
              <para>The resulting filter.</para>
              <para>Bind to the tree view.</para>
              <para>The property value changes whenever the set of filters changes, thus notifying the tree of the need to recalculate the filtered set.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.FiltersCollection.Filters">
            <summary>
              <para>Add/remove your filters here.</para>
              <para>The key is just a convenience which allows to add/remove your filter object by a key.</para>
              <para>If using lifetimes or adding forever, just create a new object.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.PredicateFilterDescriptor`1">
            <summary>
            Represent filtration using <see cref="T:System.Predicate`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.PredicateFilterDescriptor`1.Predicate">
            <summary>
            Gets the predicate. It should return true to hide element
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.PredicateFilterDescriptor`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.PredicateFilterDescriptor`1.#ctor(System.Predicate{`0},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="predicate">It should return false to hide element</param>
            <param name="finalValue">Determines whether the predicate false-value is consiredering as final value for filtering. If finalValue false, IsAccepted will return null in case of false predicate value</param>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.Filters.PredicateFilterDescriptor`1.IsAccepted(System.Object)">
            <summary>
            Should return true if item is filtered and should be hidden
            </summary>
            <param name="item">Data item</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider.FetchCount(System.Object)">
            <summary>
            Gets current count of children for the given node
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider.FetchChildren(System.Object,System.Int32,System.Int32)">
            <summary>
            Gets children of the given node from the given index to index + count (or actual number of children)
            </summary>
            <param name="node">Node (or null in case of root)</param>
            <param name="index">Index of the first item</param>
            <param name="count">Number of children to get or Int32.MaxValue to get all children</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider.HasChildren(System.Object)">
            <summary>
            Gets whether the given node has children
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider.IsLeaf(System.Object)">
            <summary>
            Gets whether the given node can ever have children
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider.IndexOf(System.Object,System.Object)">
            <summary>
            Gets index of child in parent's children collection, 
            or -1 in case of the child is not found in the parent's collection
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.IChildrenProvider.GetChangeProvider(System.Object)">
            <summary>
            Gets INotifyCollectionChanged which corresponds to children collection of the given node
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.Revised.IFilterDescriptor">
            <summary>
            <see cref="T:JetBrains.UI.TreeGrid.TreeGridView"/> item filtration extensibility point
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeGrid.Revised.IFilterDescriptor.IsAccepted(System.Object)">
            <summary>
            Returns a value indicating if the given item is accepted and should be shown to user
            </summary>
            <param name="item">Data item</param>
            <returns>
            true - node is accepted itself and should be shown to user
            null - node is not accepted itself, however one of its children might be
            false - node is not accepted and shouldn't be shown to user, although one of its children might be
            </returns>
            <remarks>
            In case you are implementing per item filtering without knowleadge about children items you should return true if item accepted itself and null otherwise.
            In case you have knowledge about sub items, it would be more optimal to return true and false as final results.
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeGrid.SortDescription">
            <summary>
            Represents general usage implementation <see cref="T:JetBrains.Application.UI.Controls.TreeGrid.ISortDescription"/>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeListView.Contracts.ResetType.ResetChildren">
            <summary>
            Only direct children of node have to be refreshed
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeListView.Contracts.ResetType.ResetSubtree">
            <summary>
            All descendats of node have to be refreshed
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelChangeTracker">
            <summary>
            Simple way to notify tree view about batch changes in model   
            For more granular updates <see>IIterativeTreeModelChangeTracker</see>
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelChangeTracker.ModelChanging">
            <summary>
            Marks start of model updates
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelChangeTracker.NotifyReset">
             <summary>
            Marks node children or descendats as invalidated
             </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelChangeTracker.ModelChanged">
            <summary>
            Marks end of model updates 
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportSimple.GetIdentity(System.Object)">
            <summary>
            Gets identity object associated with given node. 
            Identity object is used during saving\restoring tree state (expantion and selection )
            It allows to associate old and new tree nodes that have same underlaying data
            </summary>
            <param name="model">Tree model node</param>
            <returns>Identity object. Return <paramref name="model" />   if object is identity of self</returns>
            
            <remarks>
            In some cases (as is the case for Reshrper's TreeModelNode) the model itself is wrapper on top of lower level model.    
            Model nodes are rebuild on any change. The only way to associate old and new odes is to use underlaying wrapped data
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced">
            <summary>
            Exists solely for optimisiation and TreeModelNode infrastracture
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced.FromIdentity(System.Object)">
            <summary>
            Get models associated with given identity object
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced.GetParent(System.Object)">
            <summary>
            Generally there is no requirement for providing parent object in <see cref="T:JetBrains.Application.UI.Controls.TreeListView.Contracts.ITreeModelProvider"/> 
            But in case optimal restoration is reqiered this method need to be provided. 
            </summary>
            <param name="model"></param>
            <returns>  parent for given model object. </returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewController.IsQuickSearchAccepted(JetBrains.Application.UI.TreeModels.TreeModelNode,System.String)">
            <summary>
            Returns a value indicating if the given item is accepted and should be shown to user
            </summary>
            <param name="modelNode">Node</param>
            <param name="filter">User input in quick search box</param>
            <returns>
            true - node is accepted itself and should be shown to user
            null - node is not accepted itself, however one of its children might be
            false - node is not accepted and shouldn't be shown to user, although one of its children might be
            </returns>
            <remarks>
            In case you are implementing per item filtering without knowledge about children items you should return true if item accepted itself and null otherwise.
            In case you have knowledge about sub items, it would be more optimal to return true and false as final results.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewController.PrepareQuickSearch(System.String,System.Func{System.Boolean})">
            <returns>
            true if preparation succeeds
            false if preparation is not performed (is interupted)</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewController.GetQuickSearchHighlightings(JetBrains.Application.UI.TreeModels.TreeModelNode,System.Int32,System.String,System.String)">
            <summary>
            Provides ranges to highlight quick search occurrences
            </summary>
            <param name="modelNode">Node</param>
            <param name="column">Column index in the tree control</param>
            <param name="text">Actual text in UI. Note, that actual text can be different from what it is provided from model, for example it can be trimmed at the end or even in the middle</param>
            <param name="quickSearchText">User input in quick search box</param>
            <returns>Ranges to highlight</returns>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeView.ITreeViewController.IsBusy">
            <summary>
            Should we show busy indication (for ex., progressbar)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeView.ITreeViewController.Progress">
            <summary>
            Current progress (from 0 to 100),
            Null means intermediate busy indication state
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeView.PreviewSupport">
            <summary>
            Enumerates possible types of preview support/>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeView.PreviewSupport.NotSupported">
            <summary>
            Preview is not supported at all
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeView.PreviewSupport.Supported">
            <summary>
            Preview is supported. Control will be created through a call to <see cref="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview.PreviewCreateControl(JetBrains.Lifetimes.Lifetime)"/> and updated
            through calls to <see cref="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview.PreviewUpdate(JetBrains.Application.UI.Controls.TreeView.IPreviewControl,JetBrains.Application.UI.TreeModels.TreeModelNode)"/>. Preview is invisible by default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeView.PreviewSupport.SupportedAndVisibleByDefault">
            <summary>
            Preview is supported. Control will be created through a call to <see cref="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview.PreviewCreateControl(JetBrains.Lifetimes.Lifetime)"/> and updated
            through calls to <see cref="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview.PreviewUpdate(JetBrains.Application.UI.Controls.TreeView.IPreviewControl,JetBrains.Application.UI.TreeModels.TreeModelNode)"/>. Preview is visible by default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.TreeView.PreviewSupport.Virtual">
            <summary>
            <i>Virtual</i> preview support. No control will be created by <see cref="T:JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview"/>, but calls to <see cref="M:JetBrains.Application.UI.Controls.TreeView.ITreeViewControllerWithPreview.PreviewUpdate(JetBrains.Application.UI.Controls.TreeView.IPreviewControl,JetBrains.Application.UI.TreeModels.TreeModelNode)"/> will be made
            so the inheritor can dispatch them to a custom preview mechanism.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeView.IPreviewControlWithView.View">
            <summary>
            Gets the view that is inserted into the preview panel.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeView.IPreviewControlWithViewModel.Model">
            <summary>
            Gets the view model of view that should be inserted into the preview panel.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.TreeView.StructuredPresenter`2.IStructuredPresenter">
            <summary>
            Untyped item to present, for polymorphic access
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeView.TreeViewController.IsBusy">
            <summary>
            Should we show busy indication (for ex., progressbar)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.TreeView.TreeViewController.Progress">
            <summary>
            Current progress (from 0 to 100),
            Null means intermediate busy indication state
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Utils.ImagePlacement">
            <summary>
            Specify placement of the image.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.Utils.ImagePlacement.LEFT">
            <summary>
            Image is placed to the left of other text.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Controls.Utils.ImagePlacement.RIGHT">
            <summary>
            Image is placed to the right of other text.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem">
            <summary>
            Provides mechanism for specifying most common data for presentation items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.IPresentableItem.Clear">
            <summary>
            Clears item's images and text.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Utils.IPresentableItem.RichText">
            <summary>
            Gets or sets <see cref="P:JetBrains.Application.UI.Controls.Utils.IPresentableItem.RichText"/> object to specify text presentation.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Controls.Utils.IPresentableItem.Images">
            <summary>
            Gets collection of images that are painted before text.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.Utils.IPresentableItemImageOwner">
            <summary>
            Provides mechanism for notification of changes in image collection of <see cref="T:JetBrains.Application.UI.Controls.Utils.IPresentableItem"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.IPresentableItemImageOwner.NotifyImageCollectionChanged">
            <summary>
            Called when image collection has been changed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.PresentableItem.#ctor(JetBrains.UI.Icons.IconId)">
            <summary>
            Creates an icon-only presentable item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.PresentableItem.#ctor(JetBrains.UI.Icons.IconId,JetBrains.UI.RichText.RichText)">
            <summary>
            Creates a presentable item that is a labeled icon, with icon on the left.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.PresentableItem.#ctor(JetBrains.Application.UI.Controls.Utils.IPresentableItem)">
            <summary>
            Creates a static snapshot of the given presentable item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock.#ctor(JetBrains.UI.Icons.IconId)">
            <summary>
            Creates an icon-only presentable item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock.#ctor(JetBrains.UI.Icons.IconId,JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates a presentable item that is a labeled icon, with icon on the left.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Controls.Utils.PresentableItemBlock.#ctor(JetBrains.Application.UI.Controls.Utils.PresentableItemBlock)">
            <summary>
            Creates a static snapshot of the given presentable item.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Controls.WindowlessControlAutomation">
            <summary>
            Helper class for various <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation"/> view-model for <see cref="T:JetBrains.Application.UI.Controls.IWindowlessControl"/> implementations.
            Mostly, dispatches the creation of various <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation"/> for optimal performance.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.DataContext.UIDataConstants.PopupWindowContextSource">
            <summary>
            Provides PopupWindowContextSource. The constant could never be null (there is a fallback rule <see cref="!:MainWindowPopupWindowContext"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.DataContext.UIDataConstants.CloseAllItems">
            <summary>
            The “Close All” family actions are available here.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Diagramming.API.IGraphViewer">
            <summary>
            See IServicesGraphViewer if you want to easily display your graph in a hierarchy tool window (solution required)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Diagramming.DiagramGraphBase.Nodes">
            <summary>
            group nodes not included here
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Diagramming.DiagramGraphBase.AddEdge(JetBrains.Application.UI.Diagramming.API.IDiagramGraphEdge)">
            <summary>
            Adds edge to graph Edges and if edge.Source exist to edge.Source.Edges
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Diagramming.Util.GraphUtils.Elements(JetBrains.Application.UI.Diagramming.API.IDiagramGraph)">
            <summary>
            gets nodes, groups and edges of a graph
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.Extensions.DispatcherEx.AssertAccess(System.Windows.Threading.Dispatcher)">
            <summary>
            Throws if the current thread is not the thread associated with this dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Extensions.DispatcherEx.BeginOrInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            If the current thread is the dispatcher's home thread, executes the action synchronously.
            Otherwise, marshals asynchronous execution to the dispatcher thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Extensions.DispatcherEx.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Wraps the standard <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])"/> with a simple action executor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Extensions.DispatcherEx.BeginInvoke(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Wraps the standard <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])"/> with a simple action executor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Extensions.DispatcherEx.DelayInvoke(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority,System.Action,System.TimeSpan)">
            <summary>
            Invoke action with delay
            </summary>
            <param name="dispatcher">Dispatcher</param>
            <param name="priority">Priority</param>
            <param name="action">Action to invoke</param>
            <param name="delay">Initial delay</param>
        </member>
        <member name="T:JetBrains.Application.UI.Help.ExceptionReport.DefaultIssueTracker">
            <summary>
              <para>The default issue tracker which is used for submitting all exceptions to the Exception Analyzer and YouTrack.</para>
              <para>Until the environment is ready to create this component, a manually-created copy (without any inheritors) is used for submitting exceptions.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.ExceptionReport.ExceptionReportingIconSet">
            <summary>
            As a component running sometimes without Shell, Exception Reporting should request its icons explicitly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService">
            <summary>
            When the Issue Tracker is not available in a UI application, shows exceptions in message boxes.
            This is also the case on early startup of the environment/shell when no full exception reporter has been yet created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService.mySingleMessageBox">
            <summary>
            Do not show more than one msgbox at a time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="sProductName">Product name, if known at the call site. If <c>Null</c>, <see cref="F:JetBrains.Application.Defines.ProductName"/> will be used.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService.ShowException(System.Exception,System.String)">
            <summary>
            Shows an exception message box.
            Prevents two from being shown simultaneousely.
            </summary>
            <param name="exception">The exception whose details are to be shown.</param>
            <param name="sProductName">Product name, if known at the call site. If <c>Null</c>, <see cref="F:JetBrains.Application.Defines.ProductName" /> will be used.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.MessageBoxExceptionReportService.ShowException(JetBrains.Application.ExceptionReport.ExceptionData,System.String)">
            <summary>
            Shows an exception message box.
            Prevents two from being shown simultaneousely.
            </summary>
            <param name="exdata">The exception whose details are to be shown.</param>
            <param name="sProductName">Product name, if known at the call site. If <c>Null</c>, <see cref="F:JetBrains.Application.Defines.ProductName" /> will be used.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.ISelfProfilingTool.GetTestMemorySnapshot(JetBrains.Util.FileSystemPath,System.TimeSpan)">
            <summary>
            Gets memory snapshot (downloads console runner if necessary) and puts it into specified folder.<br/>
            MUST BE used in TESTS only, because downloads console runner package from internal build resource.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.SelfProfilingTool.SelfProfilingTool.GetTestMemorySnapshot(JetBrains.Util.FileSystemPath,System.TimeSpan)">
            <summary>
            Gets memory snapshot (downloads console runner if necessary) and puts it into specified folder.<br/>
            MUST BE used in TESTS only, because downloads console runner package from internal build resource.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.ExceptionReport.ShellLessExceptionReportingHelpers">
            <summary>
            Shared helpers, including non-interactive mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.ShellLessExceptionReportingHelpers.CreateDeadEnd">
            <summary>
            Does not show exceptions to the user.
            Used in Production Mode when we shouldn't be showing the exceptions to the user.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService">
            <summary>
            In dependent console applications, emits their logged exceptions to StdOut/StdErr.
            It could then be captured and procezsed by the parent process (which has means for submitting them to the tracker, for instance).
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.#ctor(JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.DetailsLevel,JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.DetailsLevel,System.String)">
            <param name="levelStdErr">What to write to StdErr, if at all.</param>
            <param name="levelStdOut">What to write to StdOut, if at all.</param>
            <param name="sPrefixOnMessage">Optional. When writing at the <see cref="F:JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.DetailsLevel.Message"/> level, prepends this prefix first.</param>
        </member>
        <member name="T:JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.DetailsLevel">
            <summary>
            What to emit into each stream on an exception.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.DetailsLevel.None">
            <summary>
            Do not write to the stream.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.DetailsLevel.Message">
            <summary>
            Write <see cref="F:JetBrains.Util.ExceptionText.Message"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Help.ExceptionReport.StdErrExceptionReportService.DetailsLevel.FullText">
            <summary>
            Write <see cref="F:JetBrains.Util.ExceptionText.FullText"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Help.ExceptionReport.SubmitToTrackerExceptionReportService.LoginInformation">
            <summary>
            When Shell is running, its component binds this to the Setting Store.
            Otherwise work isolated, ask every time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.Feedback.CommonAttachmentProviders.FileAttachmentProvider.#ctor(JetBrains.Application.UI.Controls.FileSystem.ICommonFileDialogs)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Help.Feedback.ExceptionEmbeddedFileAttachment">
            <summary>
            Represents attachment which was added to exception via <c>ExceptionEx.WithAttachment</c> extension method.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.Feedback.IRequiredReportAttachmentProvider">
            <summary>
              Represents a required provider, that attaches in background
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.Feedback.IEnvironmentInfoAttachmentProvider">
            <summary>
              Represents a required provider of environmental information
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.Feedback.IOptionalReportAttachmentProvider">
            <summary>
              Represents an optional provider of attachments
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.HelpSystem.ShowHelp(System.String,JetBrains.Application.UI.Help.HelpSystem.HelpKind,System.String)">
            <summary>
            Opens the help topic for the given keyword.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.HelpSystem.HelpKind">
            <summary>
            What kind of help to show for the keyword.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Help.HelpSystem.HelpKind.Product">
            <summary>
            Help on the current platform-based product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Help.HelpSystem.HelpKind.Msdn">
            <summary>
            MSDN help.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.IShowHelp">
            <summary>
            Allows to hook into showing product help.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Help.IShowHelp.Priority">
            <summary>
            The lower the priority, the sooner called. Use <c>1</c> by default.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Help.IShowHelp.SupportedKinds">
            <summary>
            Help kinds supported by this handler, empty list to call for all.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Help.IShowHelp.ShowHelp(System.String,JetBrains.Application.UI.Help.HelpSystem.HelpKind,System.String)">
            <summary>
            Request to show help. Return whether it were fulfilled by your handler, otherwise, next handlers will be executed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Help.ShowOnlineHelpHandler">
            <summary>
            Handles showing product help on company website if currently connected to Internet.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Help.ShowOnlineHelpHandler.IsDisabled">
            <summary>
            Allows to disable the online Web help handler in a product which does not require it.
            Either set this property to <c>True</c> from an external unrelated component, or override this component and return <c>True</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Animation.AnimatedIconId">
            <summary>
            <para>Base class for icon identifiers to icons whose images might have animation on screen.</para>
            <para>Such icons should yield a reasonable image when queried through the regular static APIs.</para>
            <para>The exact protocol for getting their animation storyboard or frames is not defined yet, and is specific to the particular type of icon IDs.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ColorIcons.ColorIconId">
            <summary>
            An ID to the dynamically-generated per-RGB-color icons.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="!:JetBrains.Common.CommonThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="!:JetBrains.Common.CommonThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="!:JetBrains.Common.CommonThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="!:JetBrains.Common.CommonThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = CommonThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(CommonThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;CommonThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info">
             <summary>
            	<para>
            		<para>Info Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
               9999999999999999999999999999  
               ww************************ww  
               ww++++++++++++++++++++++++ww  
               bb++++++++++    ++++++++++bb  
               ddrrrrrrrrrr    rrrrrrrrrrdd  
               HHrrrrrrrrrrrrrrrrrrrrrrrrHH  
               GGrrrrrrrrrr    rrrrrrrrrrGG  
               AA??????????    ??????????AA  
               OOLLLLLLLLLL    LLLLLLLLLLOO  
               ##cccccccccc    cccccccccc##  
               RRcccccccccc    ccccccccccRR  
               RRccccccccccccccccccccccccRR  
               RR||||||||||||||||||||||||RR  
               DDDDDDDDDDDDDDDDDDDDDDDDDDDD  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Info}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Info))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = UnitTestingFeatureThemedIcons.Info.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;UnitTestingFeatureThemedIcons.Info&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info.Load_Color">
            <summary>Loads the image for Themed Icon Info theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info.Load_Gray">
            <summary>Loads the image for Themed Icon Info theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info.Load_GrayDark">
            <summary>Loads the image for Themed Icon Info theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Info.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Info.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer">
             <summary>
            	<para>
            		<para>Pointer Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   CC1=`                     
                   33-|f=`                   
                   22  :Tu*`                 
                   jj    :72+`               
                   ee      :Jj+`             
                   VV````````,zSr`           
                   EE``````````"{kr`         
                   UU````````````^[K?`       
                   66..............~CXL      
                   ww----:----Fwwwwwwww      
                   bb--:)9F---:Vb:           
                   dd_Jp2}dT---"wX.          
                   OOOC"  uO+:::!Oa          
                          `Xm;:::(#1         
                           -Op~;+sRD*        
                            "DDmur^`         
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:QinefudThemedIconsThemedIcons+Pointer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(QinefudThemedIconsThemedIcons.Pointer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = QinefudThemedIconsThemedIcons.Pointer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;QinefudThemedIconsThemedIcons.Pointer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.Load_Color">
            <summary>Loads the image for Themed Icon Pointer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.Load_Gray">
            <summary>Loads the image for Themed Icon Pointer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.Load_GrayDark">
            <summary>Loads the image for Themed Icon Pointer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.Load_RiderDark">
            <summary>Loads the image for Themed Icon Pointer theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.Load_RiderLight">
            <summary>Loads the image for Themed Icon Pointer theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pointer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Pointer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort">
             <summary>
            	<para>
            		<para>Abort Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                      .+}[L?uyTTEXF:
                      tS-.6w_'RD:-M8
                  `!Tl5S  6w  RD  MB
                  |]_-5S``6w``RD``MB."!/
                  }]``5S``6w``RD``MB0Xgg
                  }]''5S''6w''RD''MB*'gg
                  }]--lI--c7--LT_|MR,-gg
                  }]::::::::::"lDdT,:^gQ
                  r]="""""""""xD{^"""7gE
                  ,]|~~~~~~~~~~~~~~~!8$-
                   +IL=============!AQ=
                    coT!!!!!!!!!!!+A$+
                     ^uu|+//////r[DR_
                      `;Ty6wdORD8Xr`
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Abort}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Abort))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Abort.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Abort&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort.Id">
             <summary>
            	<para>
            		<para>Abort Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort"></see> identifier class.</para>
            		<para>
            			<code>
            
                      .+}[L?uyTTEXF:
                      tS-.6w_'RD:-M8
                  `!Tl5S  6w  RD  MB
                  |]_-5S``6w``RD``MB."!/
                  }]``5S``6w``RD``MB0Xgg
                  }]''5S''6w''RD''MB*'gg
                  }]--lI--c7--LT_|MR,-gg
                  }]::::::::::"lDdT,:^gQ
                  r]="""""""""xD{^"""7gE
                  ,]|~~~~~~~~~~~~~~~!8$-
                   +IL=============!AQ=
                    coT!!!!!!!!!!!+A$+
                     ^uu|+//////r[DR_
                      `;Ty6wdORD8Xr`
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Abort}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Abort))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Abort.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Abort&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort.Load_Color">
            <summary>Loads the image for Themed Icon Abort theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort.Load_Gray">
            <summary>Loads the image for Themed Icon Abort theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort.Load_GrayDark">
            <summary>Loads the image for Themed Icon Abort theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Abort.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Abort.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance">
             <summary>
            	<para>
            		<para>Appearance Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                   .,=!+r)))+/;^"_`
               -;)l?=:''````.-_"~+7i/_
             ^JT=.    `^!!^.       `^L}!`
            ^1\       ?TTTT|  `_^^_`  '?x=
            _u).      _cll("  !rrrr+    ~uc
             -Tur_            -+T7+_     =o!
               .!I[=                     `a1
                  ^o1'          `,=="`   `So
             !{III[xkl          /rrrrr   ~kr
            lZ=.```-.`  `_"^_`  -/c)*_  "E1`
            *6?         ~!!!!;        .?6T`
             =ka!.      .~//=-     `"T6}_
               ~twV7!:```   `'_"=L14o/.
                  '~r}ok6AAAKa1TL/,`
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Appearance}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Appearance))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Appearance.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Appearance&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance.Id">
             <summary>
            	<para>
            		<para>Appearance Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance"></see> identifier class.</para>
            		<para>
            			<code>
            
                   .,=!+r)))+/;^"_`
               -;)l?=:''````.-_"~+7i/_
             ^JT=.    `^!!^.       `^L}!`
            ^1\       ?TTTT|  `_^^_`  '?x=
            _u).      _cll("  !rrrr+    ~uc
             -Tur_            -+T7+_     =o!
               .!I[=                     `a1
                  ^o1'          `,=="`   `So
             !{III[xkl          /rrrrr   ~kr
            lZ=.```-.`  `_"^_`  -/c)*_  "E1`
            *6?         ~!!!!;        .?6T`
             =ka!.      .~//=-     `"T6}_
               ~twV7!:```   `'_"=L14o/.
                  '~r}ok6AAAKa1TL/,`
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Appearance}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Appearance))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Appearance.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Appearance&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance.Load_Color">
            <summary>Loads the image for Themed Icon Appearance theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance.Load_Gray">
            <summary>Loads the image for Themed Icon Appearance theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance.Load_GrayDark">
            <summary>Loads the image for Themed Icon Appearance theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Appearance.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Appearance.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward">
             <summary>
            	<para>
            		<para>Backward Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                     ':~;*L77L+!~:-
                  _*{1lT)c?rrrL)TJ1Fr,
                ~tIl)++++++++++++++cJIF=
              'iu7r+++++++++++++++++++T3}-
             -nu?+++++++!-    `~+++++++rIj_
            `u5Lrrrrrr!-    `~rrrrrrrrrr?oa.
            \Slrrrrr!-    `=rrrrrrrrrrrrr7S)
            {k|rrr!-                  rrrLka
            IE)???=`                  ???LEV
            LU}LLLLL=`    -/LLLLLLLLLLLLLiUl
            .PE)LLLLLL=`    -/LLLLLLLLLLckX-
             "6E|ccccccc=`    -/ccccccc)V9=
              ,K6C)ccccccccccccccccccclUX~
               `Lw42l))))))))))))))iu6bT`
                 `!3GwaI}l7||7J}1e4Ga\`
                    `^+|tjUmmX5fT+~`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Backward}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Backward))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Backward.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Backward&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward.Id">
             <summary>
            	<para>
            		<para>Backward Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward"></see> identifier class.</para>
            		<para>
            			<code>
                     ':~;*L77L+!~:-
                  _*{1lT)c?rrrL)TJ1Fr,
                ~tIl)++++++++++++++cJIF=
              'iu7r+++++++++++++++++++T3}-
             -nu?+++++++!-    `~+++++++rIj_
            `u5Lrrrrrr!-    `~rrrrrrrrrr?oa.
            \Slrrrrr!-    `=rrrrrrrrrrrrr7S)
            {k|rrr!-                  rrrLka
            IE)???=`                  ???LEV
            LU}LLLLL=`    -/LLLLLLLLLLLLLiUl
            .PE)LLLLLL=`    -/LLLLLLLLLLckX-
             "6E|ccccccc=`    -/ccccccc)V9=
              ,K6C)ccccccccccccccccccclUX~
               `Lw42l))))))))))))))iu6bT`
                 `!3GwaI}l7||7J}1e4Ga\`
                    `^+|tjUmmX5fT+~`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Backward}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Backward))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Backward.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Backward&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward.Load_Color">
            <summary>Loads the image for Themed Icon Backward theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward.Load_Gray">
            <summary>Loads the image for Themed Icon Backward theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward.Load_GrayDark">
            <summary>Loads the image for Themed Icon Backward theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Backward.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Backward.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior">
             <summary>
            	<para>
            		<para>Behaivior Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                        -llllll"
                  ^~-  `7J`  `Tl`  -~~`
                "J7!|{cc{"    -{|c}T/|t~
              `Jx~````_~,``````_=:````"Ct.
               "I)````````````````````rI;
               `+u|````.-"~==~"-.````ruc`
            =?}3ir~...-"~~!c(!~~"-..."+7ICL;
            ee,-------_::u$$$$h::_-------:ee
            aa_----------V$$$$b-----------aa
            rtyI7r~___-```^rr~.``-___~+T]V{L
               -ck1_____-``   `'_____lkz-
               ,Eo^,,,,,,,,,,,,,,,,,,"CK=
              `kXr"""";+!"""""";+;^"""/ZZ-
               `rX2T1EEy6+^^^^!XVkZ3T36c.
                 .L|=- .UZ;~~=V6- .~c|-
                        =bbbbbb+
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Behaivior}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Behaivior))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Behaivior.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Behaivior&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior.Id">
             <summary>
            	<para>
            		<para>Behaivior Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior"></see> identifier class.</para>
            		<para>
            			<code>
                        -llllll"
                  ^~-  `7J`  `Tl`  -~~`
                "J7!|{cc{"    -{|c}T/|t~
              `Jx~````_~,``````_=:````"Ct.
               "I)````````````````````rI;
               `+u|````.-"~==~"-.````ruc`
            =?}3ir~...-"~~!c(!~~"-..."+7ICL;
            ee,-------_::u$$$$h::_-------:ee
            aa_----------V$$$$b-----------aa
            rtyI7r~___-```^rr~.``-___~+T]V{L
               -ck1_____-``   `'_____lkz-
               ,Eo^,,,,,,,,,,,,,,,,,,"CK=
              `kXr"""";+!"""""";+;^"""/ZZ-
               `rX2T1EEy6+^^^^!XVkZ3T36c.
                 .L|=- .UZ;~~=V6- .~c|-
                        =bbbbbb+
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Behaivior}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Behaivior))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Behaivior.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Behaivior&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior.Load_Color">
            <summary>Loads the image for Themed Icon Behaivior theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior.Load_Gray">
            <summary>Loads the image for Themed Icon Behaivior theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior.Load_GrayDark">
            <summary>Loads the image for Themed Icon Behaivior theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Behaivior.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Behaivior.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb">
             <summary>
            	<para>
            		<para>Bulb Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                        .-_,"",_-.
                     .,="-.````.-"="'
                    "!_`           -;~`
                  `;!.  ``````````  `;!`
                  ^+_ `````````````` -+=
                  \r` ..............  rr
                  =c- `---+)"")+---. .c!
                  `|r` .___roor___'  +T-
                   .)|_  .,,oo,,.` -LT-
                     ~tT  ""oo""  (t=`
                      [[          [[
                      DD`'_^=+cluk6X
                      OD.'_^=+cluk6U
                      cDr'_^=+cluh6|
                       TDo+==+TuU9T`
                        -rk4AGUer-
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Bulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Bulb))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Bulb.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Bulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb.Id">
             <summary>
            	<para>
            		<para>Bulb Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb"></see> identifier class.</para>
            		<para>
            			<code>
                        .-_,"",_-.
                     .,="-.````.-"="'
                    "!_`           -;~`
                  `;!.  ``````````  `;!`
                  ^+_ `````````````` -+=
                  \r` ..............  rr
                  =c- `---+)"")+---. .c!
                  `|r` .___roor___'  +T-
                   .)|_  .,,oo,,.` -LT-
                     ~tT  ""oo""  (t=`
                      [[          [[
                      DD`'_^=+cluk6X
                      OD.'_^=+cluk6U
                      cDr'_^=+cluh6|
                       TDo+==+TuU9T`
                        -rk4AGUer-
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Bulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Bulb))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Bulb.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Bulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb.Load_Color">
            <summary>Loads the image for Themed Icon Bulb theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb.Load_Gray">
            <summary>Loads the image for Themed Icon Bulb theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb.Load_GrayDark">
            <summary>Loads the image for Themed Icon Bulb theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Bulb.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Bulb.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch">
             <summary>
            	<para>
            		<para>ClearSearch Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ClearSearch}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ClearSearch))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ClearSearch.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ClearSearch&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch.Id">
             <summary>
            	<para>
            		<para>ClearSearch Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ClearSearch}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ClearSearch))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ClearSearch.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ClearSearch&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch.Load_Color">
            <summary>Loads the image for Themed Icon ClearSearch theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch.Load_Gray">
            <summary>Loads the image for Themed Icon ClearSearch theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch.Load_GrayDark">
            <summary>Loads the image for Themed Icon ClearSearch theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ClearSearch.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ClearSearch.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close">
             <summary>
            	<para>
            		<para>Close Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Close}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Close))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Close.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Close&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close.Id">
             <summary>
            	<para>
            		<para>Close Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Close}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Close))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Close.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Close&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close.Load_Color">
            <summary>Loads the image for Themed Icon Close theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close.Load_Gray">
            <summary>Loads the image for Themed Icon Close theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close.Load_GrayDark">
            <summary>Loads the image for Themed Icon Close theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Close.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Close.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem">
             <summary>
            	<para>
            		<para>CloseTabStripItem Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+CloseTabStripItem}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.CloseTabStripItem))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.CloseTabStripItem.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.CloseTabStripItem&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem.Id">
             <summary>
            	<para>
            		<para>CloseTabStripItem Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+CloseTabStripItem}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.CloseTabStripItem))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.CloseTabStripItem.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.CloseTabStripItem&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem.Load_Color">
            <summary>Loads the image for Themed Icon CloseTabStripItem theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem.Load_Gray">
            <summary>Loads the image for Themed Icon CloseTabStripItem theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem.Load_GrayDark">
            <summary>Loads the image for Themed Icon CloseTabStripItem theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CloseTabStripItem.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CloseTabStripItem.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr">
             <summary>
            	<para>
            		<para>Clr Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                        ````````
                        ``II````
                        ````II``
                ``````````II````aaaaaaaaaaaa
                ``%%``%%````II``rL)Tsl{1ujSS
            ````%%%%%%%%``II````rL)Tsl{1ujEE
            ``%%%%``````````II``rL)Tsl{1ujXX
            ````%%``%%%%``II````        ,"44
            ``%%%%``%%%%````II``````````,"bb
            ````%%``%%%%``II````'''''''',"AA
            ``%%%%``````````II``________,"RR
            ````%%%%%%%%``II````"""""""","DD
                ``%%``%%````II``  ``.--_,"88
                ``````````II````%%%%%%%%%%%%
                        ````II``
                        ````````
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Clr}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Clr))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Clr.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Clr&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr.Id">
             <summary>
            	<para>
            		<para>Clr Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr"></see> identifier class.</para>
            		<para>
            			<code>
                        ````````
                        ``II````
                        ````II``
                ``````````II````aaaaaaaaaaaa
                ``%%``%%````II``rL)Tsl{1ujSS
            ````%%%%%%%%``II````rL)Tsl{1ujEE
            ``%%%%``````````II``rL)Tsl{1ujXX
            ````%%``%%%%``II````        ,"44
            ``%%%%``%%%%````II``````````,"bb
            ````%%``%%%%``II````'''''''',"AA
            ``%%%%``````````II``________,"RR
            ````%%%%%%%%``II````"""""""","DD
                ``%%``%%````II``  ``.--_,"88
                ``````````II````%%%%%%%%%%%%
                        ````II``
                        ````````
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Clr}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Clr))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Clr.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Clr&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr.Load_Color">
            <summary>Loads the image for Themed Icon Clr theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr.Load_Gray">
            <summary>Loads the image for Themed Icon Clr theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr.Load_GrayDark">
            <summary>Loads the image for Themed Icon Clr theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Clr.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Clr.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll">
             <summary>
            	<para>
            		<para>CollapseAll Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
              666666666666666666666666
              44~~~~~~~~~~~~~~~~~~~~44
              ww==                ==wwwwww
              bb==                ==bb~~bb
              dd;;                ;;dd==dd
              HH!!  @@@@@@@@@@@@  !!HH==HH
              AA!!  @@@@@@@@@@@@  !!AA;;AA
              ##//                //##!!##
              RR++                ++RR!!RR
              RR++                ++RR//RR
              DDrrrrrrrrrrrrrrrrrrrrDD++DD
              DDDDDDDDDDDDDDDDDDDDDDDD++DD
                  DDrrrrrrrrrrrrrrrrrrrrDD
                  888888888888888888888888
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+CollapseAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.CollapseAll))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.CollapseAll.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.CollapseAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll.Id">
             <summary>
            	<para>
            		<para>CollapseAll Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll"></see> identifier class.</para>
            		<para>
            			<code>
            
              666666666666666666666666
              44~~~~~~~~~~~~~~~~~~~~44
              ww==                ==wwwwww
              bb==                ==bb~~bb
              dd;;                ;;dd==dd
              HH!!  @@@@@@@@@@@@  !!HH==HH
              AA!!  @@@@@@@@@@@@  !!AA;;AA
              ##//                //##!!##
              RR++                ++RR!!RR
              RR++                ++RR//RR
              DDrrrrrrrrrrrrrrrrrrrrDD++DD
              DDDDDDDDDDDDDDDDDDDDDDDD++DD
                  DDrrrrrrrrrrrrrrrrrrrrDD
                  888888888888888888888888
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+CollapseAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.CollapseAll))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.CollapseAll.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.CollapseAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll.Load_Color">
            <summary>Loads the image for Themed Icon CollapseAll theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll.Load_Gray">
            <summary>Loads the image for Themed Icon CollapseAll theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll.Load_GrayDark">
            <summary>Loads the image for Themed Icon CollapseAll theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CollapseAll.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CollapseAll.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16">
             <summary>
            	<para>
            		<para>ColorSelection16x16 Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                                 `;TZA9t,
                           `"r)!|DAlr+iw$T
                          cRw(|wAT==!/+rQ$
                          CD5;"^~=!/+r7RgT
                         `=uGMPr!/+r7dgw"
                       `=tc,"tR$b7?cjQg"
                     `=tc,```-=CDgR1u$g=
                   `=tc,``  `-~c{JwggA"
                 `=tc,``  `-~c{r-
                ~tc,.'. `-~c{r-
               ={!.'--_,~c{r-
              ={!'--_,~c{r-
              *{r",=rT{+-
               .*{{c=_
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ColorSelection16x16}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ColorSelection16x16))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ColorSelection16x16.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ColorSelection16x16&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16.Id">
             <summary>
            	<para>
            		<para>ColorSelection16x16 Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16"></see> identifier class.</para>
            		<para>
            			<code>
            
                                 `;TZA9t,
                           `"r)!|DAlr+iw$T
                          cRw(|wAT==!/+rQ$
                          CD5;"^~=!/+r7RgT
                         `=uGMPr!/+r7dgw"
                       `=tc,"tR$b7?cjQg"
                     `=tc,```-=CDgR1u$g=
                   `=tc,``  `-~c{JwggA"
                 `=tc,``  `-~c{r-
                ~tc,.'. `-~c{r-
               ={!.'--_,~c{r-
              ={!'--_,~c{r-
              *{r",=rT{+-
               .*{{c=_
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ColorSelection16x16}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ColorSelection16x16))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ColorSelection16x16.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ColorSelection16x16&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16.Load_Color">
            <summary>Loads the image for Themed Icon ColorSelection16x16 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16.Load_Gray">
            <summary>Loads the image for Themed Icon ColorSelection16x16 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16.Load_GrayDark">
            <summary>Loads the image for Themed Icon ColorSelection16x16 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ColorSelection16x16.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ColorSelection16x16.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components">
             <summary>
            	<para>
            		<para>Components Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                              11111111111111
                              jj----------jj
              oooooooooooooo  VV__________VV
              ee          ee  hh""""""""""hh
              yy          yy  ww~~~~~~~~~~ww
              VV``````````VV  GG;;;;;;;;;;GG
              EE``````````EE  RRRRRRRRRRRRRR
              UU``````````UU
              66666666666666666666666666
              ww``````````ww          ww
              bb..........bb``````````bb
              HH----------HH``````````HH
              OO__________OO..........OO
              RR::::::::::RR----------RR
              DDDDDDDDDDDDDDDDDDDDDDDDDD
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Components}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Components))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Components.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Components&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components.Id">
             <summary>
            	<para>
            		<para>Components Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components"></see> identifier class.</para>
            		<para>
            			<code>
                              11111111111111
                              jj----------jj
              oooooooooooooo  VV__________VV
              ee          ee  hh""""""""""hh
              yy          yy  ww~~~~~~~~~~ww
              VV``````````VV  GG;;;;;;;;;;GG
              EE``````````EE  RRRRRRRRRRRRRR
              UU``````````UU
              66666666666666666666666666
              ww``````````ww          ww
              bb..........bb``````````bb
              HH----------HH``````````HH
              OO__________OO..........OO
              RR::::::::::RR----------RR
              DDDDDDDDDDDDDDDDDDDDDDDDDD
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Components}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Components))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Components.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Components&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components.Load_Color">
            <summary>Loads the image for Themed Icon Components theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components.Load_Gray">
            <summary>Loads the image for Themed Icon Components theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components.Load_GrayDark">
            <summary>Loads the image for Themed Icon Components theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Components.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Components.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement">
             <summary>
            	<para>
            		<para>CompositeElement Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                       `!T{ee{T/-
                     .xXl~-``-"TXo-
                    _9y-```..```-ob"
                    {O~`.------'`_Oa
                    2R^'--------'_RX
                    ^Dk,-______-_eD;
                     _RmF^____"lAD^
                    /g@u` ;GR+ `l@g/
              -\TtIPRF. ?g@JJ@@7 `7RXItT+_
            `lyr^,,_' ~g@J    J@g! ._,,"+aF.
            TX!::::::~Xk        aX!::::::~X]
            Fd/^^^^^^=dy        Fd/^^^^^^=dy
            -XpT;===)w4_        -XpT;===)w4_
             `;ob88Hy/`          `;ob88Hy/`
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+CompositeElement}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.CompositeElement))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.CompositeElement.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.CompositeElement&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement.Id">
             <summary>
            	<para>
            		<para>CompositeElement Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement"></see> identifier class.</para>
            		<para>
            			<code>
            
                       `!T{ee{T/-
                     .xXl~-``-"TXo-
                    _9y-```..```-ob"
                    {O~`.------'`_Oa
                    2R^'--------'_RX
                    ^Dk,-______-_eD;
                     _RmF^____"lAD^
                    /g@u` ;GR+ `l@g/
              -\TtIPRF. ?g@JJ@@7 `7RXItT+_
            `lyr^,,_' ~g@J    J@g! ._,,"+aF.
            TX!::::::~Xk        aX!::::::~X]
            Fd/^^^^^^=dy        Fd/^^^^^^=dy
            -XpT;===)w4_        -XpT;===)w4_
             `;ob88Hy/`          `;ob88Hy/`
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+CompositeElement}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.CompositeElement))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.CompositeElement.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.CompositeElement&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement.Load_Color">
            <summary>Loads the image for Themed Icon CompositeElement theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement.Load_Gray">
            <summary>Loads the image for Themed Icon CompositeElement theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement.Load_GrayDark">
            <summary>Loads the image for Themed Icon CompositeElement theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.CompositeElement.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CompositeElement.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete">
             <summary>
            	<para>
            		<para>Delete Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                 `;)JJc~`          .+Shhhh
                :V{,--~ee_       "JET_ /kl
                Jk.    `7k*   `!u5\. _I2~
                ;SL``````!at"cSl~``.)SL`
                 "1u/.````:1jr:``.;uF_
                   ~C1!-'''--''',lj!
                     =ox!-----_rol.
                   `=CF+"______~l3=
                 `!]l/"""""/r~"""r17-
               -+17/^^^^^!iFT[c=^^=s1;
             -?F|!~~~~~=)C\` -+CT/~~r{T-
            ^}T!======rtL-     `=l7+=!T}!
            |l/=====+iT:          "TJr!+JT_
            ~l)+!/+Tz~              _rJc*)l!
             '~+cc*"`                 '!iiii
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Delete}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Delete))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Delete.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Delete&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete.Id">
             <summary>
            	<para>
            		<para>Delete Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete"></see> identifier class.</para>
            		<para>
            			<code>
            
                 `;)JJc~`          .+Shhhh
                :V{,--~ee_       "JET_ /kl
                Jk.    `7k*   `!u5\. _I2~
                ;SL``````!at"cSl~``.)SL`
                 "1u/.````:1jr:``.;uF_
                   ~C1!-'''--''',lj!
                     =ox!-----_rol.
                   `=CF+"______~l3=
                 `!]l/"""""/r~"""r17-
               -+17/^^^^^!iFT[c=^^=s1;
             -?F|!~~~~~=)C\` -+CT/~~r{T-
            ^}T!======rtL-     `=l7+=!T}!
            |l/=====+iT:          "TJr!+JT_
            ~l)+!/+Tz~              _rJc*)l!
             '~+cc*"`                 '!iiii
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Delete}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Delete))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Delete.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Delete&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete.Load_Color">
            <summary>Loads the image for Themed Icon Delete theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete.Load_Gray">
            <summary>Loads the image for Themed Icon Delete theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete.Load_GrayDark">
            <summary>Loads the image for Themed Icon Delete theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Delete.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Delete.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document">
             <summary>
            	<para>
            		<para>Document Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                nnnnnnnnnnnnnn3/`
                oo------------~iu\`
                22--------------~lo+`
                55----````````----~le+`
                yy----        ------=ta+
                VV----            ----VV
                kk----            ----kk
                EE----            ----EE
                ZZ----            ----ZZ
                XX----            ----XX
                66----            ----66
                99____________________99
                bb____________________bb
                dddddddddddddddddddddddd
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Document}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Document))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Document.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Document&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document.Id">
             <summary>
            	<para>
            		<para>Document Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document"></see> identifier class.</para>
            		<para>
            			<code>
            
                nnnnnnnnnnnnnn3/`
                oo------------~iu\`
                22--------------~lo+`
                55----````````----~le+`
                yy----        ------=ta+
                VV----            ----VV
                kk----            ----kk
                EE----            ----EE
                ZZ----            ----ZZ
                XX----            ----XX
                66----            ----66
                99____________________99
                bb____________________bb
                dddddddddddddddddddddddd
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Document}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Document))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Document.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Document&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document.Load_Color">
            <summary>Loads the image for Themed Icon Document theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document.Load_Gray">
            <summary>Loads the image for Themed Icon Document theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document.Load_GrayDark">
            <summary>Loads the image for Themed Icon Document theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Document.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Document.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute">
             <summary>
            	<para>
            		<para>DotCoverExecute Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
                   `-_"^==//TTr+!!~_'`
                =+r!^:-'``  ``..__~!Ltlr
                rc`  ```````-----..`  11
                /|'``.......,,,,,,,_`'ut
                =7,`.'''''''"""""""_'"o)
                -J+.'-------~~~~~~~,_c5~
                 |l"-_______;;;;;;="=oo`
                 -Fl"_:,,,,,\\\\\/==uV^
                  "1l","""""rrrr+!!3k/
                   ,}x+^^^~~))cr+7Sk=
                     =ox+~~=T|clSh?`
                      `!IoT/loZP?'
                         ,|kwF~
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DotCoverExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DotCoverExecute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DotCoverExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DotCoverExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute.Id">
             <summary>
            	<para>
            		<para>DotCoverExecute Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute"></see> identifier class.</para>
            		<para>
            			<code>
            
            
                   `-_"^==//TTr+!!~_'`
                =+r!^:-'``  ``..__~!Ltlr
                rc`  ```````-----..`  11
                /|'``.......,,,,,,,_`'ut
                =7,`.'''''''"""""""_'"o)
                -J+.'-------~~~~~~~,_c5~
                 |l"-_______;;;;;;="=oo`
                 -Fl"_:,,,,,\\\\\/==uV^
                  "1l","""""rrrr+!!3k/
                   ,}x+^^^~~))cr+7Sk=
                     =ox+~~=T|clSh?`
                      `!IoT/loZP?'
                         ,|kwF~
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DotCoverExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DotCoverExecute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DotCoverExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DotCoverExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute.Load_Color">
            <summary>Loads the image for Themed Icon DotCoverExecute theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute.Load_Gray">
            <summary>Loads the image for Themed Icon DotCoverExecute theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotCoverExecute theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotCoverExecute.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotCoverExecute.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute">
             <summary>
            	<para>
            		<para>DotMemoryExecute Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
                            DD6at)*-
                       `"!r|88~=*coD9?-
                     "|5T!,.WW~~~~~=TGWl`
                   `|V/.`"^^$$///////+V$Z`
                  `jS,`"_---QQLLLLLLLLLEQ}
                  T4/`^-----gg777777777Jg$
                  Vb_._.....gggggggggggggg
                  }G+'"````````````,'!G5
                  -b6"-,          __,6A,
                   .Vm?_"".`  `.,"_+AX-
                     r6Ru+!^__"=+1Gbc`
                       -LuEH88Oho)_
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DotMemoryExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DotMemoryExecute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DotMemoryExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DotMemoryExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute.Id">
             <summary>
            	<para>
            		<para>DotMemoryExecute Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute"></see> identifier class.</para>
            		<para>
            			<code>
            
            
                            DD6at)*-
                       `"!r|88~=*coD9?-
                     "|5T!,.WW~~~~~=TGWl`
                   `|V/.`"^^$$///////+V$Z`
                  `jS,`"_---QQLLLLLLLLLEQ}
                  T4/`^-----gg777777777Jg$
                  Vb_._.....gggggggggggggg
                  }G+'"````````````,'!G5
                  -b6"-,          __,6A,
                   .Vm?_"".`  `.,"_+AX-
                     r6Ru+!^__"=+1Gbc`
                       -LuEH88Oho)_
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DotMemoryExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DotMemoryExecute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DotMemoryExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DotMemoryExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute.Load_Color">
            <summary>Loads the image for Themed Icon DotMemoryExecute theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute.Load_Gray">
            <summary>Loads the image for Themed Icon DotMemoryExecute theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotMemoryExecute theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotMemoryExecute.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotMemoryExecute.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute">
             <summary>
            	<para>
            		<para>DotTraceExecute Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                      %%%%%%%%%%%%
                      $$""""""""$$
                      gM8R====RDWg
                   `;tVl+/;~~=!+iSx!.
                  /ha+"_.``  ```` .LXr
                 Tw}"-`        ~[{  7wF
                /A{_-       "F8Bi  ._TAc
                VD~_`     +MQQM~    __DH
                68"-`     JQQE.    `-_8D
                )Ml-.``````````````.-?M1
                `X$s-.````````````.'c$O`
                 `2QX"..`````````."aQX`
                   "u$8l="-..-"=l8Q5~
                      ^IXR$gg$D4u=
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DotTraceExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DotTraceExecute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DotTraceExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DotTraceExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute.Id">
             <summary>
            	<para>
            		<para>DotTraceExecute Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute"></see> identifier class.</para>
            		<para>
            			<code>
            
                      %%%%%%%%%%%%
                      $$""""""""$$
                      gM8R====RDWg
                   `;tVl+/;~~=!+iSx!.
                  /ha+"_.``  ```` .LXr
                 Tw}"-`        ~[{  7wF
                /A{_-       "F8Bi  ._TAc
                VD~_`     +MQQM~    __DH
                68"-`     JQQE.    `-_8D
                )Ml-.``````````````.-?M1
                `X$s-.````````````.'c$O`
                 `2QX"..`````````."aQX`
                   "u$8l="-..-"=l8Q5~
                      ^IXR$gg$D4u=
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DotTraceExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DotTraceExecute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DotTraceExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DotTraceExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute.Load_Color">
            <summary>Loads the image for Themed Icon DotTraceExecute theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute.Load_Gray">
            <summary>Loads the image for Themed Icon DotTraceExecute theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotTraceExecute theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotTraceExecute.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotTraceExecute.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down">
             <summary>
            	<para>
            		<para>Down Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                        11111111
                        ]]____]]
                        CC____CC
                        }}----}}
                        ll----ll
                  ll7;- ll....ll -;7ll
                  ii_=cTii````iiTc=_ii
                  77```-=c````c=-```77
                  ;T!.````````````.!T/
                   `;|;.        .;|!.
                     `=)=`    `=)!.
                       `=c=``=c!.
                         `=cc;.
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Down}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Down))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Down.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Down&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down.Id">
             <summary>
            	<para>
            		<para>Down Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down"></see> identifier class.</para>
            		<para>
            			<code>
            
                        11111111
                        ]]____]]
                        CC____CC
                        }}----}}
                        ll----ll
                  ll7;- ll....ll -;7ll
                  ii_=cTii````iiTc=_ii
                  77```-=c````c=-```77
                  ;T!.````````````.!T/
                   `;|;.        .;|!.
                     `=)=`    `=)!.
                       `=c=``=c!.
                         `=cc;.
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Down}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Down))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Down.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Down&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down.Load_Color">
            <summary>Loads the image for Themed Icon Down theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down.Load_Gray">
            <summary>Loads the image for Themed Icon Down theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down.Load_GrayDark">
            <summary>Loads the image for Themed Icon Down theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Down.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Down.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown">
             <summary>
            	<para>
            		<para>DropDown Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
                    $$$$$$$$$$$$$$$$
            
                    $$$$$$$$$$$$$$$$
                    "X$$$$$$$$$$$$X"
                      "X$$$$$$$$X"
                        "X$$$$X"
                          "XX"
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DropDown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DropDown))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DropDown.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DropDown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown.Id">
             <summary>
            	<para>
            		<para>DropDown Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
                    $$$$$$$$$$$$$$$$
            
                    $$$$$$$$$$$$$$$$
                    "X$$$$$$$$$$$$X"
                      "X$$$$$$$$X"
                        "X$$$$X"
                          "XX"
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+DropDown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.DropDown))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.DropDown.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.DropDown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown.Load_Color">
            <summary>Loads the image for Themed Icon DropDown theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown.Load_Gray">
            <summary>Loads the image for Themed Icon DropDown theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown.Load_GrayDark">
            <summary>Loads the image for Themed Icon DropDown theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DropDown.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DropDown.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate">
             <summary>
            	<para>
            		<para>Duplicate Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                      33333333333333I/`
                      oo------------~Ju\`
                      ee--------------~lj+`
                      aa----``````------~t5+
            33333333333333Ir.     --------SS
            oo------------~Ju/.       ----kk
            ee--------------~lo\`     ----EE
            aa----``````------~t5\    ----hh
            SS----      --------SS    ----XX
            kk----          ----kk--------44
            EE----          ----EE________ww
            hh----          ----hhdddddddddd
            XX----          ----XX
            44------------------44
            ww__________________ww
            dddddddddddddddddddddd
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Duplicate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Duplicate))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Duplicate.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Duplicate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate.Id">
             <summary>
            	<para>
            		<para>Duplicate Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate"></see> identifier class.</para>
            		<para>
            			<code>
                      33333333333333I/`
                      oo------------~Ju\`
                      ee--------------~lj+`
                      aa----``````------~t5+
            33333333333333Ir.     --------SS
            oo------------~Ju/.       ----kk
            ee--------------~lo\`     ----EE
            aa----``````------~t5\    ----hh
            SS----      --------SS    ----XX
            kk----          ----kk--------44
            EE----          ----EE________ww
            hh----          ----hhdddddddddd
            XX----          ----XX
            44------------------44
            ww__________________ww
            dddddddddddddddddddddd
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Duplicate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Duplicate))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Duplicate.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Duplicate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate.Load_Color">
            <summary>Loads the image for Themed Icon Duplicate theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate.Load_Gray">
            <summary>Loads the image for Themed Icon Duplicate theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate.Load_GrayDark">
            <summary>Loads the image for Themed Icon Duplicate theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Duplicate.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Duplicate.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0">
             <summary>
            	<para>
            		<para>Edit0 Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                  `*1oL.
                                `+h3""aRi.
                              `~Jsa},..=6WC'
                            `=lc::ctX5=__+#QJ
                          `=t),` ``,)F9X*+bgk
                        `={T"`  `````"TIRgH"
                      `;]7^`  `......_?IL_
                    `!Ii^.  `......:cuc-
                  `!ul~.  `------,)o)-
                `!jt='  .------"Ta|-
              `/aF=-  .------^7ST-
             /ykki^________^ik7-
             KK!IKKl~____~lKs-
             UU::/uUUt==tUl-
             66,,,,/2666t_
             wwwwwwwww}_
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Edit0}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Edit0))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Edit0.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Edit0&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0.Id">
             <summary>
            	<para>
            		<para>Edit0 Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0"></see> identifier class.</para>
            		<para>
            			<code>
                                  `*1oL.
                                `+h3""aRi.
                              `~Jsa},..=6WC'
                            `=lc::ctX5=__+#QJ
                          `=t),` ``,)F9X*+bgk
                        `={T"`  `````"TIRgH"
                      `;]7^`  `......_?IL_
                    `!Ii^.  `......:cuc-
                  `!ul~.  `------,)o)-
                `!jt='  .------"Ta|-
              `/aF=-  .------^7ST-
             /ykki^________^ik7-
             KK!IKKl~____~lKs-
             UU::/uUUt==tUl-
             66,,,,/2666t_
             wwwwwwwww}_
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Edit0}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Edit0))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Edit0.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Edit0&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0.Load_Color">
            <summary>Loads the image for Themed Icon Edit0 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0.Load_Gray">
            <summary>Loads the image for Themed Icon Edit0 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0.Load_GrayDark">
            <summary>Loads the image for Themed Icon Edit0 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit0.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Edit0.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error">
             <summary>
            	<para>
            		<para>Error Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                      "*)t266aF)+^
                   ^lRHj[lTLLTlCobR[=
                 rRm2Trrrrrrrrrrrr)oGD7`
               `982L?????????????????I8O-
              `d%1cccccccccccccccccccc}8R`
              c0E||||||||||||||||||||||50C
              b$CTTT                TTTJ$8
              O$Czzz                zzzl$M
              tQXJJJJJJJJJJJJJJJJJJJJJJVQV
              `MQellllllllllllllllllll3$$-
               -MQEtttttttttttttttttty$Q,
                `ug%61}}}}}}}}}}}}Ch8g6-
                  .LAgWwKau{{3aE98gDT-
                     .?u6D$gg$D6j)-
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Error}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Error))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Error.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Error&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error.Id">
             <summary>
            	<para>
            		<para>Error Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error"></see> identifier class.</para>
            		<para>
            			<code>
            
                      "*)t266aF)+^
                   ^lRHj[lTLLTlCobR[=
                 rRm2Trrrrrrrrrrrr)oGD7`
               `982L?????????????????I8O-
              `d%1cccccccccccccccccccc}8R`
              c0E||||||||||||||||||||||50C
              b$CTTT                TTTJ$8
              O$Czzz                zzzl$M
              tQXJJJJJJJJJJJJJJJJJJJJJJVQV
              `MQellllllllllllllllllll3$$-
               -MQEtttttttttttttttttty$Q,
                `ug%61}}}}}}}}}}}}Ch8g6-
                  .LAgWwKau{{3aE98gDT-
                     .?u6D$gg$D6j)-
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Error}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Error))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Error.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Error&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error.Load_Color">
            <summary>Loads the image for Themed Icon Error theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error.Load_Gray">
            <summary>Loads the image for Themed Icon Error theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error.Load_GrayDark">
            <summary>Loads the image for Themed Icon Error theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Error.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Error.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge">
             <summary>
            	<para>
            		<para>ErrorLarge Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                     -~!rTlCfl7?/~_
                  "T5lr+!======!+rJel~
                /E]r!!!!!!!!!!!!!!!!+}P+
              -kor+++++++++++++++++++++1U,
             _Htrrrr*_.-^rrrrrr~-.-/rrrriG^
            `O1|||||,    `~)|=`    -|||||tD-
            7Hssssss7~`    ``     "Tssssss4o
            4U{{{{{{{{t=`       ~J{{{{{{{{VD
            G4333333333r.      `/133333333E%
            1DaaaaaaaL.    ``    `+eaaaaaaRZ
            -B9kkkkk=    `;5S\`    ,kkkkkX$:
             =$pXXXX3_ '!kXXXXP+- _FXXXXb$r
              =M8bbbbbbbbbbbbbbbbbbbbbbD$/
               `x$8R################R8$a.
                 `c#QN8DDDDDDDDDD8MQD7.
                    `!7o6DNQQBDw57\`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge.Id">
             <summary>
            	<para>
            		<para>ErrorLarge Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge"></see> identifier class.</para>
            		<para>
            			<code>
                     -~!rTlCfl7?/~_
                  "T5lr+!======!+rJel~
                /E]r!!!!!!!!!!!!!!!!+}P+
              -kor+++++++++++++++++++++1U,
             _Htrrrr*_.-^rrrrrr~-.-/rrrriG^
            `O1|||||,    `~)|=`    -|||||tD-
            7Hssssss7~`    ``     "Tssssss4o
            4U{{{{{{{{t=`       ~J{{{{{{{{VD
            G4333333333r.      `/133333333E%
            1DaaaaaaaL.    ``    `+eaaaaaaRZ
            -B9kkkkk=    `;5S\`    ,kkkkkX$:
             =$pXXXX3_ '!kXXXXP+- _FXXXXb$r
              =M8bbbbbbbbbbbbbbbbbbbbbbD$/
               `x$8R################R8$a.
                 `c#QN8DDDDDDDDDD8MQD7.
                    `!7o6DNQQBDw57\`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge.Load_Color">
            <summary>Loads the image for Themed Icon ErrorLarge theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge.Load_Gray">
            <summary>Loads the image for Themed Icon ErrorLarge theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge.Load_GrayDark">
            <summary>Loads the image for Themed Icon ErrorLarge theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorLarge.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ErrorLarge.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff">
             <summary>
            	<para>
            		<para>ErrorOff Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorOff}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorOff))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorOff.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorOff&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff.Id">
             <summary>
            	<para>
            		<para>ErrorOff Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorOff}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorOff))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorOff.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorOff&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff.Load_Color">
            <summary>Loads the image for Themed Icon ErrorOff theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff.Load_Gray">
            <summary>Loads the image for Themed Icon ErrorOff theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff.Load_GrayDark">
            <summary>Loads the image for Themed Icon ErrorOff theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOff.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ErrorOff.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn">
             <summary>
            	<para>
            		<para>ErrorOn Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
            BB============================BB
            $$==########################==$$
            QQ!!AAAAAAAAAA    AAAAAAAAAA!!QQ
            QQ!!HHHHHHHHHH    HHHHHHHHHH!!QQ
            gg\\bbbbbbbbbb    bbbbbbbbbb\\gg
            gg++wwwwwwwwww    wwwwwwwwww++gg
            ggrr6666666666    6666666666rrgg
            ggLLXXXXXXXXXX^  _XXXXXXXXXXLLgg
            ggccKKKKKKKKKKy` uKKKKKKKKKKccgg
            @@||kkkkkkkkkkkkkkkkkkkkkkkk||@@
            @@TTVVVVVVVVVV!--~VVVVVVVVVVTT@@
            @@zzaaaaaaaaaa~``,aaaaaaaaaazz@@
            @@lleeeeeeeeeeeeeeeeeeeeeeeell@@
            @@}}}}}}}}}}}}}}}}}}}}}}}}}}}}@@
            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorOn}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorOn))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorOn.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorOn&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn.Id">
             <summary>
            	<para>
            		<para>ErrorOn Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn"></see> identifier class.</para>
            		<para>
            			<code>
            WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
            BB============================BB
            $$==########################==$$
            QQ!!AAAAAAAAAA    AAAAAAAAAA!!QQ
            QQ!!HHHHHHHHHH    HHHHHHHHHH!!QQ
            gg\\bbbbbbbbbb    bbbbbbbbbb\\gg
            gg++wwwwwwwwww    wwwwwwwwww++gg
            ggrr6666666666    6666666666rrgg
            ggLLXXXXXXXXXX^  _XXXXXXXXXXLLgg
            ggccKKKKKKKKKKy` uKKKKKKKKKKccgg
            @@||kkkkkkkkkkkkkkkkkkkkkkkk||@@
            @@TTVVVVVVVVVV!--~VVVVVVVVVVTT@@
            @@zzaaaaaaaaaa~``,aaaaaaaaaazz@@
            @@lleeeeeeeeeeeeeeeeeeeeeeeell@@
            @@}}}}}}}}}}}}}}}}}}}}}}}}}}}}@@
            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorOn}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorOn))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorOn.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorOn&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn.Load_Color">
            <summary>Loads the image for Themed Icon ErrorOn theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn.Load_Gray">
            <summary>Loads the image for Themed Icon ErrorOn theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn.Load_GrayDark">
            <summary>Loads the image for Themed Icon ErrorOn theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorOn.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ErrorOn.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit">
             <summary>
            	<para>
            		<para>ErrorSubmit Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                `=SVr`       
                              `/Vx;;xkr`     
                            `+kf;::::;fPr`   
                          `+EI;::::::::;IZL` 
                         *K3!,,,^,,,,^,,,!3U?
                         66___;}6____6};___66
                         66";1666""""6661;"66
               mmmmmmmmmm99x9q#99~~~~99-79x99
               DD55555555555555ww^^^^ww      
               88333333  333333bb;;;;bb      
               WWffffff  ffffffHH;;;=Hk      
               %%[[[[[[-.[[[[[[qq!?J44,      
               $$zzzzzzzzzzzzzzAAAUI;`       
               QQJJJJJJ_:JJJJJJQQ            
               gg77777777777777gg            
               gggggggggggggggggg            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:TajosazThemedIconsThemedIcons+ErrorSubmit}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(TajosazThemedIconsThemedIcons.ErrorSubmit))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = TajosazThemedIconsThemedIcons.ErrorSubmit.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;TajosazThemedIconsThemedIcons.ErrorSubmit&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit.Load_Color">
            <summary>Loads the image for Themed Icon ErrorSubmit theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit.Load_Gray">
            <summary>Loads the image for Themed Icon ErrorSubmit theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit.Load_GrayDark">
            <summary>Loads the image for Themed Icon ErrorSubmit theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorSubmit.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ErrorSubmit.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead">
             <summary>
            	<para>
            		<para>ErrorRead Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
            $$LLLLLLLLLLLLLLLLLLLLLLLLLLLL$$
            QQ||@@@@@@@@@@@@@@@@@@@@@@@@||QQ
            gg77@@@@@@@@@@    @@@@@@@@@@77gg
            ggJJ@@@@@@@@@@    @@@@@@@@@@JJgg
            gg}}@@@@@@@@@@    @@@@@@@@@@}}gg
            gg11gggggggggg    gggggggggg11gg
            ggoogggggggggg    ggggggggggoogg
            ggaagggggggggg!  "ggggggggggaagg
            ggkkgggggggggg$``8ggggggggggkkgg
            @@UUggggggggggggggggggggggggUU@@
            @@44QQQQQQQQQQ|,,*QQQQQQQQQQ44@@
            @@dd$$$$$$$$$$+..~$$$$$$$$$$dd@@
            @@OOMMMMMMMMMMMMMMMMMMMMMMMMOO@@
            @@DDDDDDDDDDDDDDDDDDDDDDDDDDDD@@
            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorRead}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorRead))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorRead.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorRead&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead.Id">
             <summary>
            	<para>
            		<para>ErrorRead Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead"></see> identifier class.</para>
            		<para>
            			<code>
            $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
            $$LLLLLLLLLLLLLLLLLLLLLLLLLLLL$$
            QQ||@@@@@@@@@@@@@@@@@@@@@@@@||QQ
            gg77@@@@@@@@@@    @@@@@@@@@@77gg
            ggJJ@@@@@@@@@@    @@@@@@@@@@JJgg
            gg}}@@@@@@@@@@    @@@@@@@@@@}}gg
            gg11gggggggggg    gggggggggg11gg
            ggoogggggggggg    ggggggggggoogg
            ggaagggggggggg!  "ggggggggggaagg
            ggkkgggggggggg$``8ggggggggggkkgg
            @@UUggggggggggggggggggggggggUU@@
            @@44QQQQQQQQQQ|,,*QQQQQQQQQQ44@@
            @@dd$$$$$$$$$$+..~$$$$$$$$$$dd@@
            @@OOMMMMMMMMMMMMMMMMMMMMMMMMOO@@
            @@DDDDDDDDDDDDDDDDDDDDDDDDDDDD@@
            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ErrorRead}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ErrorRead))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ErrorRead.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ErrorRead&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead.Load_Color">
            <summary>Loads the image for Themed Icon ErrorRead theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead.Load_Gray">
            <summary>Loads the image for Themed Icon ErrorRead theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead.Load_GrayDark">
            <summary>Loads the image for Themed Icon ErrorRead theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ErrorRead.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ErrorRead.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand">
             <summary>
            	<para>
            		<para>Expand Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                  $$$$$$$$$$$$$$$$$$$$
                  $$                $$
                  $$      $$$$      $$
                  $$      $$$$      $$
                  $$  $$$$$$$$$$$$  $$
                  $$  $$$$$$$$$$$$  $$
                  $$      $$$$      $$
                  $$      $$$$      $$
                  $$                $$
                  $$$$$$$$$$$$$$$$$$$$
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Expand}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Expand))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Expand.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Expand&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand.Id">
             <summary>
            	<para>
            		<para>Expand Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                  $$$$$$$$$$$$$$$$$$$$
                  $$                $$
                  $$      $$$$      $$
                  $$      $$$$      $$
                  $$  $$$$$$$$$$$$  $$
                  $$  $$$$$$$$$$$$  $$
                  $$      $$$$      $$
                  $$      $$$$      $$
                  $$                $$
                  $$$$$$$$$$$$$$$$$$$$
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Expand}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Expand))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Expand.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Expand&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand.Load_Color">
            <summary>Loads the image for Themed Icon Expand theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand.Load_Gray">
            <summary>Loads the image for Themed Icon Expand theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand.Load_GrayDark">
            <summary>Loads the image for Themed Icon Expand theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Expand.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Expand.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph">
             <summary>
            	<para>
            		<para>ExpandableMenuItemTailGlyph Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
                        1-
                        $$1-
                        $$$$1-
                        $$$$$$1-
                        $$$$$$X"
                        $$$$X"
                        $$X"
                        X"
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ExpandableMenuItemTailGlyph}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ExpandableMenuItemTailGlyph))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ExpandableMenuItemTailGlyph.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ExpandableMenuItemTailGlyph&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph.Id">
             <summary>
            	<para>
            		<para>ExpandableMenuItemTailGlyph Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
                        1-
                        $$1-
                        $$$$1-
                        $$$$$$1-
                        $$$$$$X"
                        $$$$X"
                        $$X"
                        X"
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ExpandableMenuItemTailGlyph}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ExpandableMenuItemTailGlyph))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ExpandableMenuItemTailGlyph.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ExpandableMenuItemTailGlyph&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph.Load_Color">
            <summary>Loads the image for Themed Icon ExpandableMenuItemTailGlyph theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph.Load_Gray">
            <summary>Loads the image for Themed Icon ExpandableMenuItemTailGlyph theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExpandableMenuItemTailGlyph theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandableMenuItemTailGlyph.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExpandableMenuItemTailGlyph.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll">
             <summary>
            	<para>
            		<para>ExpandAll Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
              666666666666666666666666
              44~~~~~~~~~~~~~~~~~~~~44
              ww==                ==wwwwww
              bb==      @@@@      ==bb~~bb
              dd;;      @@@@      ;;dd==dd
              HH!!  @@@@@@@@@@@@  !!HH==HH
              AA!!  @@@@@@@@@@@@  !!AA;;AA
              ##//      @@@@      //##!!##
              RR++      @@@@      ++RR!!RR
              RR++                ++RR//RR
              DDrrrrrrrrrrrrrrrrrrrrDD++DD
              DDDDDDDDDDDDDDDDDDDDDDDD++DD
                  DDrrrrrrrrrrrrrrrrrrrrDD
                  888888888888888888888888
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ExpandAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ExpandAll))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ExpandAll.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ExpandAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll.Id">
             <summary>
            	<para>
            		<para>ExpandAll Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll"></see> identifier class.</para>
            		<para>
            			<code>
            
              666666666666666666666666
              44~~~~~~~~~~~~~~~~~~~~44
              ww==                ==wwwwww
              bb==      @@@@      ==bb~~bb
              dd;;      @@@@      ;;dd==dd
              HH!!  @@@@@@@@@@@@  !!HH==HH
              AA!!  @@@@@@@@@@@@  !!AA;;AA
              ##//      @@@@      //##!!##
              RR++      @@@@      ++RR!!RR
              RR++                ++RR//RR
              DDrrrrrrrrrrrrrrrrrrrrDD++DD
              DDDDDDDDDDDDDDDDDDDDDDDD++DD
                  DDrrrrrrrrrrrrrrrrrrrrDD
                  888888888888888888888888
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ExpandAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ExpandAll))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ExpandAll.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ExpandAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll.Load_Color">
            <summary>Loads the image for Themed Icon ExpandAll theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll.Load_Gray">
            <summary>Loads the image for Themed Icon ExpandAll theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExpandAll theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ExpandAll.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExpandAll.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export">
             <summary>
            	<para>
            		<para>Export Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                               `/5SSSSSSSSSS
                uuuuuuuuuuuuuoyk]=--------EE
                oo----------LKn=----------XX
                22----------wwwwwwo;------ww
                aa----```````.|wa!__~C____HH
                yy----     `rHV/__~I##__~I#I
                VV----   `L#P*::=uD5DD=uDo_
                kk----   -{8e;;e8o=-888R_
                EE----     -[%%5_ ----EE
                hh----       -_   ----hh
                XX----            ----XX
                66----            ----66
                ww--------------------ww
                bb____________________bb
                dddddddddddddddddddddddd
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Export}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Export))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Export.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Export&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export.Id">
             <summary>
            	<para>
            		<para>Export Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export"></see> identifier class.</para>
            		<para>
            			<code>
                               `/5SSSSSSSSSS
                uuuuuuuuuuuuuoyk]=--------EE
                oo----------LKn=----------XX
                22----------wwwwwwo;------ww
                aa----```````.|wa!__~C____HH
                yy----     `rHV/__~I##__~I#I
                VV----   `L#P*::=uD5DD=uDo_
                kk----   -{8e;;e8o=-888R_
                EE----     -[%%5_ ----EE
                hh----       -_   ----hh
                XX----            ----XX
                66----            ----66
                ww--------------------ww
                bb____________________bb
                dddddddddddddddddddddddd
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Export}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Export))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Export.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Export&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export.Load_Color">
            <summary>Loads the image for Themed Icon Export theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export.Load_Gray">
            <summary>Loads the image for Themed Icon Export theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export.Load_GrayDark">
            <summary>Loads the image for Themed Icon Export theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Export.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Export.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter">
             <summary>
            	<para>
            		<para>Filter Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
                llllllllllllllllllllllll
                \l/.``      ```.--__"rlr
                 _T7"`      ```.--_=77,
                   =lr.     ```.-_?l!`
                    .LJ~    ```'=J)-
                      "i)-  ``_cJ~
                       `ll  ``ll`
                        ll  ``ll
                        ll  ``ll
                        ll  ``ll
                        ll  -*l+
                        ll./l+'
                        lll+'
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Filter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Filter))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Filter.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Filter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter.Id">
             <summary>
            	<para>
            		<para>Filter Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter"></see> identifier class.</para>
            		<para>
            			<code>
            
            
                llllllllllllllllllllllll
                \l/.``      ```.--__"rlr
                 _T7"`      ```.--_=77,
                   =lr.     ```.-_?l!`
                    .LJ~    ```'=J)-
                      "i)-  ``_cJ~
                       `ll  ``ll`
                        ll  ``ll
                        ll  ``ll
                        ll  ``ll
                        ll  -*l+
                        ll./l+'
                        lll+'
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Filter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Filter))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Filter.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Filter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter.Load_Color">
            <summary>Loads the image for Themed Icon Filter theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter.Load_Gray">
            <summary>Loads the image for Themed Icon Filter theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter.Load_GrayDark">
            <summary>Loads the image for Themed Icon Filter theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Filter.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Filter.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow">
             <summary>
            	<para>
            		<para>FindWindow Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
              aaaaaaaaaaaaaaaaaaaa
              kkr?cc|T7Jl}{xIuo5kk
              XXr?cc|T7Jl}{xIuo5XX
              ww  ``````````_!TlaaTr!-
              GG  '''''''-/3ur"_--_"+Iu!
              RR  ::::::"}E+.-"===="-.!k}`
              DD  ````.'rXr-_"_````_"_-!Xc
              %%%%%%%%%%dw"--'`     '--_wU
                        ?Hr_. `````` `_!Hl
                       `/HHr_-`    `-_/bU-
                     `=}7;aDU7=~""~=|VR}`
                   `=}7=,~rV8RVd88Gk1;`
                  =}7=,~ryRe:
                  r5l/ryRe:
                   '7ARe:
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+FindWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.FindWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.FindWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.FindWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow.Id">
             <summary>
            	<para>
            		<para>FindWindow Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow"></see> identifier class.</para>
            		<para>
            			<code>
            
              aaaaaaaaaaaaaaaaaaaa
              kkr?cc|T7Jl}{xIuo5kk
              XXr?cc|T7Jl}{xIuo5XX
              ww  ``````````_!TlaaTr!-
              GG  '''''''-/3ur"_--_"+Iu!
              RR  ::::::"}E+.-"===="-.!k}`
              DD  ````.'rXr-_"_````_"_-!Xc
              %%%%%%%%%%dw"--'`     '--_wU
                        ?Hr_. `````` `_!Hl
                       `/HHr_-`    `-_/bU-
                     `=}7;aDU7=~""~=|VR}`
                   `=}7=,~rV8RVd88Gk1;`
                  =}7=,~ryRe:
                  r5l/ryRe:
                   '7ARe:
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+FindWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.FindWindow))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.FindWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.FindWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow.Load_Color">
            <summary>Loads the image for Themed Icon FindWindow theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow.Load_Gray">
            <summary>Loads the image for Themed Icon FindWindow theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow.Load_GrayDark">
            <summary>Loads the image for Themed Icon FindWindow theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FindWindow.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FindWindow.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward">
             <summary>
            	<para>
            		<para>Forward Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                     ':~;*L77L+!~:-
                  _*{1lT)c?rrrL)TJ1Fr,
                ~tIl)++++++++++++++cJIF=
              'iu7r+++++++++++++++++++T3}-
             -nu?+++++++~`    -!+++++++rIj_
            `u5Lrrrrrrrrrr~`    -!rrrrrr?oa.
            \Slrrrrrrrrrrrrr=`    -!rrrrr7S)
            {k|rrr                  -!rrrLka
            IE)???                  `=???LEV
            LU}LLLLLLLLLLLLL/-    `=LLLLLiUl
            .PE)LLLLLLLLLL/-    `=LLLLLLckX-
             "6E|ccccccc/-    `=ccccccc)V9=
              ,K6C)ccccccccccccccccccclUX~
               `Lw42l))))))))))))))iu6bT`
                 `!3GwaI}l7||7J}1e4Ga\`
                    `^+|tjUmmX5fT+~`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Forward}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Forward))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Forward.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Forward&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward.Id">
             <summary>
            	<para>
            		<para>Forward Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward"></see> identifier class.</para>
            		<para>
            			<code>
                     ':~;*L77L+!~:-
                  _*{1lT)c?rrrL)TJ1Fr,
                ~tIl)++++++++++++++cJIF=
              'iu7r+++++++++++++++++++T3}-
             -nu?+++++++~`    -!+++++++rIj_
            `u5Lrrrrrrrrrr~`    -!rrrrrr?oa.
            \Slrrrrrrrrrrrrr=`    -!rrrrr7S)
            {k|rrr                  -!rrrLka
            IE)???                  `=???LEV
            LU}LLLLLLLLLLLLL/-    `=LLLLLiUl
            .PE)LLLLLLLLLL/-    `=LLLLLLckX-
             "6E|ccccccc/-    `=ccccccc)V9=
              ,K6C)ccccccccccccccccccclUX~
               `Lw42l))))))))))))))iu6bT`
                 `!3GwaI}l7||7J}1e4Ga\`
                    `^+|tjUmmX5fT+~`
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Forward}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Forward))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Forward.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Forward&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward.Load_Color">
            <summary>Loads the image for Themed Icon Forward theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward.Load_Gray">
            <summary>Loads the image for Themed Icon Forward theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward.Load_GrayDark">
            <summary>Loads the image for Themed Icon Forward theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Forward.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Forward.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass">
             <summary>
            	<para>
            		<para>Hourglass Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                  cwbbpHGO#RRDDDD888%WMk
                  cwT.'----___:,,""""(Mk
                  cwT.-"^~==!!/+r?c="(Mk
                  -rL_              -aDr
                   `=T*`          `rOS-
                     -ci^ `^!!=` ,Sb!
                       ~t(- -_ `T97`
                        -CI    7X*
                       _iJ_    -]6+
                     `+l;`       =XZ"
                    "T?'    _"`   `JR{`
                  .+)"    .=!!!-    "6R;
                  cwT.-"^~==!!/+r?c="(Mk
                  cwT.'----___:,,""""(Mk
                  cwbbpHGO#RRDDDD888%WMk
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Hourglass}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Hourglass))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Hourglass.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Hourglass&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass.Id">
             <summary>
            	<para>
            		<para>Hourglass Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass"></see> identifier class.</para>
            		<para>
            			<code>
                  cwbbpHGO#RRDDDD888%WMk
                  cwT.'----___:,,""""(Mk
                  cwT.-"^~==!!/+r?c="(Mk
                  -rL_              -aDr
                   `=T*`          `rOS-
                     -ci^ `^!!=` ,Sb!
                       ~t(- -_ `T97`
                        -CI    7X*
                       _iJ_    -]6+
                     `+l;`       =XZ"
                    "T?'    _"`   `JR{`
                  .+)"    .=!!!-    "6R;
                  cwT.-"^~==!!/+r?c="(Mk
                  cwT.'----___:,,""""(Mk
                  cwbbpHGO#RRDDDD888%WMk
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Hourglass}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Hourglass))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Hourglass.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Hourglass&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass.Load_Color">
            <summary>Loads the image for Themed Icon Hourglass theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass.Load_Gray">
            <summary>Loads the image for Themed Icon Hourglass theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass.Load_GrayDark">
            <summary>Loads the image for Themed Icon Hourglass theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Hourglass.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Hourglass.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore">
             <summary>
            	<para>
            		<para>Ignore Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                                   `|Ar`
                                 `|DRZDRr`
                      `"/?7[aa[lVDRattuD8I
                   -/1ZJ!~_'``'_\Cttup8y:
                `!oj+:   .!l33o3tt7"_\3a+`
              `+aJ,     ~kEEbXttaT     _TyL.
              o5=       1EbXttaAEy       ^52
              'Lur-`````cXttaAEEEL`````-+3T-
                .\FT=__Ttt39EE5T~```-=cxr-
                 `7OXjtt}+_-``-_"~/7l+,`
                cDD5tt36hITTllT?*;^-
                `|DRSb8a:
                  `|Da:
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Ignore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Ignore))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Ignore.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Ignore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore.Id">
             <summary>
            	<para>
            		<para>Ignore Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore"></see> identifier class.</para>
            		<para>
            			<code>
            
                                   `|Ar`
                                 `|DRZDRr`
                      `"/?7[aa[lVDRattuD8I
                   -/1ZJ!~_'``'_\Cttup8y:
                `!oj+:   .!l33o3tt7"_\3a+`
              `+aJ,     ~kEEbXttaT     _TyL.
              o5=       1EbXttaAEy       ^52
              'Lur-`````cXttaAEEEL`````-+3T-
                .\FT=__Ttt39EE5T~```-=cxr-
                 `7OXjtt}+_-``-_"~/7l+,`
                cDD5tt36hITTllT?*;^-
                `|DRSb8a:
                  `|Da:
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Ignore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Ignore))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Ignore.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Ignore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore.Load_Color">
            <summary>Loads the image for Themed Icon Ignore theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore.Load_Gray">
            <summary>Loads the image for Themed Icon Ignore theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore.Load_GrayDark">
            <summary>Loads the image for Themed Icon Ignore theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Ignore.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Ignore.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left">
             <summary>
            	<para>
            		<para>Left Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                       `"ccccccc
                     `^c\-   "|!
                   `~|+-   `/T^
                 `~Tr_````_)77777777777777
                ~7r,````````````````````ii
                /l+_....................ll
                 ./tr,----=ltttttttttttttt
                   .+FL"___"7},
                     .+xc~::"cx/
                       .+IIIIIII
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Left}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Left))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Left.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Left&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left.Id">
             <summary>
            	<para>
            		<para>Left Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                       `"ccccccc
                     `^c\-   "|!
                   `~|+-   `/T^
                 `~Tr_````_)77777777777777
                ~7r,````````````````````ii
                /l+_....................ll
                 ./tr,----=ltttttttttttttt
                   .+FL"___"7},
                     .+xc~::"cx/
                       .+IIIIIII
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Left}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Left))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Left.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Left&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left.Load_Color">
            <summary>Loads the image for Themed Icon Left theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left.Load_Gray">
            <summary>Loads the image for Themed Icon Left theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left.Load_GrayDark">
            <summary>Loads the image for Themed Icon Left theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Left.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Left.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock">
             <summary>
            	<para>
            		<para>Lock Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                       -=!r|Tcr/,
                    `~cr^_-'-_"!Jor.
                   -r+. ``````..':la~
                  -L;   `^rTTT!-'--Tk;
                  !L.   !J=.`~I7'--"kS
                  rL    7J    Iu'---kP
                VVVVVVVVVVVVVVVVVVVVVVVV
                PP",:_--'-_:"^~=!\+?)TPP
                66",:_--'-_:"^~=!\+?)T66
                ww",:_--'-@@@@~=!\+?)Tww
                HH",:_--'-@@@@~=!\+?)THH
                RR",:_--'-@@@@~=!\+?)TRR
                DD",:_--'-_:"^~=!\+?)TDD
                DD",:_--'-_:"^~=!\+?)TDD
                %%%%%%%%%%%%%%%%%%%%%%%%
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Lock}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Lock))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Lock.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Lock&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock.Id">
             <summary>
            	<para>
            		<para>Lock Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock"></see> identifier class.</para>
            		<para>
            			<code>
                       -=!r|Tcr/,
                    `~cr^_-'-_"!Jor.
                   -r+. ``````..':la~
                  -L;   `^rTTT!-'--Tk;
                  !L.   !J=.`~I7'--"kS
                  rL    7J    Iu'---kP
                VVVVVVVVVVVVVVVVVVVVVVVV
                PP",:_--'-_:"^~=!\+?)TPP
                66",:_--'-_:"^~=!\+?)T66
                ww",:_--'-@@@@~=!\+?)Tww
                HH",:_--'-@@@@~=!\+?)THH
                RR",:_--'-@@@@~=!\+?)TRR
                DD",:_--'-_:"^~=!\+?)TDD
                DD",:_--'-_:"^~=!\+?)TDD
                %%%%%%%%%%%%%%%%%%%%%%%%
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Lock}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Lock))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Lock.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Lock&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock.Load_Color">
            <summary>Loads the image for Themed Icon Lock theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock.Load_Gray">
            <summary>Loads the image for Themed Icon Lock theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock.Load_GrayDark">
            <summary>Loads the image for Themed Icon Lock theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Lock.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Lock.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck">
             <summary>
            	<para>
            		<para>MenuItemCheck Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            --------------------------------
            --............................--
            --............................--
            --...................-!?r^....--
            --..................~r;._+/_..--
            --................,*\-   -r+..--
            --......,++;-..._!+:   `~+=-..--
            --....-=*_`~+~_~+~`   _*!-....--
            --..../+_   `=+;.   -!/:......--
            --....-~/^`   `   `~/^........--
            --......-~/,`    ,/=-.........--
            --........-=!_ -;;_...........--
            --.........._=!;,.............--
            --............................--
            --............................--
            --------------------------------
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MenuItemCheck}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MenuItemCheck))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MenuItemCheck.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MenuItemCheck&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck.Id">
             <summary>
            	<para>
            		<para>MenuItemCheck Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck"></see> identifier class.</para>
            		<para>
            			<code>
            --------------------------------
            --............................--
            --............................--
            --...................-!?r^....--
            --..................~r;._+/_..--
            --................,*\-   -r+..--
            --......,++;-..._!+:   `~+=-..--
            --....-=*_`~+~_~+~`   _*!-....--
            --..../+_   `=+;.   -!/:......--
            --....-~/^`   `   `~/^........--
            --......-~/,`    ,/=-.........--
            --........-=!_ -;;_...........--
            --.........._=!;,.............--
            --............................--
            --............................--
            --------------------------------
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MenuItemCheck}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MenuItemCheck))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MenuItemCheck.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MenuItemCheck&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck.Load_Color">
            <summary>Loads the image for Themed Icon MenuItemCheck theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck.Load_Gray">
            <summary>Loads the image for Themed Icon MenuItemCheck theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck.Load_GrayDark">
            <summary>Loads the image for Themed Icon MenuItemCheck theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MenuItemCheck.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MenuItemCheck.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical">
             <summary>
            	<para>
            		<para>MessageCritical Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                           "TFa66S]T~
                        .7RGolTLLTlubDl-
                       ~RRJrrrrrrrrrrTGD/
                      =MGT)))))))))))))wMr
                  `5SSB$3TTT        TTT{$$
                  /k+`R$3sss        sssF$$
                 `yk.`rQRtlllllllllllllGQn
                 =Xc`` LQ8IttttttttttCDgR
                 Vw_`   "Rg%65I{{I5X8gg8-
                ~bt.`     'c9D$ggQDbl+bJ
                5H~'               .'oH_
               "Oo-.  `'------------~Oo
               uR=-.'_!uRRRRRRRRRRRRRR"
              _DP--=tAw?'
              x8888D}"
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MessageCritical}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MessageCritical))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MessageCritical.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MessageCritical&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical.Id">
             <summary>
            	<para>
            		<para>MessageCritical Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical"></see> identifier class.</para>
            		<para>
            			<code>
            
                           "TFa66S]T~
                        .7RGolTLLTlubDl-
                       ~RRJrrrrrrrrrrTGD/
                      =MGT)))))))))))))wMr
                  `5SSB$3TTT        TTT{$$
                  /k+`R$3sss        sssF$$
                 `yk.`rQRtlllllllllllllGQn
                 =Xc`` LQ8IttttttttttCDgR
                 Vw_`   "Rg%65I{{I5X8gg8-
                ~bt.`     'c9D$ggQDbl+bJ
                5H~'               .'oH_
               "Oo-.  `'------------~Oo
               uR=-.'_!uRRRRRRRRRRRRRR"
              _DP--=tAw?'
              x8888D}"
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MessageCritical}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MessageCritical))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MessageCritical.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MessageCritical&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical.Load_Color">
            <summary>Loads the image for Themed Icon MessageCritical theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical.Load_Gray">
            <summary>Loads the image for Themed Icon MessageCritical theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical.Load_GrayDark">
            <summary>Loads the image for Themed Icon MessageCritical theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageCritical.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MessageCritical.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo">
             <summary>
            	<para>
            		<para>MessageInfo Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                  `5SSSSSSSSSSSSSSSSSSSSS5
                  /k+``````````````````=k/
                 `yk.`               ``5E`
                 =Xc``  RRRRRRRRRR   `=Xc
                 Vw_`               ``ew-
                ~bt.`   RRRRRR     `.=bJ
                5H~'               .'oH_
               "Oo-.  `'------------~Oo
               uR=-.'_!uRRRRRRRRRRRRRR"
              _DP--=tAbL-
              x8888DF"
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MessageInfo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MessageInfo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MessageInfo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MessageInfo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo.Id">
             <summary>
            	<para>
            		<para>MessageInfo Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                  `5SSSSSSSSSSSSSSSSSSSSS5
                  /k+``````````````````=k/
                 `yk.`               ``5E`
                 =Xc``  RRRRRRRRRR   `=Xc
                 Vw_`               ``ew-
                ~bt.`   RRRRRR     `.=bJ
                5H~'               .'oH_
               "Oo-.  `'------------~Oo
               uR=-.'_!uRRRRRRRRRRRRRR"
              _DP--=tAbL-
              x8888DF"
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MessageInfo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MessageInfo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MessageInfo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MessageInfo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo.Load_Color">
            <summary>Loads the image for Themed Icon MessageInfo theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo.Load_Gray">
            <summary>Loads the image for Themed Icon MessageInfo theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo.Load_GrayDark">
            <summary>Loads the image for Themed Icon MessageInfo theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageInfo.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MessageInfo.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning">
             <summary>
            	<para>
            		<para>MessageWarning Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                            `wqqqqqqqq
                            rO|''''_pw
                           `bA_----TR+
                           /Dt----_GR`
                           dD"----LD)
                  `5SSSSSSG8e_____#8USSSS5
                  /k+`````4W=____rW{```=k/
                 `yk.`   "BBBBBBBBB- ``5E`
                 =Xc``   V$r::::r$5  `=Xc
                 Vw_`   _QR,,,,,OQ: ``ew-
                ~bt.`   jQT""""+Qw `.=bJ
                5H~'    ggggggggg~ .'oH_
               "Oo-.  `'------------~Oo
               uR=-.'_!uRRRRRRRRRRRRRR"
              _DP--=tAw?'
              x8888D}"
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MessageWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MessageWarning))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MessageWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MessageWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning.Id">
             <summary>
            	<para>
            		<para>MessageWarning Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning"></see> identifier class.</para>
            		<para>
            			<code>
                            `wqqqqqqqq
                            rO|''''_pw
                           `bA_----TR+
                           /Dt----_GR`
                           dD"----LD)
                  `5SSSSSSG8e_____#8USSSS5
                  /k+`````4W=____rW{```=k/
                 `yk.`   "BBBBBBBBB- ``5E`
                 =Xc``   V$r::::r$5  `=Xc
                 Vw_`   _QR,,,,,OQ: ``ew-
                ~bt.`   jQT""""+Qw `.=bJ
                5H~'    ggggggggg~ .'oH_
               "Oo-.  `'------------~Oo
               uR=-.'_!uRRRRRRRRRRRRRR"
              _DP--=tAw?'
              x8888D}"
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+MessageWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.MessageWarning))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.MessageWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.MessageWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning.Load_Color">
            <summary>Loads the image for Themed Icon MessageWarning theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning.Load_Gray">
            <summary>Loads the image for Themed Icon MessageWarning theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning.Load_GrayDark">
            <summary>Loads the image for Themed Icon MessageWarning theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.MessageWarning.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MessageWarning.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule">
             <summary>
            	<para>
            		<para>NativeModule Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                        -\T{5555555555{T+_
                      `J5;.`          `.~j}.
             `=c77L!. (E, ._,,,,,,,,,,_' -E{
            "uJ!^"=Juu66``______________``66
            l5"_'.______..''''''''''''''..bb
            ;Si=:_~7SSGG--``````````````--GG
             _?oEEuT_ nR=_``88``88``88``_^RZ
                      ````55555555555555````
                      ``8855       _755588``
                      ````55  8888E^ _55````
                      ``8855  888888  5588``
                      ````55  888888  55````
                      ``8855          5588``
                      ````55555555555555````
                          ``88``88``88``
                          ``````````````
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+NativeModule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.NativeModule))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.NativeModule.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.NativeModule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule.Id">
             <summary>
            	<para>
            		<para>NativeModule Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule"></see> identifier class.</para>
            		<para>
            			<code>
                        -\T{5555555555{T+_
                      `J5;.`          `.~j}.
             `=c77L!. (E, ._,,,,,,,,,,_' -E{
            "uJ!^"=Juu66``______________``66
            l5"_'.______..''''''''''''''..bb
            ;Si=:_~7SSGG--``````````````--GG
             _?oEEuT_ nR=_``88``88``88``_^RZ
                      ````55555555555555````
                      ``8855       _755588``
                      ````55  8888E^ _55````
                      ``8855  888888  5588``
                      ````55  888888  55````
                      ``8855          5588``
                      ````55555555555555````
                          ``88``88``88``
                          ``````````````
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+NativeModule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.NativeModule))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.NativeModule.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.NativeModule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule.Load_Color">
            <summary>Loads the image for Themed Icon NativeModule theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule.Load_Gray">
            <summary>Loads the image for Themed Icon NativeModule theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule.Load_GrayDark">
            <summary>Loads the image for Themed Icon NativeModule theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeModule.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NativeModule.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess">
             <summary>
            	<para>
            		<para>NativeProcess Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                  `"~!+cc+!~"`
               `^?llll/  =llllc~`
              ~}L-_+t|_  -c}+_-L};
             *]]c'````````````.+]]L
            ~IIII7```_^~~^_```?IIII!
            7o;~"-..-_)qAl
            l5~"_---..T8%[  88  88  88
            !yyyyl_--`    oooooooooooooo
             skku=____  88oo       _Tooo88
              cP}==To{    oo  8888k" _oo
               _rSXXXX  88oo  888888  oo88
                  _r7C    oo  888888  oo
                        88oo          oo88
                          oooooooooooooo
                            88  88  88
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+NativeProcess}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.NativeProcess))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.NativeProcess.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.NativeProcess&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess.Id">
             <summary>
            	<para>
            		<para>NativeProcess Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess"></see> identifier class.</para>
            		<para>
            			<code>
                  `"~!+cc+!~"`
               `^?llll/  =llllc~`
              ~}L-_+t|_  -c}+_-L};
             *]]c'````````````.+]]L
            ~IIII7```_^~~^_```?IIII!
            7o;~"-..-_)qAl
            l5~"_---..T8%[  88  88  88
            !yyyyl_--`    oooooooooooooo
             skku=____  88oo       _Tooo88
              cP}==To{    oo  8888k" _oo
               _rSXXXX  88oo  888888  oo88
                  _r7C    oo  888888  oo
                        88oo          oo88
                          oooooooooooooo
                            88  88  88
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+NativeProcess}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.NativeProcess))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.NativeProcess.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.NativeProcess&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess.Load_Color">
            <summary>Loads the image for Themed Icon NativeProcess theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess.Load_Gray">
            <summary>Loads the image for Themed Icon NativeProcess theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess.Load_GrayDark">
            <summary>Loads the image for Themed Icon NativeProcess theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.NativeProcess.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NativeProcess.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin">
             <summary>
            	<para>
            		<para>Pin Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                          $$
                          $$
                          $$$$$$$$$$$$$$$$
                          $$$$          $$
              $$$$$$$$$$  $$$$$$$$$$$$$$$$
                          $$$$$$$$$$$$$$$$
                          $$$$$$$$$$$$$$$$
                          $$
                          $$
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Pin}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Pin))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Pin.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Pin&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin.Id">
             <summary>
            	<para>
            		<para>Pin Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                          $$
                          $$
                          $$$$$$$$$$$$$$$$
                          $$$$          $$
              $$$$$$$$$$  $$$$$$$$$$$$$$$$
                          $$$$$$$$$$$$$$$$
                          $$$$$$$$$$$$$$$$
                          $$
                          $$
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Pin}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Pin))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Pin.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Pin&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin.Load_Color">
            <summary>Loads the image for Themed Icon Pin theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin.Load_Gray">
            <summary>Loads the image for Themed Icon Pin theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin.Load_GrayDark">
            <summary>Loads the image for Themed Icon Pin theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Pin.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Pin.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem">
             <summary>
            	<para>
            		<para>PinnedTabStripItem Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+PinnedTabStripItem}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.PinnedTabStripItem))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.PinnedTabStripItem.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.PinnedTabStripItem&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem.Id">
             <summary>
            	<para>
            		<para>PinnedTabStripItem Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+PinnedTabStripItem}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.PinnedTabStripItem))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.PinnedTabStripItem.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.PinnedTabStripItem&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem.Load_Color">
            <summary>Loads the image for Themed Icon PinnedTabStripItem theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem.Load_Gray">
            <summary>Loads the image for Themed Icon PinnedTabStripItem theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem.Load_GrayDark">
            <summary>Loads the image for Themed Icon PinnedTabStripItem theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.PinnedTabStripItem.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon PinnedTabStripItem.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer">
             <summary>
            	<para>
            		<para>ProcessExplorer Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                        -tttttt"
                  ^~-  `il`  `7t`  -~~`
                "ls/|C))C"    _CTcYT/T}~
              `l1=````:="``````:=,.```"]t'
               ^3(.````-!L7}}7L!_`````r3;
               `+uT.._laT~_--_~)aC:..ru)`
            ;?}uJr~'^Vu:.,~===,'_CE='^rin]L!
            55,-----{6=-__.` .__-"6o-----,55
            yy_-----ob~-````````-"bk-----_yy
            ?}SI7r~_/Gy"_`    `_"oAr_~+71VFL
               -ck1I}cHqC/~,,~!tbG+::tki-
               ^ou{+!?FEuw#DD#w2r^"""^xZ=
             `!u{+!?Fb%#!^^^^^^!r!^^^^*Uh-
            =1{+!?Fb%8HS4r~~~~!6VkUu7u4c.
            ?k3TFb%RT- .Xh!===k4- .~cT-
             -tD%k,     =bbbbbb+
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ProcessExplorer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ProcessExplorer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ProcessExplorer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ProcessExplorer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer.Id">
             <summary>
            	<para>
            		<para>ProcessExplorer Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer"></see> identifier class.</para>
            		<para>
            			<code>
                        -tttttt"
                  ^~-  `il`  `7t`  -~~`
                "ls/|C))C"    _CTcYT/T}~
              `l1=````:="``````:=,.```"]t'
               ^3(.````-!L7}}7L!_`````r3;
               `+uT.._laT~_--_~)aC:..ru)`
            ;?}uJr~'^Vu:.,~===,'_CE='^rin]L!
            55,-----{6=-__.` .__-"6o-----,55
            yy_-----ob~-````````-"bk-----_yy
            ?}SI7r~_/Gy"_`    `_"oAr_~+71VFL
               -ck1I}cHqC/~,,~!tbG+::tki-
               ^ou{+!?FEuw#DD#w2r^"""^xZ=
             `!u{+!?Fb%#!^^^^^^!r!^^^^*Uh-
            =1{+!?Fb%8HS4r~~~~!6VkUu7u4c.
            ?k3TFb%RT- .Xh!===k4- .~cT-
             -tD%k,     =bbbbbb+
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ProcessExplorer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ProcessExplorer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ProcessExplorer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ProcessExplorer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer.Load_Color">
            <summary>Loads the image for Themed Icon ProcessExplorer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer.Load_Gray">
            <summary>Loads the image for Themed Icon ProcessExplorer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProcessExplorer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessExplorer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProcessExplorer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy">
             <summary>
            	<para>
            		<para>ProcessHierarchy Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
               /5XRRXV+
              [DT-  '+DE
              %%      %%
              Z$r`  `;$R
              `}QQQQQQ3.
                $$^^$$   /5XRRXV+
                QQ^^QQQQBDT-  '+DE
                gg^^^^^^%%      %%
                ggggggggQ$r`  `;$R
                        `}QQQQQQ3.
                          $$^^$$   /5XRRXV+
                          QQ^^QQQQBDT-  '+DE
                          gg^^^^^^%%      %%
                          ggggggggQ$r`  `;$R
                                  `}8QQQQ03.
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ProcessHierarchy}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ProcessHierarchy))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ProcessHierarchy.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ProcessHierarchy&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy.Id">
             <summary>
            	<para>
            		<para>ProcessHierarchy Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy"></see> identifier class.</para>
            		<para>
            			<code>
               /5XRRXV+
              [DT-  '+DE
              %%      %%
              Z$r`  `;$R
              `}QQQQQQ3.
                $$^^$$   /5XRRXV+
                QQ^^QQQQBDT-  '+DE
                gg^^^^^^%%      %%
                ggggggggQ$r`  `;$R
                        `}QQQQQQ3.
                          $$^^$$   /5XRRXV+
                          QQ^^QQQQBDT-  '+DE
                          gg^^^^^^%%      %%
                          ggggggggQ$r`  `;$R
                                  `}8QQQQ03.
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ProcessHierarchy}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ProcessHierarchy))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ProcessHierarchy.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ProcessHierarchy&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy.Load_Color">
            <summary>Loads the image for Themed Icon ProcessHierarchy theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy.Load_Gray">
            <summary>Loads the image for Themed Icon ProcessHierarchy theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProcessHierarchy theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProcessHierarchy.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProcessHierarchy.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite">
             <summary>
            	<para>
            		<para>ProgressIndefinite Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                      _=*TCjkkSf7\=_         
                   ~1dDuL;":'ziCYjKRRY=      
                 *pqT:   -```!+\r???iSDq?    
               _k8v`  ```````````-:;??TS#b,  
              :#b_  ````````````````.=??sm8^ 
             -mD. ````````````````````"??sD8'
             vB\  `````````````````````__-*BE
             GM' `````````````````````````'M8
             XM. ````````````````````````  MB
             YW;  ``````````````````````  ,WU
             'M#` ``````````````````````  G%:
              =$p`  ``````````````````  `P$\ 
               ^B8=   ``````````````   ^#M+  
                `I$q;`    ``````    -r#Ne-   
                  `rbgD3!'--`  .,+|PgR)-     
                     `;z5VdBggMR9nz+`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FuqyqozThemedIconsThemedIcons+ProgressIndefinite}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FuqyqozThemedIconsThemedIcons.ProgressIndefinite))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FuqyqozThemedIconsThemedIcons.ProgressIndefinite.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FuqyqozThemedIconsThemedIcons.ProgressIndefinite&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite.Load_Color">
            <summary>Loads the image for Themed Icon ProgressIndefinite theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite.Load_Gray">
            <summary>Loads the image for Themed Icon ProgressIndefinite theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProgressIndefinite theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ProgressIndefinite.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProgressIndefinite.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties">
             <summary>
            	<para>
            		<para>Properties Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                     ~/LJ33l)+~`             
                     E{,-``'_~TkJ~           
                     !aC,      `~yl`         
               `aooI~ `;2C"      .x2'        
               LV"`=ou~ .uV)`     ,Vi        
               IS.  `;o3af"`      `SS        
               )y~`````="`````````'y7        
               'oY-```````````````~j}_       
                `iu~```````````````./oi_     
                  =tur"_'``'-_.``````'+oi_   
                    .=?T{jj3tII!.``````-ro7_ 
                              ^{1!'``````-cor
                                ^}x!-....._o1
                                  ^}C!_._+I}-
                                    ^T337+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Properties}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Properties))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Properties.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Properties&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties.Load_Color">
            <summary>Loads the image for Themed Icon Properties theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties.Load_Gray">
            <summary>Loads the image for Themed Icon Properties theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties.Load_GrayDark">
            <summary>Loads the image for Themed Icon Properties theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Properties.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Properties.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question">
             <summary>
            	<para>
            		<para>Question Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                            
                      -"=!+))r/=^_          
                   -!l)~:-`  `-_~Lt\_       
                 ~tT~.            `^|{!     
               `7I~    `~JS666oc-    "Ct`   
               lo"````.aDD5!!)DDDr````_3F`  
              ;a/`````~22u```.bDDy`````=ar  
              tV:..........-LwDDE".....-V2  
              1E,---------,bDD}^--------Ey  
              +Xr______________________!XT  
              `kU=________lVVl________~kh.  
               .E9+"""""""kDDk"""""""!U6-   
                `)H5c=^^^^^^^^^^^^~?oA}.    
                  `!umyT?+!~~;*rTjOy*.      
                     `!T[y9DDwV[T/.         
                                            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Question}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Question))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Question.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Question&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question.Id">
             <summary>
            	<para>
            		<para>Question Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question"></see> identifier class.</para>
            		<para>
            			<code>
            
                      -"=!+))r/=^_
                   -!l)~:-`  `-_~Lt\_
                 ~tT~.            `^|{!
               `7I~    `~JS666oc-    "Ct`
               lo"````.aDD5!!)DDDr````_3F`
              ;a/`````~22u```.bDDy`````=ar
              tV:..........-LwDDE".....-V2
              1E,---------,bDD}^--------Ey
              +Xr______________________!XT
              `kU=________lVVl________~kh.
               .E9+"""""""kDDk"""""""!U6-
                `)H5c=^^^^^^^^^^^^~?oA}.
                  `!umyT?+!~~;*rTjOy*.
                     `!T[y9DDwV[T/.
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Question}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Question))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Question.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Question&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question.Load_Color">
            <summary>Loads the image for Themed Icon Question theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question.Load_Gray">
            <summary>Loads the image for Themed Icon Question theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question.Load_GrayDark">
            <summary>Loads the image for Themed Icon Question theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Question.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Question.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch">
             <summary>
            	<para>
            		<para>QuickSearch Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                           `"!+cJJ)r!"`
                         ,co7/=~,,^=!To)^
              c))||TTTTi3er":^=;!!;=^,"*o7`
              c)......J5o;,^="'`   .,=^,~Iu'
            Lcc))||TTTuVr"""-        ."""\Vs
            Lc........Vk;^__``````````__^~kk
            Lcc))||TTTaZc~_.----------.-~+Z]
              c)....T71US\=-`.-,"",_.`-=!eh_
              c))||TttT!oXT!~-`    `-^!cZ5-
                 `~l)~-_,TE4uTL+//+?|IXV+`
               `~l)"-_:"~=rVRwyEqqKotr_
              _iT"-_:"~=r2Ro_
              )1^_:"~=rSDo_
              _3ur=;LSDo_
               `;iXOV7_
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+QuickSearch}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.QuickSearch))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.QuickSearch.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.QuickSearch&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch.Id">
             <summary>
            	<para>
            		<para>QuickSearch Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch"></see> identifier class.</para>
            		<para>
            			<code>
            
                           `"!+cJJ)r!"`
                         ,co7/=~,,^=!To)^
              c))||TTTTi3er":^=;!!;=^,"*o7`
              c)......J5o;,^="'`   .,=^,~Iu'
            Lcc))||TTTuVr"""-        ."""\Vs
            Lc........Vk;^__``````````__^~kk
            Lcc))||TTTaZc~_.----------.-~+Z]
              c)....T71US\=-`.-,"",_.`-=!eh_
              c))||TttT!oXT!~-`    `-^!cZ5-
                 `~l)~-_,TE4uTL+//+?|IXV+`
               `~l)"-_:"~=rVRwyEqqKotr_
              _iT"-_:"~=r2Ro_
              )1^_:"~=rSDo_
              _3ur=;LSDo_
               `;iXOV7_
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+QuickSearch}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.QuickSearch))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.QuickSearch.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.QuickSearch&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch.Load_Color">
            <summary>Loads the image for Themed Icon QuickSearch theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch.Load_Gray">
            <summary>Loads the image for Themed Icon QuickSearch theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch.Load_GrayDark">
            <summary>Loads the image for Themed Icon QuickSearch theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.QuickSearch.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon QuickSearch.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo">
             <summary>
            	<para>
            		<para>Redo Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                   `~?71VVIi?~`
                 ~FHo?!~,:^=\]bF= GGH|.
               `{G7^__-----...-/XXOO"jAT.
              .Xb/:__^|aXXaT".```!6R  ,e#T
              tDT,:_rRV=--~{Do"````!    DD
              bD=,:_6D'   DDDDDo"```    DD
              a8(,:_T8u`  x8I,``````    88
              :8G=:__!6DT` -I8I_````    88
               ,#DL___-/68T` -3%%%%%%%%%%%
                `|8w+_---!48T`
                  `7%b/----;w%7`
                    `iNd/--..+$N
                      `J$H!_tBR!
                        `l$QD!
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Redo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Redo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Redo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Redo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo.Id">
             <summary>
            	<para>
            		<para>Redo Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo"></see> identifier class.</para>
            		<para>
            			<code>
            
                   `~?71VVIi?~`
                 ~FHo?!~,:^=\]bF= GGH|.
               `{G7^__-----...-/XXOO"jAT.
              .Xb/:__^|aXXaT".```!6R  ,e#T
              tDT,:_rRV=--~{Do"````!    DD
              bD=,:_6D'   DDDDDo"```    DD
              a8(,:_T8u`  x8I,``````    88
              :8G=:__!6DT` -I8I_````    88
               ,#DL___-/68T` -3%%%%%%%%%%%
                `|8w+_---!48T`
                  `7%b/----;w%7`
                    `iNd/--..+$N
                      `J$H!_tBR!
                        `l$QD!
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Redo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Redo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Redo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Redo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo.Load_Color">
            <summary>Loads the image for Themed Icon Redo theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo.Load_Gray">
            <summary>Loads the image for Themed Icon Redo theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo.Load_GrayDark">
            <summary>Loads the image for Themed Icon Redo theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Redo.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Redo.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh">
             <summary>
            	<para>
            		<para>Refresh Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
               `!2aaaaaaaaaaa[z+~_`
             `!u7_        2222.,;Lu7"
            ;IT_          uuuu    `~lx;
            IIIIII/       IIIIr=-    ~xl-
               TF,   .    [[[[[[[|_   _ti`
              ~}=```-J``-+}}}}}}}}t_```,}!
              rl'```+l-\lllllllllll)````l7
              Li.```riiiiiiiiiiir_i)````iT
              ~7"```_T77777777r_``7^```:7!
              `?c_```_?|||||||````,```-Lc`
               .rc,```.,=+cccc```````,cccccc
                 ^r/,.....LLLL..........-!L;
                   _/+="_-rrrr........-=r=.
                     `-,~/+++++++++++++=.
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Refresh}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Refresh))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Refresh.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Refresh&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh.Id">
             <summary>
            	<para>
            		<para>Refresh Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh"></see> identifier class.</para>
            		<para>
            			<code>
            
               `!2aaaaaaaaaaa[z+~_`
             `!u7_        2222.,;Lu7"
            ;IT_          uuuu    `~lx;
            IIIIII/       IIIIr=-    ~xl-
               TF,   .    [[[[[[[|_   _ti`
              ~}=```-J``-+}}}}}}}}t_```,}!
              rl'```+l-\lllllllllll)````l7
              Li.```riiiiiiiiiiir_i)````iT
              ~7"```_T77777777r_``7^```:7!
              `?c_```_?|||||||````,```-Lc`
               .rc,```.,=+cccc```````,cccccc
                 ^r/,.....LLLL..........-!L;
                   _/+="_-rrrr........-=r=.
                     `-,~/+++++++++++++=.
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Refresh}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Refresh))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Refresh.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Refresh&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh.Load_Color">
            <summary>Loads the image for Themed Icon Refresh theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh.Load_Gray">
            <summary>Loads the image for Themed Icon Refresh theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh.Load_GrayDark">
            <summary>Loads the image for Themed Icon Refresh theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Refresh.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Refresh.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft">
             <summary>
            	<para>
            		<para>ResizeCornerLeft Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                  `Vl
                   L/
            
            
                   _`      `,
                  `@g      |@D
            
            
            
                  -@g      c@b      R@/
                   `        .        .
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ResizeCornerLeft}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ResizeCornerLeft))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ResizeCornerLeft.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ResizeCornerLeft&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft.Id">
             <summary>
            	<para>
            		<para>ResizeCornerLeft Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                  `Vl
                   L/
            
            
                   _`      `,
                  `@g      |@D
            
            
            
                  -@g      c@b      R@/
                   `        .        .
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ResizeCornerLeft}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ResizeCornerLeft))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ResizeCornerLeft.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ResizeCornerLeft&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft.Load_Color">
            <summary>Loads the image for Themed Icon ResizeCornerLeft theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft.Load_Gray">
            <summary>Loads the image for Themed Icon ResizeCornerLeft theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft.Load_GrayDark">
            <summary>Loads the image for Themed Icon ResizeCornerLeft theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerLeft.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ResizeCornerLeft.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight">
             <summary>
            	<para>
            		<para>ResizeCornerRight Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                                    cV.
                                    ~T
            
            
                           `,       `_
                           |@D      B@/
            
            
            
                  -@g      c@b      R@/
                   `        .        .
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ResizeCornerRight}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ResizeCornerRight))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ResizeCornerRight.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ResizeCornerRight&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight.Id">
             <summary>
            	<para>
            		<para>ResizeCornerRight Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                                    cV.
                                    ~T
            
            
                           `,       `_
                           |@D      B@/
            
            
            
                  -@g      c@b      R@/
                   `        .        .
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ResizeCornerRight}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ResizeCornerRight))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ResizeCornerRight.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ResizeCornerRight&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight.Load_Color">
            <summary>Loads the image for Themed Icon ResizeCornerRight theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight.Load_Gray">
            <summary>Loads the image for Themed Icon ResizeCornerRight theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight.Load_GrayDark">
            <summary>Loads the image for Themed Icon ResizeCornerRight theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ResizeCornerRight.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ResizeCornerRight.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right">
             <summary>
            	<para>
            		<para>Right Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                        ccccccc~`
                        ;|~   -\)~`
                         ,T+`   -+T=`
              77777777777777T_````_r7=`
              ii````````````````````,rs=
              ll...................._+l+
              ttttttttttttttt;----,rt+-
                         _lJ^___"LFr-
                        !x|"::~cxr-
                        IIIIIIIL-
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Right}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Right))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Right.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Right&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right.Id">
             <summary>
            	<para>
            		<para>Right Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                        ccccccc~`
                        ;|~   -\)~`
                         ,T+`   -+T=`
              77777777777777T_````_r7=`
              ii````````````````````,rs=
              ll...................._+l+
              ttttttttttttttt;----,rt+-
                         _lJ^___"LFr-
                        !x|"::~cxr-
                        IIIIIIIL-
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Right}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Right))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Right.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Right&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right.Load_Color">
            <summary>Loads the image for Themed Icon Right theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right.Load_Gray">
            <summary>Loads the image for Themed Icon Right theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right.Load_GrayDark">
            <summary>Loads the image for Themed Icon Right theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Right.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Right.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save">
             <summary>
            	<para>
            		<para>Save Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
              IIIIIIIIIIIIIIIIIIIIII1/`
              uu~~~~~~      tttt  ~~*tu/`
              22~~~~~~``````tttt``~~~~+{o*
              aa~~~~~~``````tttt``~~~~~~aa
              VV~~~~~~````````````~~~~~~VV
              EE======............======EE
              UU========================UU
              66========================66
              ww====                ====ww
              dd====                ====dd
              AA====                ====AA
              ##====                ====##
              DD====----------------====DD
              DDDDDDDDDDDDDDDDDDDDDDDDDDDD
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Save}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Save))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Save.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Save&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save.Id">
             <summary>
            	<para>
            		<para>Save Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save"></see> identifier class.</para>
            		<para>
            			<code>
            
              IIIIIIIIIIIIIIIIIIIIII1/`
              uu~~~~~~      tttt  ~~*tu/`
              22~~~~~~``````tttt``~~~~+{o*
              aa~~~~~~``````tttt``~~~~~~aa
              VV~~~~~~````````````~~~~~~VV
              EE======............======EE
              UU========================UU
              66========================66
              ww====                ====ww
              dd====                ====dd
              AA====                ====AA
              ##====                ====##
              DD====----------------====DD
              DDDDDDDDDDDDDDDDDDDDDDDDDDDD
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Save}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Save))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Save.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Save&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save.Load_Color">
            <summary>Loads the image for Themed Icon Save theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save.Load_Gray">
            <summary>Loads the image for Themed Icon Save theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save.Load_GrayDark">
            <summary>Loads the image for Themed Icon Save theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Save.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Save.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems">
             <summary>
            	<para>
            		<para>ShowOverflowTabStripItems Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ShowOverflowTabStripItems}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ShowOverflowTabStripItems))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ShowOverflowTabStripItems.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ShowOverflowTabStripItems&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems.Id">
             <summary>
            	<para>
            		<para>ShowOverflowTabStripItems Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ShowOverflowTabStripItems}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ShowOverflowTabStripItems))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ShowOverflowTabStripItems.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ShowOverflowTabStripItems&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems.Load_Color">
            <summary>Loads the image for Themed Icon ShowOverflowTabStripItems theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems.Load_Gray">
            <summary>Loads the image for Themed Icon ShowOverflowTabStripItems theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems.Load_GrayDark">
            <summary>Loads the image for Themed Icon ShowOverflowTabStripItems theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowOverflowTabStripItems.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ShowOverflowTabStripItems.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems">
             <summary>
            	<para>
            		<para>ShowRecentTabStripItems Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ShowRecentTabStripItems}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ShowRecentTabStripItems))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ShowRecentTabStripItems.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ShowRecentTabStripItems&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems.Id">
             <summary>
            	<para>
            		<para>ShowRecentTabStripItems Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+ShowRecentTabStripItems}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.ShowRecentTabStripItems))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.ShowRecentTabStripItems.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.ShowRecentTabStripItems&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems.Load_Color">
            <summary>Loads the image for Themed Icon ShowRecentTabStripItems theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems.Load_Gray">
            <summary>Loads the image for Themed Icon ShowRecentTabStripItems theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems.Load_GrayDark">
            <summary>Loads the image for Themed Icon ShowRecentTabStripItems theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ShowRecentTabStripItems.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ShowRecentTabStripItems.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop">
             <summary>
            	<para>
            		<para>Stop Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
                  jjjjjjjjjjjjjjjjjjjj
                  VV                VV
                  ZZ````````````````ZZ
                  44````````````````44
                  pp----------------pp
                  ##----------------##
                  DD________________DD
                  88::::::::::::::::88
                  BB,,,,,,,,,,,,,,,,BB
                  $$$$$$$$$$$$$$$$$$$$
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Stop}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Stop))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Stop.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Stop&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop.Id">
             <summary>
            	<para>
            		<para>Stop Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
                  jjjjjjjjjjjjjjjjjjjj
                  VV                VV
                  ZZ````````````````ZZ
                  44````````````````44
                  pp----------------pp
                  ##----------------##
                  DD________________DD
                  88::::::::::::::::88
                  BB,,,,,,,,,,,,,,,,BB
                  $$$$$$$$$$$$$$$$$$$$
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Stop}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Stop))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Stop.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Stop&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop.Load_Color">
            <summary>Loads the image for Themed Icon Stop theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop.Load_Gray">
            <summary>Loads the image for Themed Icon Stop theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop.Load_GrayDark">
            <summary>Loads the image for Themed Icon Stop theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Stop.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Stop.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success">
             <summary>
            	<para>
            		<para>Success Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                                ?yyyyyyyyy
                               ra!     ^aT
                              r5!     ~5T
                             r2!     ~2T
                            ro!     ~o(
                           +u!`````~u)
              uuuuuuuuu+  +u!`````~uc
              c3~`````!3++3!`````~3c
               cI~`````!II!`````~Ic
                Lx~`````!!`````~xL
                 ?C~``````````~C?
                  rf~........~fr
                   r{=......={r
                    rttttttttr
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Success}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Success))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Success.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Success&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success.Id">
             <summary>
            	<para>
            		<para>Success Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success"></see> identifier class.</para>
            		<para>
            			<code>
            
                                ?yyyyyyyyy
                               ra!     ^aT
                              r5!     ~5T
                             r2!     ~2T
                            ro!     ~o(
                           +u!`````~u)
              uuuuuuuuu+  +u!`````~uc
              c3~`````!3++3!`````~3c
               cI~`````!II!`````~Ic
                Lx~`````!!`````~xL
                 ?C~``````````~C?
                  rf~........~fr
                   r{=......={r
                    rttttttttr
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Success}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Success))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Success.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Success&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success.Load_Color">
            <summary>Loads the image for Themed Icon Success theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success.Load_Gray">
            <summary>Loads the image for Themed Icon Success theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success.Load_GrayDark">
            <summary>Loads the image for Themed Icon Success theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Success.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Success.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing">
             <summary>
            	<para>
            		<para>TransparentNothing Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+TransparentNothing}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.TransparentNothing))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.TransparentNothing.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.TransparentNothing&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing.Id">
             <summary>
            	<para>
            		<para>TransparentNothing Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+TransparentNothing}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.TransparentNothing))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.TransparentNothing.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.TransparentNothing&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing.Load_Color">
            <summary>Loads the image for Themed Icon TransparentNothing theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing.Load_Gray">
            <summary>Loads the image for Themed Icon TransparentNothing theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing.Load_GrayDark">
            <summary>Loads the image for Themed Icon TransparentNothing theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.TransparentNothing.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon TransparentNothing.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo">
             <summary>
            	<para>
            		<para>Undo Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                         `~r71VVIiL=`
                 `rbGG =FH3+=^:,~!rud1=
               `?Hj"OOXX/-...-----__"cHj`
              LAe,  R6!```.:L5XXy7~__:=6b-
              DD    !````:CD{=--~uDT_:,rD5
              DD    ```_[DDDDD   `DR_:,^DD
              88    ``````,I8e  `t8C_:,+8w
              88    ````_I8a: `TDb+__:~48~
              %%%%%%%%%%%S, `T8d+____rDD=
                          `T8H+---_+wWt`
                        `7%G*----/bN{'
                        N$c..--/d$['
                        !RBt_!H$1'
                          !DQQI'
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Undo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Undo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Undo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Undo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo.Id">
             <summary>
            	<para>
            		<para>Undo Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo"></see> identifier class.</para>
            		<para>
            			<code>
            
                         `~r71VVIiL=`
                 `rbGG =FH3+=^:,~!rud1=
               `?Hj"OOXX/-...-----__"cHj`
              LAe,  R6!```.:L5XXy7~__:=6b-
              DD    !````:CD{=--~uDT_:,rD5
              DD    ```_[DDDDD   `DR_:,^DD
              88    ``````,I8e  `t8C_:,+8w
              88    ````_I8a: `TDb+__:~48~
              %%%%%%%%%%%S, `T8d+____rDD=
                          `T8H+---_+wWt`
                        `7%G*----/bN{'
                        N$c..--/d$['
                        !RBt_!H$1'
                          !DQQI'
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Undo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Undo))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Undo.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Undo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo.Load_Color">
            <summary>Loads the image for Themed Icon Undo theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo.Load_Gray">
            <summary>Loads the image for Themed Icon Undo theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo.Load_GrayDark">
            <summary>Loads the image for Themed Icon Undo theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Undo.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Undo.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin">
             <summary>
            	<para>
            		<para>Unpin Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
                        $$$$$$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$$$$$$$$$
                    $$$$$$$$$$$$$$$$$$
            
                            $$
                            $$
                            $$
                            $$
                            $$
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Unpin}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Unpin))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Unpin.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Unpin&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin.Id">
             <summary>
            	<para>
            		<para>Unpin Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin"></see> identifier class.</para>
            		<para>
            			<code>
            
                        $$$$$$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$  $$$$$$
                        $$$$$$$$$$
                    $$$$$$$$$$$$$$$$$$
            
                            $$
                            $$
                            $$
                            $$
                            $$
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Unpin}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Unpin))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Unpin.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Unpin&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin.Load_Color">
            <summary>Loads the image for Themed Icon Unpin theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin.Load_Gray">
            <summary>Loads the image for Themed Icon Unpin theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin.Load_GrayDark">
            <summary>Loads the image for Themed Icon Unpin theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Unpin.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Unpin.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem">
             <summary>
            	<para>
            		<para>UnpinnedTabStripItem Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+UnpinnedTabStripItem}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.UnpinnedTabStripItem))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.UnpinnedTabStripItem.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.UnpinnedTabStripItem&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem.Id">
             <summary>
            	<para>
            		<para>UnpinnedTabStripItem Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+UnpinnedTabStripItem}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.UnpinnedTabStripItem))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.UnpinnedTabStripItem.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.UnpinnedTabStripItem&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem.Load_Color">
            <summary>Loads the image for Themed Icon UnpinnedTabStripItem theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem.Load_Gray">
            <summary>Loads the image for Themed Icon UnpinnedTabStripItem theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem.Load_GrayDark">
            <summary>Loads the image for Themed Icon UnpinnedTabStripItem theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.UnpinnedTabStripItem.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon UnpinnedTabStripItem.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up">
             <summary>
            	<para>
            		<para>Up Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
                         `"LL~`
                       `^L/../c~`
                     `^c/-    -/)~`
                   `^)*-        -*|~`
                  ~|+_````````````_+T=
                  77```."+````+".```77
                  ii-^riii````iiir^-ii
                  lll+,`ll....ll`,+lll
                        ll----ll
                        }}----}}
                        CC____CC
                        ]]____]]
                        11111111
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Up}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Up))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Up.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Up&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up.Id">
             <summary>
            	<para>
            		<para>Up Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up"></see> identifier class.</para>
            		<para>
            			<code>
            
            
                         `"LL~`
                       `^L/../c~`
                     `^c/-    -/)~`
                   `^)*-        -*|~`
                  ~|+_````````````_+T=
                  77```."+````+".```77
                  ii-^riii````iiir^-ii
                  lll+,`ll....ll`,+lll
                        ll----ll
                        }}----}}
                        CC____CC
                        ]]____]]
                        11111111
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Up}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Up))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Up.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Up&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up.Load_Color">
            <summary>Loads the image for Themed Icon Up theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up.Load_Gray">
            <summary>Loads the image for Themed Icon Up theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up.Load_GrayDark">
            <summary>Loads the image for Themed Icon Up theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Up.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Up.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5">
             <summary>
            	<para>
            		<para>Warning5 Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="!:IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                         ,zzzz~
                        "J*  ;J~
                       ~l+    ;l!
                      =t!      ~t/
                     /{!        ~{r
                    +[=   @@@@   "[L`
                   L1=````@@@@````"[T`
                 `cI~`````@@@@`````,17`
                `v3^``````@@@@``````,1{`
               `lo"``````````````````_IC-
              `]u,````````@@@@````````_xu-
             -3o,.........@@@@........._1o_
            -2u_........................-Fy:
            ~yu~........................"xV!
             `TEEEEEEEEEEEEEEEEEEEEEEEEEEl.
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Warning5}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Warning5))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Warning5.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Warning5&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5.Id">
             <summary>
            	<para>
            		<para>Warning5 Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="!:IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5"></see> identifier class.</para>
            		<para>
            			<code>
                         ,zzzz~
                        "J*  ;J~
                       ~l+    ;l!
                      =t!      ~t/
                     /{!        ~{r
                    +[=   @@@@   "[L`
                   L1=````@@@@````"[T`
                 `cI~`````@@@@`````,17`
                `v3^``````@@@@``````,1{`
               `lo"``````````````````_IC-
              `]u,````````@@@@````````_xu-
             -3o,.........@@@@........._1o_
            -2u_........................-Fy:
            ~yu~........................"xV!
             `TEEEEEEEEEEEEEEEEEEEEEEEEEEl.
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+Warning5}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.Warning5))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.Warning5.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.Warning5&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5.Load_Color">
            <summary>Loads the image for Themed Icon Warning5 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5.Load_Gray">
            <summary>Loads the image for Themed Icon Warning5 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5.Load_GrayDark">
            <summary>Loads the image for Themed Icon Warning5 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning5.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Warning5.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug">
             <summary>
            	<para>
            		<para>Debug Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   =aaT,          _?aa;
                 -FPc"LuS\'    .+eSr~+Pt.
                 -!ner"_^7ae55nas=_,L2E*'
                    _?aYrL^_``_~\?taJ,
                     ;Pz'        -?P\
               PPPPPPPz            LPPPPPPP
               PP'''"{`  ````````   |~'''PP
               PP***C=  `--------`  :3***PP
               PPlllP'  c((((((((7  `PlllPP
               PP'''5.  rvvvvvvvv|  `a'''PP
               PPlllS^  !CCCCCCCCL  :alllPP
               PP***Ll` `FYYYYYYI'  T?***PP
               PP''''*r  '7xxxxv_  !?''''PP
               PPPPPPPPc. `_^=_` `+PPPPPPPP
                      ,na\,'``':+yE=
                        _+TIaPYJ*,
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:JopymynThemedIconsThemedIcons+Debug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(JopymynThemedIconsThemedIcons.Debug))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = JopymynThemedIconsThemedIcons.Debug.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;JopymynThemedIconsThemedIcons.Debug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug.Load_Color">
            <summary>Loads the image for Themed Icon Debug theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug.Load_Gray">
            <summary>Loads the image for Themed Icon Debug theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug.Load_GrayDark">
            <summary>Loads the image for Themed Icon Debug theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Debug.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Debug.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug">
             <summary>
            	<para>
            		<para>ToolWindowDebug Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
                    ;|||T=-       _+|||T_
                  ;EPi~;TSP5\~;^TyPIL^+yPt'
                  ;tPal*"_+SPY|jPl,_=?5PaT_
                    `~JPPE*-    `,1aPe*_
               ;PPPPPPPPC`         ^PPPPPPPPP
               ;PP::::*5-   ````    ~S":::+PP
               ;PPTTTT2"   `-----    |lTTT1PP
               ;PPTTTsP-  '||||||\   ;STTT1PP
               ;PP:::;a   _FFFFFF|   "2:::+PP
               ;PPPPPPP'  `ffffff\   *PPPPPPP
               ;PP::::z*   ;5555Y'  `5=:::+PP
               ;PPTTTTiP^   ^|5?'  `lSTTTT1PP
               _LLLLLL?PP!`       _1PILLLLLLL
                       .iPy\^_',;lPy+
                         .^\FEPIT!,
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:JopymynThemedIconsThemedIcons+ToolWindowDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(JopymynThemedIconsThemedIcons.ToolWindowDebug))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = JopymynThemedIconsThemedIcons.ToolWindowDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;JopymynThemedIconsThemedIcons.ToolWindowDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug.Load_Color">
            <summary>Loads the image for Themed Icon ToolWindowDebug theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug.Load_Gray">
            <summary>Loads the image for Themed Icon ToolWindowDebug theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug.Load_GrayDark">
            <summary>Loads the image for Themed Icon ToolWindowDebug theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.ToolWindowDebug.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ToolWindowDebug.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet">
             <summary>
            	<para>
            		<para>DotNet Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
            
            
            
                   `+IPpqXpbEi\_   _rjA8BMM%$
                  *RGi\;====*?SXr C#PT*-`=7%b
                `n#S=^^^;^~`"^^jqPD2^^_`~+08-
               `481,,,,=4/,.`,,;qRX^,,`,=RM_
               48?:_':,Gqo:_ _::ERT::._~XB=
              I0F~:`~~TqqX;~'`"~*h~~""=pB^
             ,B4==`_==4q\Xy==.-^=*===+H8^
             SBs+~ /TPR\ cpjr++++++cI#A_
             BB088##wl_   ,5UApXqRDDV\
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:MiqadyzThemedIconsThemedIcons+DotNet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(MiqadyzThemedIconsThemedIcons.DotNet))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = MiqadyzThemedIconsThemedIcons.DotNet.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;MiqadyzThemedIconsThemedIcons.DotNet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet.Load_Color">
            <summary>Loads the image for Themed Icon DotNet theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet.Load_Gray">
            <summary>Loads the image for Themed Icon DotNet theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotNet theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.DotNet.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotNet.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More">
             <summary>
            	<para>
            		<para>More Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CommonThemedIcons+More}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CommonThemedIcons.More))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CommonThemedIcons.More.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CommonThemedIcons.More&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More.Load_Color">
            <summary>Loads the image for Themed Icon More theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More.Load_Gray">
            <summary>Loads the image for Themed Icon More theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More.Load_GrayDark">
            <summary>Loads the image for Themed Icon More theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.More.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon More.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute">
             <summary>
            	<para>
            		<para>Substitute Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                      .RRR##mAGGHdby]c,      
                    .TRRR1"--------:"LXo.    
                  .T#5::aRR],........."b3    
                .TAe,    "yRRRRR##j````db|Uw4
               )do"        "SRR_rK#````GU),bw
               wb```.````'```RR```-````:```db
               4w'={b````#o\-RRl-        -tG[
               X64Iwb....Xm#RRRRRl-    -l#1_ 
                   tw^---------;kRRJ..lR3_   
                   .jk\_---------!ERRRu_     
                    `~JawwbdHGGOm#RRR_       
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PsiFeaturesVisualStudioCoreThemedIcons+Substitute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PsiFeaturesVisualStudioCoreThemedIcons.Substitute))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PsiFeaturesVisualStudioCoreThemedIcons.Substitute.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PsiFeaturesVisualStudioCoreThemedIcons.Substitute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute.Load_Color">
            <summary>Loads the image for Themed Icon Substitute theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute.Load_Gray">
            <summary>Loads the image for Themed Icon Substitute theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute.Load_GrayDark">
            <summary>Loads the image for Themed Icon Substitute theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Substitute.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Substitute.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio">
             <summary>
            	<para>
            		<para>VisualStudio Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                  ~Fov=,`    
                               `;2n^`:;)23c;-
               .*e7"         `+EF"       ."hh
             ^F6s^!5E?-    -)Xs:           66
             bb-````,)Xe=_zw7:`````````````bb
             dd``--```.;}wc-``````-!f``````dd
             mm..^Ol,..........:+2mmm......mm
             DD--~DDDs-------:FDDDDDD------DD
             88--;8k!:---------;JH888------88
             88::^;::::;[w)_::::::;}O::::::88
             %%",,,,;sO8z*d8{~,,,,,,,,,,,,,%%
             cDBe*Tw$k;    ~4Be!"""""""""""$$
               ~V$Dc.        _yQ6r^^^^^^^~rQQ
                               -3QD7;rzEDQmx=
                                 `FQg$K)"`   
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:MocerixThemedIconsThemedIcons+VisualStudio}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(MocerixThemedIconsThemedIcons.VisualStudio))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = MocerixThemedIconsThemedIcons.VisualStudio.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;MocerixThemedIconsThemedIcons.VisualStudio&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio.Load_Color">
            <summary>Loads the image for Themed Icon VisualStudio theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio.Load_Gray">
            <summary>Loads the image for Themed Icon VisualStudio theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio.Load_GrayDark">
            <summary>Loads the image for Themed Icon VisualStudio theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.VisualStudio.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon VisualStudio.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML">
             <summary>
            	<para>
            		<para>GraphML Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                   `~r}}}J?^`     _*|}}7r"`  
                  ;2IT+!!=?tj!  ~2uT=;;!cCj= 
                 ;Vz;;;_,^;;|VVVVJ^^^_,~^^|Vr
                 vE+;;.  `;;^    "^^.  `^^;Ey
                 !hJ;;^::~;;chhhh7^^~::"^^ch|
                  *U3r^;;;"-*Xz-\U3?;^^;rxX7`
                   l4~ *44K^ -uX;-=3E44Sx=-  
               `;TIbt .9V`rw1'`=93-          
              !XXsr=^~*Vb= -39=`-tb*         
             *d2;;^__^;;zd|  =b2:`;w9kk2};`  
             om*;;'  `;;;mq   .fdr'^LLLT16mr 
             TDf;;^::~;;7D3    *Dj+=!^^!==uDc
              7D67=;;!cyDf     XDc=='  `==*DO
               -|6888#ZJ-      c83==!"_;==Y8{
                                78w}r==riX8f`
                                 -c9mWW#w|:  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PowusasThemedIconsThemedIcons+GraphML}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PowusasThemedIconsThemedIcons.GraphML))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PowusasThemedIconsThemedIcons.GraphML.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PowusasThemedIconsThemedIcons.GraphML&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML.Load_Color">
            <summary>Loads the image for Themed Icon GraphML theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML.Load_Gray">
            <summary>Loads the image for Themed Icon GraphML theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML.Load_GrayDark">
            <summary>Loads the image for Themed Icon GraphML theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.GraphML.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon GraphML.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage">
             <summary>
            	<para>
            		<para>RasterImage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
               jjjjjjjjjjjjjjjjjjjjjjjjjjjj  
               SS                        SS  
               kk  ;;;;;;;;;;;;;;;;;;;;  kk  
               UU  ^^^^^^^^^^"-``-_^^^^  UU  
               66  ~~~~~~~~~~`    `~~~~  66  
               ww  "":-``:""":````:""""  ww  
               pp  `      `,___________  pp  
               OO  .-:"^_.  .,,:.` ',,,  OO  
               ##  ^^^^^^^~-         .:  ##  
               DD  ^^^^^^^^^^::"^^^_-`   DD  
               88                        88  
               8888888888888888888888888888  
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PowusasThemedIconsThemedIcons+RasterImage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PowusasThemedIconsThemedIcons.RasterImage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PowusasThemedIconsThemedIcons.RasterImage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PowusasThemedIconsThemedIcons.RasterImage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage.Load_Color">
            <summary>Loads the image for Themed Icon RasterImage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage.Load_Gray">
            <summary>Loads the image for Themed Icon RasterImage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage.Load_GrayDark">
            <summary>Loads the image for Themed Icon RasterImage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.RasterImage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon RasterImage.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps">
             <summary>
            	<para>
            		<para>Xps Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                 =kV?-                       
               ,jS,.z6t                      
             `iHT` rHppbbbbbbbbbbbbbbbb      
             qm!`.UmA                ww      
             :kDT-:2D                66      
               /Dd!"4W8XXXXXXXXXXXXXXXX      
                `3$$8''''''''''''''''KK      
                   kk----------------KPPr`   
                   VVVVVVVVVVVVVVVVX6f-:5k^  
                   ee""""""""""""""""H|` rHf'
                   oo^^^^^^^^^^^^^^^^6mw-`^mO
                   33333333333333332wDV".rD9_
                                   ZWp^;w8c  
                                    ^y$$Z-   
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:PowusasThemedIconsThemedIcons+Xps}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(PowusasThemedIconsThemedIcons.Xps))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = PowusasThemedIconsThemedIcons.Xps.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;PowusasThemedIconsThemedIcons.Xps&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps.Load_Color">
            <summary>Loads the image for Themed Icon Xps theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps.Load_Gray">
            <summary>Loads the image for Themed Icon Xps theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps.Load_GrayDark">
            <summary>Loads the image for Themed Icon Xps theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Xps.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Xps.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing">
             <summary>
            	<para>
            		<para>AddMissing Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                         }}}}}}}}}}          
                         [[      [[          
                         xx  }}  xx          
                         II``]]``II          
                 3333333333``II``3333333333  
                 22``````````33``````````22  
                 55..555555555555555555..55  
                 yy----------SS----------yy  
                 VVVVVVVVVV--EE--VVVVVVVVVV  
                         EE--UU--EE          
                         hh::66::hh          
                         XX::::::XX          
                         4444444444          
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+AddMissing}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.AddMissing))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.AddMissing.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.AddMissing&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.Load_Color">
            <summary>Loads the image for Themed Icon AddMissing theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.Load_Gray">
            <summary>Loads the image for Themed Icon AddMissing theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.Load_GrayDark">
            <summary>Loads the image for Themed Icon AddMissing theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.Load_RiderDark">
            <summary>Loads the image for Themed Icon AddMissing theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.Load_RiderLight">
            <summary>Loads the image for Themed Icon AddMissing theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.AddMissing.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon AddMissing.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16">
             <summary>
            	<para>
            		<para>Copy16x16 Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                       222222222222222+`     
                       ee::::::::::ee;}j*`   
                       VV:::```````VV::;{a*` 
                       PP:::       PP::::;tkr
             222222222222222=`     UUUUUUUUUU
             ee::::::::::ee;}5+`        :::66
             VV:::```````VV::;{y*.      :::ww
             PP:::       PP::::;tVr     :::pp
             UU:::       UUUUUUUUUU     :::AA
             66:::            :::66.....:::mm
             ww:::            :::ww::::::::DD
             pp:::            :::ppDDDDDDDDDD
             AA:::            :::AA          
             mm:::............:::mm          
             DD::::::::::::::::::DD          
             DDDDDDDDDDDDDDDDDDDDDD          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Copy16x16}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Copy16x16))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Copy16x16.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Copy16x16&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.Load_Color">
            <summary>Loads the image for Themed Icon Copy16x16 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.Load_Gray">
            <summary>Loads the image for Themed Icon Copy16x16 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.Load_GrayDark">
            <summary>Loads the image for Themed Icon Copy16x16 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.Load_RiderDark">
            <summary>Loads the image for Themed Icon Copy16x16 theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.Load_RiderLight">
            <summary>Loads the image for Themed Icon Copy16x16 theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Copy16x16.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Copy16x16.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create">
             <summary>
            	<para>
            		<para>Create Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                         }}}}}}}}}}          
                         [[      [[          
                         xx      xx          
                         II``````II          
                 3333333333``````3333333333  
                 22``````````````````````22  
                 55......................55  
                 yy----------------------yy  
                 VVVVVVVVVV------VVVVVVVVVV  
                         EE------EE          
                         hh::::::hh          
                         XX::::::XX          
                         4444444444          
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Create}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Create))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Create.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Create&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.Load_Color">
            <summary>Loads the image for Themed Icon Create theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.Load_Gray">
            <summary>Loads the image for Themed Icon Create theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.Load_GrayDark">
            <summary>Loads the image for Themed Icon Create theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.Load_RiderDark">
            <summary>Loads the image for Themed Icon Create theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.Load_RiderLight">
            <summary>Loads the image for Themed Icon Create theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Create.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Create.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit">
             <summary>
            	<para>
            		<para>Edit Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                `!}yVF!`     
                              -?X2;--=b#*    
                            `;J39X*-..-rD8~  
                          `;7c"``7#mT:::^QQ  
                        `;7c"`  `-:]W8}+Hg]  
                      `;7c"`  `--:::_ZQgq"   
                    `;7c"`  `--:::,^i6{=     
                  `;7c"`  `--:::,^i6z:       
                `;7c"`  `--:::,^i6z:         
               ;7i|-` `--:::,^i6z:           
               iz,|xr:-:::,^i6z:             
               }1..^soT~,^i6z:               
               fI--::;fhf6z:                 
               325yVEUX4z:                   
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Edit}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Edit))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Edit.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Edit&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.Load_Color">
            <summary>Loads the image for Themed Icon Edit theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.Load_Gray">
            <summary>Loads the image for Themed Icon Edit theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.Load_GrayDark">
            <summary>Loads the image for Themed Icon Edit theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.Load_RiderDark">
            <summary>Loads the image for Themed Icon Edit theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.Load_RiderLight">
            <summary>Loads the image for Themed Icon Edit theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Edit.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Edit.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked">
             <summary>
            	<para>
            		<para>FlagChecked Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
               666666666666666666E: !$$3 66  
               99^^^^^^^^^^^^^^^~` T$$J `99  
               ww;;;;;;;;;;;;;;"` 1$$r `^ww  
               bb;;;;            S$%! .;;bb  
               pp;;;;          `b$8~ -;;;pp  
               qq;;;;         .D$8:  ;;;;qq  
               GG!!!! ;W$8:  :8$m.   !!!!GG  
               mm!!!!  -m$%;~%$b`    !!!!mm  
               ##====   `E$$$$S      ====##  
               ##\\\\     7$$1       \\\\##  
               DD****                ****DD  
               DD************************DD  
               88rrrrrrrrrrrrrrrrrrrrrrrr88  
               8888888888888888888888888888  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+FlagChecked}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.FlagChecked))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.FlagChecked.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.FlagChecked&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.Load_Color">
            <summary>Loads the image for Themed Icon FlagChecked theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.Load_Gray">
            <summary>Loads the image for Themed Icon FlagChecked theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.Load_GrayDark">
            <summary>Loads the image for Themed Icon FlagChecked theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.Load_RiderDark">
            <summary>Loads the image for Themed Icon FlagChecked theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.Load_RiderLight">
            <summary>Loads the image for Themed Icon FlagChecked theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagChecked.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FlagChecked.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked">
             <summary>
            	<para>
            		<para>FlagUnchecked Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                 666666666666666666666666    
                 99^^^^^^^^^^^^^^^^^^^^99    
                 ww;;;;;;;;;;;;;;;;;;;;ww    
                 bb;;;;            ;;;;bb    
                 pp;;;;            ;;;;pp    
                 GG!!!!            !!!!GG    
                 mm!!!!            !!!!mm    
                 ##====            ====##    
                 DD****            ****DD    
                 DD********************DD    
                 DDrrrrrrrrrrrrrrrrrrrrDD    
                 888888888888888888888888    
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+FlagUnchecked}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.FlagUnchecked))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.FlagUnchecked.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.FlagUnchecked&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.Load_Color">
            <summary>Loads the image for Themed Icon FlagUnchecked theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.Load_Gray">
            <summary>Loads the image for Themed Icon FlagUnchecked theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.Load_GrayDark">
            <summary>Loads the image for Themed Icon FlagUnchecked theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.Load_RiderDark">
            <summary>Loads the image for Themed Icon FlagUnchecked theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.Load_RiderLight">
            <summary>Loads the image for Themed Icon FlagUnchecked theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.FlagUnchecked.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon FlagUnchecked.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline">
             <summary>
            	<para>
            		<para>Inline Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                         cccccccc            
                         TT    TT            
                     ""_`||    ||`_""        
                     77r777````77|r77        
                     vv`,Lv````vL,`vv        
                     ii..."...."...ii        
                     =zr,--------,rz*        
                      .\F?"::::"?Fr-         
                        .*]c^^c]r-           
                 IIIIIIIII33II33IIIIIIIII    
                 VV````````````````````VV    
                 ww````````````````````ww    
                 DDDDDDDDDDDDDDDDDDDDDDDD    
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Inline}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Inline))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Inline.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Inline&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.Load_Color">
            <summary>Loads the image for Themed Icon Inline theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.Load_Gray">
            <summary>Loads the image for Themed Icon Inline theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.Load_GrayDark">
            <summary>Loads the image for Themed Icon Inline theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.Load_RiderDark">
            <summary>Loads the image for Themed Icon Inline theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.Load_RiderLight">
            <summary>Loads the image for Themed Icon Inline theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Inline.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Inline.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified">
             <summary>
            	<para>
            		<para>Modified Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                         22222222            
                         53    J5            
                   ^:`   iy.  `y3   `:^      
                  ^V2St?^7V_  -V}^rxV2V!     
                 .Vo``-;T3P=  ^PoT;:``]k:    
                 FX^      .-  -.      ,X3    
                 Tl3keflc*_````:*?JtoEol|    
                      =4K;``:"``~y4L         
                    -tb|'``_6w^``.rw5:       
                   cHk_```^bfJq!```:2q7      
                   :T63!-!qF  cOc';xwv"      
                      "7q#s    =#G}^         
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Modified}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Modified))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Modified.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Modified&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.Load_Color">
            <summary>Loads the image for Themed Icon Modified theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.Load_Gray">
            <summary>Loads the image for Themed Icon Modified theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.Load_GrayDark">
            <summary>Loads the image for Themed Icon Modified theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.Load_RiderDark">
            <summary>Loads the image for Themed Icon Modified theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.Load_RiderLight">
            <summary>Loads the image for Themed Icon Modified theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Modified.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Modified.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move">
             <summary>
            	<para>
            		<para>Move Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                                             
                                             
                         kkkkkkkkVr`         
                         :}V=`   :zkr`       
                           ,1k*`   ,{K?`     
               XXXXXXXXXXXXXXXXZ*````_xU?`   
               66``````````````````````"fX?  
               ww``````````````````````:Jwz  
               bbbbbbbbbbbbbbbbbi:...:ib}:   
                           -Jpz_..._zp1:     
                         -iq}"---"}qx:       
                         RRRRRRRRRf:         
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Move}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Move))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Move.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Move&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.Load_Color">
            <summary>Loads the image for Themed Icon Move theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.Load_Gray">
            <summary>Loads the image for Themed Icon Move theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.Load_GrayDark">
            <summary>Loads the image for Themed Icon Move theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.Load_RiderDark">
            <summary>Loads the image for Themed Icon Move theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.Load_RiderLight">
            <summary>Loads the image for Themed Icon Move theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Move.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Move.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16">
             <summary>
            	<para>
            		<para>Paste16x16 Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                     -^/T|+^:                
                   .[e=_.._!2f-              
                 bbbb^`c$QY`:bbbb            
               8888....2@@6....8888          
               kk,,/^^^^^^^^^^/,,kk          
               UU"""``````````"""UU          
               44~~~`````ooooooooooo2*`      
               HH^^^`````yy::::::::y7}e*`    
               OO;;;`````kk::      k*-;]Vr`  
               ##!!!`````hh::      h2}}}khP  
               88===,,,,,66::          ::66  
               88++++++++ww::          ::ww  
               %%%%%%%%%%pp::          ::pp  
                         OO::``````````::OO  
                         ##::::::::::::::##  
                         DDDDDDDDDDDDDDDDDD  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Paste16x16}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Paste16x16))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Paste16x16.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Paste16x16&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.Load_Color">
            <summary>Loads the image for Themed Icon Paste16x16 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.Load_Gray">
            <summary>Loads the image for Themed Icon Paste16x16 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.Load_GrayDark">
            <summary>Loads the image for Themed Icon Paste16x16 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.Load_RiderDark">
            <summary>Loads the image for Themed Icon Paste16x16 theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.Load_RiderLight">
            <summary>Loads the image for Themed Icon Paste16x16 theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Paste16x16.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Paste16x16.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove">
             <summary>
            	<para>
            		<para>Remove Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                  `;TJJc~`          .*VXXXX  
                 ,kf^-:;55:       _JK7: =kz  
                 zk.    `vk+   `!35/. :uo^   
                 ;V?``````!yz"cVz^``.TV?`    
                  "f2/.````,foL:```;21:      
                    ^xI!---------,io!        
                      ;2t!::::::*3l'         
                    `;]]*_::::::~J3;         
                  `!xs="""""=r^"""*C7-       
                -*t7!~~~~~;J1|]c;~~;7t;      
              -L{(!^^^^^;T1/` -*1|=^^*}7-    
             ~}7!;;;;;;Lzc-     `;zv*;;|};   
             (z/;;;;;*J|:          "|i?;*i7: 
             ^i|+!=*|v^              :rJc+Ti!
              ._!?c+"`                 -!JJJJ
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Remove}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Remove))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Remove.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Remove&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.Load_Color">
            <summary>Loads the image for Themed Icon Remove theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.Load_Gray">
            <summary>Loads the image for Themed Icon Remove theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.Load_GrayDark">
            <summary>Loads the image for Themed Icon Remove theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.Load_RiderDark">
            <summary>Loads the image for Themed Icon Remove theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.Load_RiderLight">
            <summary>Loads the image for Themed Icon Remove theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Remove.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Remove.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning">
             <summary>
            	<para>
            		<para>Warning Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                          ,7777~             
                         _J+  ;J^            
                        ^i+    ;i!           
                       ;z!      ^z!          
                      =}!        ^}r         
                     +1;   @@@@   "1?`       
                    ?x;````@@@@````"1|`      
                  `cI^`````@@@@`````,t7`     
                 `7I~``````@@@@``````,x}`    
                `s3"``````````````````:f[-   
               `]3,````````@@@@````````:]3-  
              -f3,.........@@@@.........:C3: 
             -2n:........................-[e,
             ^e3^''''''''''''''''''''''''_]S;
              `|EEEEEEEEEEEEEEEEEEEEEEEEEEl. 
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:HihecuqThemedIconsThemedIcons+Warning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(HihecuqThemedIconsThemedIcons.Warning))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = HihecuqThemedIconsThemedIcons.Warning.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;HihecuqThemedIconsThemedIcons.Warning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.Load_Color">
            <summary>Loads the image for Themed Icon Warning theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.Load_Gray">
            <summary>Loads the image for Themed Icon Warning theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.Load_GrayDark">
            <summary>Loads the image for Themed Icon Warning theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.Load_RiderDark">
            <summary>Loads the image for Themed Icon Warning theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.Load_RiderLight">
            <summary>Loads the image for Themed Icon Warning theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons.Warning.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Warning.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CompiledIcons.AnyCompiledIconClass">
            <summary>
            Base class for all compiled icon classes. Can be used in generic constraints.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CompiledIcons.AnyCompiledIconClass.TryGetAnyCompiledIconClassId(System.Type,JetBrains.Util.OnError)">
            <summary>
            Compiled icons have an ability of being referenced with a <c>typeof</c> expression. This method produces an <see cref="T:JetBrains.UI.Icons.IconId" /> out of all the widely-known compile-time icon id types.
            </summary>
            <param name="type">A Themed Icon Typeof Identifier type.</param>
            <param name="onerror">Error handling strategy.</param>
            <returns>Nullness depends on the error handling strategy.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CompiledIcons.AnyCompiledIconClass.TryGetAnyCompiledIconClassId(JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Util.OnError)">
            <summary>
            Compiled icons have an ability of being referenced with a <c>typeof</c> expression. This method produces an <see cref="T:JetBrains.UI.Icons.IconId" /> out of all the widely-known compile-time icon id types.
            </summary>
            <param name="pctype">A Themed Icon Typeof Identifier type.</param>
            <param name="onerror">Error handling strategy.</param>
            <returns>Nullness depends on the error handling strategy.</returns>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.CompiledIcons.CompiledIconPackIdentity">
            <summary>
            Identifies compiled icon packs. Uses instance identity to speed up lookup.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.CompiledIcons.CompiledIconPackIdentity.Create(System.String)">
            <summary>
            Interns the string value and creates an accessor.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ComposedIcons.CompositeIconId">
            <summary>
            Composes an icon out of images of other icons.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ComposedIcons.CompositeIconId.Compose(JetBrains.UI.Icons.IconId,JetBrains.UI.Icons.IconId)">
            <summary>
            Composes icons to represent the stack with a single Icon ID.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ComposedIcons.CompositeIconId.Compose(JetBrains.UI.Icons.IconId[])">
            <summary>
            Composes icons to represent the stack with a single Icon ID.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Emitters.NameNormalizer">
            <summary>
            Makes upper-camel-cased names out of any-format IDs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Emitters.NameNormalizer.myMapNameToNormalization">
            <summary>
            Normalized names cache.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Emitters.NameNormalizer.myMapNormalizedToOrigins">
            <summary>
            If more than one original name leads to the same canonical, we'll see it here and avoid transforming the name.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Emitters.NameNormalizer.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Inits with the list of expected names, for these we guarantee there will be no conflicts, i.e. we won't collapse two distinct names into the same normalized one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Emitters.NameNormalizer.AssertNoConflicts">
            <summary>
              <para>If several names map into the same normalized name, throws an error.</para>
              <para>Also checks that no names differ by just case.</para>
              <para>Fluent.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Emitters.ThemedIconsCsInjector">
            <summary>
            Helps with planting the generated ThemedIcons. TODO
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesIntellisenseThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(FeaturesIntellisenseThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage">
             <summary>
            	<para>
            		<para>CodeCompletionPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
                 `=TVZZZZkJ!`
                ~ao=-EEEE.=ok!
               ^E7`  EEEE  `LE!
               Ck-   kkkk   `ka
               TV_``````````-V]
               .23-````````-}y_
                `caT;````=|a|'
                  `aa````aa`
             77777722....22777777777777777777
             tt    oo....oo    dd  dd  dd  tt
             II    )o!--=ol    ZZZZZZZZZZZZII
             55`````/{uu]+.````5555555555``55
             kk````````````````xxxxxxxxxxxxkk
             66................JJ..JJ..JJ..66
             HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+CodeCompletionPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.CodeCompletionPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.CodeCompletionPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.CodeCompletionPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage.Load_Color">
            <summary>Loads the image for Themed Icon CodeCompletionPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage.Load_Gray">
            <summary>Loads the image for Themed Icon CodeCompletionPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon CodeCompletionPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CodeCompletionPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CodeCompletionPage.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance">
             <summary>
            	<para>
            		<para>CompletionAppearance Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                  !oUD8M$DRs`
                 Tbc_.-_"/ogD
                 4b `.-_"^=gg
                 }C1uoaSkPX4b
                 }C`.  __,"4b
                 }C`.  __,"4b
                 }C`.  __,"4b
                 }C`.  __,"4b
                 }C`.  __,"4b
             llll}C`.  __,"4bllllllllllllllll
             ]]``}C1uoaSkPX4b``GG``GG``GG``]]
             oo``LCr_--__=F4x``666666666666oo
             SS```:)u)"^JP}"```VVVVVVVVVV``SS
             hh....."7aSl^.....uuuuuuuuuuuuhh
             ww-------^~-------tt--tt--tt--ww
             OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+CompletionAppearance}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.CompletionAppearance))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.CompletionAppearance.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.CompletionAppearance&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance.Load_Color">
            <summary>Loads the image for Themed Icon CompletionAppearance theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance.Load_Gray">
            <summary>Loads the image for Themed Icon CompletionAppearance theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance.Load_GrayDark">
            <summary>Loads the image for Themed Icon CompletionAppearance theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.CompletionAppearance.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CompletionAppearance.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage">
             <summary>
            	<para>
            		<para>EditorOptionsPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                  `*1oL.
                                `+h3""aRi.
                              `~Jsa},..=6WC'
                            `=lc::ctX5=__+#QJ
                          `=t),` ``,)F9X*+bgk
                        `={T"`  `````"TIRgH"
                      `;]7^`  `......_?IL_
                    `!Ii^.  `......:cuc-
                  `!ul~.  `------,)o)-
                `!jt='  .------"Ta|-
              `/aF=-  .------^7ST-
             /ykki^________^ik7-
             KK!IKKl~____~lKs-
             UU::/uUUt==tUl-
             66,,,,/2666t_
             wwwwwwwww}_
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+EditorOptionsPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.EditorOptionsPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.EditorOptionsPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.EditorOptionsPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage.Load_Color">
            <summary>Loads the image for Themed Icon EditorOptionsPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage.Load_Gray">
            <summary>Loads the image for Themed Icon EditorOptionsPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon EditorOptionsPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.EditorOptionsPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon EditorOptionsPage.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage">
             <summary>
            	<para>
            		<para>IntellisenseAutopopupPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                           -!?7]]]]]]]]7c/_
                         `(]=.`        `.~F7`
                         ro_ ``........`` 'oT
                         55````````````````55
             UUUUol?^"rJoSS````````````````SS
             UU  `:;xo!:.lk_``````````````-kx
             UUUUUU    UUUPa=-``````````.~oe-
                 UU    UU `=z66..``."t66at=`
                 UU    UU    ww...^F6c.
                 UU    UU    dd-~Ib(.
                 UU    UU    AAAHT.
                 UU    UU
             UUUUUU    UUUUUU
             UU   '"cT^'   UU
             2UUUU2J!;7oUUUUU
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+IntellisenseAutopopupPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage.Load_Color">
            <summary>Loads the image for Themed Icon IntellisenseAutopopupPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage.Load_Gray">
            <summary>Loads the image for Themed Icon IntellisenseAutopopupPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon IntellisenseAutopopupPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseAutopopupPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon IntellisenseAutopopupPage.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage">
             <summary>
            	<para>
            		<para>IntellisenseCompletingCharsPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
            
                   `VUUUUU^
                   {U,  `Sk.
                  +U+ `- _Ux
                 ,U}  |}  /Ur
                `VV` "UU!  tU"
                {U, `Fuuu. `Vk`
               +U+          ,U[
              ,U}  ~UUUUUU+  +U+
             {ZV` `VZ{lllEU_  }U3llllllllllll
             EUUUUUU~````-kUUUUUX``GG``GG``]]
             oo````````````````666666666666oo
             SS````````````````SSSSSSSSSS``SS
             hh................uuuuuuuuuuuuhh
             ww----------------tt--tt--tt--ww
             OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+IntellisenseCompletingCharsPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage.Load_Color">
            <summary>Loads the image for Themed Icon IntellisenseCompletingCharsPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage.Load_Gray">
            <summary>Loads the image for Themed Icon IntellisenseCompletingCharsPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon IntellisenseCompletingCharsPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseCompletingCharsPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon IntellisenseCompletingCharsPage.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral">
             <summary>
            	<para>
            		<para>IntellisenseGeneral Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                             .-_,"",_-.
                          .,="-.````.-"="'
                         ";_`           -;~`
                       `;!.              `=!`
               EEEEEEEEEEEEEE```````````  -+=
               EE  EEEEEE  EE````````````  rr
               EE  EEEEEE  EE..\L__L\...` .c!
             wwwwwwwwwwwwwwwwww'+oo+'''`  +T-
             ##!!!!!!!!!!!!!!##--oo--`  -LT-
             8888))))))))))8888--oo--  |t=`
               88))))))))))88          ]]
               DDLLLLLLLLLLDD`'_^=+cluk6X
               RRRRRRRRRRRRRR.'_^=+cluk6h
                   AA==AA  cDr'_^=+cluU6|
                   bb==bb   TDo+==+Tuh9T`
                   44==44    -rk4AGher-
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+IntellisenseGeneral}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.IntellisenseGeneral))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.IntellisenseGeneral.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.IntellisenseGeneral&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral.Load_Color">
            <summary>Loads the image for Themed Icon IntellisenseGeneral theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral.Load_Gray">
            <summary>Loads the image for Themed Icon IntellisenseGeneral theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral.Load_GrayDark">
            <summary>Loads the image for Themed Icon IntellisenseGeneral theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisenseGeneral.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon IntellisenseGeneral.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage">
             <summary>
            	<para>
            		<para>IntellisensePage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         .-_,"",_-.
                      .,="-.````.-"="'
                     ";_`           -;~`
                   `;!.              `=!`
                   ^+_  ````````````  -+=
                   \r` ``````````````  rr
                   =c- `...\L__L\...` .c!
                   `Tr` `.''+oo+'''`  +T-
                    .)|_  `--oo--`  -LT-
                      ^tT  --oo--  |t=`
                       ]]          ]]
                       DD`'_^=+cluk6X
                       OD.'_^=+cluk6h
                       cDr'_^=+cluU6|
                        TDo+==+Tuh9T`
                         -rk4AGher-
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+IntellisensePage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.IntellisensePage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.IntellisensePage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.IntellisensePage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage.Load_Color">
            <summary>Loads the image for Themed Icon IntellisensePage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage.Load_Gray">
            <summary>Loads the image for Themed Icon IntellisensePage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage.Load_GrayDark">
            <summary>Loads the image for Themed Icon IntellisensePage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.IntellisensePage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon IntellisensePage.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem">
             <summary>
            	<para>
            		<para>NuGetIntelliSenseItem Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
              .+oZZeL-
             =#Z)/!cVR+
             ED/~~~~=D#
             +DV?!;roD2;t26RDDDDDDR62t+.
              :JbDDXXDDZl?\!======;\?7EDa-
                   'dGc~-``'^;;;;;;;;;;rHR"
                   o87!`     !!!!!!!!!!!c8k
                   D8//~.  `"////////////88
                   88*********;_````_=***88
                   %%++++++++"        _++%%
                   WWrrrrrrrr`         rrWW
                   5M}???????,        _?7Mb
                   "%D7ccccccc!-`   -=cTOM;
                    -bM6Ii))))))))))ixX8R"
                      :s6R$$$$$$$$$$Dw}"
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+NuGetIntelliSenseItem}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem.Load_Color">
            <summary>Loads the image for Themed Icon NuGetIntelliSenseItem theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem.Load_Gray">
            <summary>Loads the image for Themed Icon NuGetIntelliSenseItem theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem.Load_GrayDark">
            <summary>Loads the image for Themed Icon NuGetIntelliSenseItem theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.NuGetIntelliSenseItem.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon NuGetIntelliSenseItem.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage">
             <summary>
            	<para>
            		<para>ParameterInfoPage Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                         -!?7CCCCCCCC7L!_
                       `)C~.`        ``^{7`
                       ru_ ```````````` .uT
                       ee  ````````````  ee
                .tKKKK=yy````````````````yy
               =E3_+X! tk_``````````````-ke
              |6c."6l  -y5='```  `````.~oV6t
             ~wt..ow-   `=7XX.. `."tXX66!-)w/
             iw~'-w6       99..."f9T' uw,',wu
             kb_-^bu       bb'^1bi-   7b;--bb
             FH~-_H9       AAAAl-     jH^-"HV
             !At__EA'                 pH__(A?
              uR)_+Rl                +R|_+Ok
               LRa~FR=              _R5^IRl`
                ,wDDDR^            _#DDDb~
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesIntellisenseThemedIcons+ParameterInfoPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(FeaturesIntellisenseThemedIcons.ParameterInfoPage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = FeaturesIntellisenseThemedIcons.ParameterInfoPage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;FeaturesIntellisenseThemedIcons.ParameterInfoPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage.Load_Color">
            <summary>Loads the image for Themed Icon ParameterInfoPage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage.Load_Gray">
            <summary>Loads the image for Themed Icon ParameterInfoPage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage.Load_GrayDark">
            <summary>Loads the image for Themed Icon ParameterInfoPage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.FeaturesIntellisenseThemedIcons.FeaturesIntellisenseThemedIcons.ParameterInfoPage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ParameterInfoPage.</summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.GenericIconThemeAspect.Color">
            <summary>
            Always use the full-color icon theme.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.GenericIconThemeAspect.Gray">
            <summary>
            Always use the gray (VS11-friendly for light background) icon theme.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.GenericIconThemeAspect.GrayDark">
            <summary>
            Always use the dark-gray (VS11-friendly for dark background) icon theme.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.IconTheme">
            <summary>
            Identifies theming of the icon set.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.IconTheme.#ctor(JetBrains.Application.UI.Icons.IconThemeAspect[])">
            <summary>
            Creates a new theme from the set of aspects.
            Aspects must be sorted by priority and there must be no duplicates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.IconTheme.FromAspectsUnsorted(System.Collections.Generic.IEnumerable{JetBrains.Application.UI.Icons.IconThemeAspect})">
            <summary>
            Resolves duplicate aspects by picking one with the highest priority, sorts them by priority, and creates the theme.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.IconTheme.FromSingleAspect(JetBrains.Application.UI.Icons.IconThemeAspect)">
            <summary>
            Creates a theme which contains only one aspect.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.IconThemeAspect">
            <summary>
            Icons are themed along independent axes, such as generic icons theme and symbol icons theme.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.MarginAutomation">
            <summary>
            Adds a custom margin to a control.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.RasterizationResolution">
            <summary>
            Specifies the resolution for a rasterizer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.RasterizationResolution.DeviceIndependent96dpi">
            <summary>
            Always operate in device-independent pixels, like in WPF, which is 96dpi.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.RasterizationResolution.ScreenResolution">
            <summary>
            Use the real screen DPI, which might be different from 96 if large/small fonts are selected in the system.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.RasterizationResolution.NotSure">
            <summary>
            If you don't have time to currently think of these matters.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Settings.IconThemeSelection">
            <summary>
            <see cref="F:JetBrains.Application.Icons.Settings.ThemedIconSettings.IconThemeSelection"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Settings.IconThemeSelection.Automatic">
            <summary>
            <para>This is the default. A theme is selected based on the current environment.</para>
            <para>For example, VS11 will have icons gray, while all other environments will have them colored.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Settings.IconThemeSelection.Color">
            <summary>
            Always use the full-color icon theme.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Settings.IconThemeSelection.Gray">
            <summary>
            Always use the gray (VS11-friendly for light background) icon theme.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Settings.IconThemeSelection.GrayDark">
            <summary>
            Always use the dark-gray (VS11-friendly for dark background) icon theme.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Settings.IIconsForIconThemeSelectionSample">
            <summary>
            Provides product-characteristic icons for advertising as an icon theme selection sample.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle">
            <summary>
            Icon theme aspects which are provided for <see cref="T:JetBrains.Application.Icons.IThemedIconManager"/> by different clients and are composed into the resulting theme.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Icons.Settings.IThemedIconThemeOracle.SuggestedIconTheme">
            <summary>
            Current aspect value. <c>Null</c> means not set.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Shell.ShellFileIcon">
            <summary>
            Gets icons for shell file types.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Shell.ShellFileIcon.Create``3(JetBrains.Util.FileSystemPathBase{``0,``1,``2},JetBrains.Application.UI.Icons.Shell.ShellFileIconId.IconSize)">
            <summary>
            Creates an icon identifier which represents the Shell file icon for this file type (determined by file extension).
            Shell is queried for the actual icon image only when this IconID is resolved into an image, so you cannot know in advance whether the specific image is available with Shell when you create the ID here.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Shell.ShellFileIcon.Create(System.String,JetBrains.Application.UI.Icons.Shell.ShellFileIconId.IconSize)">
            <summary>
            Creates an icon identifier which represents the Shell file icon for this file type (determined by file extension).
            Shell is queried for the actual icon image only when this IconID is resolved into an image, so you cannot know in advance whether the specific image is available with Shell when you create the ID here.
            The extension is either with or without the leading dot.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Shell.ShellFileIconId">
            <summary>
            An ID to the dynamically-generated shell file icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Shell.ShellFileIconId.IconSize.LargeIcon">
            <summary>
            Large in Shell terms, which is usually 32x32.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Shell.ShellFileIconId.IconSize.SmallIcon">
            <summary>
            Small icon, 16x16.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Shell.ShellFileIconId.ExtensionWithDot">
            <summary>
            Lowercase file extension with a leading dot.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SpecialThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(SpecialThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = SpecialThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.UI.Icons.CompiledIconsCs.CompiledIconCsId(typeof(SpecialThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;SpecialThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon">
             <summary>
            	<para>
            		<para>InvalidIcon Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
               ||||||||||||||||||||||||||||  
               ||                        ||  
               ||  ||||||||||||||||||||  ||  
               ||  ||||||||||||||||||||  ||  
               ||  ||L__L||||||||L__L||  ||  
               ||  ||+'  _L||||L_  '+||  ||  
               ||  ||||+'  _LL_  '+||||  ||  
               ||  ||||||+'    '+||||||  ||  
               ||  ||||||L_    _L||||||  ||  
               ||  ||||L_  '++'  _L||||  ||  
               ||  ||L_  '+||||+'  _L||  ||  
               ||  ||+''+||||||||+''+||  ||  
               ||  ||||||||||||||||||||  ||  
               ||  ||||||||||||||||||||  ||  
               ||                        ||  
               ||||||||||||||||||||||||||||  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SpecialThemedIcons+InvalidIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SpecialThemedIcons.InvalidIcon))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SpecialThemedIcons.InvalidIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SpecialThemedIcons.InvalidIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon.Id">
             <summary>
            	<para>
            		<para>InvalidIcon Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon"></see> identifier class.</para>
            		<para>
            			<code>
               ||||||||||||||||||||||||||||  
               ||                        ||  
               ||  ||||||||||||||||||||  ||  
               ||  ||||||||||||||||||||  ||  
               ||  ||L__L||||||||L__L||  ||  
               ||  ||+'  _L||||L_  '+||  ||  
               ||  ||||+'  _LL_  '+||||  ||  
               ||  ||||||+'    '+||||||  ||  
               ||  ||||||L_    _L||||||  ||  
               ||  ||||L_  '++'  _L||||  ||  
               ||  ||L_  '+||||+'  _L||  ||  
               ||  ||+''+||||||||+''+||  ||  
               ||  ||||||||||||||||||||  ||  
               ||  ||||||||||||||||||||  ||  
               ||                        ||  
               ||||||||||||||||||||||||||||  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SpecialThemedIcons+InvalidIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SpecialThemedIcons.InvalidIcon))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SpecialThemedIcons.InvalidIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SpecialThemedIcons.InvalidIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon.Load_Color">
            <summary>Loads the image for Themed Icon InvalidIcon theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon.Load_Gray">
            <summary>Loads the image for Themed Icon InvalidIcon theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon.Load_GrayDark">
            <summary>Loads the image for Themed Icon InvalidIcon theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.InvalidIcon.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon InvalidIcon.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder">
             <summary>
            	<para>
            		<para>Placeholder Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
               rXww    wwww    wwww    wwXz  
               ww                        ww  
                                             
                                             
               ww                        ww  
               ww                        ww  
                                             
                                             
               ww                        ww  
               ww                        ww  
                                             
                                             
               ww                        ww  
               lwww    wwww    wwww    wwwu  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SpecialThemedIcons+Placeholder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SpecialThemedIcons.Placeholder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SpecialThemedIcons.Placeholder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SpecialThemedIcons.Placeholder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder.Id">
             <summary>
            	<para>
            		<para>Placeholder Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder"></see> identifier class.</para>
            		<para>
            			<code>
                                             
               rXww    wwww    wwww    wwXz  
               ww                        ww  
                                             
                                             
               ww                        ww  
               ww                        ww  
                                             
                                             
               ww                        ww  
               ww                        ww  
                                             
                                             
               ww                        ww  
               lwww    wwww    wwww    wwwu  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:SpecialThemedIcons+Placeholder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(SpecialThemedIcons.Placeholder))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = SpecialThemedIcons.Placeholder.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;SpecialThemedIcons.Placeholder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder.Load_Color">
            <summary>Loads the image for Themed Icon Placeholder theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder.Load_Gray">
            <summary>Loads the image for Themed Icon Placeholder theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder.Load_GrayDark">
            <summary>Loads the image for Themed Icon Placeholder theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.Special.ThemedIcons.SpecialThemedIcons.Placeholder.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Placeholder.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconAutomation">
            <summary>
            Wraps a themed icon for the <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" /> interface.
            Where just an <see cref="T:System.Object" /> is expected, you can use the <see cref="F:JetBrains.Application.UI.Icons.ThemedIconAutomation.IconId" /> directly as content.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.ThemedIconAutomation.IconId">
            <summary>
            The Themed Icon ID.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconAutomation.Create``1">
            <summary>
            Create an icon by its icon class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.JetBrains#Application#UI#ActionsRevised#Menu#IPresentableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddCurrentRuntimePaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddCurrentRuntimePaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddDefaultPanesAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddDefaultPanesAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddDiffPaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddDiffPaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddDirectoryWithIconFilesPaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddDirectoryWithIconFilesPaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddProductHomeDirPaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerAddPaneActionGroup.IconViewerAddProductHomeDirPaneAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportActionGroup.#ctor(JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconSingleCsexpAction,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconPackCsexpAction,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconSingleSvgAction,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconPackSvgAction,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportPngAction,JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportSvgAction)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportActionGroup.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportPngAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportPngAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportSvgAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportSvgAction.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconActionBase">
            <summary>
            Base for actions which export a themed icon into C# or else.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconActionBase.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.DelegateExecute)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconActionBase.JetBrains#Application#UI#ActionsRevised#Menu#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.ActionPresentation,JetBrains.Application.UI.Actions.DelegateUpdate)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconPackActionBase">
            <summary>
            Base for actions which make a full icons pack.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconSingleActionBase">
            <summary>
            Base for actions which export C# for inserting into an existing actions pack.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerExportThemedIconSingleActionBase.ExecuteCore(JetBrains.Application.UI.Progress.UITaskExecutor,System.Collections.Generic.IReadOnlyList{JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon},JetBrains.Application.DataContext.IDataContext)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerViewModeSwitchActions.JetBrains#Application#UI#ActionsRevised#Menu#ICheckableAction#Execute(JetBrains.Application.DataContext.IDataContext)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.Actions.IconViewerViewModeSwitchActions.JetBrains#Application#UI#ActionsRevised#Menu#ICheckableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.UI.Actions.CheckedActionPresentation)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerDetailsAutomation.IsNoThemeListAvailable">
            <summary>
            The icon didn't expose the list of supported themes, will need a banner in the UI, and one dummy section for default theme will be exposed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerGroupByOwnerRowAutomation">
            <summary>
            In grouping more, represents the first-level grouping node in the tree.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerGroupByOwnerRowAutomation.FormatOwnerName(System.String)">
            <summary>
            Highlight logical parts in icon owner names.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerImportSourceAutomation.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Components.IUIApplication)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerMasterListAsAnyTreeListAutomation">
            <summary>
            Base automation (and inheritors) for treelist-like view modes of the icon viewer master body.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerMasterListAsFlatListAutomation">
            <summary>
            Treelist-like view modes of the icon viewer master body: flat list items.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerMasterListAsGroupedByOwnerAutomation">
            <summary>
            Treelist-like view modes of the icon viewer master body: grouped by icon packs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerMasterListAsTilesAutomation">
            <summary>
            Master list view with icons, tiles view mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerRowAutomation.System#IComparable{JetBrains#Application#UI#Icons#ThemedIconsToolWindow#IconViewerRowAutomation}#CompareTo(JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerRowAutomation)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerSizeCellAutomation.SizesToText(JetBrains.Util.Media.JetSize,JetBrains.Util.Media.JetSize)">
            <summary>
            Size: if all same and round, display no fraction; if same and not round, display fraction and color in dull red; if different, display the delta in bright red.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerSizeCellAutomation.SizeToText(JetBrains.Util.Media.JetSize)">
            <summary>
            Size: if round, display no fraction; if not round, display fraction and color in dull red.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerThemeColumnHeaderAutomation.CollectFromIconsLive(JetBrains.Lifetimes.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.Icons.ImportExport.LoadStructure.TilsPointerToIcon})">
            <summary>
            Takes list of available icons, extracts the set of known theme names to make columns.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerToolWindowPaneSettingsKey">
            <summary>
            Per-tool-window-tab settings. Also defines the set of MRU tabs.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerWindowPaneAutomation">
            <summary>
            A tab in the icon viewer tool window.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerWindowPaneAutomation.DetailsPaneBody">
            <summary>
            Details pane with icon preview etc.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerWindowPaneAutomation.ImportSpecificControls">
            <summary>
            Import controls specific for this pane source kind. Supplied by pane creator.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerWindowPaneAutomation.LogViewer">
            <summary>
            Import log messages for selected icons.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerWindowPaneAutomation.TreeGridBody">
            <summary>
            Viewing compiled icons or import etc depending on the mode.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerWindowPaneAutomation.SourceKind">
            <summary>
            What source this pane uses.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Icons.ThemedIconsToolWindow.IconViewerWindowPaneAutomation.ViewModeNoThrowConverter.#ctor">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.License.BroadcastUtil">
            <summary>
            Using UTF16 little-endian
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.License.FreeEvaluationInfoEx.GetUsedDaysCount(JetBrains.Application.UI.License.FreeEvaluationInfo)">
            <summary>
            Returns number of full days used to evaluate the product.
            Negative value means there were changes of system date and info is considered invalid.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.License.FreeEvaluationInfoEx.GetDaysLeftCount(JetBrains.Application.UI.License.FreeEvaluationInfo,System.Int32)">
            <summary>
            Returns number of days left for evaluation. 
            </summary>
            <param name="info">Evaluation info</param>
            <param name="freeTrialInfoPeriod">Maximum days of evaluation</param>
            <returns>Returns number of days left for evaluation.</returns>
        </member>
        <member name="P:JetBrains.Application.UI.License.License2.Conflict.ILicenseConflictChecker.DataToBroadcast">
            <summary>
            The signal is fired when there is data to broadcast. I.e. new user license entered.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.License.License2.Conflict.ILicenseConflictChecker.IsConflictingLicenseReceived(System.Byte[])">
            <summary>
            Called when data received to determine whether there is a conflict.
            </summary>
            <param name="data">Received bytes</param>
            <returns>Null if no conflict, conflict descriptor otherwise</returns>
        </member>
        <member name="T:JetBrains.Application.UI.MsoComponentManager.DummyMsoComponentManager">
            <summary>
            Dummy managed implementation of MSO component manager interface.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader.SJetMsoComponentManager">
            <summary>
            Jet MSO Component Manager coclass.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader.InstallNativeJetComponentManager">
            <summary>
            Load the native Jet Component Manager DLL, instantiate its COM object, and install the native Jet MSO component manager.
            </summary>
            <returns>An action to revoke the component manager.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader.GetNativeComponentManager">
            <summary>
            Fetches an external native MSO component manager.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader.CreateComponentWrapper(JetBrains.Interop.WinApi.Interfaces.IMsoComponent)">
            <summary>
            Creates a native COM object that wraps the managed MSO component.
            </summary>
            <remarks>
            <para>We need that hack to avoid exceptions when System.Windows.Forms.Application tries to cast our managed component to the type System.Windows.Forms.UnsafeNativeMethods.IMsoComponent. This cast fails for managed IMsoComponent but works fine for native COM IMsoComponent objects.</para>
            <para>Here is a diagram of objects:
            Managed Component -> CCW -> Native COM -> RCW (the returned value)
            </para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader.TryGetInstalledComponentManagerPtr">
            <summary>
            Try to fetch an external native MSO component manager interface pointer. 
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.MsoComponentManager.JetMsoComponentManagerLoader.JetComponentManagerDllName">
            <summary>
            Jet MSO Component Manager DLL name.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.MsoComponentManager.MsoComponentBase">
            <summary>
            Base managed implementation of a MSO component with empty implementations of all methods and logging.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.MsoComponentManager.MsoComponentBase.FPreTranslateMessage(JetBrains.Interop.WinApi.MSG[])">
            <summary>
            Processes the message before it is translated and dispatched.
            </summary>
            <returns>
            true if the message is consumed, false otherwise.
            </returns>
        </member>
        <member name="T:JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy">
            <summary>
            A proxy between the unmanaged IMsoComponentManager and zero or more managed components. 
            </summary>
            <remarks>
            The class registers itself as a component with the external unmanaged component manager
            and serves as a component manager for all managed components.
            </remarks>
        </member>
        <member name="F:JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy.myNativeComponentManager">
            <summary>
            External unmanaged component manager.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy.myNativeComponent">
            <summary>
            Unmanaged COM object (wrapper) of this object as a IMsoComponent.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy.myComponentId">
            <summary>
            Our component cookie obtained from the external component manager.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy.myComponents">
            <summary>
            Registered components.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.MsoComponentManager.NativeComponentManagerProxy.myMessageLoops">
            <summary>
            A stack of "continue message loop" properties supplied to PushMessageLoop method.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Actions.ShowOptionsActionBase">
            <summary>
            Shows the Options dialog for the Smart context.
            Optionally overrides the MRU selected page and the context (with an arbitrary user-friendly layer).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Actions.ShowOptionsActionBase.ShowOptionsPage">
            <summary>
            Context parameter for Show Options action: whether to preselect some page.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Actions.ShowOptionsActionBase.ShowOptionsForLayer">
            <summary>
            Context parameter for Show Options action: whether to open editing in a specific context.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Defaultness.AllInDefault">
            <summary>
            All of the controlled settings are not defined in this context and have their default values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Defaultness.SomeSetExplicitlyToDefaultValue">
            <summary>
            All of the controlled settings are in their default values, but at least some has been set to these explicitly (instead of being undefined and falling back to defaults).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Defaultness.SomeSetToNonDefault">
            <summary>
            At least some of the control settings are assigned nondefault values in this context.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Dirtiness.AllClean">
            <summary>
            None of the settings in this context have been changed as compared to the clean transaction.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Dirtiness.SomeDirty">
            <summary>
            Some of the settings in this context have been edited within this options transaction.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.IOptionPagesList.GetOptionPages">
            <summary>
            <para>Lists the known option pages.</para>
            <para>When the option pages tree needs to be built, these are organized into a one-time tree of <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor"/>s.</para>
            <para>Generally, they're collected from the classes implementing <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/> and marked with <see cref="T:JetBrains.Application.UI.Options.OptionsPageAttribute"/>. You can promote your own page entities with <see cref="M:JetBrains.Application.UI.Options.OptionPagesList.AddOptionsPage(JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.UI.Options.OptionsPageAttribute)"/> as needed.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.IOptionPagesList.AddOptionsPage(JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.UI.Options.OptionsPageAttribute)">
            <summary>
            Manually registers a page for the Options dialog (in addition to pages regularly discovered from <see cref="T:JetBrains.Application.UI.Options.OptionsPageAttribute"/>).
            </summary>
            <param name="lifetime">Duration.</param>
            <param name="typePage">Type of the page class implementing the <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/> interface.</param>
            <param name="attribute">Attribute with page metadata.</param>
        </member>
        <member name="T:JetBrains.Application.UI.Options.IOptionsPage">
            <summary>
              <para>Represents the automation object (which means a model or a view model) of a page in the options dialog. The view would be created the usual way for an <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" /> object.</para>
              <para>Class implementing this interface should be marked with <see cref="T:JetBrains.Application.UI.Options.OptionsPageAttribute" /> attribute.</para>
              <para>It is recommended to name the leaf classes against the <c>{Title}Page</c> pattern, where <c>Title</c> is the display name of the page in the Options dialog tree and title bar. This way, it will be readily locatable in the code.</para>
            </summary>
            <remarks>Right now the recommended base class to derive is the <c>BeSimpleOptionsPage</c>: it's built from BeControls which already have the standard views for interactive and Rider runtimes.</remarks>
        </member>
        <member name="P:JetBrains.Application.UI.Options.IOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            IOptionsDialog or <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor" /> could be used to retrieve the <see cref="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager" /> out of it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.IOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.ObsoletePageSearchableStub">
            <summary>
            This is for pages, which aren't reimplemented in new style. But these pages want to be ISearchablePage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPagesDiagnostics">
            <summary>
            Diagnostics modes for options tree
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionPagesDiagnostics.None">
            <summary>
              Production mode. No debug info.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionPagesDiagnostics.HighlightInlinePages">
            <summary>
              Highlight inline pages with different color and subtitle
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionPagesDiagnostics.NestInlinePagesAsChilderen">
            <summary>
              Display inline pages as if they are child pages
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionPagesDiagnostics.ShowInlineInPageTitle">
            <summary>
              Add [Inline] to inlined pages title. Used with <see cref="F:JetBrains.Application.UI.Options.OptionPagesDiagnostics.NestInlinePagesAsChilderen" />
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionPagesDiagnostics.ShowInternalInPageTitle">
            <summary>
              Add [Internal] to internal pages title.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionPagesDiagnostics.ShowZonesInPageTitle">
            <summary>
              Add [Zone1]..[ZoneN] to zoned pages title.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPagesList.GetOptionPages">
            <summary>
              <para>Lists the known option pages.</para>
              <para>When the option pages tree needs to be built, these are organized into a one-time tree of <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor" />s.</para>
              <para>Generally, they're collected from the classes implementing <see cref="T:JetBrains.Application.UI.Options.IOptionsPage" /> and marked with <see cref="T:JetBrains.Application.UI.Options.OptionsPageAttribute" />. You can promote your own page entities with <see cref="M:JetBrains.Application.UI.Options.OptionPagesList.AddOptionsPage(JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.UI.Options.OptionsPageAttribute)" /> as needed.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionPagesList.myManuallyAddedPages">
            <summary>
            What came with <see cref="M:JetBrains.Application.UI.Options.OptionPagesList.AddOptionsPage(JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.UI.Options.OptionsPageAttribute)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPagesList.AddOptionsPage(JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.UI.Options.OptionsPageAttribute)">
            <summary>
            Manually registers a page for the Options dialog (in addition to pages regularly discovered from <see cref="T:JetBrains.Application.UI.Options.OptionsPageAttribute"/>).
            </summary>
            <param name="lifetime">Duration.</param>
            <param name="typePage">Type of the page class implementing the <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/> interface.</param>
            <param name="attribute">Attribute with page metadata.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPagesList.IsPageInConfiguration(JetBrains.Application.UI.Options.OptionsPageAttribute,JetBrains.Application.Environment.RunsProducts.ProductConfigurations)">
            <summary>
            Checks whether the page should be visible in the current configuration
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPagesTree">
            <summary>
            When option pages tree needs to be presented, builds the tree structure.
            A new one is built each time so that to account for possible option pages additions/removals by plugins and user code.
            Page parent references are validated for existence and cycles when building the tree.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionPagesTree.RootElement">
            <summary>
            Gets the root page descriptor.
            It is the synthetic universal root that always exists.
            You can get all of the other pages by traversing its children recursively.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPagesTree.GetElementByID(System.String)">
            <summary>
            Looks up a page descriptor by its ID.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPagesTree.IsValidID(System.String)">
            <summary>
            Tells whether there's a page with such an ID.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.AOptionsPage">
            <summary>
            Base implementation of an options page view class. Define a view for your page class as for an Automation Object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPages.AOptionsPage.Bind(JetBrains.DataFlow.IPropertyBinding)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPages.AOptionsPage.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPages.AOptionsPage.Bind``1(JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.EnvironmentGeneralPage">
            <summary>
            The platform environment options page.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.EnvironmentPage">
            <summary>
            Root options page for the global environment options.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.PerformanceMonitor.PerformanceMonitorMemoryPage">
            <summary>
            The platform environment options page.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.PerformanceMonitor.PerformanceMonitorPage">
            <summary>
            Root options page for performance monitoring
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.PerformanceMonitor.PerformanceMonitorUIResponsivenessPage">
            <summary>
            The platform environment options page.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.PlatformEnvironmentGeneralPageIcons">
            <summary>
            The icon selection inside Platform Environment General Page
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.RootOptionsPage">
            <summary>
            Implements the root options page descriptor.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionPages.RootOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager" /> or <see cref="N:JetBrains.Application.UI.Options.OptionsDialog" /> could be used to retrieve the <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor" /> out of it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPages.RootOptionsPage.JetBrains#Application#UI#Options#IOptionsPage#OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionPages.ToolsPage">
            <summary>
            Root options page for the global per-language options.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionPages.WebProxyCustomSettingsViewModel.ReadSystemProxySettings">
            <summary>
            Reads system proxy settings from the Registry.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="!:JetBrains.UI.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="!:JetBrains.UI.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the <see cref="T:System.CodeDom.CodeTypeReference"></see> markup extension, which takes an icon identifier class (nested in <see cref="!:JetBrains.Application.Src.UI.OptionsOptionsThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="!:JetBrains.Application.Src.UI.OptionsOptionsThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="!:JetBrains.Application.Src.UI.OptionsOptionsThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="!:JetBrains.Application.Src.UI.OptionsOptionsThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="!:JetBrains.UI.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="!:JetBrains.UI.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = OptionsThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.UI.Icons.CompiledIconsCs.CompiledIconCsId(typeof(OptionsThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;OptionsThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings">
             <summary>
            	<para>
            		<para>ConnectionSettings Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                           `;=?711JL\;'      
                        `;}V}?+=!!=+?saC!.   
                       =Kec;;;;;::;;;;;L2Ur  
                      T6]!;~--;:  :;--~;;s6l 
               kkkkkkkkkkkkkk;;;;;;;;;;;;;sw?
               kk  kkkkkk  kk;;    ~!  `!!=bX
               kk  kkkkkk  kk;;    ;=  `===Ab
             444444444444444444===========zRJ
             OO!!!!!!!!!!!!!!OO_``:*,-;**F#K`
             DDDD))))))))))DDDD+"_=+\++|kDu` 
               88))))))))))88vTL++?|v2ADl"   
               DD??????????DD3EAWWmZ2J^      
               mmmmmmmmmmmmmm                
                   HH;;HH                    
                   ww;;ww                    
                   66;;66                    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CiqekagThemedIconsThemedIcons+ConnectionSettings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CiqekagThemedIconsThemedIcons.ConnectionSettings))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CiqekagThemedIconsThemedIcons.ConnectionSettings.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CiqekagThemedIconsThemedIcons.ConnectionSettings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings.Load_Color">
            <summary>Loads the image for Themed Icon ConnectionSettings theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings.Load_Gray">
            <summary>Loads the image for Themed Icon ConnectionSettings theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings.Load_GrayDark">
            <summary>Loads the image for Themed Icon ConnectionSettings theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ConnectionSettings.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ConnectionSettings.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers">
             <summary>
            	<para>
            		<para>CopyBetweenLayers Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                       33333333333333I/`     
                       oo------------~Ju\`   
                       ee--------------~lj+` 
                       aa----``````------~t5+
             33333333333333Ir.     --------SS
             oo------------~Ju/.       ----kk
             ee--------------~lo\`     ----EE
             aa----``````------~t5\    ----hh
             SS----      --------SS    ----XX
             kk----          ----kk--------44
             EE----          ----EE________ww
             hh----          ----hhdddddddddd
             XX----          ----XX          
             44------------------44          
             ww__________________ww          
             dddddddddddddddddddddd          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+CopyBetweenLayers}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.CopyBetweenLayers))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.CopyBetweenLayers.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.CopyBetweenLayers&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers.Id">
             <summary>
            	<para>
            		<para>CopyBetweenLayers Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers"></see> identifier class.</para>
            		<para>
            			<code>
                       33333333333333I/`     
                       oo------------~Ju\`   
                       ee--------------~lj+` 
                       aa----``````------~t5+
             33333333333333Ir.     --------SS
             oo------------~Ju/.       ----kk
             ee--------------~lo\`     ----EE
             aa----``````------~t5\    ----hh
             SS----      --------SS    ----XX
             kk----          ----kk--------44
             EE----          ----EE________ww
             hh----          ----hhdddddddddd
             XX----          ----XX          
             44------------------44          
             ww__________________ww          
             dddddddddddddddddddddd          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+CopyBetweenLayers}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.CopyBetweenLayers))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.CopyBetweenLayers.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.CopyBetweenLayers&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers.Load_Color">
            <summary>Loads the image for Themed Icon CopyBetweenLayers theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers.Load_Gray">
            <summary>Loads the image for Themed Icon CopyBetweenLayers theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers.Load_GrayDark">
            <summary>Loads the image for Themed Icon CopyBetweenLayers theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopyBetweenLayers.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CopyBetweenLayers.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings">
             <summary>
            	<para>
            		<para>CopySettings Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                       33333333333333I/`     
                       oo------------~Ju\`   
                       ee--------------~lj+` 
                       aa----``````------~t5+
             33333333333333Ir.     --------SS
             oo------------~Ju/.       ----kk
             ee--------------~lo\`     ----EE
             aa----``````------~t5\    ----hh
             SS----      --------SS    ----XX
             kk----          ----kk--------44
             EE----          ----EE________ww
             hh----          ----hhdddddddddd
             XX----          ----XX          
             44------------------44          
             ww__________________ww          
             dddddddddddddddddddddd          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+CopySettings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.CopySettings))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.CopySettings.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.CopySettings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings.Id">
             <summary>
            	<para>
            		<para>CopySettings Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings"></see> identifier class.</para>
            		<para>
            			<code>
                       33333333333333I/`     
                       oo------------~Ju\`   
                       ee--------------~lj+` 
                       aa----``````------~t5+
             33333333333333Ir.     --------SS
             oo------------~Ju/.       ----kk
             ee--------------~lo\`     ----EE
             aa----``````------~t5\    ----hh
             SS----      --------SS    ----XX
             kk----          ----kk--------44
             EE----          ----EE________ww
             hh----          ----hhdddddddddd
             XX----          ----XX          
             44------------------44          
             ww__________________ww          
             dddddddddddddddddddddd          
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+CopySettings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.CopySettings))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.CopySettings.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.CopySettings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings.Load_Color">
            <summary>Loads the image for Themed Icon CopySettings theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings.Load_Gray">
            <summary>Loads the image for Themed Icon CopySettings theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings.Load_GrayDark">
            <summary>Loads the image for Themed Icon CopySettings theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettings.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CopySettings.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge">
             <summary>
            	<para>
            		<para>CopySettingsLarge Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                      .^?s|!-                
                  `"ric!":,~+sc=-            
              `,*l|!,-------7kttttttlxc_     
             }o/,...........)J````````-t+    
             ^uS)=-`````````Lt_____-```:V    
             ES!-_!cr^.     _!lt7rJT```_y   _
             ;y3TT+"`_/L+:=Lr~ru|Tx)   -2 _72
             ?xJ!_-~c)!-`-.`"LF)^iFL   -uT+^u
               `~7I|~.'~cL|\_`?r  "/   -+. -1
                   '!our_ .=iki7=`        -L!
                 .~LFlTlabX17iFi?)~`    -r;` 
             `"+lJc+++++++++++++rTF7~ -+=`   
             3uc!!!!!!!!!!!!!!!!!!!rtJ+`     
              .~cl)*=~~~~~~~~~~!rJJ!_        
                  -=Tlr="""~/|l+"`           
                      _!iTl?"`               
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+CopySettingsLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.CopySettingsLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.CopySettingsLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.CopySettingsLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge.Id">
             <summary>
            	<para>
            		<para>CopySettingsLarge Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge"></see> identifier class.</para>
            		<para>
            			<code>
                      .^?s|!-                
                  `"ric!":,~+sc=-            
              `,*l|!,-------7kttttttlxc_     
             }o/,...........)J````````-t+    
             ^uS)=-`````````Lt_____-```:V    
             ES!-_!cr^.     _!lt7rJT```_y   _
             ;y3TT+"`_/L+:=Lr~ru|Tx)   -2 _72
             ?xJ!_-~c)!-`-.`"LF)^iFL   -uT+^u
               `~7I|~.'~cL|\_`?r  "/   -+. -1
                   '!our_ .=iki7=`        -L!
                 .~LFlTlabX17iFi?)~`    -r;` 
             `"+lJc+++++++++++++rTF7~ -+=`   
             3uc!!!!!!!!!!!!!!!!!!!rtJ+`     
              .~cl)*=~~~~~~~~~~!rJJ!_        
                  -=Tlr="""~/|l+"`           
                      _!iTl?"`               
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+CopySettingsLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.CopySettingsLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.CopySettingsLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.CopySettingsLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge.Load_Color">
            <summary>Loads the image for Themed Icon CopySettingsLarge theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge.Load_Gray">
            <summary>Loads the image for Themed Icon CopySettingsLarge theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge.Load_GrayDark">
            <summary>Loads the image for Themed Icon CopySettingsLarge theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.CopySettingsLarge.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon CopySettingsLarge.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration">
             <summary>
            	<para>
            		<para>DotCoverIntegration Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                  ``..--__""~=;!=            
             !!+++++++++++++++rrr;           
             ++++$$$$$$$$$$$$$$$$$$$$$$$$    
             ++rr$$    `-~1$$$l:`  `:S$$$    
             rrrr$$  S$#I_ "$^ "kNDCT$$$$-   
             rrrr$$  S$$$D  k  #$$$$$$$$$|c_ 
             =???$$  S$$6~ -$- "P$$G1N$$$TTr 
             `Lcc$$     `:J$$%r.    -I$$$TTi.
              "(|$$$$$$$$$$$$$$$8##$$$$$$T7J!
               LT$$$$$$$$$$$$$$$$$$$$$$$$7JlT
               -7$$$$$$$$$$$$$$$$$$$$$$$$ill,
                *$$          $$$$$$$$$$$$llr 
                `$$$$$$$$$$$$$$$$$$$$$$$$lJ` 
                 $$$$$$$$$$$$$$$$$$$$$$$$J,  
                  -.      .!+rLc)|TTTTT!_    
                            `._"=+)+~-       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+DotCoverIntegration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.DotCoverIntegration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.DotCoverIntegration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.DotCoverIntegration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration.Id">
             <summary>
            	<para>
            		<para>DotCoverIntegration Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration"></see> identifier class.</para>
            		<para>
            			<code>
                  ``..--__""~=;!=            
             !!+++++++++++++++rrr;           
             ++++$$$$$$$$$$$$$$$$$$$$$$$$    
             ++rr$$    `-~1$$$l:`  `:S$$$    
             rrrr$$  S$#I_ "$^ "kNDCT$$$$-   
             rrrr$$  S$$$D  k  #$$$$$$$$$|c_ 
             =???$$  S$$6~ -$- "P$$G1N$$$TTr 
             `Lcc$$     `:J$$%r.    -I$$$TTi.
              "(|$$$$$$$$$$$$$$$8##$$$$$$T7J!
               LT$$$$$$$$$$$$$$$$$$$$$$$$7JlT
               -7$$$$$$$$$$$$$$$$$$$$$$$$ill,
                *$$          $$$$$$$$$$$$llr 
                `$$$$$$$$$$$$$$$$$$$$$$$$lJ` 
                 $$$$$$$$$$$$$$$$$$$$$$$$J,  
                  -.      .!+rLc)|TTTTT!_    
                            `._"=+)+~-       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+DotCoverIntegration}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.DotCoverIntegration))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.DotCoverIntegration.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.DotCoverIntegration&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration.Load_Color">
            <summary>Loads the image for Themed Icon DotCoverIntegration theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration.Load_Gray">
            <summary>Loads the image for Themed Icon DotCoverIntegration theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration.Load_GrayDark">
            <summary>Loads the image for Themed Icon DotCoverIntegration theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.DotCoverIntegration.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon DotCoverIntegration.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer">
             <summary>
            	<para>
            		<para>EditLayer Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                     ~/LJIIl)+~`             
                     k{,-``'_^|VJ~           
                     ;5F,      `~al`         
               `aooI~ `;oF"      .[o'        
               LV"`=o3~ .3V)`     ,Vi        
               1S.  `=uI5{"`      `SS        
               )a~`````="`````````'aT        
               'o{-```````````````~o}_       
                `iu~```````````````./oi_     
                  =l3r"_'``'-_.``````'+o7_   
                    .=?T}ooIt11!.``````-ru7_ 
                              ^}x!'``````-cor
                                ^}]!-....._u1
                                  ^tF!_._*1t-
                                    ^TII7+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+EditLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.EditLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.EditLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.EditLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer.Id">
             <summary>
            	<para>
            		<para>EditLayer Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                     ~/LJIIl)+~`             
                     k{,-``'_^|VJ~           
                     ;5F,      `~al`         
               `aooI~ `;oF"      .[o'        
               LV"`=o3~ .3V)`     ,Vi        
               1S.  `=uI5{"`      `SS        
               )a~`````="`````````'aT        
               'o{-```````````````~o}_       
                `iu~```````````````./oi_     
                  =l3r"_'``'-_.``````'+o7_   
                    .=?T}ooIt11!.``````-ru7_ 
                              ^}x!'``````-cor
                                ^}]!-....._u1
                                  ^tF!_._*1t-
                                    ^TII7+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+EditLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.EditLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.EditLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.EditLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer.Load_Color">
            <summary>Loads the image for Themed Icon EditLayer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer.Load_Gray">
            <summary>Loads the image for Themed Icon EditLayer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer.Load_GrayDark">
            <summary>Loads the image for Themed Icon EditLayer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon EditLayer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1">
             <summary>
            	<para>
            		<para>EditLayer1 Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                     ~/LJIIl)+~`             
                     k{,-``'_^|VJ~           
                     ;5F,      `~al`         
               `aooI~ `;oF"      .[o'        
               LV"`=o3~ .3V)`     ,Vi        
               1S.  `=uI5{"`      `SS        
               )a~`````="`````````'aT        
               'o{-```````````````~o}_       
                `iu~```````````````./oi_     
                  =l3r"_'``'_".``````'+o7_   
                    .=?T}ooIt11!.``````-ru7_ 
                              ^}x!'``````-cor
                                ^}]!-....._u1
                                  ^tF!_._*1t-
                                    ^TII7+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+EditLayer1}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.EditLayer1))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.EditLayer1.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.EditLayer1&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1.Id">
             <summary>
            	<para>
            		<para>EditLayer1 Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                     ~/LJIIl)+~`             
                     k{,-``'_^|VJ~           
                     ;5F,      `~al`         
               `aooI~ `;oF"      .[o'        
               LV"`=o3~ .3V)`     ,Vi        
               1S.  `=uI5{"`      `SS        
               )a~`````="`````````'aT        
               'o{-```````````````~o}_       
                `iu~```````````````./oi_     
                  =l3r"_'``'_".``````'+o7_   
                    .=?T}ooIt11!.``````-ru7_ 
                              ^}x!'``````-cor
                                ^}]!-....._u1
                                  ^tF!_._*1t-
                                    ^TII7+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+EditLayer1}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.EditLayer1))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.EditLayer1.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.EditLayer1&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1.Load_Color">
            <summary>Loads the image for Themed Icon EditLayer1 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1.Load_Gray">
            <summary>Loads the image for Themed Icon EditLayer1 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1.Load_GrayDark">
            <summary>Loads the image for Themed Icon EditLayer1 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EditLayer1.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon EditLayer1.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral">
             <summary>
            	<para>
            		<para>EnvironmentGeneral Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+EnvironmentGeneral}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.EnvironmentGeneral))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.EnvironmentGeneral.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.EnvironmentGeneral&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral.Id">
             <summary>
            	<para>
            		<para>EnvironmentGeneral Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral"></see> identifier class.</para>
            		<para>
            			<code>
                  tEEEEEEEEEEEEEEEE{         
                 _kkkEEEEEEEEEEEEEkk         
                 $$$$$$$$$$$$$$$$$$$$$$$$    
                _$$     `-LN$$G _$w _$$$$    
                7$$  S$8P` c$`       =$$$``  
               _u$$  =rr^ 'R$$. %$` %$$$$~^"-
               |I$$  =r_ -%$r   ``   $$$$=~~'
              -C]$$  S$$+ .6$; I$= I$$$$$==~ 
              L}{$$$$$$$$$$$$$$$$$$$$$$$$!;- 
             -llt$$$$$$$$$$$$$$$$$$$$$$$$/!  
             ~\*+$$$$$$$$$$$$$$$$$$$$$$$$+_  
                 $$          $$$$$$$$$$$$c   
                 $$$$$$$$$$$$$$$$$$$$$$$$~   
                 $$$$$$$$$$$$$$$$$$$$$$$$`   
                       /Cx1Iuoj5aSVkkEEk;    
                      `lt}F]1Iuoj5ayVkko`    
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+EnvironmentGeneral}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.EnvironmentGeneral))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.EnvironmentGeneral.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.EnvironmentGeneral&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral.Load_Color">
            <summary>Loads the image for Themed Icon EnvironmentGeneral theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral.Load_Gray">
            <summary>Loads the image for Themed Icon EnvironmentGeneral theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral.Load_GrayDark">
            <summary>Loads the image for Themed Icon EnvironmentGeneral theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.EnvironmentGeneral.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon EnvironmentGeneral.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2">
             <summary>
            	<para>
            		<para>ExportLayer2 Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                `/aVVVVVVVVVV
                 nnnnnnnnnnnnnuyEx=--------EE
                 oo----------cPu=----------XX
                 22----------wwwwwwo;------ww
                 55----```````.|wa!__~C____HH
                 yy----     .?HV/__~1##__~1#I
                 VV----   `L#P*::=uD5DD=uDo_ 
                 kk----   -{De;;eDo=-DDDR_   
                 EE----     -[%%5_ ----EE    
                 ZZ----       -_   ----ZZ    
                 XX----            ----XX    
                 66----            ----66    
                 99____________________99    
                 bb____________________bb    
                 dddddddddddddddddddddddd    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ExportLayer2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ExportLayer2))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ExportLayer2.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ExportLayer2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2.Id">
             <summary>
            	<para>
            		<para>ExportLayer2 Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2"></see> identifier class.</para>
            		<para>
            			<code>
                                `/aVVVVVVVVVV
                 nnnnnnnnnnnnnuyEx=--------EE
                 oo----------cPu=----------XX
                 22----------wwwwwwo;------ww
                 55----```````.|wa!__~C____HH
                 yy----     .?HV/__~1##__~1#I
                 VV----   `L#P*::=uD5DD=uDo_ 
                 kk----   -{De;;eDo=-DDDR_   
                 EE----     -[%%5_ ----EE    
                 ZZ----       -_   ----ZZ    
                 XX----            ----XX    
                 66----            ----66    
                 99____________________99    
                 bb____________________bb    
                 dddddddddddddddddddddddd    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ExportLayer2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ExportLayer2))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ExportLayer2.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ExportLayer2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2.Load_Color">
            <summary>Loads the image for Themed Icon ExportLayer2 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2.Load_Gray">
            <summary>Loads the image for Themed Icon ExportLayer2 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExportLayer2 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer2.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExportLayer2.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge">
             <summary>
            	<para>
            		<para>ExportLayerLarge Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                `----------------`/xiiiiiii}S
                /J=============!lu;--------^E
                \T------------=tFC26kr_----~6
                +T---'``````````-+yL_--_/--=b
                +7---.        `!k),___+EG__!G
                +i---'      `!ET"___rUt+R~{a"
                rJ-_=rlt+"` `cXr,,r6t"-=DA^  
                T3ll?=^^=rJJ!_.cwbv'.--"17   
             =|t?=,:::::::::=rtT!.  .---|7   
             +{7!:----------_;T}+   .---Ti   
             =JuT|iL~'...^rsT|1J;   .---Tl   
             r3t\"-_=)TT|!_-:!iIr   .---Tl   
             !FasT}|=-..'~LtsToC/```.---7t   
             coC+"-_;TJs7!_-,/tal-------7}   
               `oGkz=-..'=|VSs/=========[F   
                _~~+}hSaU[r~~~~~~~~~~~~~~:   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ExportLayerLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ExportLayerLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ExportLayerLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ExportLayerLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge.Id">
             <summary>
            	<para>
            		<para>ExportLayerLarge Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge"></see> identifier class.</para>
            		<para>
            			<code>
                `----------------`/xiiiiiii}S
                /J=============!lu;--------^E
                \T------------=tFC26kr_----~6
                +T---'``````````-+yL_--_/--=b
                +7---.        `!k),___+EG__!G
                +i---'      `!ET"___rUt+R~{a"
                rJ-_=rlt+"` `cXr,,r6t"-=DA^  
                T3ll?=^^=rJJ!_.cwbv'.--"17   
             =|t?=,:::::::::=rtT!.  .---|7   
             +{7!:----------_;T}+   .---Ti   
             =JuT|iL~'...^rsT|1J;   .---Tl   
             r3t\"-_=)TT|!_-:!iIr   .---Tl   
             !FasT}|=-..'~LtsToC/```.---7t   
             coC+"-_;TJs7!_-,/tal-------7}   
               `oGkz=-..'=|VSs/=========[F   
                _~~+}hSaU[r~~~~~~~~~~~~~~:   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ExportLayerLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ExportLayerLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ExportLayerLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ExportLayerLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge.Load_Color">
            <summary>Loads the image for Themed Icon ExportLayerLarge theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge.Load_Gray">
            <summary>Loads the image for Themed Icon ExportLayerLarge theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExportLayerLarge theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayerLarge.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExportLayerLarge.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager">
             <summary>
            	<para>
            		<para>ExtensionManager Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
               `=7kXXXXKl!`                  
              ~Ve!_UUUU-;eE!                 
             ^Zl```ZZZZ```)Z!                
             xE_```EEEE```.EV                
             7E"``````````-E1                
             'ao_........_[kUZZ              
             ~XkV7!....!TVI+=66????????????  
             kw/\SS''''SS+!!!ww          ||  
             pp//aa----aa////pp    $$$$  77  
             OO++55----55++++OO          }}  
             RRrro5\__;52rrrrRR          II  
             DD??)3oooou|????DD````$$$$``55  
             R8|ccccccccccccc88``````````kk  
             ?%b]7|||||||||||%%666666666666  
              "CRNNNNNNNNNNNNNN              
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ExtensionManager}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ExtensionManager))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ExtensionManager.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ExtensionManager&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager.Id">
             <summary>
            	<para>
            		<para>ExtensionManager Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager"></see> identifier class.</para>
            		<para>
            			<code>
               `=7kXXXXKl!`                  
              ~Ve!_UUUU-;eE!                 
             ^Zl```ZZZZ```)Z!                
             xE_```EEEE```.EV                
             7E"``````````-E1                
             'ao_........_[kUZZ              
             ~XkV7!....!TVI+=66????????????  
             kw/\SS''''SS+!!!ww          ||  
             pp//aa----aa////pp    $$$$  77  
             OO++55----55++++OO          }}  
             RRrro5\__;52rrrrRR          II  
             DD??)3oooou|????DD````$$$$``55  
             R8|ccccccccccccc88``````````kk  
             ?%b]7|||||||||||%%666666666666  
              "CRNNNNNNNNNNNNNN              
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ExtensionManager}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ExtensionManager))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ExtensionManager.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ExtensionManager&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager.Load_Color">
            <summary>Loads the image for Themed Icon ExtensionManager theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager.Load_Gray">
            <summary>Loads the image for Themed Icon ExtensionManager theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExtensionManager theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExtensionManager.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExtensionManager.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer">
             <summary>
            	<para>
            		<para>ImportExportLayer Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                    `;C1111111111            
                  `!IT_        oo            
                 !2J_          aa            
                 kkkkkkt,      kk            
                  `+P["``-T````XX            
                `r6n^``_7ww``_7w}            
               rbo~``_lGxGG_lGx_             
               tR{::{Rn_ RRRn_      `={[!`   
                -xDD2:      `;1uu `;1(--(I/  
                          `!o7_55!o7_  .r5|  
                         /al_  VVl_  -cVT-   
                         ZZ````F"``-|ZJ-     
                         44``````_7444444    
                         bb..........,lbF    
                         ##--------^]#I_     
                         DDDDDDDDDDDo_       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportExportLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportExportLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportExportLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportExportLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer.Id">
             <summary>
            	<para>
            		<para>ImportExportLayer Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer"></see> identifier class.</para>
            		<para>
            			<code>
                    `;C1111111111            
                  `!IT_        oo            
                 !2J_          aa            
                 kkkkkkt,      kk            
                  `+P["``-T````XX            
                `r6n^``_7ww``_7w}            
               rbo~``_lGxGG_lGx_             
               tR{::{Rn_ RRRn_      `={[!`   
                -xDD2:      `;1uu `;1(--(I/  
                          `!o7_55!o7_  .r5|  
                         /al_  VVl_  -cVT-   
                         ZZ````F"``-|ZJ-     
                         44``````_7444444    
                         bb..........,lbF    
                         ##--------^]#I_     
                         DDDDDDDDDDDo_       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportExportLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportExportLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportExportLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportExportLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer.Load_Color">
            <summary>Loads the image for Themed Icon ImportExportLayer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer.Load_Gray">
            <summary>Loads the image for Themed Icon ImportExportLayer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer.Load_GrayDark">
            <summary>Loads the image for Themed Icon ImportExportLayer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ImportExportLayer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3">
             <summary>
            	<para>
            		<para>ImportExportLayer3 Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                    `;C1111111111            
                  `!IT_        oo            
                 !2J_          aa            
                 kkkkkkt,      kk            
                  `+P["``-T````XX            
                `r6n^``_7ww``_7w}            
               rbo~``_lGxGG_lGx_             
               tR{::{Rn_ RRRn_      `={[!`   
                -xDD2:      `;1uu `;1(--(I/  
                          `!o7_55!o7_  .r5|  
                         /al_  VVl_  -cVT-   
                         ZZ````F"``-|ZJ-     
                         44``````_7444444    
                         bb..........,lbF    
                         ##--------^]#I_     
                         DDDDDDDDDDDo_       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportExportLayer3}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportExportLayer3))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportExportLayer3.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportExportLayer3&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3.Id">
             <summary>
            	<para>
            		<para>ImportExportLayer3 Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3"></see> identifier class.</para>
            		<para>
            			<code>
                    `;C1111111111            
                  `!IT_        oo            
                 !2J_          aa            
                 kkkkkkt,      kk            
                  `+P["``-T````XX            
                `r6n^``_7ww``_7w}            
               rbo~``_lGxGG_lGx_             
               tR{::{Rn_ RRRn_      `={[!`   
                -xDD2:      `;1uu `;1(--(I/  
                          `!o7_55!o7_  .r5|  
                         /al_  VVl_  -cVT-   
                         ZZ````F"``-|ZJ-     
                         44``````_7444444    
                         bb..........,lbF    
                         ##--------^]#I_     
                         DDDDDDDDDDDo_       
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportExportLayer3}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportExportLayer3))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportExportLayer3.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportExportLayer3&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3.Load_Color">
            <summary>Loads the image for Themed Icon ImportExportLayer3 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3.Load_Gray">
            <summary>Loads the image for Themed Icon ImportExportLayer3 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3.Load_GrayDark">
            <summary>Loads the image for Themed Icon ImportExportLayer3 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportExportLayer3.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ImportExportLayer3.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4">
             <summary>
            	<para>
            		<para>ImportLayer4 Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                              `/5SS `/5SSSSSS
                 nnnnnnnnnnnuykF~kk\VF~..:Tk7
                 oo--------LPI=--XXI=--"JXl_ 
                 22--------ww____j!__~}w}_   
                 55----````GG::::::=1GGGGGG  
                 yy----    RR""""""""""!uR3  
                 VV----    DD~~~~~~~~/aD#_   
                 kk----    88888888888V6k    
                 EE----            ----EE    
                 ZZ----            ----ZZ    
                 XX----            ----XX    
                 66----            ----66    
                 99____________________99    
                 bb____________________bb    
                 dddddddddddddddddddddddd    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportLayer4}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportLayer4))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportLayer4.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportLayer4&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4.Id">
             <summary>
            	<para>
            		<para>ImportLayer4 Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4"></see> identifier class.</para>
            		<para>
            			<code>
                              `/5SS `/5SSSSSS
                 nnnnnnnnnnnuykF~kk\VF~..:Tk7
                 oo--------LPI=--XXI=--"JXl_ 
                 22--------ww____j!__~}w}_   
                 55----````GG::::::=1GGGGGG  
                 yy----    RR""""""""""!uR3  
                 VV----    DD~~~~~~~~/aD#_   
                 kk----    88888888888V6k    
                 EE----            ----EE    
                 ZZ----            ----ZZ    
                 XX----            ----XX    
                 66----            ----66    
                 99____________________99    
                 bb____________________bb    
                 dddddddddddddddddddddddd    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportLayer4}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportLayer4))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportLayer4.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportLayer4&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4.Load_Color">
            <summary>Loads the image for Themed Icon ImportLayer4 theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4.Load_Gray">
            <summary>Loads the image for Themed Icon ImportLayer4 theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4.Load_GrayDark">
            <summary>Loads the image for Themed Icon ImportLayer4 theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer4.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ImportLayer4.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge">
             <summary>
            	<para>
            		<para>ImportLayerLarge Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                `----------------`     ~T_   
                /J=============!la=  ~x\,ct_ 
                \T-----------,|]1{!oe+----rZ=
                +T---'``````!k/-7k5?_--_/5c. 
                +7---.      )u__T),___+k3-   
                +i---'      |5,,,,,"rUP+x}_` 
                rJ-_=rlt+"` TV"""""/ccc}RH"  
                T3ll?=^^=rJJa9rrrrrrrroS{7   
             =|t?=,:::::::::r1Vo7===/+=-|7   
             +{7!:----------_;T}+   .---Ti   
             =JuT|iL~'...^rsT|1J;   .---Tl   
             r3t\"-_=)TT|!_-:!iIr   .---Tl   
             !FasT}|=-..'~LtsToC/```.---7t   
             coC+"-_;TJs7!_-,/tal-------7}   
               `oGkz=-..'=|VSs/=========[F   
                _~~+}hSaU[r~~~~~~~~~~~~~~:   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportLayerLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportLayerLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportLayerLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportLayerLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge.Id">
             <summary>
            	<para>
            		<para>ImportLayerLarge Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge"></see> identifier class.</para>
            		<para>
            			<code>
                `----------------`     ~T_   
                /J=============!la=  ~x\,ct_ 
                \T-----------,|]1{!oe+----rZ=
                +T---'``````!k/-7k5?_--_/5c. 
                +7---.      )u__T),___+k3-   
                +i---'      |5,,,,,"rUP+x}_` 
                rJ-_=rlt+"` TV"""""/ccc}RH"  
                T3ll?=^^=rJJa9rrrrrrrroS{7   
             =|t?=,:::::::::r1Vo7===/+=-|7   
             +{7!:----------_;T}+   .---Ti   
             =JuT|iL~'...^rsT|1J;   .---Tl   
             r3t\"-_=)TT|!_-:!iIr   .---Tl   
             !FasT}|=-..'~LtsToC/```.---7t   
             coC+"-_;TJs7!_-,/tal-------7}   
               `oGkz=-..'=|VSs/=========[F   
                _~~+}hSaU[r~~~~~~~~~~~~~~:   
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ImportLayerLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ImportLayerLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ImportLayerLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ImportLayerLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge.Load_Color">
            <summary>Loads the image for Themed Icon ImportLayerLarge theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge.Load_Gray">
            <summary>Loads the image for Themed Icon ImportLayerLarge theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge.Load_GrayDark">
            <summary>Loads the image for Themed Icon ImportLayerLarge theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayerLarge.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ImportLayerLarge.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer">
             <summary>
            	<para>
            		<para>LayerThisComputer Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
             "7ooooooooooooooooooooooooooooi=
             aa-                          -aa
             kk  gggggggggggggggggggggggg  kk
             UU  $$$$$$$$$$$$$$$$$$$$$$$$  UU
             44``888888888888888888888888``44
             dd``RRRRRRRRRRRRRRRRRRRRRRRR``dd
             ##``wwwwwwwwwwwwwwwwwwwwwwww``##
             DD``kkkkkkkkkkkkkkkkkkkkkkkk``DD
             88..jjjjjjjjjjjjjjjjjjjjjjjj..88
             %%''@@@@@@@@@@@@@@@@@@@@@@@@''%%
             BB----------------------------BB
             QQ,--------------------------_QQ
             7Bgggggggggggggggggggggggggggg$u
                   -5$$^^^^^^^^^^^^$$5-      
                   88                88      
                   GGGGGGGGGGGGGGGGGGGG      
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+LayerThisComputer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.LayerThisComputer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.LayerThisComputer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.LayerThisComputer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer.Id">
             <summary>
            	<para>
            		<para>LayerThisComputer Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer"></see> identifier class.</para>
            		<para>
            			<code>
             "7ooooooooooooooooooooooooooooi=
             aa-                          -aa
             kk  gggggggggggggggggggggggg  kk
             UU  $$$$$$$$$$$$$$$$$$$$$$$$  UU
             44``888888888888888888888888``44
             dd``RRRRRRRRRRRRRRRRRRRRRRRR``dd
             ##``wwwwwwwwwwwwwwwwwwwwwwww``##
             DD``kkkkkkkkkkkkkkkkkkkkkkkk``DD
             88..jjjjjjjjjjjjjjjjjjjjjjjj..88
             %%''@@@@@@@@@@@@@@@@@@@@@@@@''%%
             BB----------------------------BB
             QQ,--------------------------_QQ
             7Bgggggggggggggggggggggggggggg$u
                   -5$$^^^^^^^^^^^^$$5-      
                   88                88      
                   GGGGGGGGGGGGGGGGGGGG      
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+LayerThisComputer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.LayerThisComputer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.LayerThisComputer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.LayerThisComputer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer.Load_Color">
            <summary>Loads the image for Themed Icon LayerThisComputer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer.Load_Gray">
            <summary>Loads the image for Themed Icon LayerThisComputer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer.Load_GrayDark">
            <summary>Loads the image for Themed Icon LayerThisComputer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.LayerThisComputer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon LayerThisComputer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library">
             <summary>
            	<para>
            		<para>Library Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                       SVVVkkkkVV            
               uoj25aaySV`'-_"~VVSyaa5e2oou  
               uo ``-_,SV`'$$"~VV`'_,~!+Lou  
               uo `uu_,SV`'-_"~VV`'6666+Lou  
               uo `uu_,SV`'-_"~VV`'6666+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo `uu_,SV`'$$"~VV`'6666+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo `uu_,SV`'$$"~VV`'6666+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uoj25aaySVVVkkkkVVSyaa5e2oou  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Library}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Library))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Library.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Library&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library.Id">
             <summary>
            	<para>
            		<para>Library Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                       SVVVkkkkVV            
               uoj25aaySV`'-_"~VVSyaa5e2oou  
               uo ``-_,SV`'$$"~VV`'_,~!+Lou  
               uo `uu_,SV`'-_"~VV`'6666+Lou  
               uo `uu_,SV`'-_"~VV`'6666+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo `uu_,SV`'$$"~VV`'6666+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uo `uu_,SV`'$$"~VV`'6666+Lou  
               uo ``-_,SV`'-_"~VV`'_,~!+Lou  
               uoj25aaySVVVkkkkVVSyaa5e2oou  
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Library}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Library))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Library.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Library&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library.Load_Color">
            <summary>Loads the image for Themed Icon Library theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library.Load_Gray">
            <summary>Loads the image for Themed Icon Library theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library.Load_GrayDark">
            <summary>Loads the image for Themed Icon Library theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Library.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Library.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer">
             <summary>
            	<para>
            		<para>MountLayer Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                         tttttttttt          
                         {{      {{          
                         CC      CC          
                         II``````II          
                 uuuuuuuuuu``````uuuuuuuuuu  
                 oo``````````````````````oo  
                 55......................55  
                 yy----------------------yy  
                 VVVVVVVVVV------VVVVVVVVVV  
                         EE------EE          
                         hh______hh          
                         66______66          
                         9999999999          
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+MountLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.MountLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.MountLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.MountLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer.Id">
             <summary>
            	<para>
            		<para>MountLayer Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                         tttttttttt          
                         {{      {{          
                         CC      CC          
                         II``````II          
                 uuuuuuuuuu``````uuuuuuuuuu  
                 oo``````````````````````oo  
                 55......................55  
                 yy----------------------yy  
                 VVVVVVVVVV------VVVVVVVVVV  
                         EE------EE          
                         hh______hh          
                         66______66          
                         9999999999          
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+MountLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.MountLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.MountLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.MountLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer.Load_Color">
            <summary>Loads the image for Themed Icon MountLayer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer.Load_Gray">
            <summary>Loads the image for Themed Icon MountLayer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer.Load_GrayDark">
            <summary>Loads the image for Themed Icon MountLayer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.MountLayer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon MountLayer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options">
             <summary>
            	<para>
            		<para>Options Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                     ~/LJIIl)+~`             
                     k{,-``'_^|VJ~           
                     ;5F,      `~al`         
               `aooI~ `;oF"      .[o'        
               LV"`=o3~ .3V)`     ,Vi        
               1S.  `=uI5{"`      `SS        
               )a~`````="`````````'aT        
               'o{-```````````````~o}_       
                `iu~```````````````./oi_     
                  =l3r"_'``'-_.``````'+o7_   
                    .=?T}ooIt11!.``````-ru7_ 
                              ^}x!'``````-cor
                                ^}]!-....._u1
                                  ^tF!_._*1t-
                                    ^TII7+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Options}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Options))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Options.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Options&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options.Id">
             <summary>
            	<para>
            		<para>Options Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                     ~/LJIIl)+~`             
                     k{,-``'_^|VJ~           
                     ;5F,      `~al`         
               `aooI~ `;oF"      .[o'        
               LV"`=o3~ .3V)`     ,Vi        
               1S.  `=uI5{"`      `SS        
               )a~`````="`````````'aT        
               'o{-```````````````~o}_       
                `iu~```````````````./oi_     
                  =l3r"_'``'-_.``````'+o7_   
                    .=?T}ooIt11!.``````-ru7_ 
                              ^}x!'``````-cor
                                ^}]!-....._u1
                                  ^tF!_._*1t-
                                    ^TII7+"  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Options}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Options))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Options.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Options&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options.Load_Color">
            <summary>Loads the image for Themed Icon Options theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options.Load_Gray">
            <summary>Loads the image for Themed Icon Options theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options.Load_GrayDark">
            <summary>Loads the image for Themed Icon Options theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Options.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Options.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins">
             <summary>
            	<para>
            		<para>Plugins Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
              .!tuZZZZZZZZZZZZZ              
             ~X5c\===========66????????????  
             kw/!!!!!!!!!!!!!ww          ||  
             pp//////////////pp    $$$$  77  
             OO++++++++++++++OO          }}  
             RRrrrrrrrrrrrrrrRR          II  
             DD??????????????DD````$$$$``55  
             R8|ccccccccccccc88``````````kk  
             ?%b]7|||||||||||%%666666666666  
              "CRNNNNNNNNNNNNNN              
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Plugins}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Plugins))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Plugins.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Plugins&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins.Id">
             <summary>
            	<para>
            		<para>Plugins Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                                             
              .!tuZZZZZZZZZZZZZ              
             ~X5c\===========66????????????  
             kw/!!!!!!!!!!!!!ww          ||  
             pp//////////////pp    $$$$  77  
             OO++++++++++++++OO          }}  
             RRrrrrrrrrrrrrrrRR          II  
             DD??????????????DD````$$$$``55  
             R8|ccccccccccccc88``````````kk  
             ?%b]7|||||||||||%%666666666666  
              "CRNNNNNNNNNNNNNN              
                                             
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Plugins}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Plugins))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Plugins.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Plugins&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins.Load_Color">
            <summary>Loads the image for Themed Icon Plugins theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins.Load_Gray">
            <summary>Loads the image for Themed Icon Plugins theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins.Load_GrayDark">
            <summary>Loads the image for Themed Icon Plugins theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Plugins.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Plugins.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer">
             <summary>
            	<para>
            		<para>ResetLayer Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                         `~+cluo{Tr!-        
                      `=lo?^,-''_"=T4V+-     
                     "xl,`  ````````.=aRT    
                    ?u*   `_+Juo{|~...-|Ro   
                   ~u/   `JVkEPX69wa,..'cDT  
               uu[?{u`   ?yVkEPX69wb5..'-DA  
               uu."+F    I?~-EPX69wbp..'-DD  
               cu+.        -cEPX69wbp..'-DD  
                -cu+.    .?VkEPX69wbpGORRDD  
               DDD#ku+..r5XRDDDDDDDDDDDDDDDDD
               MM---^Tuo7~-----------------MM
               QQQQQQQ%WQQQQQQQQQQQQQQQQQQQQQ
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ResetLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ResetLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ResetLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ResetLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer.Id">
             <summary>
            	<para>
            		<para>ResetLayer Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                                             
                         `~+cluo{Tr!-        
                      `=lo?^,-''_"=T4V+-     
                     "xl,`  ````````.=aRT    
                    ?u*   `_+Juo{|~...-|Ro   
                   ~u/   `JVkEPX69wa,..'cDT  
               uu[?{u`   ?yVkEPX69wb5..'-DA  
               uu."+F    I?~-EPX69wbp..'-DD  
               cu+.        -cEPX69wbp..'-DD  
                -cu+.    .?VkEPX69wbpGORRDD  
               DDD#ku+..r5XRDDDDDDDDDDDDDDDDD
               MM---^Tuo7~-----------------MM
               QQQQQQQ%WQQQQQQQQQQQQQQQQQQQQQ
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ResetLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ResetLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ResetLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ResetLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer.Load_Color">
            <summary>Loads the image for Themed Icon ResetLayer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer.Load_Gray">
            <summary>Loads the image for Themed Icon ResetLayer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer.Load_GrayDark">
            <summary>Loads the image for Themed Icon ResetLayer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ResetLayer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge">
             <summary>
            	<para>
            		<para>ResetLayerLarge Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                                             
                          .-"=*+!^_'         
                       -!7/^,-''_^=ruc_      
                     "l/-   `````````"cE/    
                    cr`   `^?TTT7T!-`..-lS`  
                   cr    /l^`     ^xi-...zE  
              ~_  _3`   L? `r       ca...-b! 
              /[T_!|   `5_+uk       `H^..'1F 
              /L`/IL   -5t"_k        H!..'lo 
              /)  `"   .,  :k        HL^~~uo 
             _"?7:       `+C!________rr??LL+_
             8Fr?l7:   `\37rrrrrrrrrrrrrrrri8
             0T^^^=)7,/}+^^^^^^^^^^^^^^^^^^r0
             QRhhhhhZkPhhhhhhhhhhhhhhhhhhhhHQ
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ResetLayerLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ResetLayerLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ResetLayerLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ResetLayerLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge.Id">
             <summary>
            	<para>
            		<para>ResetLayerLarge Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge"></see> identifier class.</para>
            		<para>
            			<code>
                                             
                          .-"=*+!^_'         
                       -!7/^,-''_^=ruc_      
                     "l/-   `````````"cE/    
                    cr`   `^?TTT7T!-`..-lS`  
                   cr    /l^`     ^xi-...zE  
              ~_  _3`   L? `r       ca...-b! 
              /[T_!|   `5_+uk       `H^..'1F 
              /L`/IL   -5t"_k        H!..'lo 
              /)  `"   .,  :k        HL^~~uo 
             _"?7:       `+C!________rr??LL+_
             8Fr?l7:   `\37rrrrrrrrrrrrrrrri8
             0T^^^=)7,/}+^^^^^^^^^^^^^^^^^^r0
             QRhhhhhZkPhhhhhhhhhhhhhhhhhhhhHQ
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+ResetLayerLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.ResetLayerLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.ResetLayerLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.ResetLayerLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge.Load_Color">
            <summary>Loads the image for Themed Icon ResetLayerLarge theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge.Load_Gray">
            <summary>Loads the image for Themed Icon ResetLayerLarge theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge.Load_GrayDark">
            <summary>Loads the image for Themed Icon ResetLayerLarge theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ResetLayerLarge.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ResetLayerLarge.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge">
             <summary>
            	<para>
            		<para>SettingsLayersLarge Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                         ,+)(rLT7+:          
                       . `rl_    .=F/        
                      !5c' `rl_    `+t`      
                     `S--Tc. ,S/     t!      
                     .y'``_TlT_``````+7      
                      7/````.````````u!      
                   `_!lo+.```````````-LL-    
                -=T7+~,,?CL~_---__`````_L)_  
             ~cJ+~--------,;ri1{(r|:`````_L7-
             \l)=-..........-~Ll+ .r|,.....;l
             =7xc?T+"````,\|c?fJ!   .r|"'',T;
             rx7;_.-~rcLL=-.-=Tx?     .~*r!- 
             ;to|ci?^````"+s|c3F!            
             Lnl!_'-~cT|)=-'-;su)            
               `=l5|~````"Le{;.              
                   -*u2uor_                  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+SettingsLayersLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.SettingsLayersLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.SettingsLayersLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.SettingsLayersLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge.Id">
             <summary>
            	<para>
            		<para>SettingsLayersLarge Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge"></see> identifier class.</para>
            		<para>
            			<code>
                         ,+)(rLT7+:          
                       . `rl_    .=F/        
                      !5c' `rl_    `+t`      
                     `S--Tc. ,S/     t!      
                     .y'``_TlT_``````+7      
                      7/````.````````u!      
                   `_!lo+.```````````-LL-    
                -=T7+~,,?CL~_---__`````_L)_  
             ~cJ+~--------,;ri1{(r|:`````_L7-
             \l)=-..........-~Ll+ .r|,.....;l
             =7xc?T+"````,\|c?fJ!   .r|"'',T;
             rx7;_.-~rcLL=-.-=Tx?     .~*r!- 
             ;to|ci?^````"+s|c3F!            
             Lnl!_'-~cT|)=-'-;su)            
               `=l5|~````"Le{;.              
                   -*u2uor_                  
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+SettingsLayersLarge}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.SettingsLayersLarge))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.SettingsLayersLarge.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.SettingsLayersLarge&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge.Load_Color">
            <summary>Loads the image for Themed Icon SettingsLayersLarge theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge.Load_Gray">
            <summary>Loads the image for Themed Icon SettingsLayersLarge theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge.Load_GrayDark">
            <summary>Loads the image for Themed Icon SettingsLayersLarge theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.SettingsLayersLarge.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon SettingsLayersLarge.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates">
             <summary>
            	<para>
            		<para>Updates Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
                      ',~!+ciic+!~,-         
                   _+C1+~,-.```-,~*]xr,      
                 ~Cu+_ `^;+cll(+;^` -\I1;    
               -lo= `~7555555555555t=` "IF_  
              -o1` ;ayyyyyy....yyyyyyy* `ta: 
             `25. Lkkkkkkkk....kkkkkkkk7``IV.
             +E= =EEEEEEEEE....EEEEEEEEE+ "ET
             xU-`FUUUUU_!TV````VT!_UUUUUS``UV
             o6-`u66666````````````66666k``6Z
             c9;`+99999s_````````_s99999T`"9}
             .4E'.CbbbbbbJ_````_Jbbbbbb2-.2b-
              ^ba-.iHHHHHHHl__lHHHHHHHF-.IH; 
               "6X!.^T6OOOOOOOOOOOObi~.~kb=  
                `)GX|^'~TFeXRR6axT=-"LPOi`   
                  `/eR47*=^_--_"=/|URk+`     
                     `~rT1SwDDbkIzr=`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Updates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Updates))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Updates.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Updates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates.Id">
             <summary>
            	<para>
            		<para>Updates Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates"></see> identifier class.</para>
            		<para>
            			<code>
                      ',~!+ciic+!~,-         
                   _+C1+~,-.```-,~*]xr,      
                 ~Cu+_ `^;+cll(+;^` -\I1;    
               -lo= `~7555555555555t=` "IF_  
              -o1` ;ayyyyyy....yyyyyyy* `ta: 
             `25. Lkkkkkkkk....kkkkkkkk7``IV.
             +E= =EEEEEEEEE....EEEEEEEEE+ "ET
             xU-`FUUUUU_!TV````VT!_UUUUUS``UV
             o6-`u66666````````````66666k``6Z
             c9;`+99999s_````````_s99999T`"9}
             .4E'.CbbbbbbJ_````_Jbbbbbb2-.2b-
              ^ba-.iHHHHHHHl__lHHHHHHHF-.IH; 
               "6X!.^T6OOOOOOOOOOOObi~.~kb=  
                `)GX|^'~TFeXRR6axT=-"LPOi`   
                  `/eR47*=^_--_"=/|URk+`     
                     `~rT1SwDDbkIzr=`        
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:OptionsThemedIcons+Updates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(OptionsThemedIcons.Updates))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = OptionsThemedIcons.Updates.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;OptionsThemedIcons.Updates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates.Load_Color">
            <summary>Loads the image for Themed Icon Updates theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates.Load_Gray">
            <summary>Loads the image for Themed Icon Updates theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates.Load_GrayDark">
            <summary>Loads the image for Themed Icon Updates theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Updates.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Updates.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail">
             <summary>
            	<para>
            		<para>Snail Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                                             
                    `~*?iYYFT/^`             
                  "sPl;~_''_"=sPl^           
                `i9\'`-':_'-```'+VI`         
               -aV~."zPPPPPa?_...:aU'  'T5aY"
               iHL'*4Y_` `:V45'''';HZ _kj'`44
               6q"_4F .__"+ppY_____qq {w=``ww
               YD?_G"`___YHac'____+DP_pa---pw
               _DA=LY :::.``'::::^k8aVk^..=Ox
                .6#)LL:,""""""""rmR?^:''''Yq;
              !Z6R808az;=~^;*?E8DC:______=Rk 
             [#1^___=CVp#%%8XVI!________+qd' 
             j#s":::::::::::::::::::,^?P#Y.  
             `c488888888888888888888#GaL'    
                                             
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:KebequlThemedIconsThemedIcons+Snail}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(KebequlThemedIconsThemedIcons.Snail))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = KebequlThemedIconsThemedIcons.Snail.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;KebequlThemedIconsThemedIcons.Snail&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail.Load_Color">
            <summary>Loads the image for Themed Icon Snail theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail.Load_Gray">
            <summary>Loads the image for Themed Icon Snail theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail.Load_GrayDark">
            <summary>Loads the image for Themed Icon Snail theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.Snail.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon Snail.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer">
             <summary>
            	<para>
            		<para>ExportLayer Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                              `=jSSSSSSSSSSSS
                 222222222225VPx;----------ZZ
                 jj::::::::Thu;------------66
                 SS:::`````wwwwwww}~-------ww
                 kk:::       -7q]^::::_::::qq
                 KK:::     -JmI^::::"Jd::::mm
                 XX:::     mD7::::"s#DD::;2D2
                 66:::     `cD6*^}D6r88;585: 
                 ww:::       `T8Mb; :MMM8,   
                 bb:::              :::bb    
                 qq:::              :::qq    
                 OO:::              :::OO    
                 ##:::..............:::##    
                 DD::::::::::::::::::::DD    
                 DDDDDDDDDDDDDDDDDDDDDDDD    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CobuzevThemedIconsThemedIcons+ExportLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CobuzevThemedIconsThemedIcons.ExportLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CobuzevThemedIconsThemedIcons.ExportLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CobuzevThemedIconsThemedIcons.ExportLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.Load_Color">
            <summary>Loads the image for Themed Icon ExportLayer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.Load_Gray">
            <summary>Loads the image for Themed Icon ExportLayer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.Load_GrayDark">
            <summary>Loads the image for Themed Icon ExportLayer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.Load_RiderDark">
            <summary>Loads the image for Themed Icon ExportLayer theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.Load_RiderLight">
            <summary>Loads the image for Themed Icon ExportLayer theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ExportLayer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ExportLayer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer">
             <summary>
            	<para>
            		<para>ImportLayer Themed Icon generated identifiers:</para>
            		<para>— <see cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer"></see> identifier class, for use in attributes, XAML, and generic parameters;</para>
            		<para>— <see cref="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.Id"></see> identifier object, as a field in the identifier class, for use where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected.</para>
            		<para>
            			<code>
                              `=5SS  .cS2;`  
                 333333333333yE{^EE'TE|_!2j;`
                 22--------?Zf;--XXXv"----rXV
                 oo--------99----9z~----,TXo~
                 55----````bb::::^::::"|we^  
                 yy----    OO,,,,,,,~JpOOOOOO
                 VV----    DD""""""""""""!2D3
                 kk----    DD^^^^^^^^^^=eD2: 
                 ZZ----    8888888888888D:   
                 hh----            ----hh    
                 XX----            ----XX    
                 66::::            ::::66    
                 ww::::::::::::::::::::ww    
                 bb::::::::::::::::::::bb    
                 pppppppppppppppppppppppp    
                                             
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:CobuzevThemedIconsThemedIcons+ImportLayer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(CobuzevThemedIconsThemedIcons.ImportLayer))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = CobuzevThemedIconsThemedIcons.ImportLayer.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;CobuzevThemedIconsThemedIcons.ImportLayer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.Id">
            <inheritdoc cref="T:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer">identifier class</inheritdoc>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.Load_Color">
            <summary>Loads the image for Themed Icon ImportLayer theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.Load_Gray">
            <summary>Loads the image for Themed Icon ImportLayer theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.Load_GrayDark">
            <summary>Loads the image for Themed Icon ImportLayer theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.Load_RiderDark">
            <summary>Loads the image for Themed Icon ImportLayer theme aspect RiderDark.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.Load_RiderLight">
            <summary>Loads the image for Themed Icon ImportLayer theme aspect RiderLight.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.Options.ThemedIcons.OptionsThemedIcons.ImportLayer.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ImportLayer.</summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.AEmptyOptionsPage">
            <summary>
            Represents an empty options page that just holds a grouping node in the tree.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.AEmptyOptionsPage.JetBrains#Application#UI#Options#IOptionsPage#Id">
            <summary>
            Gets the ID of this option page.
            <see cref="N:JetBrains.Application.UI.Options.OptionsDialog" /> or <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor" /> could be used to retrieve the <see cref="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager" /> out of it.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.AEmptyOptionsPage.JetBrains#Application#UI#Options#IOptionsPage#OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.ChildrenOnlyOptionsAutomation">
            <summary>
            Options-wide automation object which exposes the total composite state.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.ChildrenOnlyOptionsAutomation.Children">
            <summary>
            Exposes the children collection which you can modify externally.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel">
            <summary>
            <para>When you create the model, it start reading the given source async.</para>
            <para>After this async operation is completed, either <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Error"/> or <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Tree"/> is assigned to the valid data on the UI thread.</para>
            <para>After that, you can call one of the <c>Write</c> methods.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel,System.Boolean,JetBrains.Application.Threading.IThreading,JetBrains.Application.Communication.WebProxySettingsReader,JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent)">
            <summary>
            Constructs &amp; starts reading.
            </summary>
            <param name="lifetime"></param>
            <param name="source">The source from which the settings to be copied will be read.</param>
            <param name="isAllSelectedInitially">The <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Tree"/> filled with data read from the <paramref name="source"/>; this defines whether initially all of the nodes will be checked (included for export/import/copy) or unchecked.</param>
            <param name="threading"></param>
            <param name="webProxySettingsReader"></param>
            <param name="interned"></param>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.myMountWithData">
            <summary>
            When we read data from the source, it's kept here before it's written (under <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.mySequenceMountWithData"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Error">
            <summary>
            <para>If async reading from the source fails, the error message is assigned here on the UI thread. This means that the model is async-ready, but won't be able to proceed.</para>
            <para>Either <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Error"/> or <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Tree"/> will be assigned on the UI thread when the async reading is completed.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Tree">
            <summary>
            <para>Whenif async reading from the source succeeds, the description on the read data is assigned here (to the root items list of the tree model) on the UI thread.</para>
            <para>Either <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Error"/> or <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.CopySettingsDialogModel.Tree"/> will be assigned on the UI thread when the async reading is completed.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.ICustomOptionsEditSemantic">
            <summary>
            Some settings layers (editorconfig) require special editing semantic, because not all settings could be saved here
            and saving requires some UI
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.ICustomOptionsEditSemantic.FilterTags">
            <summary>
            Tags used to filter options pages, so that only pages that could be changed in this layer are shown.
            Pages are shown only if their <see cref="P:JetBrains.Application.UI.Options.OptionsPageAttribute.FilterTags"/> contains at least one of filter tags specified here.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogParameters.FilterTags">
            <summary>
            Filter tags could be used to filter option pages, so only some subset would be shown.
            Pages are shown only if their <see cref="P:JetBrains.Application.UI.Options.OptionsPageAttribute.FilterTags"/> contains at least one of filter tags specified here.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogParameters.GetContext">
            <summary>
            Context is needed for viewing/editing settings that are more granular that the whole solution,
            such as .editorconfig or (in future) project settings
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.IOptionsDialogViewOwner.Show(JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogParameters)">
            <summary>
            Shows the Options dialog.
            We require that the guard is not held when this method is called.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogViewOwnerEx.Show(JetBrains.Application.UI.Options.OptionsDialog.IOptionsDialogViewOwner,JetBrains.Application.UI.Automation.WindowModality,System.String,JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.Identity,JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.UI.Options.OptionPagesDiagnostics,System.Func{JetBrains.Lifetimes.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext})">
            <summary>
            Shows the Options dialog.
            We require that the guard is not held when this method is called.
            </summary>
            <param name="dialogViewOwner"></param>
            <param name="modality">Modal or not.</param>
            <param name="page">Page to select. <c>NULL</c> for MRU.</param>
            <param name="layer">Settings layer to edit in the dialog. <c>NULL</c> for Smart context (default Options dialog mode).</param>
            <param name="lifetimeDefinition">Limits the window lifetime and reports when the window closes.</param>
            <param name="diagnostics"></param>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.EditSettingsLayerOptionsAction">
            <summary>
            Shows Options Dialog for the currently selected settings layer.
            Optionally overrides the MRU selected page.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.Layers.Actions.EditSettingsLayerOptionsAction.ShowOptionsPage">
            <summary>
            Context parameter for Show Options action: whether to preselect some page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomation.SettingsLayers">
            <summary>
            Gets or sets all settings layers which should be visible to user
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomation.SelectedSettingsLayer">
            <summary>
            Gets or sets current selected settings layers
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomation.CanBackToOptions">
            <summary>
            Can user initiate back to option command (must be hidden in that case)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.Layers.SettingsLayersDialogAutomation.Title">
            <summary>
            Gets title for the dialog window
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.Layers.UserFriendlySettingsLayerForLayersDialogAutomation">
            <summary>
            Improved version for the Settings Layers dialog, adds a few things not needed by Options Dialog.
            TODO: probably they should be separated because they have little in common.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.Layers.UserFriendlySettingsLayerForLayersDialogAutomation.IsPathAccessible">
            <summary>
            Gets whether the path is accessible
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.Layers.UserFriendlySettingsLayerForLayersDialogAutomation.IsActive">
            <summary>
            Gets whether the settings layer is active (used in 'settings stack')
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.Layers.UserFriendlySettingsLayerForLayersDialogAutomation.IsRenameModeActive">
            <summary>
            Gets whether the settings layer is locked (readonly)
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.TopLevelPagesInTree">
            <summary>
            Pages for binding to the first level of the tree.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SelectedPage_Model">
            <summary>
            Selected options page in terms of model, for binding to the model.
            Can be <c>Null</c> when no tree selection.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SelectedPageForTree">
            <summary>
            For binding selected page in the tree (two-way). Two-way binds to <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SelectedPage_Model"/>.
            Can be <c>Null</c> when no tree selection.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SelectedPageInContextForPreview">
            <summary>
            For binding selected page in the preview area. Depends on <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SelectedPage_Model"/> and <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SelectedSettingsLayer_Model"/>. Read-only outside viewmodel.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SettingsLayersForTabs">
            <summary>
            Options contexts to show in tabs. Only those added thru <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SettingsLayersAllAvailable"/> (with high <code>UserFriendlySettingsLayerAutomation.IsSelectedForTabs</code>) are listed here.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SettingsLayersForAddTabMenu">
            <summary>
            Options contexts to show in Add menu.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SettingsLayersAllAvailable">
            <summary>
            Viewmodels for all available options contexts. Direct mapping from model. Populates then <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SettingsLayersForTabs"/> and 
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.DefaultSelectedSettingsLayer">
            <summary>
            Defaultvalue for <see cref="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.SelectedSettingsLayer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.ResetRequested">
            <summary>
            Reverts all modifications in the current transaction.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsAutomation.ApplyRequested">
            <summary>
            Commits all modifications in the current transaction to the specified context (<c>NULL</c> for default context is OK).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.OptionsAutomation">
            <summary>
            Gets view model for options pages
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.IsEditingNonDefaultLayer">
            <summary>
            Gets whether only single context is been editing now
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.IsManageButtonIncluded">
            <summary>
            Whether to show the Manage button in our UI.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.IsSaveToButtonIncluded">
            <summary>
            Whether to show the SaveTo button in our UI.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.EditedSettingsLayer">
            <summary>
            Gets current edited options context
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.PendingChangesMessage">
            <summary>
            Gets how many changes pending to save text
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.HasPendingChanges">
            <summary>
            Gets whether we have changes to save
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation.RefreshPendingChanges">
            <summary>
            Forces immediate recalculation of the pending changes count.
            Normally, this is done in a background thread on settings changes event from store.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogSettings">
            <summary>
            Settings for <see cref="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogAutomation"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager">
            <summary>
            Manages the Options Dialog subsystem.
            Must not have its own nontrivial logic, is just a façade for the subsystem's components. Within the subsystem, use individual components; outside the subsystem, import this component to avoid going into the implementation details.
            </summary>
            <remarks>
            An option page has three levels of existence:
            • ID, a unique string identifier.
            • Descriptor, an instance of the <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor"/> class. Created when adding pages to the manager. Lives until removed.
            • View, a WinForms control created from the Descriptor, lives only for the run of the Options dialog.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager.GetOptionPages">
            <summary>
            <para>Lists the known option pages.</para>
            <para>When the option pages tree needs to be built, these are organized into a one-time tree of <see cref="T:JetBrains.Application.UI.Options.OptionsPageDescriptor"/>s.</para>
            <para>Generally, they're collected from the classes implementing <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/> and marked with <see cref="T:JetBrains.Application.UI.Options.OptionsPageAttribute"/>. You can promote your own page entities with <see cref="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager.AddOptionsPage(JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.UI.Options.OptionsPageAttribute)"/> as needed.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager.AddOptionsPage(JetBrains.Lifetimes.Lifetime,System.Type,JetBrains.Application.UI.Options.OptionsPageAttribute)">
            <summary>
            Manually registers a page for the Options dialog (in addition to pages regularly discovered from <see cref="T:JetBrains.Application.UI.Options.OptionsPageAttribute"/>).
            </summary>
            <param name="lifetime">Duration.</param>
            <param name="typePage">Type of the page class implementing the <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/> interface.</param>
            <param name="attribute">Attribute with page metadata.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager.CreateOptionPagesTree">
            <summary>
            When option pages tree needs to be presented, builds the tree structure.
            A new one is built each time so that to account for possible option pages dynamic additions/removals by plugins and user code. 
            Page parent references are validated for existence and cycles when building the tree.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager.ShowOptionsModal(System.String)">
            <summary>
            Shows options dialog modally.
            We require that the guard is not held when this method is called.
            </summary>
            <param name="pageId">Page id. <c>Null</c> means opening the most recently used page.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsManager.BeginShowOptions(System.String)">
            <summary>
            Shows options dialog.
            </summary>
            <param name="pageId">Page id. <c>Null</c> means opening the most recently used page.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.RecalculatePendingChanges">
            <summary>
            Forces immediate recalculation of the pending changes count.
            Normally, this is done in a background thread on settings changes event from store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.Commit">
            <summary>
            Commits changes in options pages to the transacted settings store and then the settings store transaction to the main store.
            </summary>
            <returns>Whether committing succeeded.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.CommitOptionPagesViewModels">
            <summary>
            Some option pages view models might be keeping state without immediately applying it to their model (which is the transaction over the settings store).
            This requests the pages to write these settings from the view model and into the model so that committing the transaction also applied all that data appropriately.
            </summary>
            <returns>If any of the pages returns <c>False</c>, also returns <c>False</c>. This means the page is inconsistent and the options could not be committed until the problem is corrected.</returns>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.SelectPageRequested">
            <summary>
            Model requests a page be selected in the views by setting it here.
            Note that views are not reflecting this value: as the selection is moved in the view, this will remain out-of-sync. This is for the initial page selection and for forcing the views to select a particular page later on.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.SelectLayerRequested">
            <summary>
            Model requests a layer be selected in the views by setting it here.
            Note that views are not reflecting this value: as the selection is moved in the view, this will remain out-of-sync. This is for the initial page selection and for forcing the views to select a particular layer later on.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.PageSelected">
            <summary>
            A page has been selected in a view. Fired by views.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.PendingChangesInfo">
            <summary>
            The estimated pending changes to be written when you commit the options model.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.BeforeCommitEventArgs.PagesFailedToCommit">
            <summary>
            If your page fails to commit, add it to the list.
            If you do not have page context in commit handler, add the root page.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.Revert">
            <summary>
            Reverts in-memory changes in options pages and changes in the settings store transaction.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.SettingsLayers">
            <summary>
            Contexts in which the settings could be edited.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.CommitToContext(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Commits all of the edits to the specified options context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsModel.GetCleanTransactionForLayer(JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer)">
            <summary>
            For each settings layer, whose <see cref="P:JetBrains.Application.Settings.UserInterface.UserFriendlySettingsLayer.SettingsStoreContext"/> operates in the settings transaction, gets the same context but in the clean transaction (without uncommitted changes made to Options).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory">
            <summary>
            Helps with creating options pages.
            Especially with not forgetting to supply all of the guaranteed injections.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory.CreateInjections_DummyToPreventImporting(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ISettingsSchema,JetBrains.Application.Threading.IShellLocks)">
            <summary>
            Prohibit importing some raw types by supplying diplicates to generate ambiguity.
            E.g. prevent access to out-of-transaction storage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory.PreventImportingInterfaces.JetBrains#Application#Settings#ISettingsStore#BindToMountPointsLive(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.ILiveMountPointsInContext,JetBrains.Application.Settings.BindToContextFlags)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory.PreventImportingInterfaces.JetBrains#Application#Settings#ISettingsStore#BindToMountPointsTransient(JetBrains.Application.Settings.Implementation.ImmutableContextBoundMountPoints,JetBrains.Application.Settings.BindToContextFlags)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory.PreventImportingInterfaces.JetBrains#Application#Settings#IContextBoundSettingsStore#InvolvedMountPoints">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory.PreventImportingInterfaces.AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageFactory.PreventImportingInterfaces.JetBrains#Application#Settings#IContextBoundSettingsStore#BindToContextFlags">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomation">
            <summary>
            Options page specifc to a context, for binding into view.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomation.CreatedOptionsPage">
            <summary>
              <para>The options page object, if already created.</para>
              <para>NOTE: previously, <see cref="T:JetBrains.Application.UI.Options.IOptionsPage" /> were a viewmodel and a view at the same time, now it's officially the automation object on which the view is created at presentation time.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomation.TryGetOptionsPage">
            <summary>
            Gets the created view if it already exists.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageInOptionsContextAutomationFactory.CreatedPageInContextAutomationObjects">
            <summary>
            A live list of what's been requested from the factory already.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageWithoutContextAutomation">
            <summary>
            This is the view model for an options page to be displayed in the pages tree, which does not depend on the currently selected optionscontext.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageWithoutContextAutomation.myChildren">
            <summary>
            Next tree level.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsPageWithoutContextAutomation.Children">
            <summary>
            Next tree level. Exectes the lazy evaluator.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction.OptionIsForcingWriteOfDefaultValuesOnSaveTo">
            <summary>
            Two possible implementations: when we're writing default values on SaveTo, or if we're using the default SmartSave behavior in this case as well.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction.mySequenceSettingsStoreTransactionCleanSnapshots">
            <summary>
            Lifetimes for <see cref="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction.SettingsStoreTransactionCleanSnapshot"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction.SettingsStoreTransactionForChanges">
            <summary>
            Created transaction, for committing it later.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction.SettingsStoreTransactionCleanSnapshot">
            <summary>
            A snapshot on the same settings as <see cref="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction.SettingsStoreTransactionForChanges"/>.
            Does not contain any changes made while working in the Options dialog. 
            We can see what's about to be changed by calculating a diff between them.
            Renewed when we commit the <see cref="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsTransaction.SettingsStoreTransactionForChanges"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase">
            <summary>
            A tree visualizing a part of the settings schema corresponding to the current context, with hierarchical checkbox.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation">
            <summary>
            Represents an item of settings in a tree where user
            can select particular settings to copy/import/export
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation.myTokenHierarchySyncChange">
            <summary>
            When we sync up and down the tree, to avoid cross-waves.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation.IsCheckedTriState">
            <summary>
            Gets or sets the state of the associated UI toggle (ex. CheckBox).
            The return value is calculated based on the check state of all
            children.  Setting this property to true or false
            will set all children to the same check state, and setting it
            to any value will cause the parent to verify its check state.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation.Name">
            <summary>
            Gets name of the setting
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation.Description">
            <summary>
            Gets description of the setting
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation.Children">
            <summary>
            Gets children nodes
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation.GetSelectedSettings(JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation)">
            <summary>
            Get all selected settings (only leafs)
            </summary>
            <returns>Selected settings (only leafs)</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation.GetSelectedSettings(System.Collections.Generic.IEnumerable{JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeAutomationBase.ItemAutomation})">
            <summary>
            Get all selected settings (only leafs)
            </summary>
            <returns>Selected settings (only leafs)</returns>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel">
            <summary>
            A tree visualizing a part of the settings schema corresponding to the current context, with hierarchical checkbox.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel.ItemModel.Key">
            <summary>
            Points to a non-indexed schema key, or to a particular instance of an indexed key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel.ItemModel.DisplayName">
            <summary>
            On a non-indexed key, the key local name. On an indexed key instance — the display name corresponding to the particular instance.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel.ItemModel.Description">
            <summary>
            Item description.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel.ItemModel.FetchItemsFromSnapshot(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsStoreChangeArgs,System.Boolean)">
            <summary>
            Populates tree items with snapshot contents (leaves only those schema nodes for which there are actualy any values in the snapshot).
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel.ItemModel.FetchItemsFromSchema(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsSchema,System.Boolean,JetBrains.Util.IExceptionThrowingLogger)">
            <summary>
            Populates tree items with all of the schema keys.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.SettingsSnapshotTreeModel.GetSelectedItems">
            <summary>
            Returns the shallowest selected items.
            All children of a selected item are also assumed to be selected, so they're omitted from the returned list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.SettingsEntryExtension.GetTooltipText(JetBrains.Application.Settings.SettingsEntry,System.String,System.String)">
            <summary>
            Provide tooltip text for Option page
            </summary>
            <param name="entry">Settings entry</param>
            <param name="text">Already presented text on form. Provide to avoid duplication between raw text and tooltip</param>
            <param name="customTooltipText">optional custom tooltip</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SimpleOptions.ViewModel.RichTextOptionViewModel.IsKeyAccessed">
            <summary>
            Gets or sets whether the RichText
            is key accessed by ALT + accesskey (access key is processed from the RichText)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSaveTargetAutomation.DisplayName">
            <summary>
            Gets name of settings layer
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.SettingsSaveTargetAutomation.IsLocked">
            <summary>
            Gets whether the settings layer is locked (readonly)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.DisplayName">
            <summary>
            Gets name of settings layer
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.OriginText">
            <summary>
            Gets a string describing the origin of the settings layer (e.g. its file location, URI, etc).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.IsDefault">
            <summary>
            Gets whether the settings layer is default
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.IsLocked">
            <summary>
            Gets whether the settings layer is locked (readonly)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.CanAddLayer">
            <summary>
            Gets whether the layer (or parent layer) can host another layer.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.CanEditLayer">
            <summary>
            Gets whether the settings in the layer can be edited by the user.
            (extensions can't be edited, but are displayed so they can be disabled)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.Priority">
            <summary>
            Priority of this layer when displaying a sorted layers list.
            The lower the number, the higher the priority.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsDialog.UserFriendlySettingsLayerAutomation.Icon">
            <summary>
            Gets icon for the layer
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsPageAttribute">
            <summary>
            This attribute should mark classes implementing <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/> interface.
            <seealso cref="T:JetBrains.Application.UI.Options.IOptionsPage"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageAttribute.#ctor(System.String,System.String,System.Type)">
            <param name="id">Id of this page. The recommended value is the class name without the <c>Page</c> suffix, which should look like the page display name in the Options tree, save for the spaces.</param>
            <param name="name">Presentable name of this page (to be shown in the tree of pages)</param>
            <param name="typeofIcon">Icon ID of image for this page. If null, default image is used.</param>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.HelpKeyword">
            <summary>
            Gets or sets the Help keyword that will be used to open the Help topic for the current options page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.Id">
            <summary>
            Id of this page
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.Icon">
            <summary>
            Icon ID of image for this page. If null, default image is used.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.Name">
            <summary>
            Presentable name of this page (to be shown in the tree of pages)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.NameResourceType">
            <summary>
            Resource type of presentable name of this page (to be shown in the tree of pages)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.NameResourceName">
            <summary>
            Resource name of presentable name of this page (to be shown in the tree of pages)
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.ParentId">
            <summary>
            Id of parent page. If not specified, the page is inserted at the top level.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.Sequence">
            <summary>
            Gets or sets the sequence number for this page, which defines its relative positions against the siblings.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.NestingType">
            <summary>
            Gets or sets the way the page is nested into its parent. <see cref="F:JetBrains.Application.UI.Options.OptionPageNestingType.Child"/> is the default;
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.IsAlignedWithParent">
            <summary>
            Page should be aligned with parent. !!! if one of children should be aligned -> all children will be aligned.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.AddVerticalScroll">
            <summary>
            Add vertical scroll if needed
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.SearchTags">
            <summary>
            Search aliases for current page
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageAttribute.FilterTags">
            <summary>
            Tags used to filter pages to show some subset of pages
            <seealso cref="P:JetBrains.Application.UI.Options.OptionsDialog.OptionsDialogParameters.FilterTags"/>
            <seealso cref="P:JetBrains.Application.UI.Options.OptionsDialog.ICustomOptionsEditSemantic.FilterTags"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageAttribute.CompareTo(JetBrains.Application.UI.Options.OptionsPageAttribute)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other. 
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsPageDescriptor">
            <summary>
            Runtime descriptor of an options page. UIless, but can create the UI.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageDescriptor.Id">
            <summary>
            Gets the ID of this page, as extracted from the <see cref="P:JetBrains.Application.UI.Options.OptionsPageDescriptor.Attribute"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageDescriptor.Parent">
            <summary>
            If this is not a root page, points to the parent page in the hierarchy.
            There may be only one root page, <see cref="T:JetBrains.Application.UI.Options.OptionPages.RootOptionsPage"/> (<see cref="P:JetBrains.Application.UI.Options.OptionPagesTree.RootElement"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageDescriptor.GetFullPath">
            <summary>
            Gets the full path to the options page.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageDescriptor.GetIcon1(JetBrains.Application.UI.Components.IUIApplication)">
            <summary>
            Retrieves an icon for the given options page.
            Won't throw or return <c>Null</c> unless very broken.
            </summary>
            <param name="environment"></param>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageDescriptor.GetIcon(JetBrains.Application.Environment.Helpers.ProductConfigurationsEx.InternalMode)">
            <summary>
            Retrieves an icon for the given options page.
            Won't throw or return <c>Null</c> unless very broken.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageDescriptor.TryGetNext">
            <summary>
            Goes to the next page in the tree. Returns <c>Null</c> if the next page is not available.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageDescriptor.TryGetPrevious">
            <summary>
            Goes to the previous page in the tree. Returns <c>Null</c> if the previous page is not available.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageDescriptor.Sort">
            <summary>
            Applies <see cref="P:JetBrains.Application.UI.Options.OptionsPageAttribute.Sequence"/> to the children.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsPageDescriptor.AppendChild(JetBrains.Application.UI.Options.OptionsPageDescriptor)">
            <summary>
            Inserts a new child. For internal use only.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsPageEntity">
            <summary>
            Describes a known page in the <see cref="M:JetBrains.Application.UI.Options.OptionPagesList.GetOptionPages">list</see>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageEntity.Attribute">
            <summary>
            Attribute instance containing all necessary information about the page and position to insert it.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsPageEntity.PageType">
            <summary>
            Class of the page (should implement <see cref="T:JetBrains.Application.UI.Options.IOptionsPage"/>).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsPageViewFactoryManager">
            <summary>
            Provides the factory for creating option page instances. Allows to import components to the ctor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsPageViewFactoryManager.Factories">
            <summary>
            Register factories here. Factories differ by their owning container: when solution is available, it should be the solution container, and so on.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsPageViewFactoryShell">
            <summary>
            Enables <see cref="T:JetBrains.Application.UI.Options.OptionsPageViewFactoryManager"/> to import Shell components to the ctor (fallback for cases when solution container is not available).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Options.OptionsSettingsSmartContext">
            <summary>
              <para>Import this type into options page ctor to get the Settings Store context for saving your Options Page settings.</para>
              <para>Use this for binding your Options Page settings controls in real time.</para>
              <para>In case you need to manually control the context your settings go to (like when they reference solution information and thus have no meaning in the global context), take <see cref="T:JetBrains.Application.Settings.ISettingsStore" /> and operate it directly. In default cases, use this context (which is a context in the same Settings Store).</para>
              <para>This context belongs to a <see cref="T:JetBrains.Application.Settings.ISettingsStoreInTransaction">Settings Store transaction</see>, so you can freely modify it in Options UI and access this data across pages. The choice of the context depends on the user's settings editing mode: either Smart Save by default, or writing to a specific storage in Advanced mode.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Options.OptionsSettingsSmartContext.BindToContextFlags">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsSettingsSmartContext.StoreOptionsTransactionContext">
            <summary>
              <para>This is the context in which you should be modifying settings while editing the options.</para>
              <para>It is exposed with delegating <see cref="T:JetBrains.Application.Settings.IContextBoundSettingsStoreLive" /> members of this class.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Options.OptionsSettingsSmartContext.StoreUnchangedSnapshotContext">
            <summary>
              <para>This is the baseline context which reflects the settings as they were when Options dialog was just opened (or after the Reset/Apply button).</para>
              <para>Never write to this context. Use it to detect changes made to specific settings.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsSettingsSmartContext.AdviseAsyncChanged(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.AsyncChangedSinkDelegate)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Options.OptionsSettingsSmartContext.GetValueProperty2``1(JetBrains.Lifetimes.Lifetime,JetBrains.Application.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.Settings.SettingsKey,System.Object},JetBrains.Application.Settings.ApartmentForNotifications)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Options.SettingsLayersDialogOwner">
            <summary>
            Spawns the Settings Layers dialog.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Options.SettingsLayersDialogOwner.Show(JetBrains.Application.UI.Automation.WindowModality)">
            <summary>
            We require that the guard is not held when this method is called.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PersistableDocument.PersistableDocument">
            <summary>
            Represents a document that can be saved. Mainly used for Visual Studio editors.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PersistableDocument.PersistableDocument.Icon">
            <summary>
            Gets or sets the document icon.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PersistableDocument.PersistableDocument.IsDirty">
            <summary>
            Gets or sets the dirty state for the document (whether there're unsaved changes to the document).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PersistableDocument.PersistableDocument.Moniker">
            <summary>
            Gets the document moniker. For file-based documents, this is the file path.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PersistableDocument.PersistableDocument.SaveRequested">
            <summary>
            Fires when the document save is requested. The document owner should execute the activities to make <see cref="F:JetBrains.Application.UI.PersistableDocument.PersistableDocument.IsDirty"/> <c>False</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PersistableDocument.IPersistableView.WindowFrame">
            <summary>
            The frame which is hosting this view in the IDE.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.AnchoringRect">
            <summary>
            The basic implementation of the <see cref="T:JetBrains.Application.UI.PopupLayout.IAnchoringRect" /> interface.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.AnchoringRect.Rectangle">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.AnchoringRect.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.DockingLayouter">
            <summary>
            Implements <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter" /> by docking the popup window to a certain <see cref="T:JetBrains.Application.UI.PopupLayout.IAnchoringRect">“anchoring rectangle”</see>, a trackable screen area against which the popup is dynamically aligned.
            You can set up <see cref="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.Dispositions">at which sides</see> to prefer docking, and <see cref="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.Padding96">at what distance</see>. If there's not enough room on the chosen side, the next option will be used (and optionally remembered if <see cref="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.UseStickyDispositions" />).
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.DockingLayouter.mySuppressLayout">
            <summary>
            If <c>True</c>, the layouting (and event-firing) is temporarily suppressed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.DockingLayouter.myUseStickyDispositions">
            <summary>
            Whether dispositions are sticky, and the list is updated to promote the MRU disposition.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.DockingLayouter.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.PopupLayout.IAnchoringRect)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.DockingLayouter.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.PopupLayout.IAnchoringRect,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Double,System.Boolean)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle at the sides specified by the <paramref name="dispositions" /> collection.
            You may turn the sticky dispositions mode (see <see cref="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.UseStickyDispositions" />) on or off.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.DockingLayouter.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.PopupLayout.IAnchoringRect,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Windows.Thickness,System.Boolean)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle at the sides specified by the <paramref name="dispositions" /> collection.
            You may turn the sticky dispositions mode (see <see cref="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.UseStickyDispositions" />) on or off.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.DockingLayouter.Anchor">
            <summary>
            Gets or sets the anchoring rectangle against which the entity is docked.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.Dispositions">
            <summary>
            Gets or sets the list of dispositions available for laying out the controlled rectangle against the anchoring rectangle.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.Padding96">
            <summary>
            Gets or sets the padding between the anchoring rectangle and the laid out entity, in logical (device-independent) pixels.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.UseStickyDispositions">
            <summary>
            Gets or sets whether the Sticky Dispositions mode is on.
            In this mode, the disposition used when layouting is promoted in the dispositions list so that it was preferred over the others the next time the layout is performed.
            The collection returned from <see cref="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.Dispositions" /> is modified accordingly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.DockingLayouter.GetScreenBounds(System.Drawing.Rectangle)">
            <summary>
            Gets the screen bounds into which the rectangle being laid out should be fit.
            The default implementation returns the display screen on which the most of <paramref name="rectAnchor" /> is located.
            </summary>
            <param name="rectAnchor">The anchoring rectangle around which the position provider will dock its controlled rect. Could be used to determine which screen to use as bounds.</param>
            <returns>The “screen” bounds for fitting the resulting rectangle into.</returns>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.JetBrains#Application#UI#PopupLayout#IPopupLayouter#Layout">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.DockingLayouter.JetBrains#Application#UI#PopupLayout#IPopupLayouter#Size">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.DockingLayouter.UpdateLayout">
            <summary>
            Re-layouts the entity using the current configuration.
            Submits the result to the <see cref="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout" /> property, which triggers the change event, if the value is different.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.DummyMainWindowPopupWindowContext.JetBrains#Application#UI#PopupLayout#IMainWindowPopupWindowContext#Source">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.ExternallyDrivenPopupLayouter">
            <summary>
            An anonymous implementation of a <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter" /> which does not have any logic onboard but expects someone to sink its events externally and update the <see cref="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout" /> as needed.
            MUST NOT be used without external connection, because an empty uninitialized <see cref="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout" /> is not valid for use.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.ExternallyDrivenPopupLayouter.JetBrains#Application#UI#PopupLayout#IPopupLayouter#Layout">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.ExternallyDrivenPopupLayouter.JetBrains#Application#UI#PopupLayout#IPopupLayouter#Size">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.IAnchoringRect">
            <summary>
            Represents a dynamic anchoring rectangle against this some controls could be laid out.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IAnchoringRect.Rectangle">
            <summary>
            Gets the current value of the anchoring rectangle.
            Note that, depending on the context, it could be either in client, screen, or any other coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IAnchoringRectEx.Transform(JetBrains.Application.UI.PopupLayout.IAnchoringRect,JetBrains.Lifetimes.Lifetime,System.Windows.Vector)">
            <summary>
            Applies a transformation to this anchoring rectangle and returns the result as a new anchoring rectangle.
            The current one should not be disposed of or used anywhere else.
            </summary>
            <param name="anchor"></param>
            <param name="lifetime"></param>
            <param name="offset">The translation portion of the transformation.</param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IAnchoringRectEx.Transform(JetBrains.Application.UI.PopupLayout.IAnchoringRect,JetBrains.Lifetimes.Lifetime,System.Windows.Vector,JetBrains.UI.Anchoring2D)">
            <summary>
            Applies a transformation to this anchoring rectangle and returns the result as a new anchoring rectangle.
            The current one should not be disposed of or used anywhere else.
            </summary>
            <param name="anchor"></param>
            <param name="lifetime"></param>
            <param name="offset">The translation portion of the transformation.</param>
            <param name="collapseto">
            Gets or sets whether the rectangle should be collapsed into a point, and, if yes, to which exactly point of the original rectangle.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            </param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IAnchoringRectEx.KeepLastKnownGoodRect(JetBrains.Application.UI.PopupLayout.IAnchoringRect,JetBrains.Lifetimes.Lifetime,System.Func{System.Windows.Rect,System.Boolean})">
            <summary>
            Returns an anchoring rect that allows only valid values from another rect. If a value is not valid, the rect keeps its previous (good) value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IMainWindowPopupWindowContext.Source">
            <summary>
            Gives the popup window context for the main application window.
            The popup layouter will be anchoring to the middle of the window (<code>MainWindowLayouter.CreateCenteredCorner</code> is used), and ESC pressings will be handled correctly.
            If there is no main window, the working area of the primary screen is used.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter">
            <summary>
            Lays out the popup windows.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout">
            <summary>
            Gets the result of laying out the entity.
            Submit a <see cref="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Size"/> to have the new layout calculated.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Size">
            <summary>
            Gets or sets the size of the entity to be laid out.
            Whenever you set a new site, the <see cref="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout"/> is updated, as needed, to provide with a new layout that fits the requested size. Note that the <see cref="P:JetBrains.Application.UI.PopupLayout.IPopupLayouter.Layout"/>'s size may be below the requested value if there's not enough room onscreen to fit it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.IPopupWindow">
            <summary>
            Represents a popup window.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupWindow.Context">
            <summary>
            Gets context the window is shown in.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupWindow.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupWindow.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupWindow.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupWindow.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.IPopupWindow.Visible">
            <summary>
            Gets value indicating whether the window is currently shown.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindow.HideWindow">
            <summary>
            Closes the window. After that the window cannot resurrect. Invoking this will cause the <see cref="E:JetBrains.Application.UI.PopupLayout.IPopupWindow.Closed"/> event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindow.ShowWindow">
            <summary>
            Initially shows the popup window. The window remains shown until it is closed by the <see cref="M:JetBrains.Application.UI.PopupLayout.IPopupWindow.HideWindow"/> method or by an action from the <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupWindowContext"/>.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.PopupLayout.IPopupWindow.Closed">
            <summary>
            Event which is raised when the window is closed either manually (by invoking the <see cref="M:JetBrains.Application.UI.PopupLayout.IPopupWindow.HideWindow"/> method) or 
            when position provider returns empty position.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.PopupWindowLayoutMode">
            <summary>
            Defines the way the popup window controls its content location and size.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.PopupWindowLayoutMode.None">
            <summary>
            The layouter is not applied to the window, its size and position are manually controlled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.PopupWindowLayoutMode.Full">
            <summary>
            The layouter fully controls the window size and position.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.FormHideMethod">
            <summary>
            What exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.FormHideMethod.Visibility">
            <summary>
            Manipulate visibility (<c>ShowWindow(…)</c>).
            This won't <see cref="M:System.IDisposable.Dispose"/> the form, which is good for reusable windows.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.FormHideMethod.Closing">
            <summary>
            Close the window (<c>WM_CLOSE</c>).
            The window gets disposed and cannot be reused.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.FormHideMethod.FocusingAndClosing">
            <summary>
            Close the window (<c>WM_CLOSE</c>).
            The window gets disposed and cannot be reused.
            Force window to focuse before closing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.IPopupWindowContext">
            <summary>
            Represents the owning context for a popup window.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.CreateLayouter(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Gets the default position provider for the view. Usually gets position provider
            which provides position bound to the current selection or insertion point of the view.
            </summary>
            <param name="lifetime">Lifetime for the layouter.</param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireAnyOtherAction">
            <summary>Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.AnyOtherAction"/> event.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireDeactivated">
            <summary>Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.Deactivated"/> event.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireScroll">
            <summary>Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.Scroll"/> event.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.FireSelectionChanged">
            <summary>Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.SelectionChanged"/> event.</summary>
        </member>
        <member name="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.AnyOtherAction">
            <summary>Fires when some action occurs in the context owner.</summary>
        </member>
        <member name="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.Deactivated">
            <summary>Fires when the context owner is deactivated.</summary>
        </member>
        <member name="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.EscapePressed">
            <summary>
            Fires when the ESCAPE key is pressed in the owning context.
            Works as a stack of handlers instead of a multicast event,
            that is, always notifies only the most-recently-added event
            in the stack, and then removes it from the stack.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.Scroll">
            <summary>Fires when the context owner is scrolled.</summary>
        </member>
        <member name="E:JetBrains.Application.UI.PopupLayout.IPopupWindowContext.SelectionChanged">
            <summary>Fires when selection changes in the context owner.</summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindowContextEx.OverrideLayouter(JetBrains.Application.UI.PopupLayout.IPopupWindowContext,JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.PopupLayout.IPopupLayouter})">
            <summary>
            Customizes a popup window context if a special layouter should be used for the popup window to be created.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.IPopupWindowContextEx.OverrideLayouter(JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Func{JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.PopupLayout.IPopupLayouter})">
            <summary>
            Customizes a popup window context if a special layouter should be used for the popup window to be created.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.LastKnownGoodAnchoringRect">
            <summary>
            An anchor that allows only valid values from another anchor.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.LayoutResult">
            <summary>
            Represents the result of layouting by the means of an <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupLayouter" />.
            Besides the entity bounds, specifies how they're located against the anchoring area, should there be any.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Empty">
            <summary>
            The empty layouting result.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.LayoutResult.#ctor(System.Drawing.Rectangle@,System.Drawing.Rectangle@,System.Drawing.Rectangle@,JetBrains.UI.Anchoring2D@,JetBrains.Util.Interop.DpiResolution@)">
            <summary>
            Initializes the instance with the laid out entity bounds, anchoring rectangle and dispositon of the entity against it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.LayoutResult.AnchoringRect">
            <summary>
            The anchoring rectangle against which the entity has been laid out.
            Valid only if <see cref="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Disposition" /> is not <see cref="F:JetBrains.UI.Anchoring2D.Empty" />; otherwise, considered to be not available.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Bounds">
            <summary>
            The bounds of the laid out entity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Disposition">
            <summary>
            The disposition of the laid out entity against the anchoring rectangle, <see cref="F:JetBrains.Application.UI.PopupLayout.LayoutResult.AnchoringRect" />.
            Should be <see cref="F:JetBrains.UI.Anchoring2D.Empty" /> if this data is not available.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.LayoutResult.DpiResolution">
            <summary>
            Tells the resolution of the place this control is layouted at.
            Basically, this is the resolution of a display.
            In more advanced scenarios it might be taking into account the custom resolution of the anchoring control (e.g. when it's zoomed and popups have to follow the zoom, like with the text editor).
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.LayoutResult.Location">
            <summary>
            Gets the location of the laid out entity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Room">
            <summary>
            The room available for layouting at the specified <see cref="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Disposition" />.
            The <see cref="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Bounds" /> fall within the <see cref="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Room" />, docked inside as specified by <see cref="F:JetBrains.Application.UI.PopupLayout.LayoutResult.Disposition" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.LayoutResult.Size">
            <summary>
            Gets the size of the laid out entity.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.LayoutResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.MousePositionPopupWindowContext">
            <summary>
            An empty popup window context.
            Does not listen to ESC actions.
            Lays out popups at the mouse cursor position at the moment of request.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.MousePositionPopupWindowContext.LayouterFactory">
            <summary>
            How this context creates (dummy) layouters.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.MousePositionPopupWindowContext.Source">
            <summary>
            Non-lifetime-bound creator for this context.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.NestedAnchoringRect">
            <summary>
            Takes two anchoring rects and nests one itno another, treating the coordinates of the first one as relative to the second's.
            Useful for nesting a client-coordinates rect into the window rect for getting the screen coordinates that track both client item and window movements.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.NestedAnchoringRect.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.PopupLayout.IAnchoringRect,JetBrains.Application.UI.PopupLayout.IAnchoringRect)">
            <summary>
            Nests the <paramref name="nested"/> anchoring rect within the <paramref name="outer"/> one, treating the coordinates of the first as client ones within the second.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.NestedAnchoringRect.Nested">
            <summary>
            Gets that of the two anchors that is nested within the other.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.NestedAnchoringRect.Outer">
            <summary>
            Gets that of the two anchors that is the outer one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.NestedAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchor based on the two underlying anchors.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.PopupWindowContext">
            <summary>
            The default implementation of the <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupWindowContext"/> interface.
            Represents an empty window context and a base class for meaningful window contexts.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowContext.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Actions.ActionManager.IActionManager)">
            <summary>
            A protected constructor for use from the inheritors.
            To get a default window context, use <see cref="T:System.Empty"/> instead.
            </summary>
            <param name="lifetime">Limiting lifetime.</param>
            <param name="actionManager">Action manager, required for handling of the ESC action.</param>
        </member>
        <member name="E:JetBrains.Application.UI.PopupLayout.PopupWindowContext.EscapePressed">
            <summary>
            Fires when the ESCAPE key is pressed in the owning context.
            Works as a stack of handlers instead of a multicast event, that is,
            always notifies only the most-recently-added event in the stack,
            and then removes it from the stack.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowContext.CreateLayouter(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates the default layouter that positiones its entities in the center of the DEVENV window.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowContext.FireAnyOtherAction">
            <summary>
            Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.PopupWindowContext.AnyOtherAction"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowContext.FireDeactivated">
            <summary>
            Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.PopupWindowContext.Deactivated"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowContext.FireScroll">
            <summary>
            Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.PopupWindowContext.Scroll"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowContext.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:JetBrains.Application.UI.PopupLayout.PopupWindowContext.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.PopupWindowContextSource">
            <summary>
            A popup window context that can be created on demand.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowContextSource.Create(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates the popup window context.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.PopupWindowContextSpecificEscapeActionHandler">
            <summary>
            Represents a view-specific wrapper for handling escape actions in views
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.PopupWindowContextWithAnotherLayouter">
            <summary>
            Customizes a popup window context if a special layouter should be used for the popup window to be created.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.PopupWindowMutex">
            <summary>
            Defines the identity of the popup window group within which the popup windows are mutually exclusive.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowMutex.WindowAdded(JetBrains.Application.UI.PopupLayout.IPopupWindow,System.Collections.Generic.IEnumerable{JetBrains.Application.UI.PopupLayout.IPopupWindow},JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.UI.PopupLayout.IPopupWindow})">
            <summary>
            Called when a new window is added to the identity group.
            The default implementation closes all the previous windows in the group.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.PopupWindowMutex.WindowRemoved(JetBrains.Application.UI.PopupLayout.IPopupWindow,System.Collections.Generic.IEnumerable{JetBrains.Application.UI.PopupLayout.IPopupWindow},JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.UI.PopupLayout.IPopupWindow})">
            <summary>
            Called when a new window is removed from the identity group.
            The default implementation does nothing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.RectangleDocker">
            <summary>
            Attaches one rect to another according to the rules.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myAllowedDispositions">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.AllowedDispositions"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myAnchoringRect">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.AnchoringRect"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myCandidateDisposition">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateDisposition"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myCandidateRatio">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRatio"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myCandidateRect">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRect"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myCandidateRoom">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRoom"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myPadding">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Padding"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.myScreen">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Screen"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.RectangleDocker.mySize">
            <summary>
            <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Size"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Drawing.Rectangle)">
            <summary>
            Docks one rectangle to another. See the <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Result"/> property for the result.
            </summary>
            <param name="rectAnchor">The anchoring rectangle to which the resulting rectangle will be docked.</param>
            <param name="size">The desired size that describes the rectangle to be docked (the location is determined by the docking process). The size may decrease in case the <paramref name="screen"/>has not enough room for docking the rectangle in all its entirety.</param>
            <param name="dispositionsAllowed">Defines sides at which the rectangle may be docked to the anchor, in order of decreasing priority.</param>
            <param name="screen">The available space for the dockee.</param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Drawing.Rectangle,System.Windows.Forms.Padding)">
            <summary>
            Docks one rectangle to another. See the <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Result"/> property for the result.
            </summary>
            <param name="rectAnchor">The anchoring rectangle to which the resulting rectangle will be docked.</param>
            <param name="size">The desired size that describes the rectangle to be docked (the location is determined by the docking process). The size may decrease in case the <paramref name="screen"/>has not enough room for docking the rectangle in all its entirety.</param>
            <param name="dispositionsAllowed">Defines sides at which the rectangle may be docked to the anchor, in order of decreasing priority.</param>
            <param name="screen">The available space for the dockee.</param>
            <param name="padding">Padding to be inserted between the anchor and the dockee.</param>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.AllowedDispositions">
            <summary>
            Gets the collection of the dispositions allowed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.AnchoringRect">
            <summary>
            Gets the anchor.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateDisposition">
            <summary>
            Gets the disposition of the <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRect"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRatio">
            <summary>
            Gets the ratio of the <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRect"/>, ie how much it fits the desired size, the smaller the better.
            The following candidates are accepted or rejected based on this ratio.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRect">
            <summary>
            Gets the current candidate for the layout result.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRoom">
            <summary>
            Gets the total room available for the current <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateRect"/>, at its <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.CandidateDisposition"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Padding">
            <summary>
            Gets the padding to be inserted between the anchor and the dockee.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Result">
            <summary>
            Gets the result of docking, the final candidate and all of its properties packed into a single structure.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Screen">
            <summary>
            Gets the screen, which is the total room available for layouting.
            Either given explicitly by the user, or chosen as the same desktop the anchor lies in.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Size">
            <summary>
            Gets the desired size we're trying to lay out by docking.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.Attach">
            <summary>
            The main routine.
            Tries each of the available dispositions in turn.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.AttachRect(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches a rectangle using the one and only specified <paramref name="disposition"/>.
            </summary>
            <param name="rectAnchor">The anchoring area to attach to.</param>
            <param name="disposition">A side or a corner to attach at.</param>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.AttachRectInside(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches inside the anchoring rect: flips the anchor so that to solve the “attach-outside” problem afterwards.
            </summary>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.AttachRectMiddle(JetBrains.UI.Anchoring2D,System.Drawing.Rectangle)">
            <summary>
            Handles the Middle-Middle disposition case, in a simplified manner.
            </summary>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.AttachRectOutside(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches a rectangle outside the given anchoring rect.
            Inside-attachment calls this routine with anchor mirrored against the attachment side, so that it were an outside attachment, after all.
            </summary>
            <param name="rectAnchorPadded">The anchor.</param>
            <param name="dispositionAttachment">The disposition to use when attaching.</param>
            <param name="dispositionOriginal">The disposition to be recorded in the <see cref="P:JetBrains.Application.UI.PopupLayout.RectangleDocker.Result"/>, as <paramref name="dispositionAttachment"/> may be modified from the original value.</param>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.CenterHorizontally(System.Drawing.Point,System.Drawing.Rectangle@)">
            <summary>
            Centers the desired size against the anchoring rect, in the horizontal dimension. Constrains by the screen.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.CenterVertically(System.Drawing.Point,System.Drawing.Rectangle@)">
            <summary>
            Centers the desired size against the anchoring rect, in the vertical dimension. Constrains by the screen.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.RectangleDocker.CheckCandidate(System.Drawing.Rectangle@,System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Evaluates the candidate rectangle, either promotes it to the instance-global candidate, if its ratio is better, or discards otherwise.
            If the rect satisfies the desired size entirely, returns <c>True</c> so that to stop trying other candidates.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.SimplePopupWindowContext">
            <summary>
            A simple popup window context.
            Does not listen to ESC actions.
            A layouter factory should be provided.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.StaticAnchoringRect">
            <summary>
            Creates an anchoring rectangle whose position is fixed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StaticAnchoringRect.#ctor(System.Windows.Point)">
            <summary>
            Creates a position provider.
            </summary>
            <param name="location">The fixed location, in screen coordinates.</param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StaticAnchoringRect.#ctor(System.Windows.Rect)">
            <summary>
            Creates a position provider.
            </summary>
            <param name="anchor">The fixed anchoring rectangle, in screen coordinates.</param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StaticAnchoringRect.FromCurrentMousePosition(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Creates a static anchoring rectangle at the point where the mouse pointer was at the moment of the call.
            The size of the rectangle is chosen so that there was a double-click-size distance from the mouse location to either side.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StaticAnchoringRect.FromCurrentMousePosition(JetBrains.Lifetimes.Lifetime,System.Drawing.Size)">
            <summary>
            Creates a static anchoring rectangle at the point where the mouse pointer was at the moment of the call.
            The size of the rectangle is chosen so that there was a double-click-size distance from the mouse location to either side.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StaticAnchoringRect.FromCurrentMousePosition(JetBrains.Lifetimes.Lifetime,System.Func{System.Drawing.Point,System.Drawing.Size})">
            <summary>
            Creates a static anchoring rectangle at the point where the mouse pointer was at the moment of the call.
            The size of the rectangle is chosen so that there was a double-click-size distance from the mouse location to either side.
            </summary>
            <param name="lifetime">Anchor object LT.</param>
            <param name="offset">The offset. The parameter should have been the DPI (for the display on which the point is), but the DPI API is not available in this DLL, so you are given the point for which you can call <c>DpiResolutions::FromScreenPoint</c> to get the DPI for calculating the offset correctly.</param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StaticAnchoringRect.GetCurrentMousePositionRect(System.Func{System.Drawing.Point,System.Drawing.Size})">
            <param name="offset">The offset. The parameter should have been the DPI (for the display on which the point is), but the DPI API is not available in this DLL, so you are given the point for which you can call <c>DpiResolutions::FromScreenPoint</c> to get the DPI for calculating the offset correctly.</param>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.StickyDisposition">
            <summary>
            Keeps the allowed dispositions list — a list of <see cref="T:JetBrains.UI.Anchoring2D"/> values — and promotes the most recently used one to have the highest priority, ie it gets sticky and will be used next time, unless there's a better choice.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.StickyDisposition.myDispositions">
            <summary>
            The list of dispositions, in priority order.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StickyDisposition.#ctor(System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D})">
            <summary>
            Creates a new instance and initializes it with the set of dispositions, sorted in an ascending order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StickyDisposition.#ctor">
            <summary>
            Creates a new instance and initializes it with the default <see cref="P:JetBrains.UI.Anchoring2D.AnchorBottomOrTop"/> set of dispositions, sorted in an ascending order of priority.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.PopupLayout.StickyDisposition.Dispositions">
            <summary>
            Gets or sets the current set of dispositions which consists of the same dispositions as were given on construction time, but in another priority.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StickyDisposition.Promote(JetBrains.UI.Anchoring2D)">
            <summary>
            Promotes the disposition specified so that it had the highest priority next time you get <see cref="P:JetBrains.Application.UI.PopupLayout.StickyDisposition.Dispositions"/>, and thus ruled out the layouting (unless some other disposition makes a better fit).
            </summary>
            <param name="disposition">The disposition to promote.</param>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.StickyDisposition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.UI.PopupLayout.TransformedAnchoringRect">
            <summary>
            An anchor that applies a transofrmation to some other anchor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.TransformedAnchoringRect.CollapseTo">
            <summary>
            Gets or sets whether the rectangle should be collapsed into a point, and, if yes, to which exactly point of the original rectangle.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.TransformedAnchoringRect.Offset">
            <summary>
            Gets the translation portion of the transformation.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.PopupLayout.TransformedAnchoringRect.UnderlyingAnchor">
            <summary>
            Gets the underlying anchoring object that is being transformed by this adapter.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.PopupLayout.TransformedAnchoringRect.UpdateAnchor">
            <summary>
            Recalculates the anchoring rectangle.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Primary">
            <summary>
            The task must be executed on the primary (UI) thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Progress.TaskThreadAffinity.Free">
            <summary>
            The task could be run on any thread.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Progress.UITaskExecutor">
            <summary>
            A task executor that displays graphical user interface while the progress is running.
            This object is reusable and is not connected to any given task execution.
            </summary>
            <remarks>This used to be a static class with static APIs to the component <see cref="T:JetBrains.Application.UI.Progress.UITaskExecutorSwitchingImplementation" />, but with the SharedShell movement it gotta import and be imported correctly so it became a (not very useful now) proxy component.</remarks>
        </member>
        <member name="P:JetBrains.Application.UI.Progress.UITaskExecutor.FreeThreaded">
            <summary>
            Gets a UI Task Executor that can run tasks on worker threads.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Progress.UITaskExecutor.RunningTaskExecutors">
            <summary>
              <para>The task executors which are currently running.</para>
              <para>When you see a running executor, you could watch either its <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsRunning" /> falling, or its item leaving the collection, to know when it ends.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Progress.UITaskExecutor.SingleThreaded">
            <summary>
            Gets a UI Task Executor that can run tasks on the primary (UI) thread only.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Progress.UITaskExecutorSwitchingImplementation">
            <summary>
            Allows to override the default <see cref="T:JetBrains.Application.UI.Progress.UITaskExecutor" /> implementation with test mocks or app-specifics.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Progress.UITaskExecutorSwitchingImplementation.CreateExecutor(JetBrains.Application.UI.Progress.TaskThreadAffinity,System.Windows.Forms.IWin32Window)">
            <summary>
            Switching implementation for <see cref="T:JetBrains.Application.UI.Progress.UITaskExecutor" />.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Progress.UITaskExecutorSwitchingImplementation.RunningTaskExecutors">
            <summary>
              <para>The task executors which are currently running.</para>
              <para>When you see a running executor, you could watch either its <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsRunning" /> falling, or its item leaving the collection, to know when it ends.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Progress.WorkerThreadShop">
            <summary>
            Creates personal worker threads.
            Ensures they will be reclaimed when the Shell is torn down.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Progress.WorkerThreadShop.Create(JetBrains.Lifetimes.Lifetime,System.String)">
            <summary>
            Creates a new <see cref="T:JetBrains.Threading.JetDispatcher">dispatcher</see> thread that will be reclaimed when the Shell is shut down, or when the return value is disposed of.
            </summary>
            <param name="lifetime"></param>
            <param name="name">Name for the managed thread.</param>
            <returns>Thread-owning dispatcher.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Progress.WorkerThreadShop.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.UI.PropertiesWindow.GridData.#ctor(System.String,System.String)">
            <summary>
            The object name (displayed in bold) and the object type in the Properties Window Object List drop-down
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Settings.AnchorSettingsLayerDataConstant">
            <summary>
            Additional information for the layer-related actions which need an anchor in addition to selection.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.DataConstants.SingleSelectedUserFriendlySettingsLayer">
            <summary>
            If <see cref="F:JetBrains.Application.UI.Settings.DataConstants.SelectedUserFriendlySettingsLayers"/> contains exactly one item, that item.
            </summary>
            <remarks>You MUST NOT provide this data rule, provide <see cref="F:JetBrains.Application.UI.Settings.DataConstants.SelectedUserFriendlySettingsLayers"/> instead and the data rule will infer this one.</remarks>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.DataConstants.SingleSelectedUserInjectedSettingsLayer">
            <summary>
            If <see cref="F:JetBrains.Application.UI.Settings.DataConstants.SelectedUserFriendlySettingsLayers"/> contains exactly one item, and it's an injected layer, that item.
            </summary>
            <remarks>You MUST NOT provide this data rule, provide <see cref="F:JetBrains.Application.UI.Settings.DataConstants.SelectedUserFriendlySettingsLayers"/> instead and the data rule will infer this one.</remarks>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.DataConstants.SelectedUserFriendlySettingsLayers">
            <summary>
            The set of the currently selected user-friendly settings layers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.DataConstants.InjectedLayersHost_IncludingHostItself">
            <summary>
            <para>For an injected layer, takes its host. For an injections host layer, takes itself.</para>
             <para>If all of the layers in the <see cref="F:JetBrains.Application.UI.Settings.DataConstants.SelectedUserFriendlySettingsLayers"/> yield the same host, returns that host.</para>
            <para>Unlike <see cref="F:JetBrains.Application.UI.Settings.DataConstants.InjectedLayersHost_ExcludeHostItself"/>, this transformation includes hosting layers themselves.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.DataConstants.InjectedLayersHost_ExcludeHostItself">
            <summary>
            <para>For an injected layer, takes its host.</para>
            <para>If all of the layers in the <see cref="F:JetBrains.Application.UI.Settings.DataConstants.SelectedUserFriendlySettingsLayers"/> are injected and have the same host, returns that host.</para>
            <para>Unlike <see cref="F:JetBrains.Application.UI.Settings.DataConstants.InjectedLayersHost_IncludingHostItself"/>, this transformation yields <c>Null</c> if there are any hosting layers in the selection.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Settings.DialogWindowsSettings">
            <summary>
            Parent for settings of dialog windows.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Automation.SourceSelectionAutomation.SelectedSourceIndex">
            <summary>
            Which mode we're in.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Automation.SourceSelectionAutomation.StoreMode.SelectedStore">
            <summary>
            Actually contains AvailableStore type, for binding right to the list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Automation.SourceSelectionAutomation.AllModesCommon.IsOverwritingEverythingInSource">
            <summary>
            If <see cref="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.HowToWrite.Replace"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Automation.SourceSelectionAutomation.AllModesCommon.IsForWriting">
            <summary>
            Whether this uidata/view is for write-to source rather than read-from.
            On the model level, there is no difference, but the UI changes a bit.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Settings.ImportExport.Model.ImportExportRun">
            <summary>
            Automated run of the import-export sequence.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Settings.ImportExport.Model.ImportExportRun.Run(JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel,JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel,JetBrains.Util.IExceptionThrowingLogger,JetBrains.Application.Settings.Storage.DefaultBody.InternKeyPathComponent,System.Action{JetBrains.Application.Settings.ISettingsStorageMountPoint})">
            <summary>
            
            </summary>
            <param name="from">Where to read from. Might be in a transaction.</param>
            <param name="to">Where to write to. Might be in a transaction.</param>
            <param name="logger">Errors in user data or source/target access while doing import-export would go here.</param>
            <param name="interned"></param>
            <param name="FFilter">Optional. Allows you to run a filter over what is being transferred from <paramref name="from"/> to <paramref name="to"/>. If you're doing all this in a transaction, then it's your job to operate filtering in the correct transaction.</param>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.SelectedSource">
            <summary>
            Which mode we're in.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.HowToWrite.Append">
            <summary>
            Write new data into the store/storage over the old data without removing it specifically.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.HowToWrite.Replace">
            <summary>
            Erase as much data from the target storage as possible before writing.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.HowToWriteToSource">
            <summary>
            See enum values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.PrefilterKey">
            <summary>
            Optional. When reading from this source, limits data to that only under the given key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.PrefilterKeyIndices">
            <summary>
            Optional. If <see cref="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.AllModesCommon.PrefilterKey"/> is specified and has indexed keys in its ancestry, specifies such indices.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.SettingsStore">
            <summary>
            Entry point to the Settings subsystem we're working in.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.SourceKind.Store">
            <summary>
            Like Options dialog, working with a context-bound settings store, either the default Smart context, or one of the available per-layer contexts.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.SourceKind.MountingPoint">
            <summary>
            Working with a physical storage available in the system thru some registered mounting point, in terms of physical values in key-value store.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Settings.ImportExport.Model.SettingsSourceModel.SourceKind.FileStorage">
            <summary>
            Working with an on-disk file or URI (if for reading).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Settings.LayoutSettings">
            <summary>
            Parent for layout-related environment settings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.StdApplicationUI.StatusBar.MemoryUsageIndicatorBase.GarbageCollectionRequested">
            <summary>
            Fires when user requests garbage collection on the Memory Usage Indicator — before actually collecting the garbage, so if you got any caches, you might want to flush them before actually GCing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.StdApplicationUI.StatusBar.SubclassedStatusBar">
            <summary>
            Additional API for status bars which are subclassing foreign IDE's status bars.
            In this case they cannot actually know when IDE changes text on the status bar, so consumers interested in reading status bar text set by IDE (and not only by us) should first fire this signal to force the status bar state updated with up-to-date IDE settings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Theming.Theme.Generic">
            <summary>
            This theme is used only for showing standalone product without activated license.
            It was introduced because of ActiPro bug on switching between AeroNormalTheme (Blue) to Light theme after license activation:
            DockSite background and tab header background are not properly themed. See DTRC-27687 for details.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Tooltips.ITooltipInfo">
            <summary>
            Describes a tooltip on screen and provides the means for positioning it onscreen and controlling its lifetime.
            Don't dispose of tooltip infos until you're done with using their members, eg painters and layouters.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.ITooltipInfo.PainterAutomation">
            <summary>
            Gets the painter for the tooltip.
            Must be implemented. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.ITooltipInfo.PopupWindowContext">
            <summary>
            Gets the popup window context that fires the actions upon which the tooltip is dismissed.
            <c>Null</c> means the default popup window context will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipInfo.HitTestToolArea(JetBrains.Util.Media.JetPoint)">
            <summary>
            Checks whether the given point falls within the tool area of this tooltip. The tooltip is displayed while mouse pointer is within the tool area. One window may have more than one tooltip for different tool areas.
            </summary>
            <param name="pt">Point, in the client coordinates, to be tested for falling within the area.</param>
            <returns><c>True</c> if point is within the area, <c>False</c> otherwise.</returns>
        </member>
        <member name="T:JetBrains.Application.UI.Tooltips.ITooltipManager">
            <summary>
            An interface for the tooltip manager component.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.ITooltipManager.ContentMargin">
            <summary>
            Gets the margin that separates the content rendered within the tooltip from the tooltip window edge.
            Also, this is the offset from the tip control location to the tip text location, which is useful for precise positioning of the text.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.ITooltipManager.HoverDelay">
            <summary>
            Gets the standard hover delay, a period of time between the mouse-over and tooltip display, in milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.ITooltipManager.PopupWindowMutex">
            <summary>
            Gets the popup window mutex that defines the default identity for the tooltips, and thus prevents from showing more than one at a time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipManager.GetRenderParams(JetBrains.Util.Interop.DpiResolution)">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipManager.Show(JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.UI.UIAutomation.IAutomation,JetBrains.Application.UI.PopupLayout.IPopupWindowContext,System.Nullable{JetBrains.Application.UI.WindowManagement.HideFlags},System.Nullable{System.TimeSpan})">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="lifetimeDefinition">The lifetime definition of the tooltip session. Limits the tooltip life, also is terminated by the tooltip when it is hidden. Bind any tooltip-related resources to this lifetime definition.</param>
            <param name="automation">The tip content automation object. The original tooltip implementation expects the automation object to have a Windowless Control view.</param>
            <param name="context">Parent context for the tooltip popup window, and its layouter.</param>
            <param name="hideflags">The list of actions that discard the tooltip (app deactivation is implied).</param>
            <param name="timeout">Time interval to display the tooltip for. If positive, specifies the number of milliseconds to show the tooltip for. If <c>NULL</c>, uses the default timeout from <see cref="P:JetBrains.Application.UI.Tooltips.TooltipConfig.DefaultTimeout"/>.</param>
            <returns>The popup window that controls the tooltip, or <c>Null</c> if the tooltip has failed to show (eg tooltips are not allowed at the moment, see <see cref="M:JetBrains.Application.UI.Tooltips.TooltipConfig.GetCanShowTooltips(JetBrains.Application.UI.Components.IIsApplicationActiveState)"/>).</returns>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.Application.UI.Tooltips.ITooltipManager,System.String,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="manager"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.Application.UI.Tooltips.ITooltipManager,JetBrains.UI.RichText.RichText,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="manager"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.Application.UI.Tooltips.ITooltipManager,JetBrains.UI.RichText.RichText,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource,System.Nullable{JetBrains.Application.UI.WindowManagement.HideFlags},System.Nullable{System.TimeSpan})">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="manager"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
            <param name="hideflags">Hide flags</param>
            <param name="timeout">Timeout</param>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.Application.UI.Tooltips.ITooltipManager,JetBrains.UI.RichText.RichTextBlock,JetBrains.Application.UI.PopupLayout.PopupWindowContextSource)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="manager"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="T:JetBrains.Application.UI.Tooltips.ITooltipProvider">
            <summary>
            Any HWND-based WinForms <see cref="T:System.Windows.Forms.Control" /> (or <see cref="T:System.Windows.Forms.NativeWindow" />) that implements this interface will be queried for the tooltip info and, should the retval be non-<c>Null</c>, the tooltip will be displayed for this window.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.ITooltipProvider.GetTooltip(JetBrains.Lifetimes.Lifetime,JetBrains.Util.Media.JetPhysicalPoint)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime">Lifetime for the tooltip record you return. Bind all of the resources, like anchors and layouters, to this lifetime.</param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.Application.UI.Tooltips.ITooltipInfo" />, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="F:JetBrains.Application.UI.Tooltips.TooltipConfig.myDefaultTimeout">
            <summary>
            <see cref="P:JetBrains.Application.UI.Tooltips.TooltipConfig.DefaultTimeout" />.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.TooltipConfig.DefaultTimeout">
            <summary>
            The default timeout, the maximum time span for which the tooltip is visible, in milliseconds.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.TooltipConfig.GetCanShowTooltips(JetBrains.Application.UI.Components.IIsApplicationActiveState)">
            <summary>
            Gets whether any tooltips are allowed to be shown at the moment.
            Tip Control View won't check this, it will show anyway, so it's the caller's duty.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Tooltips.TooltipManagerComponent">
            <summary>
            Dummy base impl.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.TooltipManagerComponent.JetBrains#Application#UI#Tooltips#ITooltipManager#ContentMargin">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.TooltipManagerComponent.JetBrains#Application#UI#Tooltips#ITooltipManager#GetRenderParams(JetBrains.Util.Interop.DpiResolution)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.TooltipManagerComponent.JetBrains#Application#UI#Tooltips#ITooltipManager#HoverDelay">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Tooltips.TooltipManagerComponent.JetBrains#Application#UI#Tooltips#ITooltipManager#PopupWindowMutex">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Tooltips.TooltipManagerComponent.ShowCore(JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.UI.UIAutomation.IAutomation,JetBrains.Application.UI.PopupLayout.IPopupWindowContext,System.Nullable{JetBrains.Application.UI.WindowManagement.HideFlags},System.Nullable{System.TimeSpan})">
            <summary>
            Core impl for <see cref="M:JetBrains.Application.UI.Tooltips.ITooltipManager.Show(JetBrains.Lifetimes.LifetimeDefinition,JetBrains.Application.UI.UIAutomation.IAutomation,JetBrains.Application.UI.PopupLayout.IPopupWindowContext,System.Nullable{JetBrains.Application.UI.WindowManagement.HideFlags},System.Nullable{System.TimeSpan})" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.FactorToolWindowContent.#ctor(JetBrains.Application.Components.IComponentContainer,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.Threading.IThreading)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.TabbedToolWindowClass.GetTabInstanceSequence">
            <summary>
            Gets actual sequence of tabs
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.TabRenamePrompt.Prompt(System.String,System.String,System.String[])">
            <summary>
            Asks user for a new tab name. Returns null on cancel
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClass.OnObjectReady">
            <summary>
            Call from derived classes when ready to operate.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClass.RegisterInstance``1(JetBrains.Lifetimes.Lifetime,System.String,JetBrains.UI.Icons.IconId)">
            <summary>
            Creates a tool window whose content is given by the <typeparamref name="TAutomation" /> object, factoring performed by the current component container for factoring.
            Use <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.FirstInstanceAutomation"/> for single-instance tool windows.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClass.RegisterEmptyContent``1(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Use <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor.EmptyContentAutomation"/> + <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor.EmptyContentParameter"/> wherever possible. This is a fallback for factoring a custom type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClass.RegisterEmptyContent(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.UIAutomation.IAutomation})">
            <summary>
            Use <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor.EmptyContentAutomation"/> + <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor.EmptyContentParameter"/> wherever possible. This is a fallback for factoring the view model in a custom way.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClasses.Item(JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor)">
            <summary>
            Gets the tool window class by its registered descriptor (the class on which you got the <see cref="T:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute"/>). Import it as a component into your component constructor.
            </summary>
            <seealso cref="M:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClasses.GetItem``1"/>
        </member>
        <member name="M:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClasses.GetItem``1">
            <summary>
            Gets the tool window class by its registered descriptor (the class on which you got the <see cref="T:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute" />), given by its type in the type parameter.
            </summary>
            <seealso cref="M:JetBrains.Application.UI.ToolWindowManagement.ToolWindowClasses.get_Item(JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor)" />
        </member>
        <member name="F:JetBrains.Application.UI.ToolWindowManagement.ToolWindowContentState.NotLoaded">
            <summary>
            The content has not loaded yet
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ToolWindowManagement.ToolWindowContentState.Loaded">
            <summary>
            The content has been loaded and alive
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ToolWindowManagement.ToolWindowContentState.Unloaded">
            <summary>
            The content was unloaded
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ToolWindowManagement.ToolWindowContentState.Restored">
            <summary>
            The content was restored (re-loaded)
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor">
            <summary>
            Base type for tool window descriptors
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor.EmptyContentAutomation">
            <inheritdoc cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation"/>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor.EmptyContentParameter">
            <inheritdoc cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentParameter"/>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptor.FirstInstanceAutomation">
            <inheritdoc cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.FirstInstanceAutomation"/>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.Icon">
            <summary>
            Gets or sets the tool window icon identifier class. An example is <see cref="T:JetBrains.Application.UI.Icons.CommonThemedIcons.CommonThemedIcons"/> nested classes.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation">
            <summary>
            Optional. If set to a type, must be an <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" />-derived type for the Tool Window Empty Content (if applicable, e.g. if the tol window frame is displayed for a multi-instance tabbed tool window which has no instances yet).
            This type would be factored as if a component, and a view would be rendered for this automation object for the empty content.
            A typical empty content is a textual cue banner with a hint on how this window should be invoked for something useful.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentParameter">
            <summary>
            Optional. Only applies if <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" /> is also set. This value would be passed as a parameter to the <see cref="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.EmptyContentAutomation" /> component factory. This allows to reuse the same empty content automation object for multiple tool windows with customizing it for the window's needs.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.FirstInstanceAutomation">
            <summary>
            Optional. If set to a type, must be an <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" />-derived type for the automatically created first instance of this tool window (in case of a single-instance tool window, the only instance).
            This type would be factored as if a component, and a view would be rendered for this automation object for the empty content.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ToolWindowManagement.ToolWindowFrameContentPlaceholderAutomation.IsAllowAutorestore">
            <summary>
            Gets or sets whether the content should be restored as soon as presenter is visible
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.ToolWindowManagement.ToolWindowOpenTabBehaviour.ReplaceUnpinned">
            <summary>
            Removes previous unpinned tab and add the new one 
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.TreeBrowser.TreeModelBrowser.TREE_MODEL_NODE">
            <summary>
            The one and only of <see cref="F:JetBrains.Application.UI.TreeBrowser.TreeModelBrowser.TREE_MODEL_NODES"/>, if single.
            DO NOT supply this rule, only consume.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.CascadeGroup">
            <summary>
            Holds list of groups for cascading grouping
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.CascadeGroup.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes new instance of CascadeGroup
            </summary>
            <param name="groups">Collection of groups</param>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.CascadeGroup.Groups">
            <summary>
            Gets instance of <see cref="T:System.Collections.ICollection"/> with groups
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1">
            <summary>
            Provides grouping objects for items
            </summary>
            <typeparam name="TItem">Type of item for which groups are provided</typeparam>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1.ExtractGroupObject(`0)">
            <summary>
            Extracts group information from specified item
            </summary>
            <param name="item">Item to extract group from</param>
            <returns>Group for specified item</returns>
            <remarks>Implementations can return CascadeGroup object if it wishes to return multiply nested groups, 
            e.g. list of containing folders for a file</remarks>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.IPrecomputeTreeGroupProvider`1">
            <summary>
            The same as <see cref="T:JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1"/>, but allows precomputation of group objects to improve performance or provide additional features.
            </summary>
            <typeparam name="TItem">Type of item for which groups are provided</typeparam>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.IPrecomputeTreeGroupProvider`1.Precompute(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Called before quering groups for individual objects and allows to precompute them.
            </summary>
            <param name="items">All items in the tree (both visible and filtered)</param>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.IPrecomputeTreeGroupProvider`1.Drop">
            <summary>
            Drop precomputed groups.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.New.ITreeModelNode.Reinitialize">
            <remarks>
            Performance optimization.
            Original approach based on subscriptions to Model.Filter was way too slow.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.New.IEvaluatedOnDemandTreeModel.BeginEvaluate(System.Object,System.Boolean,System.Action)">
            <returns>true if evaluation started</returns>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.New.LiveTreeModel.RootKey">
            <summary>
            Nodes residing inside <see cref="P:JetBrains.Application.UI.TreeModels.New.ITreeModel.ChildrenRaw" /> collection don't have 
            their <see cref="P:JetBrains.Application.UI.TreeModels.New.ITreeModelNode.Parent" /> property set to anything. We do have to
            monitor them as as any other node of the tree. So we use this fake node as a replacement
            for the absent parent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.SubscribeToChangesAndBuildTree(JetBrains.Application.UI.TreeModels.Revised.TreeModel{`1})">
            <remarks>Happens when Root.Children is evaluated</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.ManualChangeMitigation">
            <summary>
            Informs the <see cref="T:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2"/> to skip changes to <seealso cref="P:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.Items"/>.
            </summary>
            <remarks>
            Use this if you are about to perform an action which will modify <seealso cref="P:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.Items"/> and you know how
            to handle the changes faster than the default handler would. You must properly handle changes so that
            after the cookie is released the structure of tree MUST correspond to the actual <seealso cref="P:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.Items"/>.
            Make sure no unexpected changes to <seealso cref="P:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.Items"/> are made while you are holding the cookie.   
            </remarks>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.IGroupingNode.IsLastNodeInChain">
            <summary>
            Indicates whether a node is the last one returned by <see cref="T:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.IGroupProvider"/> that created it.
            When <value>true</value>, children of the node will created by the next <see cref="T:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.IGroupProvider"/>, if any. 
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.GroupProvider.TreeManagement.RemoveNodeWithEmptyGroups(`1)">
            <summary>
            Removes <paramref name="node"/> along with any would-be-empty grouping nodes up in the hierarchy.
            </summary>
            <returns>The first node in the hierarchy that was not removed up.</returns>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.Revised.GroupedChildrenInitializer`2.GroupProvider.TreeManagement.IsMeaningfulNode(`1)">
            <remarks>
            It would be great to make this method an extension method for <typeparamref name="TNode"/>,
            however C# compiler does not support type inference based on constraints.
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.Revised.ITreeModelNodeChildrenInitializer`1">
            <summary>
            Interface to abstract away how children of a <see cref="T:JetBrains.Application.UI.TreeModels.Revised.ITreeModelNode"/> are initialized.
            The purpose is to be able to decompose tree model into reusable components, e.g. have
            different initializers for filtered and sorted children, and be able to chain them as necessary.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.RecursionPreventionStyle">
            <summary>
            Specifies recursion prevention strategy
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.TreeModels.RecursionPreventionStyle.None">
            <summary>
            Do not prevent recursion
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.TreeModels.RecursionPreventionStyle.StopOnOccurrence">
            <summary>
            Stop expanding children if data value already present in one of the parent nodes
            </summary>
            <remarks>For example, stops at second "A" in the following chain "A,B,C,A"</remarks>
        </member>
        <member name="F:JetBrains.Application.UI.TreeModels.RecursionPreventionStyle.PreventOccurrence">
            <summary>Prevents the second occurrence of a node.</summary>
            <remarks>For example, chain "A,C,A" will become "A,C".</remarks>
        </member>
        <member name="F:JetBrains.Application.UI.TreeModels.RecursionPreventionStyle.StopOnDuplicatedOccurence">
            <summary>
            Stop expanding children if data value already present in any path
            </summary>
            <remarks>For example, tree
            A
            |---B
            |   |---C
            |
            |---B
            Second occurence of B will have no children  
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.TreeDemandModel">
            <summary>
            Describes model which is built on demand
            </summary>
            <remarks>Note, that default implementation of HasChildren retrieves children and checks count</remarks>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.TreeDemandModel2">
            <summary>
            A non-abstract tree demand model that has an event that asks you of the children for each of the nodes in the tree. The root elements are asked as children of <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeDemandModel2.#ctor">
            <summary>
            Constructs an empty model. Advise the <see cref="E:JetBrains.Application.UI.TreeModels.TreeDemandModel2.ChildrenWanted"/> event to proceed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeDemandModel2.#ctor(System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Subscribes a handler to the <see cref="E:JetBrains.Application.UI.TreeModels.TreeDemandModel2.ChildrenWanted"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeDemandModel2.#ctor(System.Func{System.Object,System.Collections.IEnumerable},System.Int32)">
            <summary>
            Subscribes a handler to the <see cref="E:JetBrains.Application.UI.TreeModels.TreeDemandModel2.ChildrenWanted"/> event. Expands the <paramref name="expandToLevel"/> levels of the model initially.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.TreeModels.TreeDemandModel2.ChildrenWanted">
            <summary>
            The model requests its children for a specific node, root is the <c>Null</c> datavalue.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeDemandModel2.Expand(System.Int32)">
            <summary>
            Expands the given number of the model levels. The “virtual root” is the zeroth level, the top-level nodes are the first level.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeDemandModel2.GetAllNodes(System.Int32)">
            <summary>
            BFS-walks all the nodes in the model down to the <see cref="!:levels"/> level.
            The demand items are retrieved if needed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeDemandModel2.ChildrenWantedEventArgs.Children">
            <summary>
            Children collection for this data value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeDemandModel2.ChildrenWantedEventArgs.DataValue">
            <summary>
            Data value for which the children should be retrieved.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.TreeModelBase">
            <summary>
            Provides base for all tree models
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModelBase.Roots">
            <summary>
            Gets read-only collection of model roots
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModelBase.RootsUnsorted">
            <summary>
            Gets unsorted read-only collection of model roots
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModelBase.InUpdate">
            <summary>
            Gets value indicating if update is currently running
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModelBase.Comparer">
            <summary>
            Gets or sets comparer for model nodes, which is used to setup order in the model
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.Update">
            <summary>
            Executes update forcibly on the tree model
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.UpdateCookie">
            <summary>
            Gets update cookie for "using" clause
            </summary>
            <returns>Instance of <see cref="T:System.IDisposable"/> object</returns>
            <remarks>Updates are not executed while cookie is held. When cookie is disposed all updates are run.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.BeginUpdate">
            <summary>
            Increments internal counter, which prevents updates if greater than zero
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.EndUpdate">
            <summary>
            Decrements internal counter, which prevents updates if greater than zero. 
            When counter reaches zero and update is needed, it is executed
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.NeedUpdate">
            <summary>
            Requests update. Update is executed immediately if not suspended by update counter, otherwise request for pending update is formed
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.TreeModels.TreeModelBase.Updating">
            <summary>
            Raised when update is about to happen
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.TreeModels.TreeModelBase.Updated">
            <summary>
            Raised when update has been finished
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.OnUpdating">
            <summary>
            Raises <see cref="E:JetBrains.Application.UI.TreeModels.TreeModelBase.Updating"/> event
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.OnUpdated">
            <summary>
            Raises <see cref="E:JetBrains.Application.UI.TreeModels.TreeModelBase.Updated"/> event
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.PerformUpdate">
            <summary>
            When implemented by derived type, performs actions required to update model
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.CreateNode(JetBrains.Application.UI.TreeModels.TreeModelNode,System.Object)">
            <summary>
            When implemented in the derived type, creates model node for the specified value in the specified parent node
            </summary>
            <param name="parent">Parent node</param>
            <param name="value">Data value</param>
            <returns>New instance of <see cref="T:JetBrains.Application.UI.TreeModels.TreeModelNode"/></returns>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.Insert(JetBrains.Application.UI.TreeModels.TreeModelNode,System.Object)">
            <summary>
            Creates and inserts new node for dataValue into the model
            </summary>
            <param name="parent">Parent node</param>
            <param name="dataValue">Data value</param>
            <returns>New instance of <see cref="T:JetBrains.Application.UI.TreeModels.TreeModelNode"/></returns>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.Remove(JetBrains.Application.UI.TreeModels.TreeModelNode)">
            <summary>
            Removes node from the model
            </summary>
            <param name="modelNode">Node to remove</param>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.Remove(System.Object)">
            <summary>
            Removes all nodes associated with specified dataValue from the model
            </summary>
            <param name="dataValue">Data value</param>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.GetNodeContainer(JetBrains.Application.UI.TreeModels.TreeModelNode)">
            <summary>
            Gets node which is container of the specified node
            </summary>
            <param name="node">Child node</param>
            <returns>Instance of <see cref="T:JetBrains.Application.UI.TreeModels.TreeModelNode"/> which contains specified node</returns>
            <remarks>This is not the same as getting Parent in the multi-model scenario. In simple models it just returns Parent.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.GetNodes(System.Object)">
            <summary>
            Gets collection of nodes associated with the specified dataValue
            </summary>
            <param name="dataValue">Data value</param>
            <returns>Collection of associated nodes</returns>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelBase.Clear">
            <summary>
            Clears the model, essentialy making it empty
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.TreeModelBase.TreeModelUpdateCookie">
            <summary>
            Helps managing updates on the model via "using" clause
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModel.Roots">
            <summary>
            Gets read-only collection of model roots
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModel.RootsUnsorted">
            <summary>
            Gets unsorted read-only collection of model roots
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModel.InUpdate">
            <summary>
            Gets value indicating if update is currently running
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModel.Comparer">
            <summary>
            Gets or sets comparer for model nodes, which is used to setup order in the model
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModel.Update">
            <summary>
            Executes update forcibly on the tree model
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModel.BeginUpdate">
            <summary>
            Increments internal counter, which prevents updates if greater than zero
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModel.EndUpdate">
            <summary>
            Decrements internal counter, which prevents updates if greater than zero. 
            When counter reaches zero and update is needed, it is executed
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.TreeModels.TreeModel.Updating">
            <summary>
            Raised when update is about to happen
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.TreeModels.TreeModel.Updated">
            <summary>
            Raised when update has been finished
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModel.GetNodeContainer(JetBrains.Application.UI.TreeModels.TreeModelNode)">
            <summary>
            Gets node which is container of the specified node
            </summary>
            <param name="node">Child node</param>
            <returns>Instance of <see cref="T:JetBrains.Application.UI.TreeModels.TreeModelNode"/> which contains specified node</returns>
            <remarks>This is not the same as getting Parent in the multi-model scenario. In simple models it just returns Parent.</remarks>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModel.GetNodes(System.Object)">
            <summary>
            Gets collection of nodes associated with the specified dataValue
            </summary>
            <param name="dataValue">Data value</param>
            <returns>Collection of associated nodes</returns>
        </member>
        <member name="T:JetBrains.Application.UI.TreeModels.TreeModelGrouping`1">
            <summary>
            Holds information about a particular grouping style
            </summary>
            <typeparam name="T">Type of items to process</typeparam>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelGrouping`1.#ctor(System.String)">
            <summary>
            Initializes new instance of TreeModelGrouping with specified name and group providers
            </summary>
            <param name="name">Name of grouping style</param>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelGrouping`1.#ctor(System.String,JetBrains.Application.UI.TreeModels.ITreeGroupProvider{`0}[])">
            <summary>
            Initializes new instance of TreeModelGrouping with specified name and group providers
            </summary>
            <param name="name">Name of grouping style</param>
            <param name="groups">Collection of <see cref="T:JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1"/> instances</param>
        </member>
        <member name="M:JetBrains.Application.UI.TreeModels.TreeModelGrouping`1.#ctor(System.String,System.Collections.Generic.ICollection{JetBrains.Application.UI.TreeModels.ITreeGroupProvider{`0}})">
            <summary>
            Initializes new instance of TreeModelGrouping with specified name and group providers
            </summary>
            <param name="name">Name of grouping style</param>
            <param name="groups">Collection of <see cref="T:JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1"/> instances</param>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModelGrouping`1.Name">
            <summary>
            Gets name of the grouping style
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.TreeModelGrouping`1.Groups">
            <summary>
            Gets collection of <see cref="T:JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1"/> instances
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.LiveTreeModelGrouping`1.Name">
            <summary>
            Gets name of the grouping style
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.TreeModels.LiveTreeModelGrouping`1.Providers">
            <summary>
            Gets collection of <see cref="T:JetBrains.Application.UI.TreeModels.ITreeGroupProvider`1"/> instances
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.AAutomation">
            <summary>
            Base implementation of <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" /> which handles dummy-implementing the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface. You may use this as a base if you would not like to implement the interface member in your own code.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.AutomationWrapper">
            <summary>
            Guises any object with an <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation"/> interface suitable for our MVVM UI.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.ControlWrapper">
            <summary>
            Wrapper for UI control used by common logic for passing it into framework-specific implementations.
            Wrapped instance is framework-specific 
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.EitherControl">
            <summary>
            Adapts the WinForms and Avalon controls to one another.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.UIAutomation.EitherControl.myControl">
            <summary>
            Stores the WinForms control, if explicitly inited.
            <see cref="F:JetBrains.Application.UI.UIAutomation.EitherControl.myControl"/> and <see cref="F:JetBrains.Application.UI.UIAutomation.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.UIAutomation.EitherControl.myElement">
            <summary>
            Stores the Avalon element, if explicitly inited.
            <see cref="F:JetBrains.Application.UI.UIAutomation.EitherControl.myControl"/> and <see cref="F:JetBrains.Application.UI.UIAutomation.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.UIAutomation.EitherControl.myElementHost">
            <summary>
            Stores the element host that adapts an Avalon control to the WinForms host, in case we were created with an Avalon control. Lazy-created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.UIAutomation.EitherControl.myWindowsFormsHost">
            <summary>
            Stores the winforms host that adapts a WinForms control to the Avalon host, in case we were created with a WinForms control. Lazy-created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.UIAutomation.EitherControl.myAutomation">
            <summary>
            The automation (viewmodel) object to which a data template should be applied to present it correctly.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes from a WinForms control.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes from an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.#ctor(JetBrains.Application.UI.UIAutomation.IAutomation)">
            <summary>
            Initializes from an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.#ctor(JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.UIAutomation.IAutomation)">
            <summary>
            Initializes from an Avalon element.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.Control">
            <summary>
            Gets the contained either-control as a Windows Forms control, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.Element">
            <summary>
            Gets the contained either-control as an Avalon UI element, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.Automation">
            <summary>
            Returns the automation object if incapsulated by this control. It is never autogenerated.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.IsAvalon">
            <summary>
            Gets whether this natively is an Avalon Element (or an Automation object), and using it as a WinForms Control will cause wrapping into a <see cref="T:System.Windows.Forms.Integration.ElementHost"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.IsWinForms">
            <summary>
            Gets whether this natively is a WinForms Control, and using it as an Avalon Element will cause wrapping into a <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.IsAutomation">
            <summary>
            <para>Gets whether this control is given as an automation object and should be placed as a content into a content control to be presented correctly.</para>
            <para>Note that getting such a control as a WinForms control will probably not work correctly.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.IsWrapperCreated">
            <summary>
            Gets whether this control was ever requested in a non-native type, for which a wrapper has been created.
            If you'd like to be more specific about which kind of wrapper was created, it can be deduced from the <see cref="P:JetBrains.Application.UI.UIAutomation.EitherControl.IsAvalon"/>/<see cref="P:JetBrains.Application.UI.UIAutomation.EitherControl.IsWinForms"/> properties.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.HasUiElement">
            <summary>
            Gets whether this control has a Wpf element, no wrapper will be created.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.UIAutomation.EitherControl.IsDisposed">
            <summary>
            Gets whether the WinForms controls have been disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.FromObject(System.Object)">
            <summary>
            Detects the control type, throws if neither. Calls the appropriate ctor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.EitherControl.DockedWindowsFormsHost">
            <summary>
            Represents workaround for such cases when Windows Forms control is docked or anchored to all available space.
            TODO: turn into EitherControlWinFormsInsideAvalon in UIInteractive.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.DockedWindowsFormsHost.WhenLoaded(System.Windows.FrameworkElement,JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.Lifetimes.Lifetime})">
            <summary>
            It's a copy of the <code>JetBrains.UI.Extensions.AvalonEx.WhenLoaded</code> method
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.DockedWindowsFormsHost.ScaleChild(System.Windows.Vector)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.DockedWindowsFormsHost.GetDynamicDpiForElement">
            <summary>
            Gets the current dynamic DPI for the monitor on which our element is being rendered.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControl.DockedWindowsFormsHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.ITemporaryFocusHolder">
            <summary>
            This marker in WPF visual tree means that focus is set to a temporary control and as soon as its
            descendant in visual tree is loaded it should move focus to itself (if it is a focusable control).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.EitherControlAutomation">
            <summary>
            Wraps an <see cref="T:JetBrains.Application.UI.UIAutomation.EitherControl" /> with an <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" /> interace.
            All APIs should gradually be migrated from <see cref="T:JetBrains.Application.UI.UIAutomation.EitherControl" /> to <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" />.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControlAutomation.#ctor(JetBrains.Application.UI.UIAutomation.EitherControl)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControlAutomation.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.EitherControlEx.GetWinFormsControlWithViewsRegistrySupport(JetBrains.Application.UI.UIAutomation.EitherControl,JetBrains.Lifetimes.Lifetime,JetBrains.Application.UI.Automation.IAutomationViewsRegistry,JetBrains.Application.DataContext.DataContexts)">
            <summary>
            Renders a Windows Forms view for an Either Control. Besides what <see cref="P:JetBrains.Application.UI.UIAutomation.EitherControl.Control" /> does, attempts to create a Windows Forms view for the automation object if the Either Control is wrapping an automation object.
            </summary>
            <param name="eithercontrol"></param>
            <param name="lifetime"></param>
            <param name="viewsreg">Looks up winforms view, OK if missing.</param>
            <param name="datacontexts">Gets the component container for factoring from here. If omitted, view ctor won't be able to import components.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.FutureContentAutomation">
            <summary>
            When you have an asynchronously created automation object, wrap it with this class to have some automation object for use immediately; when your content is ready, a view for it would be rendered.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.FutureContentAutomation.#ctor(System.Threading.Tasks.Task{JetBrains.Application.UI.UIAutomation.IAutomation},JetBrains.Application.Threading.IThreading)">
            <inheritdoc />
        </member>
        <member name="F:JetBrains.Application.UI.UIAutomation.FutureContentAutomation.ContentProperty">
            <summary>
            The content gets placed here, on the main thread, when it is ready.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.FutureContentAutomation.GetContentAsync">
            <summary>
            Gets the user content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.FutureContentAutomation.WrapIfNeeded(System.Threading.Tasks.Task{JetBrains.Application.UI.UIAutomation.IAutomation},JetBrains.Application.Threading.IThreading)">
            <summary>
            If the content is ready, returns it without wrapping. Otherwise returns a wrapper instance.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.IAutomation">
            <summary>
            Base interface for Automation Objects (roughly corresponding to the ViewModel tier of MVVM) which would like to participate in autodiscovery of automation object views.
            </summary>
            <remarks>The <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> is a dummy inclusion to avoid memory leaks on part of WPF because it would use <see cref="T:System.ComponentModel.TypeDescriptor" />'s means for tracking possible value changes in absence of this interface, which causes the automation objects to be leaked over eternal references from static objects.</remarks>
        </member>
        <member name="T:JetBrains.Application.UI.UIAutomation.NestedAutomationWrapper">
            <summary>
            When you need to swap the actual automation objects (e.g. want to change the instance when presentation changes), but you need to hand out one single <see cref="T:JetBrains.Application.UI.UIAutomation.IAutomation" /> instance.
            NOTE might show an error banner if you do not supply it with any automation object. Supply an empty automation if you want it empty.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.NestedAutomationWrapper.#ctor">
            <summary>
            Creates an empty wrapper, set/bind to its prop. Will show an error banner initially.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.NestedAutomationWrapper.#ctor(JetBrains.Application.UI.UIAutomation.IAutomation)">
            <summary>
            Sets the initial content. Set/bind to its prop to change.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:JetBrains.Application.UI.UIAutomation.NestedAutomationWrapper.#ctor(JetBrains.DataFlow.IProperty{JetBrains.Application.UI.UIAutomation.IAutomation})">
            <summary>
            Gives the live content. Will be directly exposed as a property. This object is not lifetimed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.UIAutomation.NestedAutomationWrapper.Content">
            <summary>
            The nested automation object. Might change LIVE.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Utils.MatchingInfo">
            <summary>
            Data class that describes all necessary info to score an item. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Utils.ScreenUtil">
            <summary>
            ScreenUtil is to be used instead of System.Windows.Forms.Screen.
            It uses Windows API for fast and GC-free access to screen parameters.
            </summary>
            <remarks>
            RSRP-464553 Moving IDE window causes VS to freeze and stutter.
            Windows 10 Creators Update (version 1703) has an issue: Screen ctor calls WindowsGraphics.CreateMeasurementWindowsGraphics 
            and that could force GC (see System.Internal.HandleCollector)
            A new Screen object is created for each call to Screen.GetBounds and Screen.GetWorkingArea static methods.
            In its turn Screen.GetBounds is called by DockingLayouter for each movement... GC becomes unavoidable.
            </remarks>
        </member>
        <member name="T:JetBrains.Application.UI.Utils.SetUISmoothnessToolkitThread">
            <summary>
            Affines <see cref="T:JetBrains.Util.Concurrency.UiSmoothnessToolkit" /> to the thread it should be checking.
            This does not only apply to UI Interactive contexts, since one of its main clients is Rider which is non-interactive (but its main thread dispatches into protocol and must be responsive).
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Utils.ViewModelUtil.CommandSink">
            <summary>
            This implementation of ICommandSink can serve as a base
            class for a ViewModel or as an object embedded in a ViewModel.  
            It provides a means of registering commands and their callback 
            methods, and will invoke those callbacks upon request.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Utils.ViewModelUtil.ICommandSink">
            <summary>
            Represents an object that is capable of being notified of 
            a routed command execution by a CommandSinkBinding.  This
            interface is intended to be implemented by a ViewModel class
            that honors a set of routed commands.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Utils.ViewModelUtil.ICommandSink.CanExecuteCommand(System.Windows.Input.ICommand,System.Object,System.Boolean@)">
            <summary>
            Returns true if the specified command can be executed by the command sink.
            </summary>
            <param name="command">
            The command whose execution status is being queried.
            </param>
            <param name="parameter">
            An optional command parameter.
            </param>
            <param name="handled">
            Set to true if there is no need to continue querying for an execution status.
            </param>
        </member>
        <member name="M:JetBrains.Application.UI.Utils.ViewModelUtil.ICommandSink.ExecuteCommand(System.Windows.Input.ICommand,System.Object,System.Boolean@)">
            <summary>
            Executes the specified command.
            </summary>
            <param name="command">
            The command being executed.
            </param>
            <param name="parameter">
            An optional command parameter.
            </param>
            <param name="handled">
            Set to true if the command has been executed and there is no need for others to respond.
            </param>
        </member>
        <member name="T:JetBrains.Application.UI.Validation.FormValidators">
            <summary>
            Basic impl for non-interactive case which does not do anything.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Validation.FormValidators.GetOrCreate(System.Windows.Forms.Control)">
            <summary>
            Gets (or creates, if missing) a form validator for the given form or control.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.FormValidators.DummyFormValidator.JetBrains#Application#UI#Validation#IFormValidator#Form">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Validation.FormValidators.DummyFormValidator.JetBrains#Application#UI#Validation#IFormValidator#Validators">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Validation.FormValidators.DummyFormValidator.JetBrains#Application#UI#Validation#IFormValidator#ValidatorProviders">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Application.UI.Validation.FormValidators.DummyFormValidator.JetBrains#Application#UI#Validation#IFormValidator#Severity">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Validation.FormValidators.DummyFormValidator.JetBrains#Application#UI#Validation#IFormValidator#Update">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Application.UI.Validation.FormValidators.DummyFormValidator.JetBrains#Application#UI#Validation#IFormValidator#ShowMessage">
            <inheritdoc />
        </member>
        <member name="E:JetBrains.Application.UI.Validation.FormValidators.DummyFormValidator.JetBrains#Application#UI#Validation#IFormValidator#SeverityChanged">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Application.UI.Validation.IFormValidator">
            <summary>
            Manages a number of validators on the form controls that display error glyphs and prevent submission unless the validation passes.
            The validators may come from attributes on the form controls, from <see cref="T:JetBrains.Application.UI.Validation.IValidatorProvider"/> implemented by form or its controls, and from manual submissions to the <see cref="P:JetBrains.Application.UI.Validation.IFormValidator.Validators"/> collection.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IFormValidator.Form">
            <summary>
            Gets the owning form.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IFormValidator.Validators">
            <summary>
            Gets the mutable validators collection.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IFormValidator.ValidatorProviders">
            <summary>
            Gets the mutable validator providers collection.
            Those are also collected automatically from the form and all of its controls.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IFormValidator.Severity">
            <summary>
            Gets the overall severity of the form validator, which is the maximum severity of all the validators.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Validation.IFormValidator.Update">
            <summary>
            Forces revalidation on all the controls.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Validation.IFormValidator.ShowMessage">
            <summary>
            Reports the current validity status in a message box (including the valid state).
            The valid and error states have just an ok button, while the warnings have the yes-no buttons.
            The return value is either the current <see cref="P:JetBrains.Application.UI.Validation.IFormValidator.Severity"/>, or a lower severity if the user has clicked “Yes” on the warning confirmation dialog and has thus discarded the warnings.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Validation.IFormValidator.SeverityChanged">
            <summary>
            Fires when <see cref="P:JetBrains.Application.UI.Validation.IFormValidator.Severity"/> changes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Validation.IValidator">
            <summary>
            Represents a validation rule usage
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IValidator.Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IValidator.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IValidator.Layouter">
            <summary>
            Gets the layouter that positions the validator.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IValidator.WindowlessControl">
            <summary>
            Gets the presentation of the validator.
            <c>Null</c> means that the validator should not be displayed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Validation.IValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.Application.UI.Validation.IValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.Application.UI.Validation.IValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Validation.IValidator.SeverityChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.Severity"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Validation.IValidator.MessageChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.Message"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Validation.IValidator.LayouterChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.Layouter"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.Application.UI.Validation.IValidator.WindowlessControlChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.Application.UI.Validation.IValidator.WindowlessControl"/> property changes its value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Validation.IValidatorProvider">
            <summary>
            When implemented by a form or a control, populates the <see cref="T:JetBrains.Application.UI.Validation.IFormValidator"/> with custom validators.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.Validation.IValidatorProvider.Validators">
            <summary>
            Gets the list of validators to add.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Validation.ValidatorSeverity">
            <summary>
            Defines the severity of a validator.
            The icon and OK-button enabled state depends on this value.
            The integer values are sorted in the order of increasing severity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Validation.ValidatorSeverity.None">
            <summary>
            No warning or error, the glyph is not visible by default.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Validation.ValidatorSeverity.Warning">
            <summary>
            A warning, the glyph is visible by default.
            Does nothing on form submission.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Validation.ValidatorSeverity.ImportantWarning">
            <summary>
            An important warning, the glyph is visible by default.
            Confirms on form submission.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Validation.ValidatorSeverity.Error">
            <summary>
            A fatal error, the glyph is visible by default.
            Prevents the form submission.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Validation.ValidatorSeverityHelper">
            <summary>
            Helper utilities that provide additional data related to the <see cref="T:JetBrains.Application.UI.Validation.ValidatorSeverity"/> constants.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Validation.ValidatorSeverityHelper.CanIgnore(JetBrains.Application.UI.Validation.ValidatorSeverity)">
            <summary>
            Gets whether the user is allowed to reduce the validator severity by one level by pressing the Ignore button.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Validation.ValidatorSeverityHelper.SeverityToMessagePrefix(JetBrains.Application.UI.Validation.ValidatorSeverity)">
            <summary>
            Messagebox text for this severity.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.Validation.ValidatorSeverityHelper.SeverityToMessageDisplay(JetBrains.Application.UI.Validation.ValidatorSeverity)">
            <summary>
            Whether to show individual validator messages, and how many, if yes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.Validation.ValidatorSeverityHelper.ShowValidatorMessages">
            <summary>
            Whether to show any validator messages in the messagebox.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Validation.ValidatorSeverityHelper.ShowValidatorMessages.None">
            <summary>
            No validator messages, just the title.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Validation.ValidatorSeverityHelper.ShowValidatorMessages.One">
            <summary>
            The first message only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.Validation.ValidatorSeverityHelper.ShowValidatorMessages.All">
            <summary>
            Include the list of all messages.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.WindowManagement.FrameFocusHelper">
            <summary>
            Base dummy impl.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.WindowManagement.HideFlags">
            <summary>
            Specifies when a popup window should be hidden.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.None">
            <summary>
            Manual deactivation only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.Scrolling">
            <summary>
            The context owner has been scrolled.
            Not very useful, as <see cref="T:JetBrains.Application.UI.PopupLayout.IPopupWindow"/> can track its position after the scrolling.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.Escape">
            <summary>
            The <see cref="F:System.Windows.Forms.Keys.Escape"/> has been pressed in the context owner.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.AnyOtherAction">
            <summary>
            Something has happened to the context owner, which does not fall into any of the other flags.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.SelectionChanged">
            <summary>
            Selection has changed in the context owner.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.FocusLoss">
            <summary>
            The popup window has lost focus.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.Deactivated">
            <summary>
            The context owner has lost focus.
            Ignored if the popup window grabs focus initially.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.HideFlags.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.WindowManagement.WindowAnchoringRect">
            <summary>
            An anchoring rectangle that tracks the visual position of some window on the screen.
            For child windows, tracks the movement of their parents.
            After the window ceises to exist, reports the bounds it last had at life.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowAnchoringRect.#ctor(JetBrains.Lifetimes.Lifetime,System.Void*,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="window">The window to attach to and track its window rectangle.</param>
            <param name="windowsHookManager">Optional. Hooks engine, for tracking the window position live. If omitted, the rectangle will snap to the initial window position and won't follow window moves.</param>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowAnchoringRect.#ctor(JetBrains.Lifetimes.Lifetime,System.Windows.Forms.IWin32Window,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="window">The window to attach to and track its window rectangle.</param>
            <param name="windowsHookManager">Optional. Hooks engine, for tracking the window position live. If omitted, the rectangle will snap to the initial window position and won't follow window moves.</param>
        </member>
        <member name="P:JetBrains.Application.UI.WindowManagement.WindowAnchoringRect.WindowHandle">
            <summary>
            Gets the Win32 handle of the window being watched.
            Invalid after the object is disposed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowAnchoringRect.Update">
            <summary>
            Forces synchronization to the current visual position of the window.
            Could be used when hooks engine is not available and the window is not tracked automatically.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowAnchoringRect.AnchorToPrimaryMainWindowSafe(JetBrains.Lifetimes.Lifetime,JetBrains.Application.StdApplicationUI.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Gets an anchoring rect that tracks the primary main window visual position.
            Handles the cases when the main window is not yet/already operable, or when it's not available in the current configuration.
            </summary>
            <param name="lifetime"></param>
            <param name="mainwin">The main window, if available. Otherwise, the current display will be used.</param>
            <param name="windowsHookManager">Hooks engine, to enable tracking the main window position LIVE.</param>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowAnchoringRect.AnchorToActiveMainWindowSafe(JetBrains.Lifetimes.Lifetime,JetBrains.Application.StdApplicationUI.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Gets an anchoring rect that tracks the current active main window visual position.
            Handles the cases when the main window is not yet/already operable, or when it's not available in the current configuration.
            Anchor to the window that is active at the moment of creation, does not track active window changes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.UI.WindowManagement.WindowFrame">
            <summary>
            <para>Represents the frame that sites active controls, for example, the text control. This frame knows whether it's visible on screen, and sometimes it can cause the environment to switch so that the frame became visible.</para>
            <para>In Visual Studio, an example of such frames is an editor tab or a tool window, in which case this implementation is based on the VS Window Frame interface.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.WindowFrame.Bag">
            <summary>
            Allows to attach payload. For instance, the raw VS Window Frame lives here.
            </summary>
        </member>
        <member name="P:JetBrains.Application.UI.WindowManagement.WindowFrame.Lifetime">
            <summary>
            Window frame lifetime.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.WindowFrame.Closed">
            <summary>
            <para>Notifies the hosted control that the frame has been closed and the content is illegitimate from now on.</para>
            <para>Not guaranteed to fire.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.WindowFrame.SwitchToFrameRequested">
            <summary>
            Tries to make <see cref="F:JetBrains.Application.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="F:JetBrains.Application.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.WindowFrame.IsVisibleOnScreen">
            <summary>
            <para>Gets whether the frame is currently visible onscreen, which tries to take into account not only the visibility flag of the window, but also whether the window layout allows content control to be visible onscreen.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.WindowFrame.RootParentHwnd">
            <summary>
            <para>Gets the root parent HWND for this window frame. This window sho-uld be used as owner for window popups over the frame content.</para>
            <para>The root parent window is the window that has no parent (see <see cref="F:JetBrains.Interop.WinApi.GetAncestorFlags.GA_ROOT"/>) and whose descendant “contains” this frame. For HWND-based UI, it's the top-level window containing the HWND of the frame. For Avalon UI, it's the top-level window containing the HWND presentation source of the UI element (or <c>Null</c>, if the element is not parented by a HWND presentation source).</para>
            <para>Could be <c>Null</c> if the frame is not hosted on an HWND or the frame implementation cannot provide this value. Could change if the frame is reparented into another top-level window (eg floating a VS10 text view element).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.WindowFrame.UiElement">
            <summary>
            Gets the UI element that represents the window frame, in either UI framework, if exposed by the window frame.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowFrame.CreateDummyFrame(JetBrains.Application.Threading.IThreading)">
            <summary>
            Creates a dummy window frame that always thinks it's visible.
            </summary>
            <param name="threading"></param>
        </member>
        <member name="F:JetBrains.Application.UI.WindowManagement.WindowFrameEx.ParentWindowFrame">
            <summary>
            In a window frame created as a child frame, points to the parent window frame.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowFrameEx.CreateChildFrame(JetBrains.Application.UI.WindowManagement.WindowFrame)">
            <summary>
            Creates a new child window frame in a window frame, which always switches in sync with the parent window frame.
            Could be useful if you need to place two windowframed entities (eg text controls) in the same window frame.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowFrameInteractiveEx.AttachToHwndStatic(JetBrains.Application.UI.WindowManagement.WindowFrame,System.Windows.Forms.IWin32Window)">
            <summary>
            Assigns a HWND to the HWND-based window frame.
            The frame will not listen to changes in parent windows chain or visibility, hence “static”, but it does not leak any system-wide event handlers if not disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.Application.UI.WindowManagement.WindowFrameInteractiveEx.AttachToRootParentLive(JetBrains.Application.UI.WindowManagement.WindowFrame,JetBrains.Lifetimes.Lifetime,System.Void*,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            Takes a sample HWND from within the frame (or the frame itself, but could be a content window in it), watches changes in its parenting, keeps the <see cref="F:JetBrains.Application.UI.WindowManagement.WindowFrame.RootParentHwnd" /> up to date.
            Such a frame MUST be disposed of.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons">
             <summary>
            	<para>
            		<para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see>.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
            	</para>
            </summary>
            <remarks>
            	<para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
            	<para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
            	<h1>XAML</h1>
            	<para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
            	<para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"></see> property to the ThemedIconExtension markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons"></see> class) as a parameter.</para>
            	<para>Example:</para>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:UsageStatisticsThemedIcons+Trinity}" /&gt;</code>
            	<h1>Attributes</h1>
            	<para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
            	<para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"></see> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons"></see> class.</para>
            	<para>Example:</para>
            	<code>[Item(Name="Sample", Icon=typeof(UsageStatisticsThemedIcons.Trinity))]</code>
            	<h1>CodeBehind</h1>
            	<para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
            	<para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"></see>, statically defined in <see cref="T:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons"></see> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons"></see>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"></see> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"></see> to use with GDI+ / Windows Forms.</para>
            	<para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.Application.Icons.IThemedIconManager"></see> and its extensions for the related facilities.</para>
            	<para>Example:</para>
            	<code>// Getting IconId identifier object to use with APIs
            IconId iconid = UsageStatisticsThemedIcons.Trinity.Id;</code>
            	<code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = new JetBrains.Application.Icons.CompiledIconsCs.CompiledIconCsId(typeof(UsageStatisticsThemedIcons.Trinity));</code>
            	<code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
            	<code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;UsageStatisticsThemedIcons.Trinity&gt;()</code>
            	<h1>Icons Origin</h1>
            	<para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage">
             <summary>
            	<para>
            		<para>ProductUsagePage Themed Icon autogenerated identifier class.</para>
            		<para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected, use the identifier object in the <see cref="F:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage.Id"></see> field of the identifier class.</para>
            		<para>
            			<code>
            
            
            33333333333333333333333333333333
            22`-                        -`22
            yy `~;`                  `;;` yy
            kk```-|c-``````````````.?7-```kk
            hh`````:3l,``````````:J5_`````hh
            66.......~eu~'.....~fV;'......66
            bb---------=j5!--;2y+---------bb
            dd:::::::::::ruuuuc:::::::::::dd
            mm::::::::::::::::::::::::::::mm
            DD____________________________DD
            DD^^^^^^^^^^^^^^^^^^^^^^^^^^^^DD
            WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:UsageStatisticsThemedIcons+ProductUsagePage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(UsageStatisticsThemedIcons.ProductUsagePage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = UsageStatisticsThemedIcons.ProductUsagePage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;UsageStatisticsThemedIcons.ProductUsagePage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage.Id">
             <summary>
            	<para>
            		<para>ProductUsagePage Themed Icon autogenerated identifier object.</para>
            		<para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"></see> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage"></see> identifier class.</para>
            		<para>
            			<code>
            
            
            33333333333333333333333333333333
            22`-                        -`22
            yy `~;`                  `;;` yy
            kk```-|c-``````````````.?7-```kk
            hh`````:3l,``````````:J5_`````hh
            66.......~eu~'.....~fV;'......66
            bb---------=j5!--;2y+---------bb
            dd:::::::::::ruuuuc:::::::::::dd
            mm::::::::::::::::::::::::::::mm
            DD____________________________DD
            DD^^^^^^^^^^^^^^^^^^^^^^^^^^^^DD
            WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
            
            
            </code>
            		</para>
            	</para>
            </summary>
            <remarks>
            	<para>For details on Themed Icons and their use, see Remarks on the outer class.</para>
            </remarks>
            <example>
            	<code>&lt;Image Source="{icons:ThemedIcon myres:UsageStatisticsThemedIcons+ProductUsagePage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
            	<code>[Item(Name="Sample", Icon=typeof(UsageStatisticsThemedIcons.ProductUsagePage))]        // C# Type attribute</code>
            </example>
            <example>
            	<code>IconId iconid = UsageStatisticsThemedIcons.ProductUsagePage.Id;        // IconId identifier object</code>
            </example>
            <example>
            	<code>themediconmanager.GetIcon&lt;UsageStatisticsThemedIcons.ProductUsagePage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage.Load_Color">
            <summary>Loads the image for Themed Icon ProductUsagePage theme aspect Color.</summary>
        </member>
        <member name="M:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage.Load_Gray">
            <summary>Loads the image for Themed Icon ProductUsagePage theme aspect Gray.</summary>
        </member>
        <member name="M:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage.Load_GrayDark">
            <summary>Loads the image for Themed Icon ProductUsagePage theme aspect GrayDark.</summary>
        </member>
        <member name="M:JetBrains.Application.Src.UI.Icons.UsageStatisticsThemedIcons.ProductUsagePage.GetThemeImages">
            <summary>Returns the set of theme images for Themed Icon ProductUsagePage.</summary>
        </member>
        <member name="F:JetBrains.Application.Updates.ProductUpdateInfo.NewMarketingVersion">
            <summary>
            Version marketing string
            </summary>
        </member>
        <member name="F:JetBrains.Application.Updates.ProductUpdateInfo.WhatsNewHtmlContent">
            <summary>
            Optional What's New content in HTML syntax
            </summary>
        </member>
        <member name="P:JetBrains.UI.StdApplicationUI.IWpfMainWindow.MainWpfWindow">
            <summary>
            Gets the main window of the application as a WPF <see cref="T:System.Windows.Window"/> object.
            </summary>
            <remarks>In the current standalone application implementation, it is always non-NULL and set to the same instance. However, to prepare clients for possible multi-main-window environments, it's a live property.</remarks>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.BindingChildrenProvider">
            <summary>
            Represents implementation to provide children via binding
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.TreeGrid.SelfreferenceChildrenProvider">
            <summary>
            Represents fallback implementation to detect children automatically.
            The provider detects 'children property' if type has a property 
            of IEnumerable or Array with the same type or close one.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.UIText">
            <summary>
            Represents text with UI semantic definitions
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.UIText.Empty">
            <summary>
            Empty instance of UIText
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.UIText.Changed">
            <summary>
            Occurs when something in the text has been changed
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.UIText.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.UIText.Definitions">
            <summary>
            Semantic definitions
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.UIText.Text">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.UIText.Length">
            <summary>
            Gets length of the text
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.Regular(System.String,System.Object,JetBrains.UI.Controls.Implication,System.Action)">
            <summary>
            Appends the current object
            </summary>
            <param name="text">Text to append</param>
            <param name="implication">Metadata of the appended text</param>
            <param name="click">Click callback</param>
            <param name="tooltip">Tooltip</param>
            <returns>The same object for method chaining</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.Append(System.String,System.Object,JetBrains.UI.Controls.Implication,System.Action)">
            <summary>
            Appends the current object
            </summary>
            <param name="text">Text to append</param>
            <param name="implication">Metadata of the appended text</param>
            <param name="click">Click callback</param>
            <param name="tooltip">Tooltip</param>
            <returns>The same object for method chaining</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.Highlighted(System.String,JetBrains.UI.Controls.Implication,System.Object,System.Action)">
            <summary>
            Appends highlighted text
            </summary>
            <param name="text">Text to append</param>
            <param name="additional">Additional "metainfo"</param>
            <param name="tooltip">Tooltip</param>
            <param name="click">Click callback</param>
            <returns>The same object for method chaining</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.Clickable(System.String,System.Action,JetBrains.UI.Controls.Implication,System.Object)">
            <summary>
            Appends clickable text
            </summary>
            <param name="text">Text to append</param>
            <param name="additional">Additional "metainfo"</param>
            <param name="tooltip">Tooltip</param>
            <param name="click">Click callback</param>
            <returns>The same object for method chaining</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.Define(System.Int32,System.Int32,JetBrains.UI.Controls.Implication,System.Object,System.Action)">
            <summary>
            Adds a new definition on the current text
            </summary>
            <param name="implication">Implication</param>
            <param name="tooltip">Tooltip</param>
            <param name="click">Click callback</param>
            <param name="start">Index in the text where definition starts</param>
            <param name="count">Length of text part</param>
            <returns>The same object for method chaining</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.Define(System.String,System.StringComparison,JetBrains.UI.Controls.Implication,System.Object,System.Action)">
            <summary>
            Search the given pattern in the current text and add definitions to the found parts
            </summary>
            <param name="implication">Implication</param>
            <param name="tooltip">Tooltip</param>
            <param name="click">Click callback</param>
            <param name="searchText">Pattern to search</param>
            <param name="stringComparison">StringComparison to search within string content</param>
            <returns>The same object for method chaining</returns>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.op_Implicit(System.String)~JetBrains.UI.Controls.UIText">
            <summary>
            Implicit conversion from string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Controls.UIText.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Implication">
            <summary>
            Represents meaning of the text definition (in other words, metadata)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Implication.None">
            <summary>
            Regular text
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Implication.Highlight">
            <summary>
            Highlighted (or selected) text
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Implication.Important">
            <summary>
            Indicates of importance. 
            It can be used to do smart-trimming with ensuring of some important part to be visible
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.Implication.Clickable">
            <summary>
            Clickable text (can be used to generate hyperlink or kind of buttons)
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.UITextDefinition">
            <summary>
            Represents definition on text range
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.UITextDefinition.Start">
            <summary>
            Start of range on the text
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.UITextDefinition.Count">
            <summary>
            Length of range on the text
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.UITextDefinition.Implication">
            <summary>
            Meaning of the text definition
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.UITextDefinition.Click">
            <summary>
            Click callback
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.UITextDefinition.Tooltip">
            <summary>
            Tooltip
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.UITextDefinition.#ctor(System.Int32,System.Int32,JetBrains.UI.Controls.Implication,System.Object,System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start of range</param>
            <param name="count">Length of range</param>
            <param name="implication">Meaning of range</param>
            <param name="tooltip">Tooltip</param>
            <param name="click">Click callback</param>
        </member>
        <member name="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconClass">
            <summary>
            Base class for all XAML-based compiled icon classes. Can be used in generic constraints.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute">
            <summary>
              <para>An attribute for marking icon identifier classes with icon IDs.</para>
              <para>Icon identifier types should be used in cases when you have to reference an icon, but cannot use any runtime code expressions, such as in actions, option pages, and tool window definitions. Using string identifiers does not guarantee compile-time validation, unlike <c>typeof()</c> on icon identifier types.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute.IconId">
            <summary>
            The icon ID for this type.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute.TryGetCompiledIconClassId(System.Type,JetBrains.Util.OnError)">
            <summary>
            Takes the Themed Icon Class Accessor attributed with <see cref="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute" /> and extracts the IconID.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute.TryGetCompiledIconClassId(JetBrains.Application.Parts.PartCatalogueType,JetBrains.Util.OnError)">
            <summary>
            Takes the Themed Icon Class Accessor attributed with <see cref="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute" /> and extracts the IconID.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute.TryGetCompiledIconClassId(JetBrains.Application.Catalogs.PartCatalogType,JetBrains.Util.OnError)">
            <summary>
            Takes the Themed Icon Class Accessor attributed with <see cref="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconClassAttribute" /> and extracts the IconID.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconId">
            <summary>
            Identifier of an icon which was statically defined in resources and precompiled into the product DLLs.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconId.IconIndex">
            <summary>
            Identifies a particular icon within the pack of the icons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconId.IconName">
            <summary>
            Gets the user-friendly name of the icon. This is the name of the field/class/property icon accessors in the icon pack.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconId.IconPack">
            <summary>
            Identifies the pack of the icons.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute">
            <summary>
            An assembly-level attribute which is autogenerated by the Compiled Themed Icons support code.
            These are collected by <see cref="T:JetBrains.Application.Icons.CompiledIcons.CompiledIconIdOwner"/> (without loading assemblies/types) to discover the available icons, and actual icon images are loaded from BAML resources on demand.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute.IconNames">
            <summary>
            <para>Normalized names of the icons in this pack. The ordering is an undefined behavior of the icon compiler.</para>
            <para>Icon names are used for all generated accessor fields and classes for the icon.</para>
            <para>Icon names must be unique thoughout the system, but pack+index pair is used for identifying/getting the icon internally. The reason is to enforce strong references to icons and prohibit the use of plaintext strings. That's why the icons order in this list is not stable.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute.IconPackResourceIdentification">
            <summary>
            <para>Unique identifier of this icon pack; also, an URI to the BAML with icon images.</para>
            <para>Each compiled icon is uniquelly identified by a pair of <see cref="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute.IconPackResourceIdentification"/> and an index of the icon in the <see cref="F:JetBrains.UI.Icons.CompiledIcons.CompiledIconsPackAttribute.IconNames"/> list.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Icons.IconId">
            <summary>
            <para>Identifies a themable icon with <see cref="T:JetBrains.Application.Icons.IThemedIconManager"/>.</para>
            <para>This is the base class for all icon monikers. Its actual implementations are owned by corresponding <see cref="T:JetBrains.Application.Icons.IIconIdOwner"/>-implementing class.</para>
            </summary>
        </member>
    </members>
</doc>
