<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Profiler.SelfApi</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Profiler.SelfApi.CommonConfigHelpers">
            <summary>
            Helpers for self-profiling configuration
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.CommonConfigHelpers.UseLogFile``1(``0,System.String)">
            <summary>
            Specifies path to log file.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.CommonConfigHelpers.WithCommandLineArgument``1(``0,System.String)">
            <summary>
            Appends an arbitrary argument to the command line as is (without any quoting, and so on).
            </summary>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.DotMemory">
             <summary>
             The API lets you initiate and control profiling sessions right from the code of your application.
             For example, this can be helpful for profiling the application on end-user desktops or production servers.
             The API uses the dotMemory.exe command-line profiler (the tool is downloaded automatically)
             </summary>
             <remarks>
             Use case 1: ad-hoc profiling <br/>
             * install the JetBrains.Profiler.SelfApi package to your project<br/>
             * to initialize the API, call DotMemory.EnsurePrerequisite()<br/>
             * to get just one memory snapshot, call DotMemory.GetSnapshotOnce<br/>
             * or in case you need several snapshots, call Attach/GetSnapshot*/Detach<br/>
             * deploy your application<br/>
             * reproduce the issue<br/>
             * investigate the generated workspace with snapshots using JetBrains dotMemory<br/>
            <br/>
             Use case 2: self-profiling as a part of troubleshooting on a production server<br/>
             * install the JetBrains.Profiler.SelfApi package to your project<br/>
             * in handler of awesome `Gather trouble report` action call DotMemory.EnsurePrerequisite()<br/>
             * to get a memory snapshot, call DotMemory.GetSnapshotOnce<br/>
             * include the generated workspace with snapshots into the report<br/>
             </remarks>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.DotMemory.Config">
            <summary>
            Self-profiling configuration
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Config.SaveToFile(System.String,System.Boolean)">
            <summary>
            Specifies the path to the workspace file (snapshots storage).
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Config.SaveToDir(System.String)">
            <summary>
            Specifies the path to the workspace directory (filename will be auto-generated).
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Config.OpenDotMemory">
            <summary>
            Specifies whether to open the generated workspace in JetBrains dotMemory.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Config.UseLogLevelTrace">
            <summary>
            Sets the TRACE logging level.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Config.UseLogLevelVerbose">
            <summary>
            Sets the VERBOSE logging level.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.EnsurePrerequisiteAsync(System.Threading.CancellationToken,System.IProgress{System.Double},System.Uri,JetBrains.Profiler.SelfApi.NuGetApi,System.String)">
            <summary>
            Makes sure that the dotMemory.exe command-line profiler is downloaded and is ready to use.
            </summary>
            <remarks>
            1. Looks for command-line profiler in the <paramref name="downloadTo"/> folder (if specified). Uses it if it's found.<br/>
            2. Looks for command-line profiler in the same folder with the running assembly. Uses it if it's found.<br/>
            3. Downloads the latest `JetBrains.dotMemory.Console` NuGet package into the <paramref name="downloadTo"/>
            folder and uses the command-line profiler from this package. The basic package version is defined by <see cref="F:JetBrains.Profiler.SelfApi.Impl.CommandLineToolsConfig.NupkgVersion"/>.
            The command-line profiler is saved to `{downloadTo}/dotMemory/{Version}/dotMemory.exe`
            If the file exists, a new one is not downloaded.
            </remarks>
            <param name="cancellationToken">Cancellation token</param>
            <param name="progress">Download progress callback from 0.0 to 100.0. If null, progress is not reported.</param>
            <param name="nugetUrl">URL of NuGet mirror. If null, www.nuget.org is used.</param>
            <param name="nugetApi">NuGet API version.</param>
            <param name="downloadTo">NuGet download destination folder. If null, %LocalAppData% is used.</param>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.EnsurePrerequisiteAsync(System.IProgress{System.Double},System.Uri,JetBrains.Profiler.SelfApi.NuGetApi,System.String)">
            <summary>
            The shortcut for <c>EnsurePrerequisiteAsync(CancellationToken.None, progress, nugetUrl, prerequisitePath)</c>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.EnsurePrerequisite(System.Uri,JetBrains.Profiler.SelfApi.NuGetApi,System.String)">
            <summary>
            The shortcut for <c>EnsurePrerequisiteAsync(CancellationToken.None, progress: null, nugetUrl, prerequisitePath).Wait()</c>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.GetSnapshotOnce">
            <summary>
            The shortcut for <see cref="M:JetBrains.Profiler.SelfApi.DotMemory.Attach"/>; <see cref="M:JetBrains.Profiler.SelfApi.DotMemory.GetSnapshot(System.String)"/>; <see cref="M:JetBrains.Profiler.SelfApi.DotMemory.Detach"/>;
            </summary>
            <returns>Saved workspace file path.</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.GetSnapshotOnce(JetBrains.Profiler.SelfApi.DotMemory.Config)">
            <summary>
            The shortcut for <see cref="M:JetBrains.Profiler.SelfApi.DotMemory.Attach(JetBrains.Profiler.SelfApi.DotMemory.Config)"/>; <see cref="M:JetBrains.Profiler.SelfApi.DotMemory.GetSnapshot(System.String)"/>; <see cref="M:JetBrains.Profiler.SelfApi.DotMemory.Detach"/>;
            </summary>
            <returns>Saved workspace file path.</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Attach">
            <summary>
            Attaches dotMemory to the current process using the default API configuration.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Attach(JetBrains.Profiler.SelfApi.DotMemory.Config)">
            <summary>
            Attaches dotMemory to the current process using the specified API configuration.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.Detach">
            <summary>
            Detaches dotMemory from the current process.
            </summary>
            <returns>Saved workspace file path.</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotMemory.GetSnapshot(System.String)">
            <summary>
              Collect memory snapshot of the current process and save it to the disk. This method forces full GC.
            </summary>
            <param name="name">The name of the memory snapshot. This is not a file name. Currently not used.</param>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.DotTrace">
             <summary>
             The API lets you initiate and control profiling sessions right from the code of your application.
             For example, you can use it to profile the application on end-user desktops or production servers.
             The API uses the dotTrace command-line profiler (the tool is downloaded automatically)
             </summary>
             <remarks>
             Use case: ad-hoc profiling <br/>
             * Install the JetBrains.Profiler.SelfApi package to your project<br/>
             * To initialize the API, call DotTrace.EnsurePrerequisite()<br/>
             * To start collecting data, call DotTrace.StartCollectingData()
             * To save collected data into snapshot, call DotTrace.SaveData<br/>
             * In case you need several snapshots, call DotTrace.StartCollectingData and DotTrace.SaveData once more<br/>
             * To pack collected data into a single zip file call DotTrace.GetCollectedSnapshotFilesArchive <br/>
             * Investigate the generated snapshots using JetBrains dotTrace<br/>
            <br/>
             </remarks>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.DotTrace.Config">
            <summary>
            Self-profiling configuration
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.Config.SaveToFile(System.String,System.Boolean)">
            <summary>
            Specifies the path to the snapshot index file.
            If you take more than one snapshot, the first snapshot will get the specified file name.
            Others will additionally get the suffix "-[snapshot-number]".
            The directory specified in the path must already exist.
            <param name="snapshotFile">Path to the file</param>
            <param name="overwrite">Overwrite the file if it exists</param>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.Config.SaveToDir(System.String)">
            <summary>
            Specifies the path to the directory where snapshots files must be saved (names will be auto-generated).
            The directory must already exist.
            <param name="dirPath">Path to the directory</param>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.Config.UseTimelineProfilingType(System.Boolean)">
            <summary>
            (Windows only) Use the Timeline profiling type.
            If not specified, the Sampling type is used.
            </summary>
            <param name="askUacElevationIfRequired">If false and a profiling session requires administrative privileges, the method throws an exception. If true, dotTrace will ask for UAC elevation and continue the session.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.EnsurePrerequisiteAsync(System.Threading.CancellationToken,System.IProgress{System.Double},System.Uri,JetBrains.Profiler.SelfApi.NuGetApi,System.String)">
            <summary>
            Makes sure that the dotTrace command-line profiler is downloaded and is ready to use.
            </summary>
            <remarks>
            1. Looks for dotTrace executable in the same directory with the running assembly. Uses it if it's found.<br/>
            2. Downloads `JetBrains.dotTrace.CommandLineTools` NuGet package into the <paramref name="downloadTo"/>
            directory and uses the dotTrace command-line profiler from this package. The package version is defined by <see cref="F:JetBrains.Profiler.SelfApi.Impl.CommandLineToolsConfig.NupkgVersion"/>.
            The command-line profiler is saved to `{downloadTo}/dotTrace.{NupkgVersion}`
            If the executable file exists, a new one is not downloaded.
            </remarks>
            <param name="cancellationToken">Cancellation token</param>
            <param name="progress">Download progress callback from 0.0 to 100.0. If null, progress is not reported.</param>
            <param name="nugetUrl">URL of NuGet mirror. If null, www.nuget.org is used.</param>
            <param name="nugetApi">NuGet API version.</param>
            <param name="downloadTo">NuGet download destination directory. If null, %LocalAppData% is used.</param>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.EnsurePrerequisiteAsync(System.IProgress{System.Double},System.Uri,JetBrains.Profiler.SelfApi.NuGetApi,System.String)">
            <summary>
            The shortcut for <c>EnsurePrerequisiteAsync(CancellationToken.None, progress, nugetUrl, prerequisitePath)</c>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.EnsurePrerequisite(System.Uri,JetBrains.Profiler.SelfApi.NuGetApi,System.String)">
            <summary>
            The shortcut for <c>EnsurePrerequisiteAsync(CancellationToken.None, progress: null, nugetUrl, prerequisitePath).Wait()</c>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.Attach">
            <summary>
            Attaches dotTrace to the current process using the default API configuration.
            Note: After attaching, the profiler goes to "Stopped" state. To start collecting data,
            call <see cref="M:JetBrains.Profiler.SelfApi.DotTrace.StartCollectingData"/>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.Attach(JetBrains.Profiler.SelfApi.DotTrace.Config)">
            <summary>
            Attaches dotTrace to the current process using the specified API configuration.
            Note: After attaching, the profiler goes to "Stopped" state. To start collecting data,
            call <see cref="M:JetBrains.Profiler.SelfApi.DotTrace.StartCollectingData"/>
            <param name="config">Profiler configuration</param>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.Detach">
            <summary>
            Detaches dotTrace from the current process
            Call it after you finish profiling
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.StartCollectingData">
            <summary>
            Starts collecting performance data
            Profiler changes state from "Stopped" to "Started"
            If profiler is already in "Started" state, the command is ignored
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.SaveData">
            <summary>
            Takes a snapshot of the current process
            All collected data is saved to files specified in the configuration
            Note: After saving the data, profiler goes to "Stopped" state
            To start collecting data again, call <see cref="M:JetBrains.Profiler.SelfApi.DotTrace.StartCollectingData"/>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.DropData">
            <summary>
            Drops collected data
            Run this method to discard collected data.
            Note: After discarding the data, profiler goes to "Stopped" state
            To start collecting data again, call <see cref="M:JetBrains.Profiler.SelfApi.DotTrace.StartCollectingData"/>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.StopCollectingData">
            <summary>
            Stops collecting performance data
            Profiler changes state from "Started" to "Stopped".
            If profiler is already in "Stopped" state, the command is ignored.
            It is not necessary to call this method before taking snapshot.
            Note: The command is supported only if profiler API is used to control session.
            Otherwise, the command is ignored.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.GetCollectedSnapshotIndexFiles">
            <summary>
            Returns collected snapshot index files
            For each collected snapshot, a separate index file is returned.
            Note: To share a snapshot, you must copy not only the index file but all files.
            In such cases, it's more convenient to use
            <see cref="M:JetBrains.Profiler.SelfApi.DotTrace.GetCollectedSnapshotFilesArchive(System.Boolean)"/> or <see cref="M:JetBrains.Profiler.SelfApi.DotTrace.GetCollectedSnapshotFiles"/>
            </summary>
            <returns>Paths to index files</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.GetCollectedSnapshotFiles">
            <summary>
            Returns all collected snapshot files (including index files)
            For each collected snapshot, more than one file is returned
            </summary>
            <returns>Paths to snapshot files</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.DotTrace.GetCollectedSnapshotFilesArchive(System.Boolean)">
            <summary>
            Returns all collected snapshot files (including index files)
            packed into a single zip file
            </summary>
            <returns>Path to the zip file. Returns null if data is not yet collected.</returns>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.CommandLineToolsConfig.NupkgVersion">
            <summary>
              The version (major and minor only!!!) of JetBrains.dotTrace.CommandLineTools and JetBrains.dotMemory.Console
              NuGet-packages that must be downloaded.
            </summary>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.Impl.NuGet">
            <summary>
            The minimal stuff to support NuGet package downloading for API v2/v3
            </summary>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.Impl.NuGet.SemanticVersion">
            <summary>
            Simplified support for semantic version.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Unix.Elf.ReadUtils.Rewind(System.IO.Stream)">
            <summary>
            Set the stream position to start
            </summary>
            <param name="stream">Stream</param>
            <returns>Fluent</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Unix.Elf.ReadUtils.ReadAll(System.IO.Stream)">
            <summary>
            Read all data from the stream
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Unix.Elf.ReadUtils.ReadToEnd(System.IO.Stream)">
            <summary>
            Read all data from the current position of the stream
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_ISUID">
            <summary>
            Set user ID on execution
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_ISGID">
            <summary>
            Set group ID on execution
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_ISVTX">
            <summary>
            Save swapped text after use (sticky).
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IRUSR">
            <summary>
            Read by owner
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IWUSR">
            <summary>
            Write by owner
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IXUSR">
            <summary>
            Execute by owner
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IRGRP">
            <summary>
            Read by group
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IWGRP">
            <summary>
            Write by group
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IXGRP">
            <summary>
            Execute by group
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IROTH">
            <summary>
            Read by other
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IWOTH">
            <summary>
            Write by other
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IXOTH">
            <summary>
            Execute by other
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IRWXG">
            <summary>
            Read, write, execute by group
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IRWXU">
            <summary>
            Read, write, execute by user
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IRWXO">
            <summary>
            Read, write, execute by other
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.ACCESSPERMS">
            <summary>
            0777
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.ALLPERMS">
            <summary>
            07777
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.DEFFILEMODE">
            <summary>
            0666
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFMT">
            <summary>
            Bits which determine file type
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFDIR">
            <summary>
            Directory
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFCHR">
            <summary>
            Character device
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFBLK">
            <summary>
            Block device
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFREG">
            <summary>
            Regular file
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFIFO">
            <summary>
            FIFO
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFLNK">
            <summary>
            Symbolic link
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.S_IFSOCK">
            <summary>
            Socket
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.rw_r__r__">
            <summary>
            Alias for 0644
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Unix.UnixFileModes.rwxr_xr_x">
            <summary>
            Alias for 0755
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Windows.Kernel32Dll.GetCurrentProcess">
            <summary>
            Retrieves a pseudo handle for the current process.
            </summary>
            <returns>The return value is a pseudo handle to the current process.</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Windows.Kernel32Dll.GetModuleHandleW(System.String)">
            <summary>
            Retrieves a module handle for the specified module. The module must have been loaded by the calling process. 
            To avoid the race conditions described in the Remarks section, use the GetModuleHandleEx function.
            </summary>
            <param name="lpModuleName">The name of the loaded module (either a .dll or .exe file). 
            If the file name extension is omitted, the default library extension .dll is appended. 
            The file name string can include a trailing point character (.) to indicate that the module name has no extension. 
            The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). 
            The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process. 
            If this parameter is NULL, GetModuleHandle returns a handle to the file used to create the calling process (.exe file). 
            The GetModuleHandle function does not retrieve handles for modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. 
            For more information, see LoadLibraryEx.</param>
            <returns>If the function succeeds, the return value is a handle to the specified module. 
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Windows.Kernel32Dll.GetProcAddress(System.Void*,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable. The LoadLibrary or GetModuleHandle function returns this handle.</param>
            <param name="lpProcName">The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable. If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Windows.Kernel32Dll.GetNativeSystemInfo(JetBrains.Profiler.SelfApi.Impl.Windows.SYSTEM_INFO*)">
            <summary>
            Retrieves information about the current system to an application running under WOW64. If the function is called from a 64-bit application, it is equivalent to the GetSystemInfo function.
            <code>
            | OS    | Process | wProcessorArchitecture           |
            +=======+=========+==================================+
            | ARM64 | ARM64   | 12(PROCESSOR_ARCHITECTURE_ARM64) |
            | ARM64 | ARM     | 12(PROCESSOR_ARCHITECTURE_ARM64) |
            | ARM64 | X64     |  9(PROCESSOR_ARCHITECTURE_AMD64) | ATTENTION: Returns 9 for compatibility !!!
            | ARM64 | X86     |  9(PROCESSOR_ARCHITECTURE_AMD64) | ATTENTION: Returns 9 for compatibility !!!
            | X64   | X64     |  9(PROCESSOR_ARCHITECTURE_AMD64) |
            | X64   | X86     |  9(PROCESSOR_ARCHITECTURE_AMD64) |
            | X86   | X86     |  0(PROCESSOR_ARCHITECTURE_INTEL) |
            </code>
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Impl.Windows.Kernel32Dll.IsWow64Process2(System.Void*,JetBrains.Profiler.SelfApi.Impl.Windows.MachineId*,JetBrains.Profiler.SelfApi.Impl.Windows.MachineId*)">
            <summary>
            Determines whether the specified process is running under WOW64; also returns additional machine process and architecture information.
            Available since Windows 10.0 Build 1511.
            <code>
            | OS    | Process | pProcessMachine                    | pNativeMachine                   |
            +=======+=========+====================================+==================================+
            | ARM64 | ARM64   | 0x0000(IMAGE_FILE_MACHINE_UNKNOWN) | 0xAA64(IMAGE_FILE_MACHINE_ARM64) |
            | ARM64 | ARM     | 0x01C4(IMAGE_FILE_MACHINE_ARMNT  ) | 0xAA64(IMAGE_FILE_MACHINE_ARM64) |
            | ARM64 | X64     | 0x0000(IMAGE_FILE_MACHINE_UNKNOWN) | 0xAA64(IMAGE_FILE_MACHINE_ARM64) | ATTENTION: Returns 0xAA64 !!! 
            | ARM64 | X86     | 0x014C(IMAGE_FILE_MACHINE_I386   ) | 0xAA64(IMAGE_FILE_MACHINE_ARM64) |
            | X64   | X64     | 0x0000(IMAGE_FILE_MACHINE_UNKNOWN) | 0x8664(IMAGE_FILE_MACHINE_AMD64) |
            | X64   | X86     | 0x014C(IMAGE_FILE_MACHINE_I386   ) | 0x8664(IMAGE_FILE_MACHINE_AMD64) |
            | X86   | X86     | 0x0000(IMAGE_FILE_MACHINE_UNKNOWN) | 0x014C(IMAGE_FILE_MACHINE_I386 ) |
            </code>
            </summary>
            <param name="hProcess">A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right.</param>
            <param name="pProcessMachine">On success, returns a pointer to an IMAGE_FILE_MACHINE_* value. The value will be IMAGE_FILE_MACHINE_UNKNOWN if the target process is not a WOW64 process; otherwise, it will identify the type of WoW process.</param>
            <param name="pNativeMachine">On success, returns a pointer to a possible IMAGE_FILE_MACHINE_* value identifying the native architecture of host system.</param>
            <returns>If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.Impl.Windows.MachineId">
            <summary>
              Machine ID in the COFF header
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Windows.ProcessorArchitecture.PROCESSOR_ARCHITECTURE_INTEL">
            <summary>
              x86
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Windows.ProcessorArchitecture.PROCESSOR_ARCHITECTURE_ARM">
            <summary>
              armv7*
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Windows.ProcessorArchitecture.PROCESSOR_ARCHITECTURE_IA64">
            <summary>
              Intel Itanium-based
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Windows.ProcessorArchitecture.PROCESSOR_ARCHITECTURE_AMD64">
            <summary>
              x86_64, amd64, x64
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Windows.ProcessorArchitecture.PROCESSOR_ARCHITECTURE_ARM64">
            <summary>
              arm64v8, aarch64
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Windows.ProcessorArchitecture.PROCESSOR_ARCHITECTURE_UNKNOWN">
            <summary>
              Unknown architecture.
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Impl.Windows.SYSTEM_INFO.wProcessorArchitecture">
            <seealso cref="T:JetBrains.Profiler.SelfApi.Impl.Windows.ProcessorArchitecture"/>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.CommonConfig">
            <summary>
            Self-profiling configuration
            </summary>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.NuGetApi">
            <summary>
            NuGet API version
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.NuGetApi.V2">
            <summary>
            NuGet API v2
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.NuGetApi.V3">
            <summary>
            NuGet API v3
            </summary>
        </member>
        <member name="T:JetBrains.Profiler.SelfApi.Trace">
            <summary>
            The entry point for all logging related to self-profiling.
            </summary>
        </member>
        <member name="F:JetBrains.Profiler.SelfApi.Trace.Source">
            <summary>
            The current instance of <see cref="T:System.Diagnostics.TraceSource"/> used for all logging inside self-profiling API.
            </summary>
            <remarks>
            You can control trace output via App.config or via programatically added listeners, see examples below.
            <example>
            Redirect to console using App.config:
            <code>
            &lt;system.diagnostics&gt;
              &lt;sources&gt;
                &lt;source name="JetBrains.Profiler.SelfApi"
                           switchName="SourceSwitch"
                           switchType="System.Diagnostics.SourceSwitch" &gt;
                    &lt;listeners&gt;
                        &lt;add name="Console" /&gt;
                    &lt;/listeners&gt;
                &lt;/source&gt;
              &lt;/sources&gt;
              &lt;switches&gt;
                &lt;add name="SourceSwitch" value="Verbose" /&gt;
              &lt;/switches&gt;
              &lt;sharedListeners&gt;
                &lt;add name="Console"
                     type="System.Diagnostics.ConsoleTraceListener"
                     initializeData="false"/&gt;
              &lt;/sharedListeners&gt;
              &lt;trace autoflush="true" indentsize="4"&gt;
                &lt;listeners&gt;
                    &lt;add name="Console" /&gt;
                &lt;/listeners&gt;
              &lt;/trace&gt;
            &lt;/system.diagnostics&gt;
            </code>
            </example>
            <example>
            <br/>
            Redirect to console using programatically added listener:
            <code>
            Trace.Source.Switch = new SourceSwitch("SourceSwitch", "Verbose");
            Trace.Source.Listeners.Add(new ConsoleTraceListener());
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Trace.Verbose(System.String)">
            <summary>
            Writes message with VERBOSE level.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Trace.Verbose(System.String,System.Object[])">
            <summary>
            Writes message with VERBOSE level.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Trace.Info(System.String)">
            <summary>
            Writes message with INFO level.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Trace.Info(System.String,System.Object[])">
            <summary>
            Writes message with INFO level.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Trace.Error(System.String)">
            <summary>
            Writes message with ERROR level.
            </summary>
        </member>
        <member name="M:JetBrains.Profiler.SelfApi.Trace.Error(System.String,System.Exception)">
            <summary>
            Writes message with ERROR level.
            </summary>
        </member>
    </members>
</doc>
