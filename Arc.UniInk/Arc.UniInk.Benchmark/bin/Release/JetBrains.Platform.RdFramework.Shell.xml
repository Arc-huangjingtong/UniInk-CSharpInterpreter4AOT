<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.RdFramework.Shell</name>
    </assembly>
    <members>
        <member name="M:JetBrains.Platform.RdFramework.ExternalProcess.ProtocolConnection`1.Queue(System.Action)">
            <summary>
            Queues an action on the external process protocol thread
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.ExternalProcess.ProtocolConnection`1.Execute(System.Action)">
            <summary>
            Executes an action on the external process protocol thread and waits
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.ExternalProcess.ProtocolConnection`1.Execute``1(System.Func{``0})">
            <summary>
            Executes an action on the external process protocol thread and waits for result
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.ExternalProcess.ProtocolEndPoint`2">
            <summary>
            Represents an endpoint that allows to communicate by Rd Protocol from the side of external process.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Impl.ProtocolComponent.IsBackend">
            <summary>
            A way to differentiate side in C#-C# communations.
            Expected semantic: true for side without UI, false for UI side
            Null if not applicable. Null may mean either that separation to backend/fronted does not makes sense in current
            scenario or there are no two sides at all (like local protocol)
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Impl.ProtocolComponent.#ctor(JetBrains.Application.Threading.IShellLocks,JetBrains.Rd.ITypesRegistrar,JetBrains.Lifetimes.Lifetime)">
            <summary>
            Stub ctor for local use by Shell container.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Impl.RdDispatcher.RunWhile(System.Func{System.Boolean},System.Boolean)">
            <summary>
            Pumps protocol messages while given condition is satisfied.
            </summary>
            <param name="condition"> A delegate to be executed over and over while it returns true. </param>
            <param name="pumpJetDispatcher">
            Allows to pump unguarded actions on UI thread if flag is true.
            But it might causes messages reordering.
            </param>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Impl.ShellRdDispatcher.AllowScheduler(JetBrains.Lifetimes.Lifetime,JetBrains.Collections.Viewable.IScheduler)">
            <summary>
            This is an api hack to avoid Illegal Scheduler Exception during rd entity bindings when code cannot be executed in the main thread.
            Please DO NOT USE this api if you do not fully understand what you are doing.
            </summary>
            <param name="lifetime"></param>
            <param name="scheduler"></param>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Impl.ShellRdDispatcher.ToString">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Impl.SimpleInpaceExecutingScheduler">
            <summary>
            Executes the given action just in the current thread in Queue method
            </summary>
        </member>
        <member name="P:JetBrains.Platform.RdFramework.InProcessWire.Pending">
            <summary>
            Gets an incomplete task with which you can await any pending operations.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdTypeAttribute">
             <summary>
             This attribute is used to discover runtime types by RdId using PartCatalog
            
             If you are using the interface in Rd communications without DSL, you must register all inheritors of this
             interface using this attribute
             </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.BackendRdShellEmulation">
            <summary>
            Do not inject. Use <see cref="T:JetBrains.Platform.RdFramework.RdVerification.IBackendRdShell"/>
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.FrontendRdShellEmulation">
            <summary>
            Do not inject. Use <see cref="T:JetBrains.Platform.RdFramework.RdVerification.IFrontendRdShell"/>
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.IBackendRdShell">
             <summary>
             The IBackendRdShell and IFrontendRdShell twins  make it possible to use the real protocol in the ReSharper
             in-process mode. This allows you to test that all serialization works as intended and you will get a closer to real
             delayed way of execution for protocol entities.
            
             In OOP mode it will work as regular RdShell component.
             </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.IFrontendRdShell">
             <summary>
             The IBackendRdShell and IFrontendRdShell twins  make it possible to use the real protocol in the ReSharper
             in-process mode. This allows you to test that all serialization works as intended and you will get a closer to real
             delayed way of execution for protocol entities.
            
             In OOP mode it will work as regular RdShell component.
             </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.IProtocolSide">
            <summary>
            For protocol entities, allows to tell if it's client or server.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.RdFramework.RdVerification.IProtocolSide.IsBackend">
            <summary>
            A way to differentiate side in C#-C# communations.
            Expected semantic: true for side without UI, false for UI side
            Null if not applicable. Null may mean either that separation to backend/fronted does not makes sense in current
            scenario or there are no two sides at all (like local protocol)
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.IRdShell">
            <summary>
            A set of components required for using reactive model with Reflection-based serializers. Do not inject this
            component directly, use either RdShell for synchronous execution in in-process mode or pair of IFrontendRdShell and
            IBackendRdShell for asynchronous execution.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.RdModelsVerifier">
            <summary>
            RdModel verification for each <see cref="T:JetBrains.Platform.RdFramework.RdTypeAttribute"/>
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.RdTypesCatalogWrapper">
            <summary>
            This discovery point for models marked with <see cref="T:JetBrains.Platform.RdFramework.RdTypeAttribute"/>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.RdVerification.RdTypesCatalogWrapper.Hash(JetBrains.Util.dataStructures.Sources.StringSource,System.Int64)">
            <summary>
            Reimplementation of <see cref="M:JetBrains.Rd.RdId.Hash(System.String,System.Int64)"/>, which can't use <see cref="T:JetBrains.Util.dataStructures.Sources.StringSource"/> type directly
            </summary>
            <param name="s"></param>
            <param name="initValue"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.RdVerification.SidewiseProtocol">
            <summary>
            NOTE: adds server/client telling to the protocol, while all of it is private in the base class. TODO: probably, should make it possible to get from the base protocol, but not sure.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.RdVerification.SidewiseProtocol.#ctor(JetBrains.Lifetimes.Lifetime,System.String,System.Nullable{System.Boolean},JetBrains.Rd.ISerializers,JetBrains.Rd.IIdentities,JetBrains.Collections.Viewable.IScheduler,JetBrains.Rd.IWire,JetBrains.Rd.RdContextBase[])">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.RdVerification.SidewiseProtocol.JetBrains#Platform#RdFramework#RdVerification#IProtocolSide#IsBackend">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1">
            <summary>
            Accessor object for <see cref="T:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2" />.
            After you fire a request, lets you extract the response.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.DangerousGetRawResponseAsync">
            <summary>
              <para>Gives access to the raw response contents (after it arrives). Beware potentially orphaned <see cref="T:JetBrains.Lifetimes.LifetimeDefinition" />!</para>
              <para>Dangerous because it does not handle result unwrapping or lifetime termination for you, unlike <see cref="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.GetScalarResponseAsync" /> or <see cref="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.WithLiveResponseAsync(System.Func{JetBrains.Lifetimes.Lifetime,`0,System.Threading.Tasks.Task})" />. You are obliged to terminate the lifetime at some point (unless the outer lifetime of the whole request-response session terminates when the session ends), otherwise the session will leak.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.DangerousGetResponseUnderFiringLifetimeAsync">
            <summary>
              <para>Gives access to the raw response contents (after it arrives). Beware potentially orphaned <see cref="T:JetBrains.Lifetimes.LifetimeDefinition" />!</para>
              <para>This method assumes the lifetime you passed to <see cref="M:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2.Fire(JetBrains.Lifetimes.OuterLifetime,`0)" /> is actually the lifetime of the session, and it will be closed / live response disconnected when it ends, so terminating the response lifetime manually is not needed.</para>
              <para>Dangerous because it does not handle lifetime termination for you, unlike <see cref="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.GetScalarResponseAsync" /> or <see cref="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.WithLiveResponseAsync(System.Func{JetBrains.Lifetimes.Lifetime,`0,System.Threading.Tasks.Task})" />.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.Detach">
            <summary>
            Lets the request-response complete on its own, closes the session lifetime immediately when it's received.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.GetScalarResponseAsync">
            <summary>
              <para>If your response is a scalar value rather than a live bindable object (i.e. it's been received over the wire and isn't connected to the other side), extracts the response when it's ready.</para>
              <para>If you use this over a live bindable response, there will be no error, but it would be disconnected from the other side by the time you get it. See <see cref="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.WithLiveResponseAsync(System.Func{JetBrains.Lifetimes.Lifetime,`0,System.Threading.Tasks.Task})" /> for a connected version.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.WithLiveResponseAsync(System.Func{JetBrains.Lifetimes.Lifetime,`0,System.Threading.Tasks.Task})">
            <summary>
              <para>For a live bindable response object, calls your handler to interact with it while it's still connected to the other side.</para>
              <para>If you use this on a scalar response, everything works correctly, though <see cref="M:JetBrains.Platform.RdFramework.Reflection.FutureResponse`1.GetScalarResponseAsync" /> is simpler for such a case.</para>
            </summary>
            <param name="F"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1">
            <summary>
            An <see cref="T:JetBrains.DataFlow.ICollectionEvents`1" /> implementation suitable for use in reflection RD models.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.#ctor(System.String,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents{`0})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.JetBrains#Rd#Base#IRdBindable#Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdDynamic,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.JetBrains#Rd#Base#IRdBindable#Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.JetBrains#Rd#Base#IRdDynamic#Location">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.JetBrains#Rd#Base#IPrintable#Print(JetBrains.Rd.Util.PrettyPrinter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.JetBrains#Rd#Base#IRdDynamic#Proto">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.JetBrains#Rd#Base#IRdBindable#RdId">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectCollectionEvents`1.JetBrains#Rd#Base#IRdDynamic#SerializationContext">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2">
            <summary>
            An <see cref="T:JetBrains.DataFlow.IDictionaryEvents`2" /> implementation suitable for use in reflection RD models.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents{`0,`1})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.JetBrains#Rd#Base#IRdBindable#Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdDynamic,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.JetBrains#Rd#Base#IRdBindable#Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.JetBrains#Rd#Base#IRdDynamic#Location">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.JetBrains#Rd#Base#IPrintable#Print(JetBrains.Rd.Util.PrettyPrinter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.JetBrains#Rd#Base#IRdDynamic#Proto">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.JetBrains#Rd#Base#IRdBindable#RdId">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents`2.JetBrains#Rd#Base#IRdDynamic#SerializationContext">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectEx.WireableNotBoundException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectEx.WireableNotBoundException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectEx.WireableNotBoundException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectEx.WireableNotBoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1">
            <summary>
            Helps with legacy code transition.
            When we're running protocol inprocess, allows to wire types which are neither bindable nor serializable scalars, by just getting the same instance on the other side.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1.Equals(JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox{`0})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox{`0})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox">
            <summary>
            Nongeneric helper class.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox.ProcessNonce">
            <summary>
            Unique per-process (or, rather, appdomain).
            When received, a mismatch means we cannot unmarshal.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox.Create``1(``0)">
            <inheritdoc cref="T:JetBrains.Platform.RdFramework.Reflection.RdReflectInProcessBlackBox`1" />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1">
            <summary>
            An <see cref="T:JetBrains.DataFlow.IProperty`1" /> implementation suitable for use in reflection RD models.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.myDrivingVersion">
            <summary>
            Supports <see cref="F:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.myIsDrivingEnd" /> logic. If opposite roles are defined on two ends, they have the same version after the sync on a value, but it might be different in between the simultaneous change and a full sync.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.myIsDrivingEnd">
            <summary>
            <c>True</c> if this is the driving end and should win in case of conflicting simultaneous changes, <c>False</c> if it always submits to remote changes, and <c>NULL</c> if we have not been told any role.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.#ctor(JetBrains.DataFlow.PropertyId{`0},`0,System.Nullable{System.Boolean},JetBrains.Util.ILogger)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectProperty{`0})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.JetBrains#Rd#Base#IRdBindable#Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdDynamic,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.JetBrains#Rd#Base#IRdBindable#Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.JetBrains#Rd#Base#IRdDynamic#Location">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.JetBrains#Rd#Base#IPrintable#Print(JetBrains.Rd.Util.PrettyPrinter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.JetBrains#Rd#Base#IRdDynamic#Proto">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.JetBrains#Rd#Base#IRdBindable#RdId">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectProperty`1.JetBrains#Rd#Base#IRdDynamic#SerializationContext">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag">
            <summary>
            An <see cref="T:JetBrains.DataFlow.IPropertyBag" /> implementation suitable for use in reflection RD models.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.myRdReflectPropertyStorage">
            <summary>
            A copy of <see cref="F:JetBrains.DataFlow.PropertyBag.myProperties" />, but with the specific type.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.#ctor">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.#ctor(JetBrains.Platform.RdFramework.Reflection.RdReflectDictionaryEvents{JetBrains.DataFlow.PropertyId,JetBrains.DataFlow.IUntypedProperty})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.JetBrains#Rd#Base#IRdBindable#Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdDynamic,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.CreatePropertyInstance``1(JetBrains.DataFlow.PropertyId{``0},``0,System.Nullable{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.JetBrains#Rd#Base#IRdBindable#Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.JetBrains#Rd#Base#IRdDynamic#Location">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.JetBrains#Rd#Base#IPrintable#Print(JetBrains.Rd.Util.PrettyPrinter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.JetBrains#Rd#Base#IRdDynamic#Proto">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.JetBrains#Rd#Base#IRdBindable#RdId">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectPropertyBag.JetBrains#Rd#Base#IRdDynamic#SerializationContext">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2">
            <summary>
            A remotable automation model entry which can make asynchronous request-response calls.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2.#ctor(JetBrains.DataFlow.PropertyId{System.Tuple{`0,`1}})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2.Advise(JetBrains.Lifetimes.Lifetime,System.Func{JetBrains.Lifetimes.Lifetime,`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Handle incoming requests.
            </summary>
            <param name="lifetime">The lifetime while request is open. For scalar responses, limits the time you could be calculating it. For live bindable responses, indicates the lifetime until your response gets disconnected from the other side.</param>
            <param name="FHandler"></param>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2.Fire(JetBrains.Lifetimes.OuterLifetime,`0)">
            <summary>
            Initiates a request and returns the object which awaits for response.
            You MUST finish the request with either of the response-processing methods, because this defines the async lifetime of the session.
            </summary>
            <param name="lifetime">The limiting lifetime for the session. A nested lifetime will be defined for this request-response session, which only terminates when you complete the returned object with either of the methods.</param>
            <param name="request">The request parameter.</param>
            <returns>The session object on which you should call one of the response-processing methods, allowing the request-response session lifetime to terminate and handling the possible response, either as a scalar deserialized value, or as a live session on the connected response object.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse{`0,`1})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectRequestResponse`2.OnBindNested(JetBrains.Lifetimes.Lifetime)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectResult`1">
            <summary>
            Like <see cref="T:JetBrains.Core.Result`1" />, but suitable for wiring over protocol, including when the result is a bindable model itself.
            </summary>
            <typeparam name="TResult">A scalar or a bindable model.</typeparam>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectResult`1.#ctor(System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectResult`1.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectResult`1.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectResult{`0})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectResult`1.OnBindNested(JetBrains.Lifetimes.Lifetime)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1">
            <summary>
            An <see cref="T:JetBrains.DataFlow.ISignal`1" /> implementation suitable for use in reflection RD models.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectSignal{`0})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.JetBrains#Rd#Base#IRdBindable#Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdDynamic,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.JetBrains#Rd#Base#IRdBindable#Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.JetBrains#Rd#Base#IRdDynamic#Location">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.JetBrains#Rd#Base#IPrintable#Print(JetBrains.Rd.Util.PrettyPrinter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.JetBrains#Rd#Base#IRdDynamic#Proto">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.JetBrains#Rd#Base#IRdBindable#RdId">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSignal`1.JetBrains#Rd#Base#IRdDynamic#SerializationContext">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal">
            <summary>
            An <see cref="T:JetBrains.DataFlow.ISimpleSignal" /> implementation suitable for use in reflection RD models.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.JetBrains#Rd#Base#IRdBindable#Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdDynamic,System.String)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.JetBrains#Rd#Base#IRdBindable#Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.JetBrains#Rd#Base#IRdDynamic#Location">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.JetBrains#Rd#Base#IPrintable#Print(JetBrains.Rd.Util.PrettyPrinter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.JetBrains#Rd#Base#IRdDynamic#Proto">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.JetBrains#Rd#Base#IRdBindable#RdId">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdReflectSimpleSignal.JetBrains#Rd#Base#IRdDynamic#SerializationContext">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectTransportObjectForRequestResponse`2.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectTransportObjectForRequestResponse`2.#ctor(System.Guid,`0,JetBrains.Platform.RdFramework.Reflection.RdReflectProperty{JetBrains.Platform.RdFramework.Reflection.RdReflectResult{`1}})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectTransportObjectForRequestResponse`2.Read(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeReader)">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectTransportObjectForRequestResponse`2.Write(JetBrains.Rd.SerializationCtx,JetBrains.Serialization.UnsafeWriter,JetBrains.Platform.RdFramework.Reflection.RdReflectTransportObjectForRequestResponse{`0,`1})">
            <summary>
            Used by rd reflection serializers.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdReflectTransportObjectForRequestResponse`2.OnBindNested(JetBrains.Lifetimes.Lifetime)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdWireableBase">
            <summary>
            Adds wiring and basic bind/identify impl to <see cref="T:JetBrains.Rd.Base.RdBindableBase" />.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.#ctor(JetBrains.DataFlow.PropertyId)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.BindNested(JetBrains.Lifetimes.Lifetime,JetBrains.Platform.RdFramework.Reflection.RdWireableBase[])">
            <summary>
            When an object with this trait has bindable children, especially if they're coming and going dynamically.
            </summary>
            <param name="lifetime">Child presence.</param>
            <param name="nested">Child as bindable.</param>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.BindNested(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdBindable,System.String)">
            <summary>
            When an object with this trait has bindable children, especially if they're coming and going dynamically.
            </summary>
            <param name="lifetime">Child presence.</param>
            <param name="bindableNested">Child as bindable.</param>
            <param name="localname">Local name of the child within this object</param>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.Init(JetBrains.Lifetimes.Lifetime)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.OnBindNested(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Override this if you got nested bindable entities. Will be called for the bracket when our entity is bound. Call <see cref="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.BindNested(JetBrains.Lifetimes.Lifetime,JetBrains.Platform.RdFramework.Reflection.RdWireableBase[])" /> for any nested bindble, with this lifetime, or with a nested lifetime when a bindable child is present.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.OnRecv(JetBrains.Serialization.UnsafeReader)">
            <summary>
            Override to react on receiving data.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.JetBrains#Rd#Base#IRdWireable#OnWireReceived(JetBrains.Serialization.UnsafeReader)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.ShortName">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.JetBrains#Rd#Base#IRdWireable#WireScheduler">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Reflection.RdWireableTrait">
            <summary>
              <para>When you need to inherit from an existing class, allows to implement <see cref="T:JetBrains.Rd.Base.IRdBindable" /> / <see cref="T:JetBrains.Rd.Base.IRdWireable" /> as an aggregated trait by redirecting all calls to it.</para>
              <para>To impl wire receive, pass the callback to the ctor.</para>
              <para>To impl nested bindables, call <see cref="M:JetBrains.Platform.RdFramework.Reflection.RdWireableBase.BindNested(JetBrains.Lifetimes.Lifetime,JetBrains.Platform.RdFramework.Reflection.RdWireableBase[])" /> when you get them, under <see cref="P:JetBrains.Rd.Base.RdBindableBase.IsBoundProperty" /> being <c>True</c> (<c>WhenTrue</c>).</para>
              <para>That's about all you need to do.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableTrait.#ctor(JetBrains.DataFlow.PropertyId,System.Action{JetBrains.Serialization.UnsafeReader})">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Reflection.RdWireableTrait.OnRecv(JetBrains.Serialization.UnsafeReader)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Serialization.Icons.IconIdWriteHelper.EqualsMarshalledIconId(JetBrains.UI.Icons.IconId,JetBrains.UI.Icons.IconId)">
            <summary>
            Compares IconId for equality based on the ToString() representation.
            Is needed for comparing marshalled icons due to changing their type while marshalling.
            A temporary hack until the moniker-based comparing mechanism is implemented.   
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Serialization.RegisterSerializersForWellKnownTypes.JetBrains#Platform#RdFramework#RdVerification#IRdConfigurator#OnCreated(JetBrains.Rd.Reflection.ReflectionSerializersFacade)">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.Platform.RdFramework.Util.UInOutSignal`2">
            <summary>
            A wrapper around <see cref="T:JetBrains.Rd.Tasks.RdCall`2"/> to support two-sides calls, exposing a signal interface.
            The value for out signal can be provided only by the protocol counterpart, not the local side.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UInOutSignal`2.#ctor(JetBrains.Rd.CtxReadDelegate{`0},JetBrains.Rd.CtxWriteDelegate{`0},JetBrains.Rd.CtxReadDelegate{`1},JetBrains.Rd.CtxWriteDelegate{`1})">
            <summary> 
            It is discouraged to use this constructor directly (as well as for others Rd-entities in reflection-based Rd), use
            <see cref="T:JetBrains.Rd.Reflection.ReflectionRdActivator"/> or similar runtime factory. It is incredible important to have synchronized
            serializers on the both sides. If you provide serializers manually, the runtime activator used by proxy generator
            will be unable to guess proper serializer at the counterpart side which will lead to undefined behaviour.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UInOutSignal`2.FireAsync(`0)">
            <summary>
            Ask the counterpart to provide value asynchronously
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UInOutSignal`2.Fire(JetBrains.DataFlow.InOutEventArgs{`0,`1})">
            <summary>
            Ask the counterpart to provide value
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UInOutSignal`2.Advise(JetBrains.Lifetimes.Lifetime,System.Action{JetBrains.DataFlow.InOutEventArgs{`0,`1}})">
            <summary>
            Subscribe to values requests from the other side
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UListEvents`1.OnAcknowledgeSinkAddRemove_Add(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})">
            <summary>
            Ackhowledges the handler.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UListEvents`1.OnAcknowledgeSinkAddRemove_Remove(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})">
            <summary>
            Ackhowledges the handler.
            Cannot be merged with <see cref="M:JetBrains.Platform.RdFramework.Util.UListEvents`1.OnAcknowledgeSinkAddRemove_Add(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})"/> because the iteration should go in the reverse order.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UListEvents`1.OnAcknowledgeSinkAddRemove(System.Action{JetBrains.DataFlow.AddRemoveEventArgs{`0}},JetBrains.Collections.Viewable.AddRemove)">
            <summary>
            Ackhowledges the handler.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.Change">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.Id">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.IsNullValueAllowed">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.Maybe">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.Value">
            <inheritdoc cref="P:JetBrains.Platform.RdFramework.Util.UProperty`1.Value" />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Collections#Viewable#ISource{TValue}#Advise(JetBrains.Lifetimes.Lifetime,System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#DataFlow#IHaveUntypedProperty#AsUntyped">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#DataFlow#IProperty{TValue}#BeforeChange">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Rd#Base#IRdBindable#Bind(JetBrains.Lifetimes.Lifetime,JetBrains.Rd.Base.IRdDynamic,System.String)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Collections#Viewable#IReadonlyProperty{TValue}#Change">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#DataFlow#IProperty{TValue}#GetValue">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#DataFlow#IProperty{TValue}#GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Rd#Base#IRdBindable#Identify(JetBrains.Rd.IIdentities,JetBrains.Rd.RdId)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Rd#Base#IRdDynamic#Location">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Rd#Base#IPrintable#Print(JetBrains.Rd.Util.PrettyPrinter)">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Rd#Base#IRdDynamic#Proto">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Rd#Base#IRdBindable#RdId">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#Rd#Base#IRdDynamic#SerializationContext">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.JetBrains#DataFlow#IProperty{TValue}#SetValue(`0)">
            <inheritdoc />
        </member>
        <member name="M:JetBrains.Platform.RdFramework.Util.UProperty`1.SetValue(`0,System.Object)">
            <inheritdoc />
        </member>
    </members>
</doc>
