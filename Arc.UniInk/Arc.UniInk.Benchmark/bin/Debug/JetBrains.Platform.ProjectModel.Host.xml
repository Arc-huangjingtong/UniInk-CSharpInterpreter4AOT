<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ProjectModel.Host</name>
    </assembly>
    <members>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.BuildScript.CheckMsBuildEventLoggerPresence.MsBuildEventLoggerOutputName">
            <summary>
            MsBuild Event Logger dll name.
            Used in <see cref="!:JetBrains.Rider.Backend.Features.SolutionBuilder.ConsoleRunner.MsBuildExeBuildRunner"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.IProjectsHostLiveTrackingZone">
            <summary>
            Zone that enables live tracking of changed files.
            Must be enabled in Rider and ReSharper if it uses <see cref="T:JetBrains.ProjectModel.ProjectsHost.SolutionLoader"/> and wants to track changed files
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Diagnostic.IProjectExcludedFromBuild">
            <summary>
            Indicates the project has no project configuration in the current solution configuration
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Diagnostic.IProjectWithInvalidConfiguration">
            <summary>
            Indicates the project has invalid project configuration in the current solution configuration
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostChange">
            <summary>
            Represents any change in project structure
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostReloadChange">
            <summary>
            Represents a project change when the project have to be reloaded via appropriate project host
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostReloadChange.Descriptors">
            <summary>
            Project descriptors tree for this change
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostReloadChange.ProjectHost">
            <summary>
            Corresponding project host
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostReloadChange.Requester">
            <summary>
            Object which requests this project reload operation
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostStructureChange">
            <summary>
            Represents structure project change (i.e. project parent)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostStructureChange.Project">
            <summary>
            Project to structure update
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostChangeDescriptors">
            <summary>
            Collection of descriptors to represent a single IProject in R# project model
            Part of <see cref="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostReloadChange"/>
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostLoggerService">
            <summary>
            Allows to log and project load operations in <see cref="N:JetBrains.ProjectModel.ProjectsHost.SolutionHost"/>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostLoggerService.GetLogPath(System.Collections.Generic.IReadOnlyCollection{JetBrains.ProjectModel.ProjectsHost.IProjectMark},JetBrains.ProjectModel.ProjectsHost.ProjectHostLogRequest)">
            <summary>
            Returns a path which should be used to store logs for a project load operation
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectHostModifications">
            <summary>
            Cookie for prevent any project modifications in some cases
              e.g. from file system changes
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.Impl.ProjectMarkTypeGuidProvider">
            <summary>
            Allows to override type guid specified in the solution file for a project 
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardContainer.myStore">
            <summary>
            Store information about all patterns in all projects in format:
              IncludePattern -> ProjectMark[] -> ExcludePattern[]
            - We have one general list of all include patterns from all projects
            - Each include pattern can be presented in several projects
            - Each include pattern in an project can be presented several times with different exclude patterns
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardContainer.myFoldersToWatch">
            <summary>
            Store all tracking folders and set of dependant projects
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.Impl.Wildcards.WildcardContainer.myFolderFilters">
            <summary>
            Store all folders which should be excluded from tracking
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.IProjectMark.UniqueProjectName">
            <summary>
            Unique project ID, should not be changed during modifications
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.IProjectMark.IterateChildren``1(``0,System.Action{JetBrains.ProjectModel.ProjectsHost.IProjectMark,``0})">
            <summary>
            Method to iterate all children without any boxing and allocations
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectMarkBase.OnUpdate(System.Action)">
            <summary>
            Executes an update operation and fires changes if needed
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.IProjectMarkDependencyProvider.GetDependantProjects(JetBrains.ProjectModel.ProjectsHost.IProjectMark)">
            <summary>
            Returns collection of projects from the solution which should be definitely updated along with specified project
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.IForceUpdateProjectsPolicy">
            <summary>
            Allows to update a specific project even if it was not changed in the solution definition file
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.Actions.MsBuildAddFileAction.FilterMetadata(JetBrains.Platform.MsBuildHost.Models.RdProjectWildcardItem,System.Collections.Generic.List{JetBrains.Platform.MsBuildHost.Models.RdItemMetadata})">
            <summary>
            Filter metadata which should be written for the new items
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.Components.ProjectConfigurationValidator.ProjectExcludedFromBuild">
            <summary>
            User excluded project from build intentionally, it that case message is empty and we do not consider
              this diagnostic as an issue
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.IMsBuildProjectLoadDiagnosticProvider">
            <summary>
            Listens to loaded MSBuild projects and provides diagnostics to report them to the user
            Should be [SolutionInstanceComponent] or [ShellComponent]
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.IMsBuildToolDiagnostic">
            <summary>
            Marker interface for diagnostics which can be fixed by installing (different) MSBuild 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.Diagnostic.IMsBuildConnectionDiagnostic">
            <summary>
            Marker interface for diagnostics which means MSBuild process can not be started 
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.ManagedProjectPropertiesBuilder.BuildProjectBuildSettings(JetBrains.Platform.MsBuildHost.ProjectModel.MsBuildProject,JetBrains.ProjectModel.Properties.Managed.ManagedProjectBuildSettings)">
            <summary>
            Constructs build settings based on generic msbuild project (without specific target framework)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.ManagedProjectPropertiesBuilder.BuildProjectConfiguration(JetBrains.ProjectModel.ProjectsHost.IProjectMark,JetBrains.Platform.MsBuildHost.ProjectModel.MsBuildProjectPart,JetBrains.ProjectModel.Impl.Build.ManagedProjectConfigurationBase)">
            <summary>
            Constructs configurations based on msbuild project part loaded for specific target framework
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.Extensions.XamarinIOSModificator">
            <summary>
            Run targets to generate objc bindings, see
             https://github.com/xamarin/xamarin-macios/blob/master/msbuild/Xamarin.Mac.Tasks/Xamarin.Mac.ObjCBinding.CSharp.targets
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.BuildActionFilteringRule">
            <summary>
            Filter project item with <see cref="P:JetBrains.ProjectModel.ProjectsHost.MsBuild.BuildActionFilteringRule.FilteredBuildAction"/> if other project item with the same location
              with <see cref="P:JetBrains.ProjectModel.ProjectsHost.MsBuild.BuildActionFilteringRule.ExistingBuildAction"/> presented in the same project
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildDefaultBuildActionsProvider">
            <summary>
            Represents default project file build actions in a project
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildDefaultBuildActionsProvider.DefaultBuildActions">
            <summary>
            Collection of build actions applied to this project by default
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.MsBuildDefaultBuildActionsProvider.GetFromProjectItem(JetBrains.Platform.MsBuildHost.ProjectModel.MsBuildProjectItem)">
            <summary>
            Allows to produce default project build action from MSBuild project item(s)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildModificationSettingsProvider.SmartModificationsFilter">
            <summary>
            Returns array of project file extensions
              where MsBuild Task should use simple modifications instead of default (smart) behavior
            Extension should be specified without dot
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectListener.OnProjectLoaded(JetBrains.ProjectModel.ProjectsHost.IProjectMark,JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.Platform.MsBuildHost.ProjectModel.MsBuildProject)">
            <summary>
            Method is called each time after project is loaded/reloaded 
            Call happens immediately after getting results from MsBuild:
              - usually on background thread 
              - before updating R# project model
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectListenerWithRequester.OnProjectLoaded(JetBrains.ProjectModel.ProjectsHost.IProjectMark,JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.ProjectModel.ProjectsHost.IProjectLoadRequester,JetBrains.Platform.MsBuildHost.ProjectModel.MsBuildProject)">
            <summary>
            Method is called each time after project is loaded/reloaded 
            Call happens immediately after getting results from MsBuild:
              - usually on background thread 
              - before updating R# project model
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectBatchListener.CreateSession">
            <summary>
            Method is called each time before several projects are loaded/reloaded
            Created session will be called for each loaded projects and thn Dispose will be called in the end 
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.IMsBuildProjectSchemeProvider">
            <summary>
            Defines which MSBuild items, properties and metadata should be retrieved from MSBuild external process during
              project model construction
            Should be defined as a ShellComponent
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildActionFilterService.myRules">
            <summary>
            Filtered -> Existing Map
            Example:
            "None" should be filtered when "Content" is presented
            "None" -> "Content"
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildCommonBuildActionsProvider.ourBuildActions">
            <summary>
            Default MsBuild item types, allowed in any type of msbuild project.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.Internal.MsBuildProjectTypeService">
            <summary>
            Discovers project type using loaded msbuild project and a number of hacks
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.MsBuild.Structure.MsBuildProjectStructureBuilderForItems.HiddenChecker.GetPriority(JetBrains.Platform.MsBuildHost.ProjectModel.MsBuildProjectItem)">
            <summary>
            Prefer these items when we have several items with different build actions
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.MsBuild.Wildcards.MsBuildWildcardPatternBuilder">
            <summary>
            Build wildcard pattern based on Microsoft.Build.Shared.FileMatcher implementation
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.ProjectsHostComponentAttribute">
            <summary>
            Components for loading solution/project file and create project descriptors
            Use <see cref="T:JetBrains.ProjectModel.ProjectsHost.SolutionLoader"/> for update existing solution or load descriptors from disk
            Use <see cref="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostManager"/> from <see cref="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.IHostSolutionZone"/> control solution lifecycle inside resharper
            This component container allows to compose a component container each time when we need to load solution or project, SolutionInstance component container doesn't allow this
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectsHostExtensions.GetProjectByMark(JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.ProjectsHost.IProjectMark)">
            <summary>
            Returns project for the project mark if there is only one in the solution
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectsHostExtensions.GetProjectsByMark(JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.ProjectsHost.IProjectMark)">
            <summary>
            Returns all projects for the project mark in the solution
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectsHostExtensions.GetBestBuildActionForProjectItem(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Use this method wherever the single build action for a project file required, for example in MsBuild interations or UI
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureBuilder`1">
            <summary>
            Encapsulates alghoritm to build project model descriptors (folders and files inside a IProjectDescriptor)
              from different `abstract` items
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureFileOperations`1.GetOrigin(JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile{`0})">
            <summary>
            Returns file origin
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureFileOperations`1.BuildProjectFileProperties(JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile{`0},JetBrains.ProjectModel.Properties.IProjectFileProperties)">
            <summary>
            Fills additional data from this file into project file properties
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureFileOperations`1.FilterDuplicate(JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile{`0},System.Collections.Generic.ICollection{JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile{`0}})">
            <summary>
            Executes when there are other files with the same location
            Returns true if this file should be filtered in this case
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureBuilderOperations`1.GetLogicalPath(`0,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Logical path to the element in project model and solution explorer
            Can be null, that means physical path is the same as logical path
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureBuilderOperations`1.GetPhysicalPath(`0)">
            <summary>
            Physical path to the element in file system (can point to any path on any disk)
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectStructureBuilderOperations`1.CanOmitExternalFolder(`0,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Return true if an external folder could be hidden from project hierarchy
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile`1.PhysicalPath">
            <summary>
            Physical path to the element in file system (can point to any path on any disk)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile`1.Name">
            <summary>
            Logical name (if any)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile`1.BuildActions">
            <summary>
            List of build actions per target framework
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFile`1.ProjectItems">
            <summary>
            List of original project items, will be used to create IProjectElementOrigin and file properties
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFolder`1.ProjectPhysicalPath">
            <summary>
            Non-linked folder path inside a project, used to resolve conflicts
              between several physical (linked) folders, see myPhysicalPaths field
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFolder`1.myPhysicalPaths">
            <summary>
            One project folder can be used for several physical paths (one - inside a project and others - linked)
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeFolder`1.myCasingNames">
            <summary>
            Folder names and counts to choose the most actual case for the folder name
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeProject`1.MergeFolders(JetBrains.ProjectModel.Update.IProjectFolderDescriptor,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Project folders can be duplicated in case of linked files. Example:
              - Project [c:\project]
               - Data   [c:\project\data]
               - Data   [c:\some_other_folder\data]
            In that case we want to merge all these folders with the same names
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.ProjectStructure.ProjectTrieNodeProject`1.RemoveExcessiveNestedness(JetBrains.ProjectModel.Update.IProjectDescriptor,JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            If we have only linked items there might be 1 excessive level of nestedness. Example:
              - Project   [c:\project\project.proj]
               - Data     [c:\some_other_folder\data]
                - Folder  [c:\some_other_folder\data\folder]
                - File1   [c:\some_other_folder\data\file1]
                - File2   [c:\some_other_folder\data\file2]
            In that case we want to get rid of it and move files one level higher (especially in UE4).
            But Unity expects this project structure (see RIDER-58975).
            So we're applying this logic only to C++ projects.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.ProjectHostReloadTaskExecutor.IsReady(System.Boolean)">
            <summary>
            True if executor can perform some operation
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.ProjectHostReloadTaskExecutor.Execute(System.Func{JetBrains.ProjectModel.ProjectsHost.Impl.ProjectStructureChange},System.Action{JetBrains.ProjectModel.ProjectsHost.Impl.ProjectStructureChange},System.Boolean)">
            <summary>
            Performs some reload operation
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHost.LoadEventsContainer">
            <summary>
            All these event fire from background thread
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostCachingManager">
            <summary>
            Encapsulates additional logic to store and recover project model from persistent caches
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostCachingManager.OpenSolutionLifetime.Value">
            <summary>
            Lifetime for an opening solution process
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostLoadingQueue">
            <summary>
            Component tracks all current changes in project model in two ways
              1) Active reloading projects
              2) Active reloading processes count (there are changes without affected projects, but we want to track them anyway)
            Also component allows to queue (or execute immediately) an action as soon as no loading processes executing now
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostManager">
            <summary>
            Controls ReSharper Solution life-cycle based on solution / project marks reading
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Interop.ReferencePatcherServiceSuppressor">
            <summary>
            We should not patch references in that way when we have actual (real) project model
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.IProjectModelMonitor.Loaded">
            <summary>
            Returns true when solution was already synced once
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.IProjectModelMonitor.SyncProjects">
            <summary>
            Returns true when there are no sync project operations (active or pending)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.IProjectModelMonitor.Ready">
            <summary>
            Returns true when there are no sync project operations (active or pending)
              and there are no background tasks which can trigger projects reloading
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost.ReloadProjectsSync(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.ProjectsHost.IProjectMark},JetBrains.ProjectModel.ProjectsHost.IProjectLoadRequester,JetBrains.ProjectModel.ProjectsHost.ProjectHostLogRequest)">
            <summary>
            Reload projects synchronously, use this method with carefully, async reloading is usually better
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost.ReloadProjectsAsync(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.ProjectsHost.IProjectMark},JetBrains.ProjectModel.ProjectsHost.IProjectLoadRequester)">
            <summary>
            Reload projects async
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost.SuspendAsyncProjectsReloading(JetBrains.Lifetimes.Lifetime)">
            <summary>
            Suspends ASYNC project reloading until lifetime will be terminated
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost.AddAndRemoveProjects(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.ProjectsHost.SolutionHost.AddProjectRequest},System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.ProjectsHost.IProjectMark})">
            <summary>
            Batch operation for adding and removing projects
            </summary>
            <remarks>
            If added projects depend on each other - then dependent project should follow after parent
            </remarks>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost.GetTotalReloadsTime">
            <summary>
            Returns how much time Rider spent loading and reloading projects in this solution since startup
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHostLoadingQueue">
            <summary>
            Monitors state of loading/reloading/unloading ant projects in SolutionHost
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHostLoadingQueue.Idle">
            <summary>
            True when SolutionHost performs any loading project operations
            Changes only on UI thread
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHostLoadingQueue.ExecuteWhenQueueIsEmpty(System.Action)">
            <summary>
            Execute action when there is no pending loading operations and on UI thread
            Method can be invoked from UI/Background threads
            </summary>
        </member>
        <member name="F:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Persistence.ProjectOrigin.Key">
            <summary>
            This key stores origin project ID, i.e. some information from which source project was created
            For example: name + guid written in a solution file
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Platforms.MsBuildNuGetPlatformProvider">
            <summary>
            Provides platforms from NuGet packages per project
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Platforms.MsBuildNuGetPlatformProvider.ImmutableAssembliesInFileSystem">
            <summary>
            Assemblies in NuGet folders can be deleted and restored again
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.WithHeader(JetBrains.DataFlow.IProperty{System.String})">
            <summary>
            PermanentHeader will be ignored
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.WithHeader(System.String)">
            <summary>
            Header will be ignored
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.WithDescription(JetBrains.DataFlow.IProperty{System.String})">
            <summary>
            PermanentDescription, DescriptionFromProgress will be ignored
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.WithDescription(System.String)">
            <summary>
            Description, DescriptionFromProgress will be ignored
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.WithDescriptionFromProgress">
            <summary>
            Description, PermanentDescription will be ignored
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.WithProgress(JetBrains.DataFlow.IProperty{System.Double})">
            <summary>
            IsIndeterminate will be ignored.
            The current position of the progress, in the [0..1] range, inclusive.
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.AsIndeterminate">
            <summary>
            Progress will be ignored
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Progress.BackgroundProgressBuilder.AsNonCancelable">
            <summary>
            CancelAction will be ignored
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostExtensions.ReloadProjectSync(JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost,JetBrains.ProjectModel.ProjectsHost.IProjectMark,JetBrains.ProjectModel.ProjectsHost.IProjectLoadRequester,JetBrains.ProjectModel.ProjectsHost.ProjectHostLogRequest)">
            <summary>
            Reload a project synchronously, use this method with carefully, async reloading is usually better
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostExtensions.ReloadProjectAsync(JetBrains.ProjectModel.ProjectsHost.SolutionHost.ISolutionHost,JetBrains.ProjectModel.ProjectsHost.IProjectMark,JetBrains.ProjectModel.ProjectsHost.IProjectLoadRequester)">
            <summary>
            Reload a project async
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostStartup.StartupType">
            <summary>
            Tells how solution was loaded - cold (without caches) or warm (from caches)
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostStartup.IsCold">
            <summary>
            Solution was NOT loaded from caches
            </summary>
        </member>
        <member name="P:JetBrains.ProjectModel.ProjectsHost.SolutionHost.SolutionHostStartup.IsWarm">
            <summary>
            Solution was loaded from caches
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.ProjectsHost.SolutionLoader">
            <summary>
            Util component to load or update solution once without control solutuion lifecycle <see cref="T:JetBrains.ProjectModel.ProjectsHost.SolutionHost.Impl.SolutionHostManager"/>
            </summary>
        </member>
        <member name="M:JetBrains.ProjectModel.ProjectsHost.Utils.ProjectTypeGuidGuesser.CalculateTypeGuid(JetBrains.Util.VirtualFileSystemPath)">
            <summary>
            Should return same as com.jetbrains.rider.utils.ProjectTypeGuidGuesser.Companion#calculateTypeGuid
            </summary>
        </member>
    </members>
</doc>
